
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d0  0800b4d0  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4d0  0800b4d0  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4d0  0800b4d0  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d4  0800b4d4  0001b4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800b4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  200002e0  0800b7b8  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  0800b7b8  00021750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a1f  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c19  00000000  00000000  00039d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153dd  00000000  00000000  0005b38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb8e  00000000  00000000  00070767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff2f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  000ff348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0010491c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e0 	.word	0x200002e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b04c 	.word	0x0800b04c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e4 	.word	0x200002e4
 8000148:	0800b04c 	.word	0x0800b04c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fe4f 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f861 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f94d 	bl	800041c <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f92d 	bl	80003e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000186:	f000 f8b5 	bl	80002f4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800018a:	f008 fc15 	bl	80089b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018e:	2300      	movs	r3, #0
 8000190:	73fb      	strb	r3, [r7, #15]
 8000192:	e007      	b.n	80001a4 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	4a28      	ldr	r2, [pc, #160]	; (8000238 <main+0xc8>)
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	3301      	adds	r3, #1
 80001a2:	73fb      	strb	r3, [r7, #15]
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	d9f4      	bls.n	8000194 <main+0x24>
  }

  ws2812b_init();
 80001aa:	f000 fd6f 	bl	8000c8c <ws2812b_init>

  srand( (unsigned) time( NULL ));
 80001ae:	2000      	movs	r0, #0
 80001b0:	f009 fc04 	bl	80099bc <time>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f009 fa0e 	bl	80095d8 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint16_t volume = 128; // max 256
 80001bc:	2380      	movs	r3, #128	; 0x80
 80001be:	80fb      	strh	r3, [r7, #6]
	uint8_t r = gamma8[ rand() % volume ];
 80001c0:	f009 fa38 	bl	8009634 <rand>
 80001c4:	4602      	mov	r2, r0
 80001c6:	88fb      	ldrh	r3, [r7, #6]
 80001c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001cc:	fb03 f301 	mul.w	r3, r3, r1
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	4a1a      	ldr	r2, [pc, #104]	; (800023c <main+0xcc>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	717b      	strb	r3, [r7, #5]
	uint8_t g = gamma8[ rand() % volume ];
 80001d8:	f009 fa2c 	bl	8009634 <rand>
 80001dc:	4602      	mov	r2, r0
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	fb92 f1f3 	sdiv	r1, r2, r3
 80001e4:	fb03 f301 	mul.w	r3, r3, r1
 80001e8:	1ad3      	subs	r3, r2, r3
 80001ea:	4a14      	ldr	r2, [pc, #80]	; (800023c <main+0xcc>)
 80001ec:	5cd3      	ldrb	r3, [r2, r3]
 80001ee:	713b      	strb	r3, [r7, #4]
	uint8_t b = gamma8[ rand() % volume ];
 80001f0:	f009 fa20 	bl	8009634 <rand>
 80001f4:	4602      	mov	r2, r0
 80001f6:	88fb      	ldrh	r3, [r7, #6]
 80001f8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001fc:	fb03 f301 	mul.w	r3, r3, r1
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <main+0xcc>)
 8000204:	5cd3      	ldrb	r3, [r2, r3]
 8000206:	70fb      	strb	r3, [r7, #3]

	for( int led = 0; led < LED_N; led++ ) {
 8000208:	2300      	movs	r3, #0
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	e00f      	b.n	800022e <main+0xbe>
	  ws2812b_set_color( led, r, g, b );
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	793a      	ldrb	r2, [r7, #4]
 8000214:	7979      	ldrb	r1, [r7, #5]
 8000216:	f000 fda3 	bl	8000d60 <ws2812b_set_color>
	  ws2812b_update();
 800021a:	f000 fd67 	bl	8000cec <ws2812b_update>
	  send_queue_via_usb();
 800021e:	f000 faef 	bl	8000800 <send_queue_via_usb>
	  HAL_Delay( 100 );
 8000222:	2064      	movs	r0, #100	; 0x64
 8000224:	f000 fe5a 	bl	8000edc <HAL_Delay>
	for( int led = 0; led < LED_N; led++ ) {
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	3301      	adds	r3, #1
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	2b07      	cmp	r3, #7
 8000232:	ddec      	ble.n	800020e <main+0x9e>
  {
 8000234:	e7c2      	b.n	80001bc <main+0x4c>
 8000236:	bf00      	nop
 8000238:	200007ac 	.word	0x200007ac
 800023c:	0800b108 	.word	0x0800b108

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b094      	sub	sp, #80	; 0x50
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f009 f914 	bl	800947c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	4618      	mov	r0, r3
 8000298:	f002 ffba 	bl	8003210 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a2:	f000 fb25 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fa24 	bl	8003710 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ce:	f000 fb0f 	bl	80008f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d2:	2310      	movs	r3, #16
 80002d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 fb7f 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e8:	f000 fb02 	bl	80008f0 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3750      	adds	r7, #80	; 0x50
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08e      	sub	sp, #56	; 0x38
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000308:	f107 0320 	add.w	r3, r7, #32
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
 8000320:	615a      	str	r2, [r3, #20]
 8000322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000324:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000326:	4a2d      	ldr	r2, [pc, #180]	; (80003dc <MX_TIM3_Init+0xe8>)
 8000328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_TIM3_Init+0xe4>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8000336:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000338:	2259      	movs	r2, #89	; 0x59
 800033a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_TIM3_Init+0xe4>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000348:	4823      	ldr	r0, [pc, #140]	; (80003d8 <MX_TIM3_Init+0xe4>)
 800034a:	f003 fbff 	bl	8003b4c <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000354:	f000 facc 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	4619      	mov	r1, r3
 8000364:	481c      	ldr	r0, [pc, #112]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000366:	f004 f843 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000370:	f000 fabe 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000376:	f003 fc83 	bl	8003c80 <HAL_TIM_PWM_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000380:	f000 fab6 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800038c:	f107 0320 	add.w	r3, r7, #32
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <MX_TIM3_Init+0xe4>)
 8000394:	f004 fca4 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800039e:	f000 faa7 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a2:	2360      	movs	r3, #96	; 0x60
 80003a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <MX_TIM3_Init+0xe4>)
 80003ba:	f003 ff5b 	bl	8004274 <HAL_TIM_PWM_ConfigChannel>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80003c4:	f000 fa94 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <MX_TIM3_Init+0xe4>)
 80003ca:	f000 fb1f 	bl	8000a0c <HAL_TIM_MspPostInit>

}
 80003ce:	bf00      	nop
 80003d0:	3738      	adds	r7, #56	; 0x38
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000720 	.word	0x20000720
 80003dc:	40000400 	.word	0x40000400

080003e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_DMA_Init+0x38>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <MX_DMA_Init+0x38>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2010      	movs	r0, #16
 8000404:	f000 fe65 	bl	80010d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000408:	2010      	movs	r0, #16
 800040a:	f000 fe7e 	bl	800110a <HAL_NVIC_EnableIRQ>

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <MX_GPIO_Init+0x90>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_GPIO_Init+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_GPIO_Init+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a17      	ldr	r2, [pc, #92]	; (80004ac <MX_GPIO_Init+0x90>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_GPIO_Init+0x90>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_GPIO_Init+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <MX_GPIO_Init+0x90>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_GPIO_Init+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	480c      	ldr	r0, [pc, #48]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000480:	f001 f9d0 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2302      	movs	r3, #2
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_GPIO_Init+0x94>)
 800049e:	f001 f83d 	bl	800151c <HAL_GPIO_Init>

}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40011000 	.word	0x40011000

080004b4 <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	wait_for_CDC_transmit_ready();
 80004be:	f008 fbcf 	bl	8008c60 <wait_for_CDC_transmit_ready>
	CDC_Transmit_FS( txBuf, buf_len );
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f008 fba5 	bl	8008c14 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <welcome>:

void welcome(void) {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 80004da:	480e      	ldr	r0, [pc, #56]	; (8000514 <welcome+0x40>)
 80004dc:	f7ff fe40 	bl	8000160 <strlen>
 80004e0:	4604      	mov	r4, r0
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <welcome+0x44>)
 80004e4:	f7ff fe3c 	bl	8000160 <strlen>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4423      	add	r3, r4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f008 ffb5 	bl	800945c <malloc>
 80004f2:	4603      	mov	r3, r0
 80004f4:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 80004f6:	4907      	ldr	r1, [pc, #28]	; (8000514 <welcome+0x40>)
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f009 f969 	bl	80097d0 <strcpy>
	strcat( tmp_buf, prompt );
 80004fe:	4906      	ldr	r1, [pc, #24]	; (8000518 <welcome+0x44>)
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f009 f956 	bl	80097b2 <strcat>
	write_to_future_send_via_usb( tmp_buf );
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 f9b6 	bl	8000878 <write_to_future_send_via_usb>
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bd90      	pop	{r4, r7, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000

0800051c <get_command>:

void get_command(void) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b093      	sub	sp, #76	; 0x4c
 8000520:	af00      	add	r7, sp, #0
	char *out_str;
	char *result[ 5 ];
	input_usb_buffer[ in_usb_buf_pos ] = 0;
 8000522:	4baa      	ldr	r3, [pc, #680]	; (80007cc <get_command+0x2b0>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	4ba9      	ldr	r3, [pc, #676]	; (80007d0 <get_command+0x2b4>)
 800052a:	2100      	movs	r1, #0
 800052c:	5499      	strb	r1, [r3, r2]
	strcat( input_usb_buffer, " " );
 800052e:	48a8      	ldr	r0, [pc, #672]	; (80007d0 <get_command+0x2b4>)
 8000530:	f7ff fe16 	bl	8000160 <strlen>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4ba5      	ldr	r3, [pc, #660]	; (80007d0 <get_command+0x2b4>)
 800053a:	4413      	add	r3, r2
 800053c:	49a5      	ldr	r1, [pc, #660]	; (80007d4 <get_command+0x2b8>)
 800053e:	461a      	mov	r2, r3
 8000540:	460b      	mov	r3, r1
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	8013      	strh	r3, [r2, #0]
	char *token = strtok( input_usb_buffer, " " );
 8000546:	49a3      	ldr	r1, [pc, #652]	; (80007d4 <get_command+0x2b8>)
 8000548:	48a1      	ldr	r0, [pc, #644]	; (80007d0 <get_command+0x2b4>)
 800054a:	f009 f949 	bl	80097e0 <strtok>
 800054e:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t loop = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if( token != NULL ) {
 8000556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000558:	2b00      	cmp	r3, #0
 800055a:	d02f      	beq.n	80005bc <get_command+0xa0>
		while( token != NULL && loop < 5 ) {
 800055c:	e026      	b.n	80005ac <get_command+0x90>
			result[ loop ] = malloc( strlen( token ) * sizeof( char ));
 800055e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000560:	f7ff fdfe 	bl	8000160 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 800056a:	4618      	mov	r0, r3
 800056c:	f008 ff76 	bl	800945c <malloc>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	00a3      	lsls	r3, r4, #2
 8000576:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800057a:	440b      	add	r3, r1
 800057c:	f843 2c20 	str.w	r2, [r3, #-32]
			strcpy( result[ loop ], token );
 8000580:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800058a:	4413      	add	r3, r2
 800058c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000590:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000592:	4618      	mov	r0, r3
 8000594:	f009 f91c 	bl	80097d0 <strcpy>
			loop++;
 8000598:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800059c:	3301      	adds	r3, #1
 800059e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		    token = strtok( NULL, " " );
 80005a2:	498c      	ldr	r1, [pc, #560]	; (80007d4 <get_command+0x2b8>)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f009 f91b 	bl	80097e0 <strtok>
 80005aa:	6478      	str	r0, [r7, #68]	; 0x44
		while( token != NULL && loop < 5 ) {
 80005ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d017      	beq.n	80005e2 <get_command+0xc6>
 80005b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d9d1      	bls.n	800055e <get_command+0x42>
 80005ba:	e012      	b.n	80005e2 <get_command+0xc6>
		}
	}
	else {
		result[ 0 ] = malloc( strlen( input_usb_buffer ) * sizeof( char ));
 80005bc:	4884      	ldr	r0, [pc, #528]	; (80007d0 <get_command+0x2b4>)
 80005be:	f7ff fdcf 	bl	8000160 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f008 ff49 	bl	800945c <malloc>
 80005ca:	4603      	mov	r3, r0
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
		strcpy( result[ 0 ], input_usb_buffer );
 80005ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d0:	497f      	ldr	r1, [pc, #508]	; (80007d0 <get_command+0x2b4>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 f8fc 	bl	80097d0 <strcpy>
		loop++;
 80005d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80005dc:	3301      	adds	r3, #1
 80005de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	}

    if( strcmp( result[ 0 ], "help" ) == 0 || strcmp( result[ 0 ], "?" ) == 0 ) {
 80005e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e4:	497c      	ldr	r1, [pc, #496]	; (80007d8 <get_command+0x2bc>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdb0 	bl	800014c <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d007      	beq.n	8000602 <get_command+0xe6>
 80005f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f4:	4979      	ldr	r1, [pc, #484]	; (80007dc <get_command+0x2c0>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fda8 	bl	800014c <strcmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d110      	bne.n	8000624 <get_command+0x108>
    	out_str = malloc( strlen( help ) * sizeof( char ));
 8000602:	4877      	ldr	r0, [pc, #476]	; (80007e0 <get_command+0x2c4>)
 8000604:	f7ff fdac 	bl	8000160 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 ff26 	bl	800945c <malloc>
 8000610:	4603      	mov	r3, r0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
    	strcpy( out_str, help );
 8000614:	4972      	ldr	r1, [pc, #456]	; (80007e0 <get_command+0x2c4>)
 8000616:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000618:	f009 f8da 	bl	80097d0 <strcpy>
    	write_to_future_send_via_usb( out_str );
 800061c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800061e:	f000 f92b 	bl	8000878 <write_to_future_send_via_usb>
 8000622:	e0b4      	b.n	800078e <get_command+0x272>
    }
    else if( strcmp( result[ 0 ], "on" ) == 0 ) {
 8000624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000626:	496f      	ldr	r1, [pc, #444]	; (80007e4 <get_command+0x2c8>)
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fd8f 	bl	800014c <strcmp>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d106      	bne.n	8000642 <get_command+0x126>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	486b      	ldr	r0, [pc, #428]	; (80007e8 <get_command+0x2cc>)
 800063c:	f001 f8f2 	bl	8001824 <HAL_GPIO_WritePin>
 8000640:	e0b6      	b.n	80007b0 <get_command+0x294>
    }
    else if( strcmp( result[ 0 ], "off" ) == 0 ) {
 8000642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000644:	4969      	ldr	r1, [pc, #420]	; (80007ec <get_command+0x2d0>)
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fd80 	bl	800014c <strcmp>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d106      	bne.n	8000660 <get_command+0x144>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4863      	ldr	r0, [pc, #396]	; (80007e8 <get_command+0x2cc>)
 800065a:	f001 f8e3 	bl	8001824 <HAL_GPIO_WritePin>
 800065e:	e0a7      	b.n	80007b0 <get_command+0x294>
    }
    else if( strcmp( result[ 0 ], "toggle" ) == 0 ) {
 8000660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000662:	4963      	ldr	r1, [pc, #396]	; (80007f0 <get_command+0x2d4>)
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fd71 	bl	800014c <strcmp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <get_command+0x160>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	485c      	ldr	r0, [pc, #368]	; (80007e8 <get_command+0x2cc>)
 8000676:	f001 f8ed 	bl	8001854 <HAL_GPIO_TogglePin>
 800067a:	e099      	b.n	80007b0 <get_command+0x294>
    }
    else if( strcmp( result[ 0 ], "led" ) == 0 ) {
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	495d      	ldr	r1, [pc, #372]	; (80007f4 <get_command+0x2d8>)
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fd63 	bl	800014c <strcmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	f040 8091 	bne.w	80007b0 <get_command+0x294>
    	if( loop >= 3 ) {
 800068e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000692:	2b02      	cmp	r3, #2
 8000694:	f240 808c 	bls.w	80007b0 <get_command+0x294>
    		uint16_t led_no = atoi( result[ 1 ]) - 1;
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	4618      	mov	r0, r3
 800069c:	f008 feb0 	bl	8009400 <atoi>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3b01      	subs	r3, #1
 80006a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    		uint32_t r = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
    		uint32_t g = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
    		uint32_t b = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    		if( strcmp( result[ 2 ], "off" ) == 0 ) {
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	494c      	ldr	r1, [pc, #304]	; (80007ec <get_command+0x2d0>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd46 	bl	800014c <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10c      	bne.n	80006e0 <get_command+0x1c4>
    			ws2812b_set_color( led_no, r, g, b );
 80006c6:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	b2d9      	uxtb	r1, r3
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f000 fb43 	bl	8000d60 <ws2812b_set_color>
				ws2812b_update();
 80006da:	f000 fb07 	bl	8000cec <ws2812b_update>
 80006de:	e067      	b.n	80007b0 <get_command+0x294>
    		}
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 80006e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b23      	cmp	r3, #35	; 0x23
 80006e6:	d163      	bne.n	80007b0 <get_command+0x294>
 80006e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd38 	bl	8000160 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d95c      	bls.n	80007b0 <get_command+0x294>
        		char r_str[] = "0x00";
 80006f6:	4a40      	ldr	r2, [pc, #256]	; (80007f8 <get_command+0x2dc>)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000700:	6018      	str	r0, [r3, #0]
 8000702:	3304      	adds	r3, #4
 8000704:	7019      	strb	r1, [r3, #0]
    			r_str[ 2 ] = result[ 2 ][ 1 ];
 8000706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	75bb      	strb	r3, [r7, #22]
    			r_str[ 3 ] = result[ 2 ][ 2 ];
 800070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070e:	789b      	ldrb	r3, [r3, #2]
 8000710:	75fb      	strb	r3, [r7, #23]
//    			r = atoi( r_str );
    			sscanf( r_str, "%x", &r );
 8000712:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4938      	ldr	r1, [pc, #224]	; (80007fc <get_command+0x2e0>)
 800071c:	4618      	mov	r0, r3
 800071e:	f008 ffd9 	bl	80096d4 <siscanf>
        		char g_str[] = "0x00";
 8000722:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <get_command+0x2dc>)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072c:	6018      	str	r0, [r3, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	7019      	strb	r1, [r3, #0]
    			g_str[ 2 ] = result[ 2 ][ 3 ];
 8000732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	73bb      	strb	r3, [r7, #14]
    			g_str[ 3 ] = result[ 2 ][ 4 ];
 8000738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	73fb      	strb	r3, [r7, #15]
//    			g = atoi( g_str );
    			sscanf( g_str, "%x", &g );
 800073e:	f107 0220 	add.w	r2, r7, #32
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	492d      	ldr	r1, [pc, #180]	; (80007fc <get_command+0x2e0>)
 8000748:	4618      	mov	r0, r3
 800074a:	f008 ffc3 	bl	80096d4 <siscanf>
        		char b_str[] = "0x00";
 800074e:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <get_command+0x2dc>)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000756:	6018      	str	r0, [r3, #0]
 8000758:	3304      	adds	r3, #4
 800075a:	7019      	strb	r1, [r3, #0]
    			b_str[ 2 ] = result[ 2 ][ 5 ];
 800075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	71bb      	strb	r3, [r7, #6]
    			b_str[ 3 ] = result[ 2 ][ 6 ];
 8000762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	71fb      	strb	r3, [r7, #7]
//    			b = atoi( r_str );
    			sscanf( b_str, "%x", &b );
 8000768:	f107 021c 	add.w	r2, r7, #28
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4923      	ldr	r1, [pc, #140]	; (80007fc <get_command+0x2e0>)
 8000770:	4618      	mov	r0, r3
 8000772:	f008 ffaf 	bl	80096d4 <siscanf>
    			ws2812b_set_color( led_no, r, g, b );
 8000776:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	b2d9      	uxtb	r1, r3
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f000 faeb 	bl	8000d60 <ws2812b_set_color>
			    ws2812b_update();
 800078a:	f000 faaf 	bl	8000cec <ws2812b_update>
    		}
    	}
    }

    while( loop > 0 ) {
 800078e:	e00f      	b.n	80007b0 <get_command+0x294>
    	loop--;
 8000790:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000794:	3b01      	subs	r3, #1
 8000796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    	free( result[ loop ]);
 800079a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	4413      	add	r3, r2
 80007a6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f008 fe5e 	bl	800946c <free>
    while( loop > 0 ) {
 80007b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1eb      	bne.n	8000790 <get_command+0x274>
    }
	in_usb_buf_pos = 0;
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <get_command+0x2b0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	801a      	strh	r2, [r3, #0]
	send_prompt();
 80007be:	f000 f87d 	bl	80008bc <send_prompt>
}
 80007c2:	bf00      	nop
 80007c4:	374c      	adds	r7, #76	; 0x4c
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200003fc 	.word	0x200003fc
 80007d0:	200002fc 	.word	0x200002fc
 80007d4:	0800b064 	.word	0x0800b064
 80007d8:	0800b068 	.word	0x0800b068
 80007dc:	0800b070 	.word	0x0800b070
 80007e0:	2000001c 	.word	0x2000001c
 80007e4:	0800b074 	.word	0x0800b074
 80007e8:	40011000 	.word	0x40011000
 80007ec:	0800b078 	.word	0x0800b078
 80007f0:	0800b07c 	.word	0x0800b07c
 80007f4:	0800b084 	.word	0x0800b084
 80007f8:	0800b08c 	.word	0x0800b08c
 80007fc:	0800b088 	.word	0x0800b088

08000800 <send_queue_via_usb>:

void send_queue_via_usb(void) {
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e02b      	b.n	8000864 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] != NULL && strlen( output_usb_buffer[ loop ]) > 0 ) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <send_queue_via_usb+0x74>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d022      	beq.n	800085e <send_queue_via_usb+0x5e>
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <send_queue_via_usb+0x74>)
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01b      	beq.n	800085e <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <send_queue_via_usb+0x74>)
 800082a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <send_queue_via_usb+0x74>)
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fc92 	bl	8000160 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	4619      	mov	r1, r3
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff fe37 	bl	80004b4 <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <send_queue_via_usb+0x74>)
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fe0c 	bl	800946c <free>
			output_usb_buffer[ loop ] = NULL;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <send_queue_via_usb+0x74>)
 8000858:	2100      	movs	r1, #0
 800085a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3301      	adds	r3, #1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d9d0      	bls.n	800080c <send_queue_via_usb+0xc>
		}
	}
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	200007ac 	.word	0x200007ac

08000878 <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000884:	e002      	b.n	800088c <write_to_future_send_via_usb+0x14>
		loop++;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d805      	bhi.n	800089e <write_to_future_send_via_usb+0x26>
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <write_to_future_send_via_usb+0x40>)
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f3      	bne.n	8000886 <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d804      	bhi.n	80008ae <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4904      	ldr	r1, [pc, #16]	; (80008b8 <write_to_future_send_via_usb+0x40>)
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	200007ac 	.word	0x200007ac

080008bc <send_prompt>:

void send_prompt(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( strlen( prompt ) * sizeof( char ));
 80008c2:	480a      	ldr	r0, [pc, #40]	; (80008ec <send_prompt+0x30>)
 80008c4:	f7ff fc4c 	bl	8000160 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fdc6 	bl	800945c <malloc>
 80008d0:	4603      	mov	r3, r0
 80008d2:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, prompt );
 80008d4:	4905      	ldr	r1, [pc, #20]	; (80008ec <send_prompt+0x30>)
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f008 ff7a 	bl	80097d0 <strcpy>
	write_to_future_send_via_usb( tmp_buf );
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ffcb 	bl	8000878 <write_to_future_send_via_usb>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000000 	.word	0x20000000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_MspInit+0x5c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x5c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_MspInit+0x60>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_MspInit+0x60>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	40010000 	.word	0x40010000

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a23      	ldr	r2, [pc, #140]	; (80009fc <HAL_TIM_Base_MspInit+0x9c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d140      	bne.n	80009f4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <HAL_TIM_Base_MspInit+0xa0>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <HAL_TIM_Base_MspInit+0xa0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_TIM_Base_MspInit+0xa0>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 800098e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 8000992:	2210      	movs	r2, #16
 8000994:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009be:	f000 fbbf 	bl	8001140 <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 80009c8:	f7ff ff92 	bl	80008f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_TIM_Base_MspInit+0xa4>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	201d      	movs	r0, #29
 80009ea:	f000 fb72 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009ee:	201d      	movs	r0, #29
 80009f0:	f000 fb8b 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40000400 	.word	0x40000400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	20000768 	.word	0x20000768
 8000a08:	4002006c 	.word	0x4002006c

08000a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_TIM_MspPostInit+0x58>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d117      	bne.n	8000a5c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_TIM_MspPostInit+0x5c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_TIM_MspPostInit+0x5c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_TIM_MspPostInit+0x5c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_TIM_MspPostInit+0x60>)
 8000a58:	f000 fd60 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40000400 	.word	0x40000400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x4>

08000a82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <BusFault_Handler+0x4>

08000a8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f9f2 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <DMA1_Channel6_IRQHandler+0x10>)
 8000aca:	f000 fbf3 	bl	80012b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000768 	.word	0x20000768

08000ad8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ade:	f001 f803 	bl	8001ae8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20001454 	.word	0x20001454

08000aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM3_IRQHandler+0x10>)
 8000af2:	f003 fab7 	bl	8004064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000720 	.word	0x20000720

08000b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	return 1;
 8000b04:	2301      	movs	r3, #1
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <_kill>:

int _kill(int pid, int sig)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b18:	f008 fc76 	bl	8009408 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2216      	movs	r2, #22
 8000b20:	601a      	str	r2, [r3, #0]
	return -1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_exit>:

void _exit (int status)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b36:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffe7 	bl	8000b0e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b40:	e7fe      	b.n	8000b40 <_exit+0x12>

08000b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e00a      	b.n	8000b6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b54:	f3af 8000 	nop.w
 8000b58:	4601      	mov	r1, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <_read+0x12>
	}

return len;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e009      	b.n	8000ba2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbf1      	blt.n	8000b8e <_write+0x12>
	}
	return len;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_close>:

int _close(int file)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	605a      	str	r2, [r3, #4]
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <_isatty>:

int _isatty(int file)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f008 fbe0 	bl	8009408 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20005000 	.word	0x20005000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000400 	.word	0x20000400
 8000c7c:	20001750 	.word	0x20001750

08000c80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	e007      	b.n	8000ca8 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <ws2812b_init+0x58>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b2f      	cmp	r3, #47	; 0x2f
 8000cac:	ddf4      	ble.n	8000c98 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	e007      	b.n	8000cc4 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3330      	adds	r3, #48	; 0x30
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <ws2812b_init+0x58>)
 8000cba:	2120      	movs	r1, #32
 8000cbc:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2bbf      	cmp	r3, #191	; 0xbf
 8000cc8:	ddf4      	ble.n	8000cb4 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 90; //100;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <ws2812b_init+0x58>)
 8000ccc:	225a      	movs	r2, #90	; 0x5a
 8000cce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  HAL_TIM_Base_Start(&htim3);
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <ws2812b_init+0x5c>)
 8000cd4:	f002 ff8a 	bl	8003bec <HAL_TIM_Base_Start>
  ws2812b_update();
 8000cd8:	f000 f808 	bl	8000cec <ws2812b_update>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000404 	.word	0x20000404
 8000ce8:	20000720 	.word	0x20000720

08000cec <ws2812b_update>:

void ws2812b_update(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000cf0:	23f1      	movs	r3, #241	; 0xf1
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <ws2812b_update+0x14>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <ws2812b_update+0x18>)
 8000cf8:	f003 f81a 	bl	8003d30 <HAL_TIM_PWM_Start_DMA>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000404 	.word	0x20000404
 8000d04:	20000720 	.word	0x20000720

08000d08 <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e016      	b.n	8000d48 <set_byte+0x40>
    if (value & 0x80) {
 8000d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	da06      	bge.n	8000d30 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <set_byte+0x54>)
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	54d1      	strb	r1, [r2, r3]
 8000d2e:	e005      	b.n	8000d3c <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <set_byte+0x54>)
 8000d38:	2120      	movs	r1, #32
 8000d3a:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	dde5      	ble.n	8000d1a <set_byte+0x12>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000404 	.word	0x20000404

08000d60 <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4603      	mov	r3, r0
 8000d70:	70fb      	strb	r3, [r7, #3]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70bb      	strb	r3, [r7, #2]
 8000d76:	4613      	mov	r3, r2
 8000d78:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	d820      	bhi.n	8000dc2 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	78ba      	ldrb	r2, [r7, #2]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffb9 	bl	8000d08 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	3338      	adds	r3, #56	; 0x38
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffae 	bl	8000d08 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	3340      	adds	r3, #64	; 0x40
 8000db8:	787a      	ldrb	r2, [r7, #1]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ffa3 	bl	8000d08 <set_byte>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df2:	f7ff ff45 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f008 fb0d 	bl	8009414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff f9b9 	bl	8000170 <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8000e08:	0800b4d8 	.word	0x0800b4d8
  ldr r2, =_sbss
 8000e0c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8000e10:	20001750 	.word	0x20001750

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f947 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fd62 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f95f 	bl	8001126 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f927 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000100 	.word	0x20000100
 8000e9c:	20000108 	.word	0x20000108
 8000ea0:	20000104 	.word	0x20000104

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000108 	.word	0x20000108
 8000ec4:	200007bc 	.word	0x200007bc

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	200007bc 	.word	0x200007bc

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000108 	.word	0x20000108

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <__NVIC_EnableIRQ+0x34>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff90 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff2d 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff42 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff35 	bl	8000f88 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e043      	b.n	80011de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <HAL_DMA_Init+0xa8>)
 800115e:	4413      	add	r3, r2
 8001160:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_DMA_Init+0xac>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	009a      	lsls	r2, r3, #2
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <HAL_DMA_Init+0xb0>)
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800118a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800118e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	bffdfff8 	.word	0xbffdfff8
 80011ec:	cccccccd 	.word	0xcccccccd
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_DMA_Start_IT+0x20>
 8001210:	2302      	movs	r3, #2
 8001212:	e04a      	b.n	80012aa <HAL_DMA_Start_IT+0xb6>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001222:	2b01      	cmp	r3, #1
 8001224:	d13a      	bne.n	800129c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 f938 	bl	80014c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 020e 	orr.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e00f      	b.n	800128a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0204 	bic.w	r2, r2, #4
 8001278:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 020a 	orr.w	r2, r2, #10
 8001288:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0201 	orr.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e005      	b.n	80012a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012a4:	2302      	movs	r3, #2
 80012a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2204      	movs	r2, #4
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d04f      	beq.n	800137c <HAL_DMA_IRQHandler+0xc8>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d04a      	beq.n	800137c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_DMA_IRQHandler+0x1f0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d029      	beq.n	8001362 <HAL_DMA_IRQHandler+0xae>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <HAL_DMA_IRQHandler+0xaa>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a63      	ldr	r2, [pc, #396]	; (80014ac <HAL_DMA_IRQHandler+0x1f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01a      	beq.n	8001358 <HAL_DMA_IRQHandler+0xa4>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a62      	ldr	r2, [pc, #392]	; (80014b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d012      	beq.n	8001352 <HAL_DMA_IRQHandler+0x9e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_DMA_IRQHandler+0x200>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00a      	beq.n	800134c <HAL_DMA_IRQHandler+0x98>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <HAL_DMA_IRQHandler+0x204>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d102      	bne.n	8001346 <HAL_DMA_IRQHandler+0x92>
 8001340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001344:	e00e      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 8001346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800134a:	e00b      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 800134c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001350:	e008      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 8001352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001356:	e005      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 8001358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135c:	e002      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 800135e:	2340      	movs	r3, #64	; 0x40
 8001360:	e000      	b.n	8001364 <HAL_DMA_IRQHandler+0xb0>
 8001362:	2304      	movs	r3, #4
 8001364:	4a55      	ldr	r2, [pc, #340]	; (80014bc <HAL_DMA_IRQHandler+0x208>)
 8001366:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8094 	beq.w	800149a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800137a:	e08e      	b.n	800149a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	2202      	movs	r2, #2
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d056      	beq.n	800143a <HAL_DMA_IRQHandler+0x186>
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d051      	beq.n	800143a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020a 	bic.w	r2, r2, #10
 80013b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a38      	ldr	r2, [pc, #224]	; (80014a4 <HAL_DMA_IRQHandler+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d029      	beq.n	800141a <HAL_DMA_IRQHandler+0x166>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <HAL_DMA_IRQHandler+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <HAL_DMA_IRQHandler+0x162>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a35      	ldr	r2, [pc, #212]	; (80014ac <HAL_DMA_IRQHandler+0x1f8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01a      	beq.n	8001410 <HAL_DMA_IRQHandler+0x15c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <HAL_DMA_IRQHandler+0x1fc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d012      	beq.n	800140a <HAL_DMA_IRQHandler+0x156>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_DMA_IRQHandler+0x200>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00a      	beq.n	8001404 <HAL_DMA_IRQHandler+0x150>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_DMA_IRQHandler+0x204>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d102      	bne.n	80013fe <HAL_DMA_IRQHandler+0x14a>
 80013f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013fc:	e00e      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 80013fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001402:	e00b      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 8001404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001408:	e008      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	e005      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	e002      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 8001416:	2320      	movs	r3, #32
 8001418:	e000      	b.n	800141c <HAL_DMA_IRQHandler+0x168>
 800141a:	2302      	movs	r3, #2
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_DMA_IRQHandler+0x208>)
 800141e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	2b00      	cmp	r3, #0
 800142e:	d034      	beq.n	800149a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001438:	e02f      	b.n	800149a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2208      	movs	r2, #8
 8001440:	409a      	lsls	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d028      	beq.n	800149c <HAL_DMA_IRQHandler+0x1e8>
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
    }
  }
  return;
 800149a:	bf00      	nop
 800149c:	bf00      	nop
}
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020008 	.word	0x40020008
 80014a8:	4002001c 	.word	0x4002001c
 80014ac:	40020030 	.word	0x40020030
 80014b0:	40020044 	.word	0x40020044
 80014b4:	40020058 	.word	0x40020058
 80014b8:	4002006c 	.word	0x4002006c
 80014bc:	40020000 	.word	0x40020000

080014c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d108      	bne.n	8001500 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014fe:	e007      	b.n	8001510 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	60da      	str	r2, [r3, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
	...

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b08b      	sub	sp, #44	; 0x2c
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	e169      	b.n	8001804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001530:	2201      	movs	r2, #1
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8158 	bne.w	80017fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a9a      	ldr	r2, [pc, #616]	; (80017bc <HAL_GPIO_Init+0x2a0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d05e      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001558:	4a98      	ldr	r2, [pc, #608]	; (80017bc <HAL_GPIO_Init+0x2a0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d875      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800155e:	4a98      	ldr	r2, [pc, #608]	; (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d058      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001564:	4a96      	ldr	r2, [pc, #600]	; (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d86f      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800156a:	4a96      	ldr	r2, [pc, #600]	; (80017c4 <HAL_GPIO_Init+0x2a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d052      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001570:	4a94      	ldr	r2, [pc, #592]	; (80017c4 <HAL_GPIO_Init+0x2a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d869      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001576:	4a94      	ldr	r2, [pc, #592]	; (80017c8 <HAL_GPIO_Init+0x2ac>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d04c      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 800157c:	4a92      	ldr	r2, [pc, #584]	; (80017c8 <HAL_GPIO_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d863      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001582:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_GPIO_Init+0x2b0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d046      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001588:	4a90      	ldr	r2, [pc, #576]	; (80017cc <HAL_GPIO_Init+0x2b0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d85d      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800158e:	2b12      	cmp	r3, #18
 8001590:	d82a      	bhi.n	80015e8 <HAL_GPIO_Init+0xcc>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d859      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <HAL_GPIO_Init+0x80>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	08001617 	.word	0x08001617
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	08001603 	.word	0x08001603
 80015a8:	08001645 	.word	0x08001645
 80015ac:	0800164b 	.word	0x0800164b
 80015b0:	0800164b 	.word	0x0800164b
 80015b4:	0800164b 	.word	0x0800164b
 80015b8:	0800164b 	.word	0x0800164b
 80015bc:	0800164b 	.word	0x0800164b
 80015c0:	0800164b 	.word	0x0800164b
 80015c4:	0800164b 	.word	0x0800164b
 80015c8:	0800164b 	.word	0x0800164b
 80015cc:	0800164b 	.word	0x0800164b
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	0800164b 	.word	0x0800164b
 80015d8:	0800164b 	.word	0x0800164b
 80015dc:	0800164b 	.word	0x0800164b
 80015e0:	080015f9 	.word	0x080015f9
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <HAL_GPIO_Init+0x2b4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ee:	e02c      	b.n	800164a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e029      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	3304      	adds	r3, #4
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e024      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e01f      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	330c      	adds	r3, #12
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e01a      	b.n	800164c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800161e:	2304      	movs	r3, #4
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e013      	b.n	800164c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800162c:	2308      	movs	r3, #8
 800162e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	611a      	str	r2, [r3, #16]
          break;
 8001636:	e009      	b.n	800164c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	615a      	str	r2, [r3, #20]
          break;
 8001642:	e003      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x130>
          break;
 800164a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d801      	bhi.n	8001656 <HAL_GPIO_Init+0x13a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	e001      	b.n	800165a <HAL_GPIO_Init+0x13e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2bff      	cmp	r3, #255	; 0xff
 8001660:	d802      	bhi.n	8001668 <HAL_GPIO_Init+0x14c>
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x152>
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3b08      	subs	r3, #8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	210f      	movs	r1, #15
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	6a39      	ldr	r1, [r7, #32]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80b1 	beq.w	80017fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169c:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a40      	ldr	r2, [pc, #256]	; (80017dc <HAL_GPIO_Init+0x2c0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d013      	beq.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <HAL_GPIO_Init+0x2c4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1e0>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001708:	2300      	movs	r3, #0
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171a:	492f      	ldr	r1, [pc, #188]	; (80017d8 <HAL_GPIO_Init+0x2bc>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	492c      	ldr	r1, [pc, #176]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4928      	ldr	r1, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	491e      	ldr	r1, [pc, #120]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4918      	ldr	r1, [pc, #96]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4914      	ldr	r1, [pc, #80]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d021      	beq.n	80017f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e021      	b.n	80017fe <HAL_GPIO_Init+0x2e2>
 80017ba:	bf00      	nop
 80017bc:	10320000 	.word	0x10320000
 80017c0:	10310000 	.word	0x10310000
 80017c4:	10220000 	.word	0x10220000
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10120000 	.word	0x10120000
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40011400 	.word	0x40011400
 80017ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_GPIO_Init+0x304>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4909      	ldr	r1, [pc, #36]	; (8001820 <HAL_GPIO_Init+0x304>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f ae8e 	bne.w	8001530 <HAL_GPIO_Init+0x14>
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	372c      	adds	r7, #44	; 0x2c
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43d9      	mvns	r1, r3
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	400b      	ands	r3, r1
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001888:	b08b      	sub	sp, #44	; 0x2c
 800188a:	af06      	add	r7, sp, #24
 800188c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0fd      	b.n	8001a94 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f007 fafd 	bl	8008eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 faa4 	bl	8004e0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	687e      	ldr	r6, [r7, #4]
 80018cc:	466d      	mov	r5, sp
 80018ce:	f106 0410 	add.w	r4, r6, #16
 80018d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	602b      	str	r3, [r5, #0]
 80018da:	1d33      	adds	r3, r6, #4
 80018dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f003 fa6e 	bl	8004dc0 <USB_CoreInit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ce      	b.n	8001a94 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fa9f 	bl	8004e40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e04c      	b.n	80019a2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3301      	adds	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	b298      	uxth	r0, r3
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3336      	adds	r3, #54	; 0x36
 8001946:	4602      	mov	r2, r0
 8001948:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3303      	adds	r3, #3
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	333c      	adds	r3, #60	; 0x3c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3ad      	bcc.n	8001908 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e044      	b.n	8001a3c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3b5      	bcc.n	80019b2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	687e      	ldr	r6, [r7, #4]
 8001a4e:	466d      	mov	r5, sp
 8001a50:	f106 0410 	add.w	r4, r6, #16
 8001a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	602b      	str	r3, [r5, #0]
 8001a5c:	1d33      	adds	r3, r6, #4
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f003 f9f9 	bl	8004e58 <USB_DevInit>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e00d      	b.n	8001a94 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 fb6a 	bl	8007166 <USB_DevDisconnect>

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_Start+0x16>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e016      	b.n	8001ae0 <HAL_PCD_Start+0x44>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f98e 	bl	8004de0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f007 fc63 	bl	8009392 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 fb3e 	bl	8007152 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fb40 	bl	800717a <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b04:	d102      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fb61 	bl	80021ce <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fb32 	bl	800717a <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d112      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b34:	b292      	uxth	r2, r2
 8001b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f007 fa31 	bl	8008fa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b40:	2100      	movs	r1, #0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f925 	bl	8001d92 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f005 fb14 	bl	800717a <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fafd 	bl	800717a <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fae6 	bl	800717a <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	d126      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0204 	bic.w	r2, r2, #4
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f007 fa12 	bl	8009014 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c02:	b292      	uxth	r2, r2
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fab4 	bl	800717a <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c1c:	f040 8084 	bne.w	8001d28 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
 8001c24:	e011      	b.n	8001c4a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	b292      	uxth	r2, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	f107 0120 	add.w	r1, r7, #32
 8001c3e:	440b      	add	r3, r1
 8001c40:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c44:	7ffb      	ldrb	r3, [r7, #31]
 8001c46:	3301      	adds	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d9ea      	bls.n	8001c26 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c80:	bf00      	nop
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f6      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	e010      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	7ffa      	ldrb	r2, [r7, #31]
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	440a      	add	r2, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	f107 0120 	add.w	r1, r7, #32
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001ccc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d9eb      	bls.n	8001cb2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0208 	orr.w	r2, r2, #8
 8001cec:	b292      	uxth	r2, r2
 8001cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f007 f95c 	bl	8008fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fa24 	bl	800717a <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d10e      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f007 f915 	bl	8008f86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 fa0a 	bl	800717a <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d70:	d10b      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PCD_SetAddress+0x1a>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e013      	b.n	8001dd4 <HAL_PCD_SetAddress+0x42>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 f9b1 	bl	800712c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	803b      	strh	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0e      	bge.n	8001e20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4a:	883a      	ldrh	r2, [r7, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	78ba      	ldrb	r2, [r7, #2]
 8001e54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_EP_Open+0xa6>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e00e      	b.n	8001ea0 <HAL_PCD_EP_Open+0xc4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f801 	bl	8004e98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0e      	bge.n	8001eda <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0207 	and.w	r2, r3, #7
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_Close+0x6a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00e      	b.n	8001f30 <HAL_PCD_EP_Close+0x88>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fb23 	bl	800556c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	460b      	mov	r3, r1
 8001f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fcd5 	bl	8005944 <USB_EPStartXfer>
 8001f9a:	e005      	b.n	8001fa8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fcce 	bl	8005944 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 0207 	and.w	r2, r3, #7
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fd4:	681b      	ldr	r3, [r3, #0]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fc7b 	bl	8005944 <USB_EPStartXfer>
 800204e:	e005      	b.n	800205c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fc74 	bl	8005944 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x7e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 ff1d 	bl	8006f32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f005 f842 	bl	8007198 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d901      	bls.n	8002144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0e      	bge.n	800216a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0207 	and.w	r2, r3, #7
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_ClrStall+0x82>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 ff0b 	bl	8006fd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08e      	sub	sp, #56	; 0x38
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021d6:	e2ec      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8161 	bne.w	80024ba <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d152      	bne.n	80022a8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f006 fe72 	bl	8008f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 829b 	beq.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8296 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b292      	uxth	r2, r2
 800229a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022a6:	e284      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d034      	beq.n	800232c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002300:	b29b      	uxth	r3, r3
 8002302:	f004 ff99 	bl	8007238 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29a      	uxth	r2, r3
 800230e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002312:	4013      	ands	r3, r2
 8002314:	823b      	strh	r3, [r7, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	8a3a      	ldrh	r2, [r7, #16]
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 fde7 	bl	8008ef8 <HAL_PCD_SetupStageCallback>
 800232a:	e242      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002330:	2b00      	cmp	r3, #0
 8002332:	f280 823e 	bge.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002342:	4013      	ands	r3, r2
 8002344:	83bb      	strh	r3, [r7, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	8bba      	ldrh	r2, [r7, #28]
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f004 ff49 	bl	8007238 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f006 fdb0 	bl	8008f1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 81f2 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d112      	bne.n	800241c <PCD_EP_ISR_Handler+0x24e>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e02f      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b3e      	cmp	r3, #62	; 0x3e
 8002422:	d813      	bhi.n	800244c <PCD_EP_ISR_Handler+0x27e>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <PCD_EP_ISR_Handler+0x270>
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	3301      	adds	r3, #1
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	b29b      	uxth	r3, r3
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e017      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <PCD_EP_ISR_Handler+0x298>
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	3b01      	subs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	b29b      	uxth	r3, r3
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	b29a      	uxth	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	827b      	strh	r3, [r7, #18]
 800248e:	8a7b      	ldrh	r3, [r7, #18]
 8002490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002494:	827b      	strh	r3, [r7, #18]
 8002496:	8a7b      	ldrh	r3, [r7, #18]
 8002498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800249c:	827b      	strh	r3, [r7, #18]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	8a7b      	ldrh	r3, [r7, #18]
 80024a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8013      	strh	r3, [r2, #0]
 80024b8:	e17b      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f280 80ea 	bge.w	80026aa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024ec:	4013      	ands	r3, r2
 80024ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002504:	b292      	uxth	r2, r2
 8002506:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002508:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d122      	bne.n	800256c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3306      	adds	r3, #6
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	88da      	ldrh	r2, [r3, #6]
 8002564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002566:	f004 fe67 	bl	8007238 <USB_ReadPMA>
 800256a:	e07c      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	78db      	ldrb	r3, [r3, #3]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d108      	bne.n	8002586 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002574:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002576:	461a      	mov	r2, r3
 8002578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f927 	bl	80027ce <HAL_PCD_EP_DB_Receive>
 8002580:	4603      	mov	r3, r0
 8002582:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002584:	e06f      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	3302      	adds	r3, #2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002608:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02a      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6959      	ldr	r1, [r3, #20]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	891a      	ldrh	r2, [r3, #8]
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	f004 fe0b 	bl	8007238 <USB_ReadPMA>
 8002622:	e020      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	3306      	adds	r3, #6
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800264e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	6959      	ldr	r1, [r3, #20]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002662:	f004 fde9 	bl	8007238 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800266c:	441a      	add	r2, r3
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002678:	441a      	add	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <PCD_EP_ISR_Handler+0x4c2>
 8002686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f006 fc40 	bl	8008f1c <HAL_PCD_DataOutStageCallback>
 800269c:	e005      	b.n	80026aa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f94d 	bl	8005944 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07e      	beq.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80026b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	843b      	strh	r3, [r7, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	8c3b      	ldrh	r3, [r7, #32]
 80026f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d00c      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	78db      	ldrb	r3, [r3, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d141      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	3302      	adds	r3, #2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	8bfb      	ldrh	r3, [r7, #30]
 8002752:	429a      	cmp	r2, r3
 8002754:	d906      	bls.n	8002764 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8bfb      	ldrh	r3, [r7, #30]
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	e002      	b.n	800276a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f006 fbea 	bl	8008f52 <HAL_PCD_DataInStageCallback>
 800277e:	e018      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	441a      	add	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	441a      	add	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 f8d0 	bl	8005944 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027a4:	e005      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f91b 	bl	80029e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b21b      	sxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f6ff ad0a 	blt.w	80021d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	3302      	adds	r3, #2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	8b7b      	ldrh	r3, [r7, #26]
 8002816:	429a      	cmp	r2, r3
 8002818:	d306      	bcc.n	8002828 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	8b7b      	ldrh	r3, [r7, #26]
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e002      	b.n	800282e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d123      	bne.n	800287e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	833b      	strh	r3, [r7, #24]
 8002852:	8b3b      	ldrh	r3, [r7, #24]
 8002854:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002858:	833b      	strh	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	82fb      	strh	r3, [r7, #22]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	891a      	ldrh	r2, [r3, #8]
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	f004 fcab 	bl	8007238 <USB_ReadPMA>
 80028e2:	e07c      	b.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	3306      	adds	r3, #6
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	8b7b      	ldrh	r3, [r7, #26]
 8002914:	429a      	cmp	r2, r3
 8002916:	d306      	bcc.n	8002926 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	e002      	b.n	800292c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d123      	bne.n	800297c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	83fb      	strh	r3, [r7, #30]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002956:	83fb      	strh	r3, [r7, #30]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8bfb      	ldrh	r3, [r7, #30]
 8002968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	83bb      	strh	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	8bbb      	ldrh	r3, [r7, #28]
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	895a      	ldrh	r2, [r3, #10]
 80029d8:	8b7b      	ldrh	r3, [r7, #26]
 80029da:	f004 fc2d 	bl	8007238 <USB_ReadPMA>
    }
  }

  return count;
 80029de:	8b7b      	ldrh	r3, [r7, #26]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0a2      	sub	sp, #136	; 0x88
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 81c7 	beq.w	8002d90 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	3302      	adds	r3, #2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d907      	bls.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	619a      	str	r2, [r3, #24]
 8002a48:	e002      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 80b9 	bne.w	8002bcc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d126      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	4413      	add	r3, r2
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	011a      	lsls	r2, r3, #4
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	e01a      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d116      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	4413      	add	r3, r2
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	4413      	add	r3, r2
 8002ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d126      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	011a      	lsls	r2, r3, #4
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e017      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d113      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	4413      	add	r3, r2
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f006 f9ea 	bl	8008f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 82d4 	beq.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	827b      	strh	r3, [r7, #18]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	441a      	add	r2, r3
 8002bb4:	8a7b      	ldrh	r3, [r7, #18]
 8002bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]
 8002bca:	e2b2      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d021      	beq.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8286 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d309      	bcc.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	621a      	str	r2, [r3, #32]
 8002c60:	e015      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c78:	e009      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d155      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	4413      	add	r3, r2
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	011a      	lsls	r2, r3, #4
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d112      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x302>
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e047      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	2b3e      	cmp	r3, #62	; 0x3e
 8002cee:	d811      	bhi.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	3301      	adds	r3, #1
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e032      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x342>
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	3b01      	subs	r3, #1
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e01b      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d117      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	4413      	add	r3, r2
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6959      	ldr	r1, [r3, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	891a      	ldrh	r2, [r3, #8]
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f004 fa10 	bl	80071ae <USB_WritePMA>
 8002d8e:	e1d0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	3306      	adds	r3, #6
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	619a      	str	r2, [r3, #24]
 8002dd6:	e002      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 80c4 	bne.w	8002f70 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d126      	bne.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x456>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	4413      	add	r3, r2
 8002e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e01a      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d116      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5a:	4413      	add	r3, r2
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	2200      	movs	r2, #0
 8002e72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12f      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	011a      	lsls	r2, r3, #4
 8002ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef8:	4413      	add	r3, r2
 8002efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f04:	4413      	add	r3, r2
 8002f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f006 f81a 	bl	8008f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 8104 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]
 8002f6e:	e0e0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 80b4 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d309      	bcc.n	8003006 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	e015      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800300e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800301c:	e009      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	667b      	str	r3, [r7, #100]	; 0x64
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d155      	bne.n	80030ec <HAL_PCD_EP_DB_Transmit+0x704>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003054:	4413      	add	r3, r2
 8003056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	4413      	add	r3, r2
 8003062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003066:	65bb      	str	r3, [r7, #88]	; 0x58
 8003068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306a:	2b00      	cmp	r3, #0
 800306c:	d112      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003078:	b29a      	uxth	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e044      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	2b3e      	cmp	r3, #62	; 0x3e
 8003098:	d811      	bhi.n	80030be <HAL_PCD_EP_DB_Transmit+0x6d6>
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	3301      	adds	r3, #1
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e02f      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
 80030c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	3b01      	subs	r3, #1
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	b29b      	uxth	r3, r3
 80030dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	e018      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d114      	bne.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003102:	4413      	add	r3, r2
 8003104:	667b      	str	r3, [r7, #100]	; 0x64
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	011a      	lsls	r2, r3, #4
 800310c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310e:	4413      	add	r3, r2
 8003110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	b29a      	uxth	r2, r3
 800311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6959      	ldr	r1, [r3, #20]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	895a      	ldrh	r2, [r3, #10]
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	f004 f83e 	bl	80071ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	823b      	strh	r3, [r7, #16]
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	f083 0310 	eor.w	r3, r3, #16
 8003154:	823b      	strh	r3, [r7, #16]
 8003156:	8a3b      	ldrh	r3, [r7, #16]
 8003158:	f083 0320 	eor.w	r3, r3, #32
 800315c:	823b      	strh	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	8a3b      	ldrh	r3, [r7, #16]
 800316e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3788      	adds	r7, #136	; 0x88
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	4613      	mov	r3, r2
 800319c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e009      	b.n	80031d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c2:	897a      	ldrh	r2, [r7, #10]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	80da      	strh	r2, [r3, #6]
 80031ea:	e00b      	b.n	8003204 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2201      	movs	r2, #1
 80031f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b29a      	uxth	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e26c      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e246      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fdec 	bl	8000ec8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fde8 	bl	8000ec8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1fa      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fdd8 	bl	8000ec8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd fdd4 	bl	8000ec8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1e6      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1ba      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fd fd8d 	bl	8000ec8 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fd fd89 	bl	8000ec8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e19b      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fd6c 	bl	8000ec8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fd fd68 	bl	8000ec8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e17a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fd fd4c 	bl	8000ec8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd fd48 	bl	8000ec8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e15a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 faa6 	bl	80039a4 <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fd fd32 	bl	8000ec8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd fd2e 	bl	8000ec8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e140      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b97      	ldr	r3, [pc, #604]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b94      	ldr	r3, [pc, #592]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a93      	ldr	r2, [pc, #588]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b8e      	ldr	r3, [pc, #568]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b8b      	ldr	r3, [pc, #556]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8a      	ldr	r2, [pc, #552]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fd fcef 	bl	8000ec8 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fd fceb 	bl	8000ec8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0fd      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a7a      	ldr	r2, [pc, #488]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a75      	ldr	r2, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a72      	ldr	r2, [pc, #456]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a6c      	ldr	r2, [pc, #432]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a66      	ldr	r2, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fd fc9f 	bl	8000ec8 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd fc9b 	bl	8000ec8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0ab      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fd fc89 	bl	8000ec8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fc85 	bl	8000ec8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e095      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a47      	ldr	r2, [pc, #284]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8081 	beq.w	80036fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd fc59 	bl	8000ec8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd fc55 	bl	8000ec8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e067      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	492d      	ldr	r1, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	4927      	ldr	r1, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fd fc29 	bl	8000ec8 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fc25 	bl	8000ec8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e037      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e02f      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fd fc12 	bl	8000ec8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd fc0e 	bl	8000ec8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e020      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	42420060 	.word	0x42420060

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4965      	ldr	r1, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800378e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fd fb62 	bl	8000ec8 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fd fb5e 	bl	8000ec8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4922      	ldr	r1, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fac0 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	0800b0f8 	.word	0x0800b0f8
 80038dc:	20000100 	.word	0x20000100
 80038e0:	20000104 	.word	0x20000104

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b490      	push	{r4, r7}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038ec:	1d3c      	adds	r4, r7, #4
 80038ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038f4:	f240 2301 	movw	r3, #513	; 0x201
 80038f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x46>
 8003922:	e02d      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	623b      	str	r3, [r7, #32]
      break;
 8003928:	e02d      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003936:	4413      	add	r3, r2
 8003938:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800393c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c5b      	lsrs	r3, r3, #17
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003956:	4413      	add	r3, r2
 8003958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800395c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	fb02 f203 	mul.w	r2, r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e004      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	623b      	str	r3, [r7, #32]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6a3b      	ldr	r3, [r7, #32]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bc90      	pop	{r4, r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	0800b094 	.word	0x0800b094
 8003998:	40021000 	.word	0x40021000
 800399c:	007a1200 	.word	0x007a1200
 80039a0:	003d0900 	.word	0x003d0900

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000100 	.word	0x20000100
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fd fa42 	bl	8000ec8 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd fa3e 	bl	8000ec8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e06d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d027      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fa0d 	bl	8000ec8 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fd fa09 	bl	8000ec8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4917      	ldr	r1, [pc, #92]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	490b      	ldr	r1, [pc, #44]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420440 	.word	0x42420440

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e041      	b.n	8003be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc fef4 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 fe04 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_TIM_Base_Start+0x88>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_TIM_Base_Start+0x48>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d009      	beq.n	8003c34 <HAL_TIM_Base_Start+0x48>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <HAL_TIM_Base_Start+0x8c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_TIM_Base_Start+0x48>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_TIM_Base_Start+0x90>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d010      	beq.n	8003c68 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e007      	b.n	8003c68 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800

08003c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e041      	b.n	8003d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f839 	bl	8003d1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fd6a 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_TIM_PWM_Start_DMA+0x28>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e022      	b.n	8003d9e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d109      	bne.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x42>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e015      	b.n	8003d9e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e008      	b.n	8003d9e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
 8003da4:	e14e      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x90>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e022      	b.n	8003e06 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d109      	bne.n	8003dda <HAL_TIM_PWM_Start_DMA+0xaa>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e015      	b.n	8003e06 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e008      	b.n	8003e06 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d024      	beq.n	8003e54 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start_DMA+0xea>
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e114      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start_DMA+0xfa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	e016      	b.n	8003e58 <HAL_TIM_PWM_Start_DMA+0x128>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	e00e      	b.n	8003e58 <HAL_TIM_PWM_Start_DMA+0x128>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e006      	b.n	8003e58 <HAL_TIM_PWM_Start_DMA+0x128>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e52:	e001      	b.n	8003e58 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0f5      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	f200 80ae 	bhi.w	8003fbc <HAL_TIM_PWM_Start_DMA+0x28c>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003fbd 	.word	0x08003fbd
 8003e70:	08003fbd 	.word	0x08003fbd
 8003e74:	08003fbd 	.word	0x08003fbd
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003fbd 	.word	0x08003fbd
 8003e80:	08003fbd 	.word	0x08003fbd
 8003e84:	08003fbd 	.word	0x08003fbd
 8003e88:	08003f2d 	.word	0x08003f2d
 8003e8c:	08003fbd 	.word	0x08003fbd
 8003e90:	08003fbd 	.word	0x08003fbd
 8003e94:	08003fbd 	.word	0x08003fbd
 8003e98:	08003f75 	.word	0x08003f75
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	4a69      	ldr	r2, [pc, #420]	; (8004050 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3334      	adds	r3, #52	; 0x34
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	f7fd f996 	bl	80011f4 <HAL_DMA_Start_IT>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0b8      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	60da      	str	r2, [r3, #12]
      break;
 8003ee2:	e06c      	b.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	4a56      	ldr	r2, [pc, #344]	; (8004054 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3338      	adds	r3, #56	; 0x38
 8003f08:	461a      	mov	r2, r3
 8003f0a:	887b      	ldrh	r3, [r7, #2]
 8003f0c:	f7fd f972 	bl	80011f4 <HAL_DMA_Start_IT>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e094      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f28:	60da      	str	r2, [r3, #12]
      break;
 8003f2a:	e048      	b.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4a46      	ldr	r2, [pc, #280]	; (800404c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a45      	ldr	r2, [pc, #276]	; (8004050 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a44      	ldr	r2, [pc, #272]	; (8004054 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	333c      	adds	r3, #60	; 0x3c
 8003f50:	461a      	mov	r2, r3
 8003f52:	887b      	ldrh	r3, [r7, #2]
 8003f54:	f7fd f94e 	bl	80011f4 <HAL_DMA_Start_IT>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e070      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f70:	60da      	str	r2, [r3, #12]
      break;
 8003f72:	e024      	b.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4a33      	ldr	r2, [pc, #204]	; (8004050 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4a32      	ldr	r2, [pc, #200]	; (8004054 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3340      	adds	r3, #64	; 0x40
 8003f98:	461a      	mov	r2, r3
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	f7fd f92a 	bl	80011f4 <HAL_DMA_Start_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e04c      	b.n	8004044 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fb8:	60da      	str	r2, [r3, #12]
      break;
 8003fba:	e000      	b.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003fbc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fe66 	bl	8004c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a21      	ldr	r2, [pc, #132]	; (8004058 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d009      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a17      	ldr	r2, [pc, #92]	; (800405c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x2de>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIM_PWM_Start_DMA+0x330>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b06      	cmp	r3, #6
 800401e:	d010      	beq.n	8004042 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	e007      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	08004689 	.word	0x08004689
 8004050:	08004731 	.word	0x08004731
 8004054:	080045f7 	.word	0x080045f7
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800

08004064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0202 	mvn.w	r2, #2
 8004090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa78 	bl	800459c <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa6b 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa7a 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0204 	mvn.w	r2, #4
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa4e 	bl	800459c <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa41 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa50 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b08      	cmp	r3, #8
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0208 	mvn.w	r2, #8
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa24 	bl	800459c <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa17 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa26 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b10      	cmp	r3, #16
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0210 	mvn.w	r2, #16
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2208      	movs	r2, #8
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9fa 	bl	800459c <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f9ed 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f9fc 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0201 	mvn.w	r2, #1
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9c8 	bl	8004578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d107      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fdcd 	bl	8004dae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d10e      	bne.n	8004240 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d107      	bne.n	8004240 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9c9 	bl	80045d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b20      	cmp	r3, #32
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0220 	mvn.w	r2, #32
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fd98 	bl	8004d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800428a:	2302      	movs	r3, #2
 800428c:	e0ac      	b.n	80043e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b0c      	cmp	r3, #12
 800429a:	f200 809f 	bhi.w	80043dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080043dd 	.word	0x080043dd
 80042ac:	080043dd 	.word	0x080043dd
 80042b0:	080043dd 	.word	0x080043dd
 80042b4:	08004319 	.word	0x08004319
 80042b8:	080043dd 	.word	0x080043dd
 80042bc:	080043dd 	.word	0x080043dd
 80042c0:	080043dd 	.word	0x080043dd
 80042c4:	0800435b 	.word	0x0800435b
 80042c8:	080043dd 	.word	0x080043dd
 80042cc:	080043dd 	.word	0x080043dd
 80042d0:	080043dd 	.word	0x080043dd
 80042d4:	0800439b 	.word	0x0800439b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fabc 	bl	800485c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0208 	orr.w	r2, r2, #8
 80042f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0204 	bic.w	r2, r2, #4
 8004302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6999      	ldr	r1, [r3, #24]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	619a      	str	r2, [r3, #24]
      break;
 8004316:	e062      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb02 	bl	8004928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6999      	ldr	r1, [r3, #24]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	619a      	str	r2, [r3, #24]
      break;
 8004358:	e041      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb4b 	bl	80049fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0208 	orr.w	r2, r2, #8
 8004374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0204 	bic.w	r2, r2, #4
 8004384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69d9      	ldr	r1, [r3, #28]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	61da      	str	r2, [r3, #28]
      break;
 8004398:	e021      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb95 	bl	8004ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69d9      	ldr	r1, [r3, #28]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	021a      	lsls	r2, r3, #8
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	61da      	str	r2, [r3, #28]
      break;
 80043da:	e000      	b.n	80043de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80043dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIM_ConfigClockSource+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e0b3      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x180>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004440:	d03e      	beq.n	80044c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	f200 8087 	bhi.w	8004558 <HAL_TIM_ConfigClockSource+0x168>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	f000 8085 	beq.w	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d87f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004458:	2b70      	cmp	r3, #112	; 0x70
 800445a:	d01a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xa2>
 800445c:	2b70      	cmp	r3, #112	; 0x70
 800445e:	d87b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004460:	2b60      	cmp	r3, #96	; 0x60
 8004462:	d050      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x116>
 8004464:	2b60      	cmp	r3, #96	; 0x60
 8004466:	d877      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004468:	2b50      	cmp	r3, #80	; 0x50
 800446a:	d03c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xf6>
 800446c:	2b50      	cmp	r3, #80	; 0x50
 800446e:	d873      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d058      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x136>
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d86f      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004478:	2b30      	cmp	r3, #48	; 0x30
 800447a:	d064      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x156>
 800447c:	2b30      	cmp	r3, #48	; 0x30
 800447e:	d86b      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d060      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x156>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d867      	bhi.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05c      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x156>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d05a      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004490:	e062      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f000 fbda 	bl	8004c5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e04e      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6899      	ldr	r1, [r3, #8]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f000 fbc3 	bl	8004c5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e2:	609a      	str	r2, [r3, #8]
      break;
 80044e4:	e03b      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fb3a 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2150      	movs	r1, #80	; 0x50
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fb91 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 8004504:	e02b      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fb58 	bl	8004bc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2160      	movs	r1, #96	; 0x60
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb81 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 8004524:	e01b      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fb1a 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2140      	movs	r1, #64	; 0x40
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fb71 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 8004544:	e00b      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f000 fb68 	bl	8004c26 <TIM_ITRx_SetConfig>
        break;
 8004556:	e002      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800455c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d107      	bne.n	800461e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800461c:	e02a      	b.n	8004674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d107      	bne.n	8004638 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2202      	movs	r2, #2
 800462c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004636:	e01d      	b.n	8004674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d107      	bne.n	8004652 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	e010      	b.n	8004674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d107      	bne.n	800466c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2208      	movs	r2, #8
 8004660:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466a:	e003      	b.n	8004674 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ffb5 	bl	80045e4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d10b      	bne.n	80046b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d136      	bne.n	800471c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b6:	e031      	b.n	800471c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d10b      	bne.n	80046da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2202      	movs	r2, #2
 80046c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d125      	bne.n	800471c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d8:	e020      	b.n	800471c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d10b      	bne.n	80046fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2204      	movs	r2, #4
 80046e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d114      	bne.n	800471c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fa:	e00f      	b.n	800471c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10a      	bne.n	800471c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff ff46 	bl	80045ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d103      	bne.n	8004750 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	771a      	strb	r2, [r3, #28]
 800474e:	e019      	b.n	8004784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d103      	bne.n	8004762 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	771a      	strb	r2, [r3, #28]
 8004760:	e010      	b.n	8004784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d103      	bne.n	8004774 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2204      	movs	r2, #4
 8004770:	771a      	strb	r2, [r3, #28]
 8004772:	e007      	b.n	8004784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d102      	bne.n	8004784 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2208      	movs	r2, #8
 8004782:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff ff1b 	bl	80045c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a29      	ldr	r2, [pc, #164]	; (8004850 <TIM_Base_SetConfig+0xb8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a26      	ldr	r2, [pc, #152]	; (8004854 <TIM_Base_SetConfig+0xbc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a25      	ldr	r2, [pc, #148]	; (8004858 <TIM_Base_SetConfig+0xc0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <TIM_Base_SetConfig+0xb8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d007      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a19      	ldr	r2, [pc, #100]	; (8004854 <TIM_Base_SetConfig+0xbc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <TIM_Base_SetConfig+0xc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d108      	bne.n	800480c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <TIM_Base_SetConfig+0xb8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0302 	bic.w	r3, r3, #2
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <TIM_OC1_SetConfig+0xc8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10c      	bne.n	80048d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0308 	bic.w	r3, r3, #8
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <TIM_OC1_SetConfig+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00

08004928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0320 	bic.w	r3, r3, #32
 8004972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_OC2_SetConfig+0xd0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10d      	bne.n	80049a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <TIM_OC2_SetConfig+0xd0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d113      	bne.n	80049d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00

080049fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <TIM_OC3_SetConfig+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10d      	bne.n	8004a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC3_SetConfig+0xd0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d113      	bne.n	8004aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00

08004ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <TIM_OC4_SetConfig+0x98>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d109      	bne.n	8004b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	019b      	lsls	r3, r3, #6
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40012c00 	.word	0x40012c00

08004b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f043 0307 	orr.w	r3, r3, #7
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b087      	sub	sp, #28
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	021a      	lsls	r2, r3, #8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2201      	movs	r2, #1
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e046      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d009      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a10      	ldr	r2, [pc, #64]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800

08004d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	f107 0014 	add.w	r0, r7, #20
 8004dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr

08004de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004df0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004df4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	f107 0014 	add.w	r0, r7, #20
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	b004      	add	sp, #16
 8004e96:	4770      	bx	lr

08004e98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b09b      	sub	sp, #108	; 0x6c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	78db      	ldrb	r3, [r3, #3]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d81f      	bhi.n	8004f0a <USB_ActivateEndpoint+0x72>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <USB_ActivateEndpoint+0x38>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004f13 	.word	0x08004f13
 8004edc:	08004eef 	.word	0x08004eef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ee0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004eec:	e012      	b.n	8004f14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004eee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ef2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ef6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004efa:	e00b      	b.n	8004f14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004efc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004f08:	e004      	b.n	8004f14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004f10:	e000      	b.n	8004f14 <USB_ActivateEndpoint+0x7c>
      break;
 8004f12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8149 	bne.w	8005218 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8084 	beq.w	8005098 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	011a      	lsls	r2, r3, #4
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	88db      	ldrh	r3, [r3, #6]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	81fb      	strh	r3, [r7, #14]
 8004fd2:	89fb      	ldrh	r3, [r7, #14]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01b      	beq.n	8005014 <USB_ActivateEndpoint+0x17c>
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	81bb      	strh	r3, [r7, #12]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	89bb      	ldrh	r3, [r7, #12]
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d020      	beq.n	800505e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005032:	813b      	strh	r3, [r7, #8]
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	f083 0320 	eor.w	r3, r3, #32
 800503a:	813b      	strh	r3, [r7, #8]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	893b      	ldrh	r3, [r7, #8]
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
 800505c:	e27f      	b.n	800555e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005074:	817b      	strh	r3, [r7, #10]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	897b      	ldrh	r3, [r7, #10]
 8005082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]
 8005096:	e262      	b.n	800555e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	4413      	add	r3, r2
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	011a      	lsls	r2, r3, #4
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	88db      	ldrh	r3, [r3, #6]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	4413      	add	r3, r2
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	011a      	lsls	r2, r3, #4
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d112      	bne.n	800511e <USB_ActivateEndpoint+0x286>
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005102:	b29a      	uxth	r2, r3
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005116:	b29a      	uxth	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e02f      	b.n	800517e <USB_ActivateEndpoint+0x2e6>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b3e      	cmp	r3, #62	; 0x3e
 8005124:	d813      	bhi.n	800514e <USB_ActivateEndpoint+0x2b6>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <USB_ActivateEndpoint+0x2a8>
 800513a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800513c:	3301      	adds	r3, #1
 800513e:	663b      	str	r3, [r7, #96]	; 0x60
 8005140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005142:	b29b      	uxth	r3, r3
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	b29a      	uxth	r2, r3
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e017      	b.n	800517e <USB_ActivateEndpoint+0x2e6>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <USB_ActivateEndpoint+0x2d0>
 8005162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005164:	3b01      	subs	r3, #1
 8005166:	663b      	str	r3, [r7, #96]	; 0x60
 8005168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516a:	b29b      	uxth	r3, r3
 800516c:	029b      	lsls	r3, r3, #10
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005178:	b29a      	uxth	r2, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	83fb      	strh	r3, [r7, #30]
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <USB_ActivateEndpoint+0x336>
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ac:	83bb      	strh	r3, [r7, #28]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	8bbb      	ldrh	r3, [r7, #28]
 80051ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	837b      	strh	r3, [r7, #26]
 80051e6:	8b7b      	ldrh	r3, [r7, #26]
 80051e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051ec:	837b      	strh	r3, [r7, #26]
 80051ee:	8b7b      	ldrh	r3, [r7, #26]
 80051f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051f4:	837b      	strh	r3, [r7, #26]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	8b7b      	ldrh	r3, [r7, #26]
 8005202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005212:	b29b      	uxth	r3, r3
 8005214:	8013      	strh	r3, [r2, #0]
 8005216:	e1a2      	b.n	800555e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005248:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	65bb      	str	r3, [r7, #88]	; 0x58
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005264:	4413      	add	r3, r2
 8005266:	65bb      	str	r3, [r7, #88]	; 0x58
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005270:	4413      	add	r3, r2
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	891b      	ldrh	r3, [r3, #8]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	653b      	str	r3, [r7, #80]	; 0x50
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	4413      	add	r3, r2
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	895b      	ldrh	r3, [r3, #10]
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 8091 	bne.w	80053e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80052d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01b      	beq.n	8005316 <USB_ActivateEndpoint+0x47e>
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	873b      	strh	r3, [r7, #56]	; 0x38
 8005324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01b      	beq.n	8005366 <USB_ActivateEndpoint+0x4ce>
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005344:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800537e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005380:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005384:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005388:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800538c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]
 80053e6:	e0ba      	b.n	800555e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01d      	beq.n	8005440 <USB_ActivateEndpoint+0x5a8>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800542c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01d      	beq.n	8005498 <USB_ActivateEndpoint+0x600>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d024      	beq.n	80054ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054be:	f083 0320 	eor.w	r3, r3, #32
 80054c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
 80054e8:	e01d      	b.n	8005526 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800554a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800555e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005562:	4618      	mov	r0, r3
 8005564:	376c      	adds	r7, #108	; 0x6c
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800556c:	b480      	push	{r7}
 800556e:	b08d      	sub	sp, #52	; 0x34
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	7b1b      	ldrb	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 808e 	bne.w	800569c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d044      	beq.n	8005612 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	81bb      	strh	r3, [r7, #12]
 8005596:	89bb      	ldrh	r3, [r7, #12]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <USB_DeactivateEndpoint+0x6c>
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	817b      	strh	r3, [r7, #10]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ee:	813b      	strh	r3, [r7, #8]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	893b      	ldrh	r3, [r7, #8]
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
 8005610:	e192      	b.n	8005938 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	827b      	strh	r3, [r7, #18]
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01b      	beq.n	8005662 <USB_DeactivateEndpoint+0xf6>
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	823b      	strh	r3, [r7, #16]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	8a3b      	ldrh	r3, [r7, #16]
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	81fb      	strh	r3, [r7, #14]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
 800569a:	e14d      	b.n	8005938 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 80a5 	bne.w	80057f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	843b      	strh	r3, [r7, #32]
 80056b4:	8c3b      	ldrh	r3, [r7, #32]
 80056b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <USB_DeactivateEndpoint+0x18a>
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	8bfb      	ldrh	r3, [r7, #30]
 80056e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	83bb      	strh	r3, [r7, #28]
 8005704:	8bbb      	ldrh	r3, [r7, #28]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01b      	beq.n	8005746 <USB_DeactivateEndpoint+0x1da>
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	837b      	strh	r3, [r7, #26]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	8b7b      	ldrh	r3, [r7, #26]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575c:	833b      	strh	r3, [r7, #24]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	8b3b      	ldrh	r3, [r7, #24]
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	82fb      	strh	r3, [r7, #22]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	441a      	add	r2, r3
 80057a0:	8afb      	ldrh	r3, [r7, #22]
 80057a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057cc:	82bb      	strh	r3, [r7, #20]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	8abb      	ldrh	r3, [r7, #20]
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]
 80057ee:	e0a3      	b.n	8005938 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <USB_DeactivateEndpoint+0x2d4>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800584e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01b      	beq.n	8005890 <USB_DeactivateEndpoint+0x324>
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800587c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800588c:	b29b      	uxth	r3, r3
 800588e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	847b      	strh	r3, [r7, #34]	; 0x22
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3734      	adds	r7, #52	; 0x34
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b0cc      	sub	sp, #304	; 0x130
 8005948:	af00      	add	r7, sp, #0
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	6018      	str	r0, [r3, #0]
 800594e:	463b      	mov	r3, r7
 8005950:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	f040 872e 	bne.w	80067ba <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	463b      	mov	r3, r7
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d905      	bls.n	800597a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005978:	e004      	b.n	8005984 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	7b1b      	ldrb	r3, [r3, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d134      	bne.n	80059f8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	88da      	ldrh	r2, [r3, #6]
 800599a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599e:	b29b      	uxth	r3, r3
 80059a0:	1d38      	adds	r0, r7, #4
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	f001 fc03 	bl	80071ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059a8:	f107 0310 	add.w	r3, r7, #16
 80059ac:	1d3a      	adds	r2, r7, #4
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	f107 0310 	add.w	r3, r7, #16
 80059c2:	f107 0210 	add.w	r2, r7, #16
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	440a      	add	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4413      	add	r3, r2
 80059dc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059e0:	f107 030c 	add.w	r3, r7, #12
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	f000 beac 	b.w	8006750 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	f040 838c 	bne.w	800611c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	f240 8330 	bls.w	8006076 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 819e 	beq.w	8005dc4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a8c:	1d3a      	adds	r2, r7, #4
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d17a      	bne.n	8005b92 <USB_EPStartXfer+0x24e>
 8005a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aa0:	1d3a      	adds	r2, r7, #4
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	440a      	add	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	011a      	lsls	r2, r3, #4
 8005ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11a      	bne.n	8005b18 <USB_EPStartXfer+0x1d4>
 8005ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e062      	b.n	8005bde <USB_EPStartXfer+0x29a>
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1e:	d819      	bhi.n	8005b54 <USB_EPStartXfer+0x210>
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <USB_EPStartXfer+0x1fc>
 8005b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	029b      	lsls	r3, r3, #10
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e044      	b.n	8005bde <USB_EPStartXfer+0x29a>
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <USB_EPStartXfer+0x230>
 8005b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e025      	b.n	8005bde <USB_EPStartXfer+0x29a>
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d120      	bne.n	8005bde <USB_EPStartXfer+0x29a>
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	895b      	ldrh	r3, [r3, #10]
 8005be4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6959      	ldr	r1, [r3, #20]
 8005bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bf8:	1d38      	adds	r0, r7, #4
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	f001 fad7 	bl	80071ae <USB_WritePMA>
            ep->xfer_buff += len;
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0a:	441a      	add	r2, r3
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d909      	bls.n	8005c36 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	621a      	str	r2, [r3, #32]
 8005c34:	e008      	b.n	8005c48 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d17a      	bne.n	8005d48 <USB_EPStartXfer+0x404>
 8005c52:	f107 0318 	add.w	r3, r7, #24
 8005c56:	1d3a      	adds	r2, r7, #4
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4619      	mov	r1, r3
 8005c68:	f107 0318 	add.w	r3, r7, #24
 8005c6c:	f107 0218 	add.w	r2, r7, #24
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	440a      	add	r2, r1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	f107 0318 	add.w	r3, r7, #24
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11a      	bne.n	8005cce <USB_EPStartXfer+0x38a>
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	f107 0314 	add.w	r3, r7, #20
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e067      	b.n	8005d9e <USB_EPStartXfer+0x45a>
 8005cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd4:	d819      	bhi.n	8005d0a <USB_EPStartXfer+0x3c6>
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <USB_EPStartXfer+0x3b2>
 8005cec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	029b      	lsls	r3, r3, #10
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e049      	b.n	8005d9e <USB_EPStartXfer+0x45a>
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <USB_EPStartXfer+0x3e6>
 8005d20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d24:	3b01      	subs	r3, #1
 8005d26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	029b      	lsls	r3, r3, #10
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e02a      	b.n	8005d9e <USB_EPStartXfer+0x45a>
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d125      	bne.n	8005d9e <USB_EPStartXfer+0x45a>
 8005d52:	f107 0320 	add.w	r3, r7, #32
 8005d56:	1d3a      	adds	r2, r7, #4
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	f107 0320 	add.w	r3, r7, #32
 8005d6c:	f107 0220 	add.w	r2, r7, #32
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	440a      	add	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	f107 0320 	add.w	r3, r7, #32
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d8a:	f107 031c 	add.w	r3, r7, #28
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f107 031c 	add.w	r3, r7, #28
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005db8:	1d38      	adds	r0, r7, #4
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	f001 f9f7 	bl	80071ae <USB_WritePMA>
 8005dc0:	f000 bcc6 	b.w	8006750 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d164      	bne.n	8005e98 <USB_EPStartXfer+0x554>
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de2:	4413      	add	r3, r2
 8005de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	011a      	lsls	r2, r3, #4
 8005dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df0:	4413      	add	r3, r2
 8005df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d112      	bne.n	8005e26 <USB_EPStartXfer+0x4e2>
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e057      	b.n	8005ed6 <USB_EPStartXfer+0x592>
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e2c:	d817      	bhi.n	8005e5e <USB_EPStartXfer+0x51a>
 8005e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <USB_EPStartXfer+0x50a>
 8005e44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e03b      	b.n	8005ed6 <USB_EPStartXfer+0x592>
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <USB_EPStartXfer+0x53a>
 8005e74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e01e      	b.n	8005ed6 <USB_EPStartXfer+0x592>
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d119      	bne.n	8005ed6 <USB_EPStartXfer+0x592>
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb6:	4413      	add	r3, r2
 8005eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eba:	463b      	mov	r3, r7
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	891b      	ldrh	r3, [r3, #8]
 8005edc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6959      	ldr	r1, [r3, #20]
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ef0:	1d38      	adds	r0, r7, #4
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	f001 f95b 	bl	80071ae <USB_WritePMA>
            ep->xfer_buff += len;
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f02:	441a      	add	r2, r3
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d909      	bls.n	8005f2e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	463b      	mov	r3, r7
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	621a      	str	r2, [r3, #32]
 8005f2c:	e008      	b.n	8005f40 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d164      	bne.n	800601a <USB_EPStartXfer+0x6d6>
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	4413      	add	r3, r2
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	4413      	add	r3, r2
 8005f74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d112      	bne.n	8005fa8 <USB_EPStartXfer+0x664>
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e054      	b.n	8006052 <USB_EPStartXfer+0x70e>
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	2b3e      	cmp	r3, #62	; 0x3e
 8005fae:	d817      	bhi.n	8005fe0 <USB_EPStartXfer+0x69c>
 8005fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USB_EPStartXfer+0x68c>
 8005fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e038      	b.n	8006052 <USB_EPStartXfer+0x70e>
 8005fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <USB_EPStartXfer+0x6bc>
 8005ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006004:	b29b      	uxth	r3, r3
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e01b      	b.n	8006052 <USB_EPStartXfer+0x70e>
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d116      	bne.n	8006052 <USB_EPStartXfer+0x70e>
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602c:	b29b      	uxth	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006032:	4413      	add	r3, r2
 8006034:	643b      	str	r3, [r7, #64]	; 0x40
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	011a      	lsls	r2, r3, #4
 800603e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006040:	4413      	add	r3, r2
 8006042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	b29a      	uxth	r2, r3
 800604e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006052:	463b      	mov	r3, r7
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6959      	ldr	r1, [r3, #20]
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	b29b      	uxth	r3, r3
 8006068:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800606c:	1d38      	adds	r0, r7, #4
 800606e:	6800      	ldr	r0, [r0, #0]
 8006070:	f001 f89d 	bl	80071ae <USB_WritePMA>
 8006074:	e36c      	b.n	8006750 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	463b      	mov	r3, r7
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	463b      	mov	r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	441a      	add	r2, r3
 80060ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d8:	4413      	add	r3, r2
 80060da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	011a      	lsls	r2, r3, #4
 80060e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	891b      	ldrh	r3, [r3, #8]
 80060fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6959      	ldr	r1, [r3, #20]
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	b29b      	uxth	r3, r3
 800610e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006112:	1d38      	adds	r0, r7, #4
 8006114:	6800      	ldr	r0, [r0, #0]
 8006116:	f001 f84a 	bl	80071ae <USB_WritePMA>
 800611a:	e319      	b.n	8006750 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800613a:	1d3b      	adds	r3, r7, #4
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006154:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616a:	1ad2      	subs	r2, r2, r3
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8162 	beq.w	8006452 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d164      	bne.n	800626a <USB_EPStartXfer+0x926>
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b4:	4413      	add	r3, r2
 80061b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	011a      	lsls	r2, r3, #4
 80061c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c8:	677b      	str	r3, [r7, #116]	; 0x74
 80061ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d112      	bne.n	80061f8 <USB_EPStartXfer+0x8b4>
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e057      	b.n	80062a8 <USB_EPStartXfer+0x964>
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fc:	2b3e      	cmp	r3, #62	; 0x3e
 80061fe:	d817      	bhi.n	8006230 <USB_EPStartXfer+0x8ec>
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800620a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <USB_EPStartXfer+0x8dc>
 8006216:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800621a:	3301      	adds	r3, #1
 800621c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e03b      	b.n	80062a8 <USB_EPStartXfer+0x964>
 8006230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USB_EPStartXfer+0x90c>
 8006246:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800624a:	3b01      	subs	r3, #1
 800624c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006250:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006254:	b29b      	uxth	r3, r3
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	b29b      	uxth	r3, r3
 800625a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006262:	b29a      	uxth	r2, r3
 8006264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	e01e      	b.n	80062a8 <USB_EPStartXfer+0x964>
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d119      	bne.n	80062a8 <USB_EPStartXfer+0x964>
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006296:	4413      	add	r3, r2
 8006298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800629c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800629e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	895b      	ldrh	r3, [r3, #10]
 80062ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6959      	ldr	r1, [r3, #20]
 80062b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062c2:	1d38      	adds	r0, r7, #4
 80062c4:	6800      	ldr	r0, [r0, #0]
 80062c6:	f000 ff72 	bl	80071ae <USB_WritePMA>
          ep->xfer_buff += len;
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d4:	441a      	add	r2, r3
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d909      	bls.n	8006300 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	621a      	str	r2, [r3, #32]
 80062fe:	e008      	b.n	8006312 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006300:	463b      	mov	r3, r7
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 821a 	beq.w	8006750 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d164      	bne.n	80063f0 <USB_EPStartXfer+0xaac>
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	66bb      	str	r3, [r7, #104]	; 0x68
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800633a:	4413      	add	r3, r2
 800633c:	66bb      	str	r3, [r7, #104]	; 0x68
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006348:	4413      	add	r3, r2
 800634a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800634e:	667b      	str	r3, [r7, #100]	; 0x64
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d112      	bne.n	800637e <USB_EPStartXfer+0xa3a>
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006362:	b29a      	uxth	r2, r3
 8006364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e057      	b.n	800642e <USB_EPStartXfer+0xaea>
 800637e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006382:	2b3e      	cmp	r3, #62	; 0x3e
 8006384:	d817      	bhi.n	80063b6 <USB_EPStartXfer+0xa72>
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <USB_EPStartXfer+0xa62>
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e03b      	b.n	800642e <USB_EPStartXfer+0xaea>
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <USB_EPStartXfer+0xa92>
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d0:	3b01      	subs	r3, #1
 80063d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e01e      	b.n	800642e <USB_EPStartXfer+0xaea>
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d119      	bne.n	800642e <USB_EPStartXfer+0xaea>
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800640e:	4413      	add	r3, r2
 8006410:	673b      	str	r3, [r7, #112]	; 0x70
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800641c:	4413      	add	r3, r2
 800641e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	b29a      	uxth	r2, r3
 800642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	891b      	ldrh	r3, [r3, #8]
 8006434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6959      	ldr	r1, [r3, #20]
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	b29b      	uxth	r3, r3
 8006444:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006448:	1d38      	adds	r0, r7, #4
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	f000 feaf 	bl	80071ae <USB_WritePMA>
 8006450:	e17e      	b.n	8006750 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d16f      	bne.n	800653c <USB_EPStartXfer+0xbf8>
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006486:	4413      	add	r3, r2
 8006488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <USB_EPStartXfer+0xb82>
 8006498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e05f      	b.n	8006586 <USB_EPStartXfer+0xc42>
 80064c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ca:	2b3e      	cmp	r3, #62	; 0x3e
 80064cc:	d818      	bhi.n	8006500 <USB_EPStartXfer+0xbbc>
 80064ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <USB_EPStartXfer+0xbaa>
 80064e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064e8:	3301      	adds	r3, #1
 80064ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e042      	b.n	8006586 <USB_EPStartXfer+0xc42>
 8006500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800650a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USB_EPStartXfer+0xbdc>
 8006516:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800651a:	3b01      	subs	r3, #1
 800651c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006524:	b29b      	uxth	r3, r3
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006532:	b29a      	uxth	r2, r3
 8006534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e024      	b.n	8006586 <USB_EPStartXfer+0xc42>
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d11f      	bne.n	8006586 <USB_EPStartXfer+0xc42>
 8006546:	1d3b      	adds	r3, r7, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800654e:	1d3b      	adds	r3, r7, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800655e:	4413      	add	r3, r2
 8006560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	011a      	lsls	r2, r3, #4
 800656c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006570:	4413      	add	r3, r2
 8006572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800657a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006584:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	891b      	ldrh	r3, [r3, #8]
 800658c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6959      	ldr	r1, [r3, #20]
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	b29b      	uxth	r3, r3
 800659c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065a0:	1d38      	adds	r0, r7, #4
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	f000 fe03 	bl	80071ae <USB_WritePMA>
          ep->xfer_buff += len;
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	441a      	add	r2, r3
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d909      	bls.n	80065de <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	621a      	str	r2, [r3, #32]
 80065dc:	e008      	b.n	80065f0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2200      	movs	r2, #0
 80065ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80065f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80ab 	beq.w	8006750 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d16f      	bne.n	80066ec <USB_EPStartXfer+0xda8>
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006624:	4413      	add	r3, r2
 8006626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006636:	4413      	add	r3, r2
 8006638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <USB_EPStartXfer+0xd32>
 8006648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666c:	b29a      	uxth	r2, r3
 800666e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	e05b      	b.n	800672e <USB_EPStartXfer+0xdea>
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	2b3e      	cmp	r3, #62	; 0x3e
 800667c:	d818      	bhi.n	80066b0 <USB_EPStartXfer+0xd6c>
 800667e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <USB_EPStartXfer+0xd5a>
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800669e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e03e      	b.n	800672e <USB_EPStartXfer+0xdea>
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <USB_EPStartXfer+0xd8c>
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ca:	3b01      	subs	r3, #1
 80066cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e020      	b.n	800672e <USB_EPStartXfer+0xdea>
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d11b      	bne.n	800672e <USB_EPStartXfer+0xdea>
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006706:	4413      	add	r3, r2
 8006708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800670c:	463b      	mov	r3, r7
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	011a      	lsls	r2, r3, #4
 8006714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006718:	4413      	add	r3, r2
 800671a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800671e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	895b      	ldrh	r3, [r3, #10]
 8006734:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006738:	463b      	mov	r3, r7
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6959      	ldr	r1, [r3, #20]
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	b29b      	uxth	r3, r3
 8006744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006748:	1d38      	adds	r0, r7, #4
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	f000 fd2f 	bl	80071ae <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	463b      	mov	r3, r7
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f107 020a 	add.w	r2, r7, #10
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	8013      	strh	r3, [r2, #0]
 8006770:	f107 030a 	add.w	r3, r7, #10
 8006774:	f107 020a 	add.w	r2, r7, #10
 8006778:	8812      	ldrh	r2, [r2, #0]
 800677a:	f082 0210 	eor.w	r2, r2, #16
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	f107 030a 	add.w	r3, r7, #10
 8006784:	f107 020a 	add.w	r2, r7, #10
 8006788:	8812      	ldrh	r2, [r2, #0]
 800678a:	f082 0220 	eor.w	r2, r2, #32
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	463b      	mov	r3, r7
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	f107 030a 	add.w	r3, r7, #10
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	8013      	strh	r3, [r2, #0]
 80067b8:	e3b5      	b.n	8006f26 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8090 	bne.w	80068e6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067c6:	463b      	mov	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d90e      	bls.n	80067f4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	619a      	str	r2, [r3, #24]
 80067f2:	e008      	b.n	8006806 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006816:	b29b      	uxth	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800681e:	4413      	add	r3, r2
 8006820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006824:	463b      	mov	r3, r7
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	011a      	lsls	r2, r3, #4
 800682c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006830:	4413      	add	r3, r2
 8006832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800683a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d116      	bne.n	8006870 <USB_EPStartXfer+0xf2c>
 8006842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800684e:	b29a      	uxth	r2, r3
 8006850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e32c      	b.n	8006eca <USB_EPStartXfer+0x1586>
 8006870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006874:	2b3e      	cmp	r3, #62	; 0x3e
 8006876:	d818      	bhi.n	80068aa <USB_EPStartXfer+0xf66>
 8006878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <USB_EPStartXfer+0xf54>
 800688e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006892:	3301      	adds	r3, #1
 8006894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800689c:	b29b      	uxth	r3, r3
 800689e:	029b      	lsls	r3, r3, #10
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e30f      	b.n	8006eca <USB_EPStartXfer+0x1586>
 80068aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <USB_EPStartXfer+0xf86>
 80068c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c4:	3b01      	subs	r3, #1
 80068c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e2f1      	b.n	8006eca <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	f040 818f 	bne.w	8006c10 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d175      	bne.n	80069e8 <USB_EPStartXfer+0x10a4>
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006914:	4413      	add	r3, r2
 8006916:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	011a      	lsls	r2, r3, #4
 8006922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006926:	4413      	add	r3, r2
 8006928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800692c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d116      	bne.n	8006968 <USB_EPStartXfer+0x1024>
 800693a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	e065      	b.n	8006a34 <USB_EPStartXfer+0x10f0>
 8006968:	463b      	mov	r3, r7
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b3e      	cmp	r3, #62	; 0x3e
 8006970:	d81a      	bhi.n	80069a8 <USB_EPStartXfer+0x1064>
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800697e:	463b      	mov	r3, r7
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <USB_EPStartXfer+0x1052>
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006990:	3301      	adds	r3, #1
 8006992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e045      	b.n	8006a34 <USB_EPStartXfer+0x10f0>
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <USB_EPStartXfer+0x1088>
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e025      	b.n	8006a34 <USB_EPStartXfer+0x10f0>
 80069e8:	463b      	mov	r3, r7
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d120      	bne.n	8006a34 <USB_EPStartXfer+0x10f0>
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	011a      	lsls	r2, r3, #4
 8006a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a26:	463b      	mov	r3, r7
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d175      	bne.n	8006b32 <USB_EPStartXfer+0x11ee>
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a5e:	4413      	add	r3, r2
 8006a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a64:	463b      	mov	r3, r7
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	011a      	lsls	r2, r3, #4
 8006a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a70:	4413      	add	r3, r2
 8006a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d116      	bne.n	8006ab2 <USB_EPStartXfer+0x116e>
 8006a84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a96:	801a      	strh	r2, [r3, #0]
 8006a98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e061      	b.n	8006b76 <USB_EPStartXfer+0x1232>
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aba:	d81a      	bhi.n	8006af2 <USB_EPStartXfer+0x11ae>
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <USB_EPStartXfer+0x119c>
 8006ad6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ada:	3301      	adds	r3, #1
 8006adc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ae0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	029b      	lsls	r3, r3, #10
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e041      	b.n	8006b76 <USB_EPStartXfer+0x1232>
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <USB_EPStartXfer+0x11d2>
 8006b0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b10:	3b01      	subs	r3, #1
 8006b12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	029b      	lsls	r3, r3, #10
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e021      	b.n	8006b76 <USB_EPStartXfer+0x1232>
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d11c      	bne.n	8006b76 <USB_EPStartXfer+0x1232>
 8006b3c:	1d3b      	adds	r3, r7, #4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b68:	463b      	mov	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 81a4 	beq.w	8006eca <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <USB_EPStartXfer+0x126a>
 8006ba2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10d      	bne.n	8006bca <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8187 	bne.w	8006eca <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 8180 	bne.w	8006eca <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	463b      	mov	r3, r7
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
 8006c0e:	e15c      	b.n	8006eca <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	f040 8155 	bne.w	8006ec6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d90e      	bls.n	8006c4a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	619a      	str	r2, [r3, #24]
 8006c48:	e008      	b.n	8006c5c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006c54:	463b      	mov	r3, r7
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d16f      	bne.n	8006d46 <USB_EPStartXfer+0x1402>
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c6e:	1d3b      	adds	r3, r7, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c7e:	4413      	add	r3, r2
 8006c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	011a      	lsls	r2, r3, #4
 8006c8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c90:	4413      	add	r3, r2
 8006c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d116      	bne.n	8006cd0 <USB_EPStartXfer+0x138c>
 8006ca2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e05f      	b.n	8006d90 <USB_EPStartXfer+0x144c>
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd6:	d818      	bhi.n	8006d0a <USB_EPStartXfer+0x13c6>
 8006cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <USB_EPStartXfer+0x13b4>
 8006cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	e042      	b.n	8006d90 <USB_EPStartXfer+0x144c>
 8006d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <USB_EPStartXfer+0x13e6>
 8006d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d24:	3b01      	subs	r3, #1
 8006d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e024      	b.n	8006d90 <USB_EPStartXfer+0x144c>
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d11f      	bne.n	8006d90 <USB_EPStartXfer+0x144c>
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d58:	1d3b      	adds	r3, r7, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	4413      	add	r3, r2
 8006d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	011a      	lsls	r2, r3, #4
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	1d3b      	adds	r3, r7, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d16f      	bne.n	8006e82 <USB_EPStartXfer+0x153e>
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	011a      	lsls	r2, r3, #4
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d116      	bne.n	8006e0c <USB_EPStartXfer+0x14c8>
 8006dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e05e      	b.n	8006eca <USB_EPStartXfer+0x1586>
 8006e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e10:	2b3e      	cmp	r3, #62	; 0x3e
 8006e12:	d818      	bhi.n	8006e46 <USB_EPStartXfer+0x1502>
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <USB_EPStartXfer+0x14f0>
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e041      	b.n	8006eca <USB_EPStartXfer+0x1586>
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <USB_EPStartXfer+0x1522>
 8006e5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e60:	3b01      	subs	r3, #1
 8006e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e023      	b.n	8006eca <USB_EPStartXfer+0x1586>
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11e      	bne.n	8006eca <USB_EPStartXfer+0x1586>
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	011a      	lsls	r2, r3, #4
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e001      	b.n	8006eca <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e02e      	b.n	8006f28 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	463b      	mov	r3, r7
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ee8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ef0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ef4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ef8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006efc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	463b      	mov	r3, r7
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d020      	beq.n	8006f86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5a:	81bb      	strh	r3, [r7, #12]
 8006f5c:	89bb      	ldrh	r3, [r7, #12]
 8006f5e:	f083 0310 	eor.w	r3, r3, #16
 8006f62:	81bb      	strh	r3, [r7, #12]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
 8006f84:	e01f      	b.n	8006fc6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	81fb      	strh	r3, [r7, #14]
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fa4:	81fb      	strh	r3, [r7, #14]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	89fb      	ldrh	r3, [r7, #14]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr

08006fd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	7b1b      	ldrb	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 809d 	bne.w	8007120 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d04c      	beq.n	8007088 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	823b      	strh	r3, [r7, #16]
 8006ffc:	8a3b      	ldrh	r3, [r7, #16]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01b      	beq.n	800703e <USB_EPClearStall+0x6c>
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701c:	81fb      	strh	r3, [r7, #14]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	89fb      	ldrh	r3, [r7, #14]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d06c      	beq.n	8007120 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705c:	81bb      	strh	r3, [r7, #12]
 800705e:	89bb      	ldrh	r3, [r7, #12]
 8007060:	f083 0320 	eor.w	r3, r3, #32
 8007064:	81bb      	strh	r3, [r7, #12]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	89bb      	ldrh	r3, [r7, #12]
 8007072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007082:	b29b      	uxth	r3, r3
 8007084:	8013      	strh	r3, [r2, #0]
 8007086:	e04b      	b.n	8007120 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	82fb      	strh	r3, [r7, #22]
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01b      	beq.n	80070d8 <USB_EPClearStall+0x106>
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	82bb      	strh	r3, [r7, #20]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	8abb      	ldrh	r3, [r7, #20]
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	827b      	strh	r3, [r7, #18]
 80070f0:	8a7b      	ldrh	r3, [r7, #18]
 80070f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070f6:	827b      	strh	r3, [r7, #18]
 80070f8:	8a7b      	ldrh	r3, [r7, #18]
 80070fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070fe:	827b      	strh	r3, [r7, #18]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	441a      	add	r2, r3
 800710a:	8a7b      	ldrh	r3, [r7, #18]
 800710c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711c:	b29b      	uxth	r3, r3
 800711e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr

0800712c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007188:	b29b      	uxth	r3, r3
 800718a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800718c:	68fb      	ldr	r3, [r7, #12]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b08d      	sub	sp, #52	; 0x34
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	4611      	mov	r1, r2
 80071ba:	461a      	mov	r2, r3
 80071bc:	460b      	mov	r3, r1
 80071be:	80fb      	strh	r3, [r7, #6]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071c4:	88bb      	ldrh	r3, [r7, #4]
 80071c6:	3301      	adds	r3, #1
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	005a      	lsls	r2, r3, #1
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e6:	e01e      	b.n	8007226 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	3301      	adds	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	b29a      	uxth	r2, r3
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	3302      	adds	r3, #2
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	3302      	adds	r3, #2
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	3301      	adds	r3, #1
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	3b01      	subs	r3, #1
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1dd      	bne.n	80071e8 <USB_WritePMA+0x3a>
  }
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3734      	adds	r7, #52	; 0x34
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007238:	b480      	push	{r7}
 800723a:	b08b      	sub	sp, #44	; 0x2c
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4611      	mov	r1, r2
 8007244:	461a      	mov	r2, r3
 8007246:	460b      	mov	r3, r1
 8007248:	80fb      	strh	r3, [r7, #6]
 800724a:	4613      	mov	r3, r2
 800724c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800724e:	88bb      	ldrh	r3, [r7, #4]
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	005a      	lsls	r2, r3, #1
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800726a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
 8007270:	e01b      	b.n	80072aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	3302      	adds	r3, #2
 800727e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	b2da      	uxtb	r2, r3
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3301      	adds	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	3302      	adds	r3, #2
 80072a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	3b01      	subs	r3, #1
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e0      	bne.n	8007272 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80072b0:	88bb      	ldrh	r3, [r7, #4]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	701a      	strb	r2, [r3, #0]
  }
}
 80072cc:	bf00      	nop
 80072ce:	372c      	adds	r7, #44	; 0x2c
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7c1b      	ldrb	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d115      	bne.n	800731a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f2:	2202      	movs	r2, #2
 80072f4:	2181      	movs	r1, #129	; 0x81
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 ff0f 	bl	800911a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007306:	2202      	movs	r2, #2
 8007308:	2101      	movs	r1, #1
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 ff05 	bl	800911a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007318:	e012      	b.n	8007340 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800731a:	2340      	movs	r3, #64	; 0x40
 800731c:	2202      	movs	r2, #2
 800731e:	2181      	movs	r1, #129	; 0x81
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fefa 	bl	800911a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	2202      	movs	r2, #2
 8007330:	2101      	movs	r1, #1
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fef1 	bl	800911a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007340:	2308      	movs	r3, #8
 8007342:	2203      	movs	r2, #3
 8007344:	2182      	movs	r1, #130	; 0x82
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fee7 	bl	800911a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007352:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007356:	f002 f807 	bl	8009368 <USBD_static_malloc>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
 8007370:	e026      	b.n	80073c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7c1b      	ldrb	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d109      	bne.n	80073b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a6:	2101      	movs	r1, #1
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 ffa7 	bl	80092fc <USBD_LL_PrepareReceive>
 80073ae:	e007      	b.n	80073c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	2101      	movs	r1, #1
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 ff9e 	bl	80092fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073da:	2181      	movs	r1, #129	; 0x81
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fec2 	bl	8009166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 febb 	bl	8009166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073f8:	2182      	movs	r1, #130	; 0x82
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 feb3 	bl	8009166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007420:	4618      	mov	r0, r3
 8007422:	f001 ffad 	bl	8009380 <USBD_static_free>
    pdev->pClassData = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007448:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800745e:	2b00      	cmp	r3, #0
 8007460:	d039      	beq.n	80074d6 <USBD_CDC_Setup+0x9e>
 8007462:	2b20      	cmp	r3, #32
 8007464:	d17f      	bne.n	8007566 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d029      	beq.n	80074c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	da11      	bge.n	800749c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007484:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	88d2      	ldrh	r2, [r2, #6]
 800748a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800748c:	6939      	ldr	r1, [r7, #16]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	88db      	ldrh	r3, [r3, #6]
 8007492:	461a      	mov	r2, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 fa0a 	bl	80088ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800749a:	e06b      	b.n	8007574 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785a      	ldrb	r2, [r3, #1]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074b2:	6939      	ldr	r1, [r7, #16]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	88db      	ldrh	r3, [r3, #6]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fa25 	bl	800890a <USBD_CtlPrepareRx>
      break;
 80074c0:	e058      	b.n	8007574 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	7850      	ldrb	r0, [r2, #1]
 80074ce:	2200      	movs	r2, #0
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	4798      	blx	r3
      break;
 80074d4:	e04e      	b.n	8007574 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b0b      	cmp	r3, #11
 80074dc:	d02e      	beq.n	800753c <USBD_CDC_Setup+0x104>
 80074de:	2b0b      	cmp	r3, #11
 80074e0:	dc38      	bgt.n	8007554 <USBD_CDC_Setup+0x11c>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <USBD_CDC_Setup+0xb4>
 80074e6:	2b0a      	cmp	r3, #10
 80074e8:	d014      	beq.n	8007514 <USBD_CDC_Setup+0xdc>
 80074ea:	e033      	b.n	8007554 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d107      	bne.n	8007506 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	2202      	movs	r2, #2
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f9d5 	bl	80088ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007504:	e02e      	b.n	8007564 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f966 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	75fb      	strb	r3, [r7, #23]
          break;
 8007512:	e027      	b.n	8007564 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	2b03      	cmp	r3, #3
 800751c:	d107      	bne.n	800752e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800751e:	f107 030f 	add.w	r3, r7, #15
 8007522:	2201      	movs	r2, #1
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f9c1 	bl	80088ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800752c:	e01a      	b.n	8007564 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f952 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	75fb      	strb	r3, [r7, #23]
          break;
 800753a:	e013      	b.n	8007564 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	2b03      	cmp	r3, #3
 8007544:	d00d      	beq.n	8007562 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 f946 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 800754e:	2302      	movs	r3, #2
 8007550:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007552:	e006      	b.n	8007562 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f93f 	bl	80087da <USBD_CtlError>
          ret = USBD_FAIL;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
          break;
 8007560:	e000      	b.n	8007564 <USBD_CDC_Setup+0x12c>
          break;
 8007562:	bf00      	nop
      }
      break;
 8007564:	e006      	b.n	8007574 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f936 	bl	80087da <USBD_CtlError>
      ret = USBD_FAIL;
 800756e:	2302      	movs	r3, #2
 8007570:	75fb      	strb	r3, [r7, #23]
      break;
 8007572:	bf00      	nop
  }

  return ret;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007598:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d03a      	beq.n	800761a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	331c      	adds	r3, #28
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d029      	beq.n	800760e <USBD_CDC_DataIn+0x90>
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	331c      	adds	r3, #28
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	78f9      	ldrb	r1, [r7, #3]
 80075ce:	68b8      	ldr	r0, [r7, #8]
 80075d0:	460b      	mov	r3, r1
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4403      	add	r3, r0
 80075da:	3338      	adds	r3, #56	; 0x38
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	fbb2 f1f3 	udiv	r1, r2, r3
 80075e2:	fb03 f301 	mul.w	r3, r3, r1
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d110      	bne.n	800760e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	331c      	adds	r3, #28
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007600:	78f9      	ldrb	r1, [r7, #3]
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fe55 	bl	80092b6 <USBD_LL_Transmit>
 800760c:	e003      	b.n	8007616 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fe80 	bl	8009342 <USBD_LL_GetRxDataSize>
 8007642:	4602      	mov	r2, r0
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00d      	beq.n	8007670 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007668:	4611      	mov	r1, r2
 800766a:	4798      	blx	r3

    return USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007690:	2b00      	cmp	r3, #0
 8007692:	d015      	beq.n	80076c0 <USBD_CDC_EP0_RxReady+0x46>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800769a:	2bff      	cmp	r3, #255	; 0xff
 800769c:	d010      	beq.n	80076c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076b4:	b292      	uxth	r2, r2
 80076b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2243      	movs	r2, #67	; 0x43
 80076d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80076da:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000194 	.word	0x20000194

080076ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2243      	movs	r2, #67	; 0x43
 80076f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000150 	.word	0x20000150

0800770c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2243      	movs	r2, #67	; 0x43
 8007718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800771a:	4b03      	ldr	r3, [pc, #12]	; (8007728 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	200001d8 	.word	0x200001d8

0800772c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	220a      	movs	r2, #10
 8007738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	2000010c 	.word	0x2000010c

0800774c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007756:	2302      	movs	r3, #2
 8007758:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr

080077d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01c      	beq.n	8007824 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d115      	bne.n	8007820 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007812:	b29b      	uxth	r3, r3
 8007814:	2181      	movs	r1, #129	; 0x81
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fd4d 	bl	80092b6 <USBD_LL_Transmit>

      return USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e002      	b.n	8007826 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d017      	beq.n	8007878 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7c1b      	ldrb	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800785a:	2101      	movs	r1, #1
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fd4d 	bl	80092fc <USBD_LL_PrepareReceive>
 8007862:	e007      	b.n	8007874 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	2101      	movs	r1, #1
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fd44 	bl	80092fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e000      	b.n	800787a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	4613      	mov	r3, r2
 800788e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007896:	2302      	movs	r3, #2
 8007898:	e01a      	b.n	80078d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	79fa      	ldrb	r2, [r7, #7]
 80078c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f001 fbb1 	bl	8009030 <USBD_LL_Init>

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
 80078f8:	e001      	b.n	80078fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fbe6 	bl	80090e4 <USBD_LL_Start>

  return USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007942:	2302      	movs	r3, #2
 8007944:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	4611      	mov	r1, r2
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	4611      	mov	r1, r2
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4798      	blx	r3

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fed8 	bl	8008762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d016      	beq.n	8007a04 <USBD_LL_SetupStage+0x6a>
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d81c      	bhi.n	8007a14 <USBD_LL_SetupStage+0x7a>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <USBD_LL_SetupStage+0x4a>
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d008      	beq.n	80079f4 <USBD_LL_SetupStage+0x5a>
 80079e2:	e017      	b.n	8007a14 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9cb 	bl	8007d88 <USBD_StdDevReq>
      break;
 80079f2:	e01a      	b.n	8007a2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa2d 	bl	8007e5c <USBD_StdItfReq>
      break;
 8007a02:	e012      	b.n	8007a2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa6d 	bl	8007eec <USBD_StdEPReq>
      break;
 8007a12:	e00a      	b.n	8007a2a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fbbe 	bl	80091a4 <USBD_LL_StallEP>
      break;
 8007a28:	bf00      	nop
  }

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d14b      	bne.n	8007ae0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d134      	bne.n	8007ac4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d919      	bls.n	8007a9a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d203      	bcs.n	8007a88 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	e002      	b.n	8007a8e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 ff57 	bl	8008946 <USBD_CtlContinueRx>
 8007a98:	e038      	b.n	8007b0c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d105      	bne.n	8007abc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 ff54 	bl	800896a <USBD_CtlSendStatus>
 8007ac2:	e023      	b.n	8007b0c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d11e      	bne.n	8007b0c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f001 fb63 	bl	80091a4 <USBD_LL_StallEP>
 8007ade:	e015      	b.n	8007b0c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d108      	bne.n	8007b08 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	7afa      	ldrb	r2, [r7, #11]
 8007b00:	4611      	mov	r1, r2
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	4798      	blx	r3
 8007b06:	e001      	b.n	8007b0c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e000      	b.n	8007b0e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d17f      	bne.n	8007c2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d15c      	bne.n	8007bf4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d915      	bls.n	8007b72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fec1 	bl	80088e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fbc6 	bl	80092fc <USBD_LL_PrepareReceive>
 8007b70:	e04e      	b.n	8007c10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	6912      	ldr	r2, [r2, #16]
 8007b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b7e:	fb02 f201 	mul.w	r2, r2, r1
 8007b82:	1a9b      	subs	r3, r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11c      	bne.n	8007bc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d316      	bcc.n	8007bc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d20f      	bcs.n	8007bc2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fe9d 	bl	80088e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 fb9e 	bl	80092fc <USBD_LL_PrepareReceive>
 8007bc0:	e026      	b.n	8007c10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d105      	bne.n	8007be4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f001 fadc 	bl	80091a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fecf 	bl	8008990 <USBD_CtlReceiveStatus>
 8007bf2:	e00d      	b.n	8007c10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d004      	beq.n	8007c08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 faca 	bl	80091a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d11d      	bne.n	8007c56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff fe81 	bl	8007922 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c28:	e015      	b.n	8007c56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d108      	bne.n	8007c52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	4798      	blx	r3
 8007c50:	e001      	b.n	8007c56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c52:	2302      	movs	r3, #2
 8007c54:	e000      	b.n	8007c58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fa53 	bl	800911a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2240      	movs	r2, #64	; 0x40
 8007c80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	2200      	movs	r2, #0
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fa45 	bl	800911a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2240      	movs	r2, #64	; 0x40
 8007c9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6852      	ldr	r2, [r2, #4]
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2204      	movs	r2, #4
 8007d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d105      	bne.n	8007d46 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d10b      	bne.n	8007d7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d005      	beq.n	8007dae <USBD_StdDevReq+0x26>
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d84f      	bhi.n	8007e46 <USBD_StdDevReq+0xbe>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <USBD_StdDevReq+0x36>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d14b      	bne.n	8007e46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
      break;
 8007dbc:	e048      	b.n	8007e50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d839      	bhi.n	8007e3a <USBD_StdDevReq+0xb2>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <USBD_StdDevReq+0x44>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e1d 	.word	0x08007e1d
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	08007e3b 	.word	0x08007e3b
 8007dd8:	08007e27 	.word	0x08007e27
 8007ddc:	08007e3b 	.word	0x08007e3b
 8007de0:	08007dff 	.word	0x08007dff
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007e3b 	.word	0x08007e3b
 8007dec:	08007e13 	.word	0x08007e13
 8007df0:	08007e09 	.word	0x08007e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9dc 	bl	80081b4 <USBD_GetDescriptor>
          break;
 8007dfc:	e022      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb3f 	bl	8008484 <USBD_SetAddress>
          break;
 8007e06:	e01d      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb7e 	bl	800850c <USBD_SetConfig>
          break;
 8007e10:	e018      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fc07 	bl	8008628 <USBD_GetConfig>
          break;
 8007e1a:	e013      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fc37 	bl	8008692 <USBD_GetStatus>
          break;
 8007e24:	e00e      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc65 	bl	80086f8 <USBD_SetFeature>
          break;
 8007e2e:	e009      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc74 	bl	8008720 <USBD_ClrFeature>
          break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fccc 	bl	80087da <USBD_CtlError>
          break;
 8007e42:	bf00      	nop
      }
      break;
 8007e44:	e004      	b.n	8007e50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fcc6 	bl	80087da <USBD_CtlError>
      break;
 8007e4e:	bf00      	nop
  }

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop

08007e5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d005      	beq.n	8007e82 <USBD_StdItfReq+0x26>
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d82e      	bhi.n	8007ed8 <USBD_StdItfReq+0x7c>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <USBD_StdItfReq+0x26>
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d12a      	bne.n	8007ed8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d81d      	bhi.n	8007eca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d813      	bhi.n	8007ec0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d110      	bne.n	8007ed4 <USBD_StdItfReq+0x78>
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fd56 	bl	800896a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ebe:	e009      	b.n	8007ed4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc89 	bl	80087da <USBD_CtlError>
          break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc84 	bl	80087da <USBD_CtlError>
          break;
 8007ed2:	e000      	b.n	8007ed6 <USBD_StdItfReq+0x7a>
          break;
 8007ed4:	bf00      	nop
      }
      break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc7d 	bl	80087da <USBD_CtlError>
      break;
 8007ee0:	bf00      	nop
  }

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d007      	beq.n	8007f1c <USBD_StdEPReq+0x30>
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	f200 8146 	bhi.w	800819e <USBD_StdEPReq+0x2b2>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <USBD_StdEPReq+0x40>
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	f040 8141 	bne.w	800819e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
      break;
 8007f2a:	e13d      	b.n	80081a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d10a      	bne.n	8007f4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	e12d      	b.n	80081aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d007      	beq.n	8007f66 <USBD_StdEPReq+0x7a>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	f300 811b 	bgt.w	8008192 <USBD_StdEPReq+0x2a6>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d072      	beq.n	8008046 <USBD_StdEPReq+0x15a>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d03a      	beq.n	8007fda <USBD_StdEPReq+0xee>
 8007f64:	e115      	b.n	8008192 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d002      	beq.n	8007f76 <USBD_StdEPReq+0x8a>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d015      	beq.n	8007fa0 <USBD_StdEPReq+0xb4>
 8007f74:	e02b      	b.n	8007fce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <USBD_StdEPReq+0xaa>
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b80      	cmp	r3, #128	; 0x80
 8007f80:	d009      	beq.n	8007f96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f90c 	bl	80091a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f8c:	2180      	movs	r1, #128	; 0x80
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 f908 	bl	80091a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e020      	b.n	8007fd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc1e 	bl	80087da <USBD_CtlError>
              break;
 8007f9e:	e01b      	b.n	8007fd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <USBD_StdEPReq+0xda>
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b80      	cmp	r3, #128	; 0x80
 8007fb2:	d008      	beq.n	8007fc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	88db      	ldrh	r3, [r3, #6]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f8ef 	bl	80091a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fccf 	bl	800896a <USBD_CtlSendStatus>

              break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fc02 	bl	80087da <USBD_CtlError>
              break;
 8007fd6:	bf00      	nop
          }
          break;
 8007fd8:	e0e0      	b.n	800819c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d002      	beq.n	8007fea <USBD_StdEPReq+0xfe>
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d015      	beq.n	8008014 <USBD_StdEPReq+0x128>
 8007fe8:	e026      	b.n	8008038 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <USBD_StdEPReq+0x11e>
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d009      	beq.n	800800a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f8d2 	bl	80091a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f8ce 	bl	80091a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008008:	e01c      	b.n	8008044 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fbe4 	bl	80087da <USBD_CtlError>
              break;
 8008012:	e017      	b.n	8008044 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f8d9 	bl	80091e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc9a 	bl	800896a <USBD_CtlSendStatus>
              }
              break;
 8008036:	e004      	b.n	8008042 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbcd 	bl	80087da <USBD_CtlError>
              break;
 8008040:	e000      	b.n	8008044 <USBD_StdEPReq+0x158>
              break;
 8008042:	bf00      	nop
          }
          break;
 8008044:	e0aa      	b.n	800819c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	2b02      	cmp	r3, #2
 800804e:	d002      	beq.n	8008056 <USBD_StdEPReq+0x16a>
 8008050:	2b03      	cmp	r3, #3
 8008052:	d032      	beq.n	80080ba <USBD_StdEPReq+0x1ce>
 8008054:	e097      	b.n	8008186 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d007      	beq.n	800806c <USBD_StdEPReq+0x180>
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b80      	cmp	r3, #128	; 0x80
 8008060:	d004      	beq.n	800806c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fbb8 	bl	80087da <USBD_CtlError>
                break;
 800806a:	e091      	b.n	8008190 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	da0b      	bge.n	800808c <USBD_StdEPReq+0x1a0>
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	3310      	adds	r3, #16
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	e00b      	b.n	80080a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4413      	add	r3, r2
 80080a2:	3304      	adds	r3, #4
 80080a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2202      	movs	r2, #2
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fbfb 	bl	80088ae <USBD_CtlSendData>
              break;
 80080b8:	e06a      	b.n	8008190 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da11      	bge.n	80080e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	f003 020f 	and.w	r2, r3, #15
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	440b      	add	r3, r1
 80080d4:	3318      	adds	r3, #24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d117      	bne.n	800810c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb7b 	bl	80087da <USBD_CtlError>
                  break;
 80080e4:	e054      	b.n	8008190 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fb68 	bl	80087da <USBD_CtlError>
                  break;
 800810a:	e041      	b.n	8008190 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800810c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008110:	2b00      	cmp	r3, #0
 8008112:	da0b      	bge.n	800812c <USBD_StdEPReq+0x240>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3310      	adds	r3, #16
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	e00b      	b.n	8008144 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <USBD_StdEPReq+0x266>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d103      	bne.n	800815a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e00e      	b.n	8008178 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f85e 	bl	8009220 <USBD_LL_IsStallEP>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	e002      	b.n	8008178 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2202      	movs	r2, #2
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fb95 	bl	80088ae <USBD_CtlSendData>
              break;
 8008184:	e004      	b.n	8008190 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb26 	bl	80087da <USBD_CtlError>
              break;
 800818e:	bf00      	nop
          }
          break;
 8008190:	e004      	b.n	800819c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb20 	bl	80087da <USBD_CtlError>
          break;
 800819a:	bf00      	nop
      }
      break;
 800819c:	e004      	b.n	80081a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb1a 	bl	80087da <USBD_CtlError>
      break;
 80081a6:	bf00      	nop
  }

  return ret;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	885b      	ldrh	r3, [r3, #2]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	f200 8128 	bhi.w	800842a <USBD_GetDescriptor+0x276>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USBD_GetDescriptor+0x2c>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008215 	.word	0x08008215
 80081e8:	08008255 	.word	0x08008255
 80081ec:	0800842b 	.word	0x0800842b
 80081f0:	0800842b 	.word	0x0800842b
 80081f4:	080083cb 	.word	0x080083cb
 80081f8:	080083f7 	.word	0x080083f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
      break;
 8008212:	e112      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7c1b      	ldrb	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10d      	bne.n	8008238 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	f107 0208 	add.w	r2, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	2202      	movs	r2, #2
 8008234:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008236:	e100      	b.n	800843a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	f107 0208 	add.w	r2, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3301      	adds	r3, #1
 800824e:	2202      	movs	r2, #2
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	e0f2      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b05      	cmp	r3, #5
 800825c:	f200 80ac 	bhi.w	80083b8 <USBD_GetDescriptor+0x204>
 8008260:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <USBD_GetDescriptor+0xb4>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008281 	.word	0x08008281
 800826c:	080082b5 	.word	0x080082b5
 8008270:	080082e9 	.word	0x080082e9
 8008274:	0800831d 	.word	0x0800831d
 8008278:	08008351 	.word	0x08008351
 800827c:	08008385 	.word	0x08008385
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e091      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa97 	bl	80087da <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e089      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d6:	e077      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa7d 	bl	80087da <USBD_CtlError>
            err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
          break;
 80082e6:	e06f      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830a:	e05d      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa63 	bl	80087da <USBD_CtlError>
            err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
          break;
 800831a:	e055      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	7c12      	ldrb	r2, [r2, #16]
 8008334:	f107 0108 	add.w	r1, r7, #8
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833e:	e043      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa49 	bl	80087da <USBD_CtlError>
            err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
          break;
 800834e:	e03b      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7c12      	ldrb	r2, [r2, #16]
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008372:	e029      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa2f 	bl	80087da <USBD_CtlError>
            err++;
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	3301      	adds	r3, #1
 8008380:	72fb      	strb	r3, [r7, #11]
          break;
 8008382:	e021      	b.n	80083c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a6:	e00f      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa15 	bl	80087da <USBD_CtlError>
            err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
          break;
 80083b6:	e007      	b.n	80083c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa0d 	bl	80087da <USBD_CtlError>
          err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80083c6:	e038      	b.n	800843a <USBD_GetDescriptor+0x286>
 80083c8:	e037      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7c1b      	ldrb	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	f107 0208 	add.w	r2, r7, #8
 80083de:	4610      	mov	r0, r2
 80083e0:	4798      	blx	r3
 80083e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e4:	e029      	b.n	800843a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9f6 	bl	80087da <USBD_CtlError>
        err++;
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	3301      	adds	r3, #1
 80083f2:	72fb      	strb	r3, [r7, #11]
      break;
 80083f4:	e021      	b.n	800843a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10d      	bne.n	800841a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	f107 0208 	add.w	r2, r7, #8
 800840a:	4610      	mov	r0, r2
 800840c:	4798      	blx	r3
 800840e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3301      	adds	r3, #1
 8008414:	2207      	movs	r2, #7
 8008416:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008418:	e00f      	b.n	800843a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9dc 	bl	80087da <USBD_CtlError>
        err++;
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	3301      	adds	r3, #1
 8008426:	72fb      	strb	r3, [r7, #11]
      break;
 8008428:	e007      	b.n	800843a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9d4 	bl	80087da <USBD_CtlError>
      err++;
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	3301      	adds	r3, #1
 8008436:	72fb      	strb	r3, [r7, #11]
      break;
 8008438:	bf00      	nop
  }

  if (err != 0U)
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11c      	bne.n	800847a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008440:	893b      	ldrh	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <USBD_GetDescriptor+0x2b6>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00d      	beq.n	800846a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88da      	ldrh	r2, [r3, #6]
 8008452:	893b      	ldrh	r3, [r7, #8]
 8008454:	4293      	cmp	r3, r2
 8008456:	bf28      	it	cs
 8008458:	4613      	movcs	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800845e:	893b      	ldrh	r3, [r7, #8]
 8008460:	461a      	mov	r2, r3
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa22 	bl	80088ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa79 	bl	800896a <USBD_CtlSendStatus>
 8008478:	e000      	b.n	800847c <USBD_GetDescriptor+0x2c8>
    return;
 800847a:	bf00      	nop
    }
  }
}
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop

08008484 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	889b      	ldrh	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d130      	bne.n	80084f8 <USBD_SetAddress+0x74>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d12c      	bne.n	80084f8 <USBD_SetAddress+0x74>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b7f      	cmp	r3, #127	; 0x7f
 80084a4:	d828      	bhi.n	80084f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d104      	bne.n	80084c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f98b 	bl	80087da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c4:	e01d      	b.n	8008502 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fed0 	bl	8009278 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa46 	bl	800896a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ec:	e009      	b.n	8008502 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	e004      	b.n	8008502 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f96d 	bl	80087da <USBD_CtlError>
  }
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	4b41      	ldr	r3, [pc, #260]	; (8008624 <USBD_SetConfig+0x118>)
 800851e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008520:	4b40      	ldr	r3, [pc, #256]	; (8008624 <USBD_SetConfig+0x118>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d904      	bls.n	8008532 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f955 	bl	80087da <USBD_CtlError>
 8008530:	e075      	b.n	800861e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	2b02      	cmp	r3, #2
 800853a:	d002      	beq.n	8008542 <USBD_SetConfig+0x36>
 800853c:	2b03      	cmp	r3, #3
 800853e:	d023      	beq.n	8008588 <USBD_SetConfig+0x7c>
 8008540:	e062      	b.n	8008608 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008542:	4b38      	ldr	r3, [pc, #224]	; (8008624 <USBD_SetConfig+0x118>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01a      	beq.n	8008580 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800854a:	4b36      	ldr	r3, [pc, #216]	; (8008624 <USBD_SetConfig+0x118>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2203      	movs	r2, #3
 8008558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800855c:	4b31      	ldr	r3, [pc, #196]	; (8008624 <USBD_SetConfig+0x118>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff f9e7 	bl	8007936 <USBD_SetClassConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b02      	cmp	r3, #2
 800856c:	d104      	bne.n	8008578 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f932 	bl	80087da <USBD_CtlError>
            return;
 8008576:	e052      	b.n	800861e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9f6 	bl	800896a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800857e:	e04e      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f9f2 	bl	800896a <USBD_CtlSendStatus>
        break;
 8008586:	e04a      	b.n	800861e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008588:	4b26      	ldr	r3, [pc, #152]	; (8008624 <USBD_SetConfig+0x118>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d112      	bne.n	80085b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008598:	4b22      	ldr	r3, [pc, #136]	; (8008624 <USBD_SetConfig+0x118>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80085a2:	4b20      	ldr	r3, [pc, #128]	; (8008624 <USBD_SetConfig+0x118>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff f9e3 	bl	8007974 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9db 	bl	800896a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085b4:	e033      	b.n	800861e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <USBD_SetConfig+0x118>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d01d      	beq.n	8008600 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff f9d1 	bl	8007974 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <USBD_SetConfig+0x118>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085dc:	4b11      	ldr	r3, [pc, #68]	; (8008624 <USBD_SetConfig+0x118>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff f9a7 	bl	8007936 <USBD_SetClassConfig>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d104      	bne.n	80085f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8f2 	bl	80087da <USBD_CtlError>
            return;
 80085f6:	e012      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9b6 	bl	800896a <USBD_CtlSendStatus>
        break;
 80085fe:	e00e      	b.n	800861e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9b2 	bl	800896a <USBD_CtlSendStatus>
        break;
 8008606:	e00a      	b.n	800861e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8e5 	bl	80087da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008610:	4b04      	ldr	r3, [pc, #16]	; (8008624 <USBD_SetConfig+0x118>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff f9ac 	bl	8007974 <USBD_ClrClassConfig>
        break;
 800861c:	bf00      	nop
    }
  }
}
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200004f5 	.word	0x200004f5

08008628 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d004      	beq.n	8008644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8cc 	bl	80087da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008642:	e022      	b.n	800868a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864a:	2b02      	cmp	r3, #2
 800864c:	dc02      	bgt.n	8008654 <USBD_GetConfig+0x2c>
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc03      	bgt.n	800865a <USBD_GetConfig+0x32>
 8008652:	e015      	b.n	8008680 <USBD_GetConfig+0x58>
 8008654:	2b03      	cmp	r3, #3
 8008656:	d00b      	beq.n	8008670 <USBD_GetConfig+0x48>
 8008658:	e012      	b.n	8008680 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3308      	adds	r3, #8
 8008664:	2201      	movs	r2, #1
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f920 	bl	80088ae <USBD_CtlSendData>
        break;
 800866e:	e00c      	b.n	800868a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	2201      	movs	r2, #1
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f918 	bl	80088ae <USBD_CtlSendData>
        break;
 800867e:	e004      	b.n	800868a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8a9 	bl	80087da <USBD_CtlError>
        break;
 8008688:	bf00      	nop
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	3b01      	subs	r3, #1
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d81e      	bhi.n	80086e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	88db      	ldrh	r3, [r3, #6]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d004      	beq.n	80086ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f891 	bl	80087da <USBD_CtlError>
        break;
 80086b8:	e01a      	b.n	80086f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f043 0202 	orr.w	r2, r3, #2
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	330c      	adds	r3, #12
 80086da:	2202      	movs	r2, #2
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f8e5 	bl	80088ae <USBD_CtlSendData>
      break;
 80086e4:	e004      	b.n	80086f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f876 	bl	80087da <USBD_CtlError>
      break;
 80086ee:	bf00      	nop
  }
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d106      	bne.n	8008718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f929 	bl	800896a <USBD_CtlSendStatus>
  }
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	3b01      	subs	r3, #1
 8008732:	2b02      	cmp	r3, #2
 8008734:	d80b      	bhi.n	800874e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10c      	bne.n	8008758 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f90f 	bl	800896a <USBD_CtlSendStatus>
      }
      break;
 800874c:	e004      	b.n	8008758 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f842 	bl	80087da <USBD_CtlError>
      break;
 8008756:	e000      	b.n	800875a <USBD_ClrFeature+0x3a>
      break;
 8008758:	bf00      	nop
  }
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785a      	ldrb	r2, [r3, #1]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	3302      	adds	r3, #2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	3303      	adds	r3, #3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	b29b      	uxth	r3, r3
 8008790:	4413      	add	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	3304      	adds	r3, #4
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	3305      	adds	r3, #5
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	3306      	adds	r3, #6
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	3307      	adds	r3, #7
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4413      	add	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	80da      	strh	r2, [r3, #6]

}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80087e4:	2180      	movs	r1, #128	; 0x80
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fcdc 	bl	80091a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fcd8 	bl	80091a4 <USBD_LL_StallEP>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d032      	beq.n	8008878 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 f834 	bl	8008880 <USBD_GetLen>
 8008818:	4603      	mov	r3, r0
 800881a:	3301      	adds	r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	75fa      	strb	r2, [r7, #23]
 800882c:	461a      	mov	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	75fa      	strb	r2, [r7, #23]
 800883e:	461a      	mov	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	2203      	movs	r2, #3
 8008846:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008848:	e012      	b.n	8008870 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	60fa      	str	r2, [r7, #12]
 8008850:	7dfa      	ldrb	r2, [r7, #23]
 8008852:	1c51      	adds	r1, r2, #1
 8008854:	75f9      	strb	r1, [r7, #23]
 8008856:	4611      	mov	r1, r2
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	440a      	add	r2, r1
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	75fa      	strb	r2, [r7, #23]
 8008866:	461a      	mov	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4413      	add	r3, r2
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e8      	bne.n	800884a <USBD_GetString+0x4e>
    }
  }
}
 8008878:	bf00      	nop
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800888c:	e005      	b.n	800889a <USBD_GetLen+0x1a>
  {
    len++;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	3301      	adds	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3301      	adds	r3, #1
 8008898:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f5      	bne.n	800888e <USBD_GetLen+0xe>
  }

  return len;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4613      	mov	r3, r2
 80088ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2202      	movs	r2, #2
 80088c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80088ca:	88fa      	ldrh	r2, [r7, #6]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	2100      	movs	r1, #0
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fced 	bl	80092b6 <USBD_LL_Transmit>

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	4613      	mov	r3, r2
 80088f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fcdb 	bl	80092b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	4613      	mov	r3, r2
 8008916:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2203      	movs	r2, #3
 800891c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008928:	88fa      	ldrh	r2, [r7, #6]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	2100      	movs	r1, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fce0 	bl	80092fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	2100      	movs	r1, #0
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fcce 	bl	80092fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2204      	movs	r2, #4
 8008976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800897a:	2300      	movs	r3, #0
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc98 	bl	80092b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2205      	movs	r2, #5
 800899c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fca8 	bl	80092fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089bc:	2200      	movs	r2, #0
 80089be:	4912      	ldr	r1, [pc, #72]	; (8008a08 <MX_USB_DEVICE_Init+0x50>)
 80089c0:	4812      	ldr	r0, [pc, #72]	; (8008a0c <MX_USB_DEVICE_Init+0x54>)
 80089c2:	f7fe ff5e 	bl	8007882 <USBD_Init>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089cc:	f7f7 ff90 	bl	80008f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089d0:	490f      	ldr	r1, [pc, #60]	; (8008a10 <MX_USB_DEVICE_Init+0x58>)
 80089d2:	480e      	ldr	r0, [pc, #56]	; (8008a0c <MX_USB_DEVICE_Init+0x54>)
 80089d4:	f7fe ff80 	bl	80078d8 <USBD_RegisterClass>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089de:	f7f7 ff87 	bl	80008f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089e2:	490c      	ldr	r1, [pc, #48]	; (8008a14 <MX_USB_DEVICE_Init+0x5c>)
 80089e4:	4809      	ldr	r0, [pc, #36]	; (8008a0c <MX_USB_DEVICE_Init+0x54>)
 80089e6:	f7fe feb1 	bl	800774c <USBD_CDC_RegisterInterface>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089f0:	f7f7 ff7e 	bl	80008f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089f4:	4805      	ldr	r0, [pc, #20]	; (8008a0c <MX_USB_DEVICE_Init+0x54>)
 80089f6:	f7fe ff88 	bl	800790a <USBD_Start>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a00:	f7f7 ff76 	bl	80008f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a04:	bf00      	nop
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000022c 	.word	0x2000022c
 8008a0c:	200007c0 	.word	0x200007c0
 8008a10:	20000118 	.word	0x20000118
 8008a14:	2000021c 	.word	0x2000021c

08008a18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4909      	ldr	r1, [pc, #36]	; (8008a44 <CDC_Init_FS+0x2c>)
 8008a20:	4809      	ldr	r0, [pc, #36]	; (8008a48 <CDC_Init_FS+0x30>)
 8008a22:	f7fe fea9 	bl	8007778 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a26:	4909      	ldr	r1, [pc, #36]	; (8008a4c <CDC_Init_FS+0x34>)
 8008a28:	4807      	ldr	r0, [pc, #28]	; (8008a48 <CDC_Init_FS+0x30>)
 8008a2a:	f7fe febe 	bl	80077aa <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 8008a2e:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <CDC_Init_FS+0x30>)
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d101      	bne.n	8008a3c <CDC_Init_FS+0x24>
	  welcome();
 8008a38:	f7f7 fd4c 	bl	80004d4 <welcome>
  }

  return (USBD_OK);
 8008a3c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000e6c 	.word	0x20000e6c
 8008a48:	200007c0 	.word	0x200007c0
 8008a4c:	20000a84 	.word	0x20000a84

08008a50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
	...

08008a60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b23      	cmp	r3, #35	; 0x23
 8008a74:	d84a      	bhi.n	8008b0c <CDC_Control_FS+0xac>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <CDC_Control_FS+0x1c>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008b0d 	.word	0x08008b0d
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b0d 	.word	0x08008b0d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008b0d 	.word	0x08008b0d
 8008a90:	08008b0d 	.word	0x08008b0d
 8008a94:	08008b0d 	.word	0x08008b0d
 8008a98:	08008b0d 	.word	0x08008b0d
 8008a9c:	08008b0d 	.word	0x08008b0d
 8008aa0:	08008b0d 	.word	0x08008b0d
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b0d 	.word	0x08008b0d
 8008ab0:	08008b0d 	.word	0x08008b0d
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008b0d 	.word	0x08008b0d
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b0d 	.word	0x08008b0d
 8008acc:	08008b0d 	.word	0x08008b0d
 8008ad0:	08008b0d 	.word	0x08008b0d
 8008ad4:	08008b0d 	.word	0x08008b0d
 8008ad8:	08008b0d 	.word	0x08008b0d
 8008adc:	08008b0d 	.word	0x08008b0d
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b0d 	.word	0x08008b0d
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b0d 	.word	0x08008b0d
 8008b04:	08008b0d 	.word	0x08008b0d
 8008b08:	08008b0d 	.word	0x08008b0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b0c:	bf00      	nop
  }

  return (USBD_OK);
 8008b0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//	uint32_t start_pos = 0;
	uint8_t  enter = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	e022      	b.n	8008b76 <CDC_Receive_FS+0x5a>
		if( in_usb_buf_pos < USB_BUFFER_LENGTH ) {
 8008b30:	4b35      	ldr	r3, [pc, #212]	; (8008c08 <CDC_Receive_FS+0xec>)
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	2bff      	cmp	r3, #255	; 0xff
 8008b36:	d80c      	bhi.n	8008b52 <CDC_Receive_FS+0x36>
			input_usb_buffer[ in_usb_buf_pos++ ] = Buf[ loop ];
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	4b32      	ldr	r3, [pc, #200]	; (8008c08 <CDC_Receive_FS+0xec>)
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	1c59      	adds	r1, r3, #1
 8008b44:	b288      	uxth	r0, r1
 8008b46:	4930      	ldr	r1, [pc, #192]	; (8008c08 <CDC_Receive_FS+0xec>)
 8008b48:	8008      	strh	r0, [r1, #0]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	4b2f      	ldr	r3, [pc, #188]	; (8008c0c <CDC_Receive_FS+0xf0>)
 8008b50:	545a      	strb	r2, [r3, r1]
		}
		if( Buf[ loop ] == 13 ) {
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	4413      	add	r3, r2
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b0d      	cmp	r3, #13
 8008b5c:	d108      	bne.n	8008b70 <CDC_Receive_FS+0x54>
			input_usb_buffer[ in_usb_buf_pos - 1 ] = ' ';
 8008b5e:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <CDC_Receive_FS+0xec>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a29      	ldr	r2, [pc, #164]	; (8008c0c <CDC_Receive_FS+0xf0>)
 8008b66:	2120      	movs	r1, #32
 8008b68:	54d1      	strb	r1, [r2, r3]
			enter = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	77fb      	strb	r3, [r7, #31]
			break;
 8008b6e:	e007      	b.n	8008b80 <CDC_Receive_FS+0x64>
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61bb      	str	r3, [r7, #24]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d3d7      	bcc.n	8008b30 <CDC_Receive_FS+0x14>
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );

	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fc69 	bl	800945c <malloc>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	e019      	b.n	8008bcc <CDC_Receive_FS+0xb0>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	1c59      	adds	r1, r3, #1
 8008ba2:	6179      	str	r1, [r7, #20]
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	440b      	add	r3, r1
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b0d      	cmp	r3, #13
 8008bb6:	d106      	bne.n	8008bc6 <CDC_Receive_FS+0xaa>
			out_buf[ out_buf_len++ ] = '\n';
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	617a      	str	r2, [r7, #20]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	220a      	movs	r2, #10
 8008bc4:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3e0      	bcc.n	8008b98 <CDC_Receive_FS+0x7c>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 8008bd6:	6979      	ldr	r1, [r7, #20]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7f7 fc6b 	bl	80004b4 <usb_transmit_fs>
	free( out_buf );
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fc44 	bl	800946c <free>
	if( enter > 0 ) {
 8008be4:	7ffb      	ldrb	r3, [r7, #31]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <CDC_Receive_FS+0xd2>
		get_command();
 8008bea:	f7f7 fc97 	bl	800051c <get_command>
	}
//	if( Buf[ 0 ] == '\r' ) {
//		send_prompt();
//	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4807      	ldr	r0, [pc, #28]	; (8008c10 <CDC_Receive_FS+0xf4>)
 8008bf2:	f7fe fdda 	bl	80077aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bf6:	4806      	ldr	r0, [pc, #24]	; (8008c10 <CDC_Receive_FS+0xf4>)
 8008bf8:	f7fe fe19 	bl	800782e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3720      	adds	r7, #32
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	200003fc 	.word	0x200003fc
 8008c0c:	200002fc 	.word	0x200002fc
 8008c10:	200007c0 	.word	0x200007c0

08008c14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c24:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <CDC_Transmit_FS+0x48>)
 8008c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e00b      	b.n	8008c52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c3a:	887b      	ldrh	r3, [r7, #2]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4806      	ldr	r0, [pc, #24]	; (8008c5c <CDC_Transmit_FS+0x48>)
 8008c42:	f7fe fd99 	bl	8007778 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c46:	4805      	ldr	r0, [pc, #20]	; (8008c5c <CDC_Transmit_FS+0x48>)
 8008c48:	f7fe fdc2 	bl	80077d0 <USBD_CDC_TransmitPacket>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200007c0 	.word	0x200007c0

08008c60 <wait_for_CDC_transmit_ready>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void wait_for_CDC_transmit_ready(void) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c66:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <wait_for_CDC_transmit_ready+0x2c>)
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6c:	607b      	str	r3, [r7, #4]
	while( hcdc->TxState != 0 ){
 8008c6e:	e002      	b.n	8008c76 <wait_for_CDC_transmit_ready+0x16>
		HAL_Delay( 1 );
 8008c70:	2001      	movs	r0, #1
 8008c72:	f7f8 f933 	bl	8000edc <HAL_Delay>
	while( hcdc->TxState != 0 ){
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f7      	bne.n	8008c70 <wait_for_CDC_transmit_ready+0x10>
	}
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200007c0 	.word	0x200007c0

08008c90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2212      	movs	r2, #18
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	20000248 	.word	0x20000248

08008cb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000025c 	.word	0x2000025c

08008cd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf0:	f7ff fd84 	bl	80087fc <USBD_GetString>
 8008cf4:	e004      	b.n	8008d00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cfc:	f7ff fd7e 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20001254 	.word	0x20001254
 8008d10:	0800b0a4 	.word	0x0800b0a4

08008d14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	4904      	ldr	r1, [pc, #16]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d24:	4804      	ldr	r0, [pc, #16]	; (8008d38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d26:	f7ff fd69 	bl	80087fc <USBD_GetString>
  return USBD_StrDesc;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20001254 	.word	0x20001254
 8008d38:	0800b0bc 	.word	0x0800b0bc

08008d3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	221a      	movs	r2, #26
 8008d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d4e:	f000 f843 	bl	8008dd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d52:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000260 	.word	0x20000260

08008d60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d105      	bne.n	8008d7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4907      	ldr	r1, [pc, #28]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d76:	4808      	ldr	r0, [pc, #32]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d78:	f7ff fd40 	bl	80087fc <USBD_GetString>
 8008d7c:	e004      	b.n	8008d88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	4904      	ldr	r1, [pc, #16]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d84:	f7ff fd3a 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20001254 	.word	0x20001254
 8008d98:	0800b0d0 	.word	0x0800b0d0

08008d9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4907      	ldr	r1, [pc, #28]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db2:	4808      	ldr	r0, [pc, #32]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db4:	f7ff fd22 	bl	80087fc <USBD_GetString>
 8008db8:	e004      	b.n	8008dc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dc0:	f7ff fd1c 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20001254 	.word	0x20001254
 8008dd4:	0800b0dc 	.word	0x0800b0dc

08008dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <Get_SerialNum+0x44>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <Get_SerialNum+0x48>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <Get_SerialNum+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dfe:	2208      	movs	r2, #8
 8008e00:	4909      	ldr	r1, [pc, #36]	; (8008e28 <Get_SerialNum+0x50>)
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f814 	bl	8008e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e08:	2204      	movs	r2, #4
 8008e0a:	4908      	ldr	r1, [pc, #32]	; (8008e2c <Get_SerialNum+0x54>)
 8008e0c:	68b8      	ldr	r0, [r7, #8]
 8008e0e:	f000 f80f 	bl	8008e30 <IntToUnicode>
  }
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	1ffff7e8 	.word	0x1ffff7e8
 8008e20:	1ffff7ec 	.word	0x1ffff7ec
 8008e24:	1ffff7f0 	.word	0x1ffff7f0
 8008e28:	20000262 	.word	0x20000262
 8008e2c:	20000272 	.word	0x20000272

08008e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e027      	b.n	8008e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d80b      	bhi.n	8008e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	0f1b      	lsrs	r3, r3, #28
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	440b      	add	r3, r1
 8008e60:	3230      	adds	r2, #48	; 0x30
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e00a      	b.n	8008e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	0f1b      	lsrs	r3, r3, #28
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4619      	mov	r1, r3
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	440b      	add	r3, r1
 8008e78:	3237      	adds	r2, #55	; 0x37
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	3301      	adds	r3, #1
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	3301      	adds	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	7dfa      	ldrb	r2, [r7, #23]
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3d3      	bcc.n	8008e48 <IntToUnicode+0x18>
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a0d      	ldr	r2, [pc, #52]	; (8008ef0 <HAL_PCD_MspInit+0x44>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d113      	bne.n	8008ee6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <HAL_PCD_MspInit+0x48>)
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	4a0c      	ldr	r2, [pc, #48]	; (8008ef4 <HAL_PCD_MspInit+0x48>)
 8008ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ec8:	61d3      	str	r3, [r2, #28]
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <HAL_PCD_MspInit+0x48>)
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	2014      	movs	r0, #20
 8008edc:	f7f8 f8f9 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ee0:	2014      	movs	r0, #20
 8008ee2:	f7f8 f912 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40005c00 	.word	0x40005c00
 8008ef4:	40021000 	.word	0x40021000

08008ef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe fd43 	bl	800799a <USBD_LL_SetupStage>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	440b      	add	r3, r1
 8008f3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7fe fd75 	bl	8007a34 <USBD_LL_DataOutStage>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	440b      	add	r3, r1
 8008f72:	333c      	adds	r3, #60	; 0x3c
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7fe fdcc 	bl	8007b16 <USBD_LL_DataInStage>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe fedc 	bl	8007d52 <USBD_LL_SOF>
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008faa:	2301      	movs	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d001      	beq.n	8008fba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fb6:	f7f7 fc9b 	bl	80008f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fc0:	7bfa      	ldrb	r2, [r7, #15]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe fe8c 	bl	8007ce2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe fe45 	bl	8007c60 <USBD_LL_Reset>
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fe86 	bl	8007d00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <HAL_PCD_SuspendCallback+0x30>)
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	4a03      	ldr	r2, [pc, #12]	; (8009010 <HAL_PCD_SuspendCallback+0x30>)
 8009002:	f043 0306 	orr.w	r3, r3, #6
 8009006:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fe80 	bl	8007d28 <USBD_LL_Resume>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009038:	4a28      	ldr	r2, [pc, #160]	; (80090dc <USBD_LL_Init+0xac>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a26      	ldr	r2, [pc, #152]	; (80090dc <USBD_LL_Init+0xac>)
 8009044:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009048:	4b24      	ldr	r3, [pc, #144]	; (80090dc <USBD_LL_Init+0xac>)
 800904a:	4a25      	ldr	r2, [pc, #148]	; (80090e0 <USBD_LL_Init+0xb0>)
 800904c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800904e:	4b23      	ldr	r3, [pc, #140]	; (80090dc <USBD_LL_Init+0xac>)
 8009050:	2208      	movs	r2, #8
 8009052:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009054:	4b21      	ldr	r3, [pc, #132]	; (80090dc <USBD_LL_Init+0xac>)
 8009056:	2202      	movs	r2, #2
 8009058:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <USBD_LL_Init+0xac>)
 800905c:	2200      	movs	r2, #0
 800905e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009060:	4b1e      	ldr	r3, [pc, #120]	; (80090dc <USBD_LL_Init+0xac>)
 8009062:	2200      	movs	r2, #0
 8009064:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009066:	4b1d      	ldr	r3, [pc, #116]	; (80090dc <USBD_LL_Init+0xac>)
 8009068:	2200      	movs	r2, #0
 800906a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800906c:	481b      	ldr	r0, [pc, #108]	; (80090dc <USBD_LL_Init+0xac>)
 800906e:	f7f8 fc0a 	bl	8001886 <HAL_PCD_Init>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009078:	f7f7 fc3a 	bl	80008f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009082:	2318      	movs	r3, #24
 8009084:	2200      	movs	r2, #0
 8009086:	2100      	movs	r1, #0
 8009088:	f7fa f880 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009092:	2358      	movs	r3, #88	; 0x58
 8009094:	2200      	movs	r2, #0
 8009096:	2180      	movs	r1, #128	; 0x80
 8009098:	f7fa f878 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090a2:	23c0      	movs	r3, #192	; 0xc0
 80090a4:	2200      	movs	r2, #0
 80090a6:	2181      	movs	r1, #129	; 0x81
 80090a8:	f7fa f870 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090b6:	2200      	movs	r2, #0
 80090b8:	2101      	movs	r1, #1
 80090ba:	f7fa f867 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c8:	2200      	movs	r2, #0
 80090ca:	2182      	movs	r1, #130	; 0x82
 80090cc:	f7fa f85e 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20001454 	.word	0x20001454
 80090e0:	40005c00 	.word	0x40005c00

080090e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f8 fcce 	bl	8001a9c <HAL_PCD_Start>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f94e 	bl	80093a8 <USBD_Get_USB_Status>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009110:	7bbb      	ldrb	r3, [r7, #14]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	461a      	mov	r2, r3
 8009128:	4603      	mov	r3, r0
 800912a:	70fb      	strb	r3, [r7, #3]
 800912c:	460b      	mov	r3, r1
 800912e:	70bb      	strb	r3, [r7, #2]
 8009130:	4613      	mov	r3, r2
 8009132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009142:	78bb      	ldrb	r3, [r7, #2]
 8009144:	883a      	ldrh	r2, [r7, #0]
 8009146:	78f9      	ldrb	r1, [r7, #3]
 8009148:	f7f8 fe48 	bl	8001ddc <HAL_PCD_EP_Open>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f928 	bl	80093a8 <USBD_Get_USB_Status>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7f8 fe8f 	bl	8001ea8 <HAL_PCD_EP_Close>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f909 	bl	80093a8 <USBD_Get_USB_Status>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919a:	7bbb      	ldrb	r3, [r7, #14]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f8 ff4f 	bl	8002066 <HAL_PCD_EP_SetStall>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f8ea 	bl	80093a8 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f7f8 ff90 	bl	8002126 <HAL_PCD_EP_ClrStall>
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8cb 	bl	80093a8 <USBD_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009238:	2b00      	cmp	r3, #0
 800923a:	da0c      	bge.n	8009256 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	440b      	add	r3, r1
 8009250:	3302      	adds	r3, #2
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	e00b      	b.n	800926e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	440b      	add	r3, r1
 8009268:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800926c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7f8 fd7b 	bl	8001d92 <HAL_PCD_SetAddress>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f880 	bl	80093a8 <USBD_Get_USB_Status>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b086      	sub	sp, #24
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	461a      	mov	r2, r3
 80092c2:	460b      	mov	r3, r1
 80092c4:	72fb      	strb	r3, [r7, #11]
 80092c6:	4613      	mov	r3, r2
 80092c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d8:	893b      	ldrh	r3, [r7, #8]
 80092da:	7af9      	ldrb	r1, [r7, #11]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	f7f8 fe7f 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f85d 	bl	80093a8 <USBD_Get_USB_Status>
 80092ee:	4603      	mov	r3, r0
 80092f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	461a      	mov	r2, r3
 8009308:	460b      	mov	r3, r1
 800930a:	72fb      	strb	r3, [r7, #11]
 800930c:	4613      	mov	r3, r2
 800930e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800931e:	893b      	ldrh	r3, [r7, #8]
 8009320:	7af9      	ldrb	r1, [r7, #11]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	f7f8 fe08 	bl	8001f38 <HAL_PCD_EP_Receive>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f83a 	bl	80093a8 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009338:	7dbb      	ldrb	r3, [r7, #22]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7f8 fe2a 	bl	8001fb2 <HAL_PCD_EP_GetRxCount>
 800935e:	4603      	mov	r3, r0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009370:	4b02      	ldr	r3, [pc, #8]	; (800937c <USBD_static_malloc+0x14>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr
 800937c:	200004f8 	.word	0x200004f8

08009380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr

080093a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d817      	bhi.n	80093ec <USBD_Get_USB_Status+0x44>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <USBD_Get_USB_Status+0x1c>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093db 	.word	0x080093db
 80093cc:	080093e1 	.word	0x080093e1
 80093d0:	080093e7 	.word	0x080093e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	e00b      	b.n	80093f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093da:	2302      	movs	r3, #2
 80093dc:	73fb      	strb	r3, [r7, #15]
    break;
 80093de:	e008      	b.n	80093f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
    break;
 80093e4:	e005      	b.n	80093f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093e6:	2302      	movs	r3, #2
 80093e8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ea:	e002      	b.n	80093f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093ec:	2302      	movs	r3, #2
 80093ee:	73fb      	strb	r3, [r7, #15]
    break;
 80093f0:	bf00      	nop
  }
  return usb_status;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <atoi>:
 8009400:	220a      	movs	r2, #10
 8009402:	2100      	movs	r1, #0
 8009404:	f000 bad0 	b.w	80099a8 <strtol>

08009408 <__errno>:
 8009408:	4b01      	ldr	r3, [pc, #4]	; (8009410 <__errno+0x8>)
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	2000027c 	.word	0x2000027c

08009414 <__libc_init_array>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	2600      	movs	r6, #0
 8009418:	4d0c      	ldr	r5, [pc, #48]	; (800944c <__libc_init_array+0x38>)
 800941a:	4c0d      	ldr	r4, [pc, #52]	; (8009450 <__libc_init_array+0x3c>)
 800941c:	1b64      	subs	r4, r4, r5
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	42a6      	cmp	r6, r4
 8009422:	d109      	bne.n	8009438 <__libc_init_array+0x24>
 8009424:	f001 fe12 	bl	800b04c <_init>
 8009428:	2600      	movs	r6, #0
 800942a:	4d0a      	ldr	r5, [pc, #40]	; (8009454 <__libc_init_array+0x40>)
 800942c:	4c0a      	ldr	r4, [pc, #40]	; (8009458 <__libc_init_array+0x44>)
 800942e:	1b64      	subs	r4, r4, r5
 8009430:	10a4      	asrs	r4, r4, #2
 8009432:	42a6      	cmp	r6, r4
 8009434:	d105      	bne.n	8009442 <__libc_init_array+0x2e>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	f855 3b04 	ldr.w	r3, [r5], #4
 800943c:	4798      	blx	r3
 800943e:	3601      	adds	r6, #1
 8009440:	e7ee      	b.n	8009420 <__libc_init_array+0xc>
 8009442:	f855 3b04 	ldr.w	r3, [r5], #4
 8009446:	4798      	blx	r3
 8009448:	3601      	adds	r6, #1
 800944a:	e7f2      	b.n	8009432 <__libc_init_array+0x1e>
 800944c:	0800b4d0 	.word	0x0800b4d0
 8009450:	0800b4d0 	.word	0x0800b4d0
 8009454:	0800b4d0 	.word	0x0800b4d0
 8009458:	0800b4d4 	.word	0x0800b4d4

0800945c <malloc>:
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <malloc+0xc>)
 800945e:	4601      	mov	r1, r0
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	f000 b85f 	b.w	8009524 <_malloc_r>
 8009466:	bf00      	nop
 8009468:	2000027c 	.word	0x2000027c

0800946c <free>:
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <free+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f000 b80b 	b.w	800948c <_free_r>
 8009476:	bf00      	nop
 8009478:	2000027c 	.word	0x2000027c

0800947c <memset>:
 800947c:	4603      	mov	r3, r0
 800947e:	4402      	add	r2, r0
 8009480:	4293      	cmp	r3, r2
 8009482:	d100      	bne.n	8009486 <memset+0xa>
 8009484:	4770      	bx	lr
 8009486:	f803 1b01 	strb.w	r1, [r3], #1
 800948a:	e7f9      	b.n	8009480 <memset+0x4>

0800948c <_free_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4605      	mov	r5, r0
 8009490:	2900      	cmp	r1, #0
 8009492:	d043      	beq.n	800951c <_free_r+0x90>
 8009494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009498:	1f0c      	subs	r4, r1, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfb8      	it	lt
 800949e:	18e4      	addlt	r4, r4, r3
 80094a0:	f000 fb1c 	bl	8009adc <__malloc_lock>
 80094a4:	4a1e      	ldr	r2, [pc, #120]	; (8009520 <_free_r+0x94>)
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	4610      	mov	r0, r2
 80094aa:	b933      	cbnz	r3, 80094ba <_free_r+0x2e>
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	6014      	str	r4, [r2, #0]
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b6:	f000 bb17 	b.w	8009ae8 <__malloc_unlock>
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d90a      	bls.n	80094d4 <_free_r+0x48>
 80094be:	6821      	ldr	r1, [r4, #0]
 80094c0:	1862      	adds	r2, r4, r1
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf01      	itttt	eq
 80094c6:	681a      	ldreq	r2, [r3, #0]
 80094c8:	685b      	ldreq	r3, [r3, #4]
 80094ca:	1852      	addeq	r2, r2, r1
 80094cc:	6022      	streq	r2, [r4, #0]
 80094ce:	6063      	str	r3, [r4, #4]
 80094d0:	6004      	str	r4, [r0, #0]
 80094d2:	e7ed      	b.n	80094b0 <_free_r+0x24>
 80094d4:	461a      	mov	r2, r3
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	b10b      	cbz	r3, 80094de <_free_r+0x52>
 80094da:	42a3      	cmp	r3, r4
 80094dc:	d9fa      	bls.n	80094d4 <_free_r+0x48>
 80094de:	6811      	ldr	r1, [r2, #0]
 80094e0:	1850      	adds	r0, r2, r1
 80094e2:	42a0      	cmp	r0, r4
 80094e4:	d10b      	bne.n	80094fe <_free_r+0x72>
 80094e6:	6820      	ldr	r0, [r4, #0]
 80094e8:	4401      	add	r1, r0
 80094ea:	1850      	adds	r0, r2, r1
 80094ec:	4283      	cmp	r3, r0
 80094ee:	6011      	str	r1, [r2, #0]
 80094f0:	d1de      	bne.n	80094b0 <_free_r+0x24>
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4401      	add	r1, r0
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	6053      	str	r3, [r2, #4]
 80094fc:	e7d8      	b.n	80094b0 <_free_r+0x24>
 80094fe:	d902      	bls.n	8009506 <_free_r+0x7a>
 8009500:	230c      	movs	r3, #12
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	e7d4      	b.n	80094b0 <_free_r+0x24>
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1821      	adds	r1, r4, r0
 800950a:	428b      	cmp	r3, r1
 800950c:	bf01      	itttt	eq
 800950e:	6819      	ldreq	r1, [r3, #0]
 8009510:	685b      	ldreq	r3, [r3, #4]
 8009512:	1809      	addeq	r1, r1, r0
 8009514:	6021      	streq	r1, [r4, #0]
 8009516:	6063      	str	r3, [r4, #4]
 8009518:	6054      	str	r4, [r2, #4]
 800951a:	e7c9      	b.n	80094b0 <_free_r+0x24>
 800951c:	bd38      	pop	{r3, r4, r5, pc}
 800951e:	bf00      	nop
 8009520:	20000718 	.word	0x20000718

08009524 <_malloc_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	1ccd      	adds	r5, r1, #3
 8009528:	f025 0503 	bic.w	r5, r5, #3
 800952c:	3508      	adds	r5, #8
 800952e:	2d0c      	cmp	r5, #12
 8009530:	bf38      	it	cc
 8009532:	250c      	movcc	r5, #12
 8009534:	2d00      	cmp	r5, #0
 8009536:	4606      	mov	r6, r0
 8009538:	db01      	blt.n	800953e <_malloc_r+0x1a>
 800953a:	42a9      	cmp	r1, r5
 800953c:	d903      	bls.n	8009546 <_malloc_r+0x22>
 800953e:	230c      	movs	r3, #12
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	2000      	movs	r0, #0
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009546:	f000 fac9 	bl	8009adc <__malloc_lock>
 800954a:	4921      	ldr	r1, [pc, #132]	; (80095d0 <_malloc_r+0xac>)
 800954c:	680a      	ldr	r2, [r1, #0]
 800954e:	4614      	mov	r4, r2
 8009550:	b99c      	cbnz	r4, 800957a <_malloc_r+0x56>
 8009552:	4f20      	ldr	r7, [pc, #128]	; (80095d4 <_malloc_r+0xb0>)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	b923      	cbnz	r3, 8009562 <_malloc_r+0x3e>
 8009558:	4621      	mov	r1, r4
 800955a:	4630      	mov	r0, r6
 800955c:	f000 f8aa 	bl	80096b4 <_sbrk_r>
 8009560:	6038      	str	r0, [r7, #0]
 8009562:	4629      	mov	r1, r5
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f8a5 	bl	80096b4 <_sbrk_r>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d123      	bne.n	80095b6 <_malloc_r+0x92>
 800956e:	230c      	movs	r3, #12
 8009570:	4630      	mov	r0, r6
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f000 fab8 	bl	8009ae8 <__malloc_unlock>
 8009578:	e7e3      	b.n	8009542 <_malloc_r+0x1e>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	1b5b      	subs	r3, r3, r5
 800957e:	d417      	bmi.n	80095b0 <_malloc_r+0x8c>
 8009580:	2b0b      	cmp	r3, #11
 8009582:	d903      	bls.n	800958c <_malloc_r+0x68>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	441c      	add	r4, r3
 8009588:	6025      	str	r5, [r4, #0]
 800958a:	e004      	b.n	8009596 <_malloc_r+0x72>
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	42a2      	cmp	r2, r4
 8009590:	bf0c      	ite	eq
 8009592:	600b      	streq	r3, [r1, #0]
 8009594:	6053      	strne	r3, [r2, #4]
 8009596:	4630      	mov	r0, r6
 8009598:	f000 faa6 	bl	8009ae8 <__malloc_unlock>
 800959c:	f104 000b 	add.w	r0, r4, #11
 80095a0:	1d23      	adds	r3, r4, #4
 80095a2:	f020 0007 	bic.w	r0, r0, #7
 80095a6:	1ac2      	subs	r2, r0, r3
 80095a8:	d0cc      	beq.n	8009544 <_malloc_r+0x20>
 80095aa:	1a1b      	subs	r3, r3, r0
 80095ac:	50a3      	str	r3, [r4, r2]
 80095ae:	e7c9      	b.n	8009544 <_malloc_r+0x20>
 80095b0:	4622      	mov	r2, r4
 80095b2:	6864      	ldr	r4, [r4, #4]
 80095b4:	e7cc      	b.n	8009550 <_malloc_r+0x2c>
 80095b6:	1cc4      	adds	r4, r0, #3
 80095b8:	f024 0403 	bic.w	r4, r4, #3
 80095bc:	42a0      	cmp	r0, r4
 80095be:	d0e3      	beq.n	8009588 <_malloc_r+0x64>
 80095c0:	1a21      	subs	r1, r4, r0
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f876 	bl	80096b4 <_sbrk_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1dd      	bne.n	8009588 <_malloc_r+0x64>
 80095cc:	e7cf      	b.n	800956e <_malloc_r+0x4a>
 80095ce:	bf00      	nop
 80095d0:	20000718 	.word	0x20000718
 80095d4:	2000071c 	.word	0x2000071c

080095d8 <srand>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4b10      	ldr	r3, [pc, #64]	; (800961c <srand+0x44>)
 80095dc:	4604      	mov	r4, r0
 80095de:	681d      	ldr	r5, [r3, #0]
 80095e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095e2:	b9b3      	cbnz	r3, 8009612 <srand+0x3a>
 80095e4:	2018      	movs	r0, #24
 80095e6:	f7ff ff39 	bl	800945c <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	63a8      	str	r0, [r5, #56]	; 0x38
 80095ee:	b920      	cbnz	r0, 80095fa <srand+0x22>
 80095f0:	2142      	movs	r1, #66	; 0x42
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <srand+0x48>)
 80095f4:	480b      	ldr	r0, [pc, #44]	; (8009624 <srand+0x4c>)
 80095f6:	f000 fa0d 	bl	8009a14 <__assert_func>
 80095fa:	490b      	ldr	r1, [pc, #44]	; (8009628 <srand+0x50>)
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <srand+0x54>)
 80095fe:	e9c0 1300 	strd	r1, r3, [r0]
 8009602:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <srand+0x58>)
 8009604:	2100      	movs	r1, #0
 8009606:	6083      	str	r3, [r0, #8]
 8009608:	230b      	movs	r3, #11
 800960a:	8183      	strh	r3, [r0, #12]
 800960c:	2001      	movs	r0, #1
 800960e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009612:	2200      	movs	r2, #0
 8009614:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009616:	611c      	str	r4, [r3, #16]
 8009618:	615a      	str	r2, [r3, #20]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	2000027c 	.word	0x2000027c
 8009620:	0800b20c 	.word	0x0800b20c
 8009624:	0800b223 	.word	0x0800b223
 8009628:	abcd330e 	.word	0xabcd330e
 800962c:	e66d1234 	.word	0xe66d1234
 8009630:	0005deec 	.word	0x0005deec

08009634 <rand>:
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <rand+0x60>)
 8009636:	b510      	push	{r4, lr}
 8009638:	681c      	ldr	r4, [r3, #0]
 800963a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800963c:	b9b3      	cbnz	r3, 800966c <rand+0x38>
 800963e:	2018      	movs	r0, #24
 8009640:	f7ff ff0c 	bl	800945c <malloc>
 8009644:	4602      	mov	r2, r0
 8009646:	63a0      	str	r0, [r4, #56]	; 0x38
 8009648:	b920      	cbnz	r0, 8009654 <rand+0x20>
 800964a:	214e      	movs	r1, #78	; 0x4e
 800964c:	4b12      	ldr	r3, [pc, #72]	; (8009698 <rand+0x64>)
 800964e:	4813      	ldr	r0, [pc, #76]	; (800969c <rand+0x68>)
 8009650:	f000 f9e0 	bl	8009a14 <__assert_func>
 8009654:	4912      	ldr	r1, [pc, #72]	; (80096a0 <rand+0x6c>)
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <rand+0x70>)
 8009658:	e9c0 1300 	strd	r1, r3, [r0]
 800965c:	4b12      	ldr	r3, [pc, #72]	; (80096a8 <rand+0x74>)
 800965e:	2100      	movs	r1, #0
 8009660:	6083      	str	r3, [r0, #8]
 8009662:	230b      	movs	r3, #11
 8009664:	8183      	strh	r3, [r0, #12]
 8009666:	2001      	movs	r0, #1
 8009668:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800966c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800966e:	480f      	ldr	r0, [pc, #60]	; (80096ac <rand+0x78>)
 8009670:	690a      	ldr	r2, [r1, #16]
 8009672:	694b      	ldr	r3, [r1, #20]
 8009674:	4350      	muls	r0, r2
 8009676:	4c0e      	ldr	r4, [pc, #56]	; (80096b0 <rand+0x7c>)
 8009678:	fb04 0003 	mla	r0, r4, r3, r0
 800967c:	fba2 3404 	umull	r3, r4, r2, r4
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	4404      	add	r4, r0
 8009684:	f144 0000 	adc.w	r0, r4, #0
 8009688:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800968c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009690:	bd10      	pop	{r4, pc}
 8009692:	bf00      	nop
 8009694:	2000027c 	.word	0x2000027c
 8009698:	0800b20c 	.word	0x0800b20c
 800969c:	0800b223 	.word	0x0800b223
 80096a0:	abcd330e 	.word	0xabcd330e
 80096a4:	e66d1234 	.word	0xe66d1234
 80096a8:	0005deec 	.word	0x0005deec
 80096ac:	5851f42d 	.word	0x5851f42d
 80096b0:	4c957f2d 	.word	0x4c957f2d

080096b4 <_sbrk_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	2300      	movs	r3, #0
 80096b8:	4d05      	ldr	r5, [pc, #20]	; (80096d0 <_sbrk_r+0x1c>)
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f7 faa8 	bl	8000c14 <_sbrk>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_sbrk_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_sbrk_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20001740 	.word	0x20001740

080096d4 <siscanf>:
 80096d4:	b40e      	push	{r1, r2, r3}
 80096d6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80096da:	b530      	push	{r4, r5, lr}
 80096dc:	b09c      	sub	sp, #112	; 0x70
 80096de:	ac1f      	add	r4, sp, #124	; 0x7c
 80096e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80096e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80096e8:	9002      	str	r0, [sp, #8]
 80096ea:	9006      	str	r0, [sp, #24]
 80096ec:	f7f6 fd38 	bl	8000160 <strlen>
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <siscanf+0x4c>)
 80096f2:	9003      	str	r0, [sp, #12]
 80096f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80096f6:	2300      	movs	r3, #0
 80096f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096fa:	9314      	str	r3, [sp, #80]	; 0x50
 80096fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009700:	9007      	str	r0, [sp, #28]
 8009702:	4808      	ldr	r0, [pc, #32]	; (8009724 <siscanf+0x50>)
 8009704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009708:	462a      	mov	r2, r5
 800970a:	4623      	mov	r3, r4
 800970c:	a902      	add	r1, sp, #8
 800970e:	6800      	ldr	r0, [r0, #0]
 8009710:	9401      	str	r4, [sp, #4]
 8009712:	f000 fa49 	bl	8009ba8 <__ssvfiscanf_r>
 8009716:	b01c      	add	sp, #112	; 0x70
 8009718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800971c:	b003      	add	sp, #12
 800971e:	4770      	bx	lr
 8009720:	0800974b 	.word	0x0800974b
 8009724:	2000027c 	.word	0x2000027c

08009728 <__sread>:
 8009728:	b510      	push	{r4, lr}
 800972a:	460c      	mov	r4, r1
 800972c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009730:	f000 ffec 	bl	800a70c <_read_r>
 8009734:	2800      	cmp	r0, #0
 8009736:	bfab      	itete	ge
 8009738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800973a:	89a3      	ldrhlt	r3, [r4, #12]
 800973c:	181b      	addge	r3, r3, r0
 800973e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009742:	bfac      	ite	ge
 8009744:	6563      	strge	r3, [r4, #84]	; 0x54
 8009746:	81a3      	strhlt	r3, [r4, #12]
 8009748:	bd10      	pop	{r4, pc}

0800974a <__seofread>:
 800974a:	2000      	movs	r0, #0
 800974c:	4770      	bx	lr

0800974e <__swrite>:
 800974e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	461f      	mov	r7, r3
 8009754:	898b      	ldrh	r3, [r1, #12]
 8009756:	4605      	mov	r5, r0
 8009758:	05db      	lsls	r3, r3, #23
 800975a:	460c      	mov	r4, r1
 800975c:	4616      	mov	r6, r2
 800975e:	d505      	bpl.n	800976c <__swrite+0x1e>
 8009760:	2302      	movs	r3, #2
 8009762:	2200      	movs	r2, #0
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f9a6 	bl	8009ab8 <_lseek_r>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	4632      	mov	r2, r6
 8009770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	4628      	mov	r0, r5
 8009778:	463b      	mov	r3, r7
 800977a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800977e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009782:	f000 b935 	b.w	80099f0 <_write_r>

08009786 <__sseek>:
 8009786:	b510      	push	{r4, lr}
 8009788:	460c      	mov	r4, r1
 800978a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978e:	f000 f993 	bl	8009ab8 <_lseek_r>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	bf15      	itete	ne
 8009798:	6560      	strne	r0, [r4, #84]	; 0x54
 800979a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800979e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097a2:	81a3      	strheq	r3, [r4, #12]
 80097a4:	bf18      	it	ne
 80097a6:	81a3      	strhne	r3, [r4, #12]
 80097a8:	bd10      	pop	{r4, pc}

080097aa <__sclose>:
 80097aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ae:	f000 b94f 	b.w	8009a50 <_close_r>

080097b2 <strcat>:
 80097b2:	4602      	mov	r2, r0
 80097b4:	b510      	push	{r4, lr}
 80097b6:	7814      	ldrb	r4, [r2, #0]
 80097b8:	4613      	mov	r3, r2
 80097ba:	3201      	adds	r2, #1
 80097bc:	2c00      	cmp	r4, #0
 80097be:	d1fa      	bne.n	80097b6 <strcat+0x4>
 80097c0:	3b01      	subs	r3, #1
 80097c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ca:	2a00      	cmp	r2, #0
 80097cc:	d1f9      	bne.n	80097c2 <strcat+0x10>
 80097ce:	bd10      	pop	{r4, pc}

080097d0 <strcpy>:
 80097d0:	4603      	mov	r3, r0
 80097d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d6:	f803 2b01 	strb.w	r2, [r3], #1
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d1f9      	bne.n	80097d2 <strcpy+0x2>
 80097de:	4770      	bx	lr

080097e0 <strtok>:
 80097e0:	4b16      	ldr	r3, [pc, #88]	; (800983c <strtok+0x5c>)
 80097e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e6:	681f      	ldr	r7, [r3, #0]
 80097e8:	4605      	mov	r5, r0
 80097ea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80097ec:	460e      	mov	r6, r1
 80097ee:	b9ec      	cbnz	r4, 800982c <strtok+0x4c>
 80097f0:	2050      	movs	r0, #80	; 0x50
 80097f2:	f7ff fe33 	bl	800945c <malloc>
 80097f6:	4602      	mov	r2, r0
 80097f8:	65b8      	str	r0, [r7, #88]	; 0x58
 80097fa:	b920      	cbnz	r0, 8009806 <strtok+0x26>
 80097fc:	2157      	movs	r1, #87	; 0x57
 80097fe:	4b10      	ldr	r3, [pc, #64]	; (8009840 <strtok+0x60>)
 8009800:	4810      	ldr	r0, [pc, #64]	; (8009844 <strtok+0x64>)
 8009802:	f000 f907 	bl	8009a14 <__assert_func>
 8009806:	e9c0 4400 	strd	r4, r4, [r0]
 800980a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800980e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009812:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009816:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800981a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800981e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009822:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009826:	6184      	str	r4, [r0, #24]
 8009828:	7704      	strb	r4, [r0, #28]
 800982a:	6244      	str	r4, [r0, #36]	; 0x24
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009832:	2301      	movs	r3, #1
 8009834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009838:	f000 b806 	b.w	8009848 <__strtok_r>
 800983c:	2000027c 	.word	0x2000027c
 8009840:	0800b20c 	.word	0x0800b20c
 8009844:	0800b282 	.word	0x0800b282

08009848 <__strtok_r>:
 8009848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984a:	b908      	cbnz	r0, 8009850 <__strtok_r+0x8>
 800984c:	6810      	ldr	r0, [r2, #0]
 800984e:	b188      	cbz	r0, 8009874 <__strtok_r+0x2c>
 8009850:	4604      	mov	r4, r0
 8009852:	460f      	mov	r7, r1
 8009854:	4620      	mov	r0, r4
 8009856:	f814 5b01 	ldrb.w	r5, [r4], #1
 800985a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800985e:	b91e      	cbnz	r6, 8009868 <__strtok_r+0x20>
 8009860:	b965      	cbnz	r5, 800987c <__strtok_r+0x34>
 8009862:	4628      	mov	r0, r5
 8009864:	6015      	str	r5, [r2, #0]
 8009866:	e005      	b.n	8009874 <__strtok_r+0x2c>
 8009868:	42b5      	cmp	r5, r6
 800986a:	d1f6      	bne.n	800985a <__strtok_r+0x12>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1f0      	bne.n	8009852 <__strtok_r+0xa>
 8009870:	6014      	str	r4, [r2, #0]
 8009872:	7003      	strb	r3, [r0, #0]
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	461c      	mov	r4, r3
 8009878:	e00c      	b.n	8009894 <__strtok_r+0x4c>
 800987a:	b915      	cbnz	r5, 8009882 <__strtok_r+0x3a>
 800987c:	460e      	mov	r6, r1
 800987e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009882:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009886:	42ab      	cmp	r3, r5
 8009888:	d1f7      	bne.n	800987a <__strtok_r+0x32>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0f3      	beq.n	8009876 <__strtok_r+0x2e>
 800988e:	2300      	movs	r3, #0
 8009890:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009894:	6014      	str	r4, [r2, #0]
 8009896:	e7ed      	b.n	8009874 <__strtok_r+0x2c>

08009898 <_strtol_l.isra.0>:
 8009898:	2b01      	cmp	r3, #1
 800989a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989e:	4686      	mov	lr, r0
 80098a0:	d001      	beq.n	80098a6 <_strtol_l.isra.0+0xe>
 80098a2:	2b24      	cmp	r3, #36	; 0x24
 80098a4:	d906      	bls.n	80098b4 <_strtol_l.isra.0+0x1c>
 80098a6:	f7ff fdaf 	bl	8009408 <__errno>
 80098aa:	2316      	movs	r3, #22
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	2000      	movs	r0, #0
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	468c      	mov	ip, r1
 80098b6:	4e3a      	ldr	r6, [pc, #232]	; (80099a0 <_strtol_l.isra.0+0x108>)
 80098b8:	4660      	mov	r0, ip
 80098ba:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80098be:	5da5      	ldrb	r5, [r4, r6]
 80098c0:	f015 0508 	ands.w	r5, r5, #8
 80098c4:	d1f8      	bne.n	80098b8 <_strtol_l.isra.0+0x20>
 80098c6:	2c2d      	cmp	r4, #45	; 0x2d
 80098c8:	d133      	bne.n	8009932 <_strtol_l.isra.0+0x9a>
 80098ca:	f04f 0801 	mov.w	r8, #1
 80098ce:	f89c 4000 	ldrb.w	r4, [ip]
 80098d2:	f100 0c02 	add.w	ip, r0, #2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d05d      	beq.n	8009996 <_strtol_l.isra.0+0xfe>
 80098da:	2b10      	cmp	r3, #16
 80098dc:	d10c      	bne.n	80098f8 <_strtol_l.isra.0+0x60>
 80098de:	2c30      	cmp	r4, #48	; 0x30
 80098e0:	d10a      	bne.n	80098f8 <_strtol_l.isra.0+0x60>
 80098e2:	f89c 0000 	ldrb.w	r0, [ip]
 80098e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098ea:	2858      	cmp	r0, #88	; 0x58
 80098ec:	d14e      	bne.n	800998c <_strtol_l.isra.0+0xf4>
 80098ee:	2310      	movs	r3, #16
 80098f0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80098f4:	f10c 0c02 	add.w	ip, ip, #2
 80098f8:	2500      	movs	r5, #0
 80098fa:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80098fe:	3f01      	subs	r7, #1
 8009900:	fbb7 f9f3 	udiv	r9, r7, r3
 8009904:	4628      	mov	r0, r5
 8009906:	fb03 7a19 	mls	sl, r3, r9, r7
 800990a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800990e:	2e09      	cmp	r6, #9
 8009910:	d818      	bhi.n	8009944 <_strtol_l.isra.0+0xac>
 8009912:	4634      	mov	r4, r6
 8009914:	42a3      	cmp	r3, r4
 8009916:	dd24      	ble.n	8009962 <_strtol_l.isra.0+0xca>
 8009918:	2d00      	cmp	r5, #0
 800991a:	db1f      	blt.n	800995c <_strtol_l.isra.0+0xc4>
 800991c:	4581      	cmp	r9, r0
 800991e:	d31d      	bcc.n	800995c <_strtol_l.isra.0+0xc4>
 8009920:	d101      	bne.n	8009926 <_strtol_l.isra.0+0x8e>
 8009922:	45a2      	cmp	sl, r4
 8009924:	db1a      	blt.n	800995c <_strtol_l.isra.0+0xc4>
 8009926:	2501      	movs	r5, #1
 8009928:	fb00 4003 	mla	r0, r0, r3, r4
 800992c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009930:	e7eb      	b.n	800990a <_strtol_l.isra.0+0x72>
 8009932:	2c2b      	cmp	r4, #43	; 0x2b
 8009934:	bf08      	it	eq
 8009936:	f89c 4000 	ldrbeq.w	r4, [ip]
 800993a:	46a8      	mov	r8, r5
 800993c:	bf08      	it	eq
 800993e:	f100 0c02 	addeq.w	ip, r0, #2
 8009942:	e7c8      	b.n	80098d6 <_strtol_l.isra.0+0x3e>
 8009944:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009948:	2e19      	cmp	r6, #25
 800994a:	d801      	bhi.n	8009950 <_strtol_l.isra.0+0xb8>
 800994c:	3c37      	subs	r4, #55	; 0x37
 800994e:	e7e1      	b.n	8009914 <_strtol_l.isra.0+0x7c>
 8009950:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009954:	2e19      	cmp	r6, #25
 8009956:	d804      	bhi.n	8009962 <_strtol_l.isra.0+0xca>
 8009958:	3c57      	subs	r4, #87	; 0x57
 800995a:	e7db      	b.n	8009914 <_strtol_l.isra.0+0x7c>
 800995c:	f04f 35ff 	mov.w	r5, #4294967295
 8009960:	e7e4      	b.n	800992c <_strtol_l.isra.0+0x94>
 8009962:	2d00      	cmp	r5, #0
 8009964:	da08      	bge.n	8009978 <_strtol_l.isra.0+0xe0>
 8009966:	2322      	movs	r3, #34	; 0x22
 8009968:	4638      	mov	r0, r7
 800996a:	f8ce 3000 	str.w	r3, [lr]
 800996e:	2a00      	cmp	r2, #0
 8009970:	d09e      	beq.n	80098b0 <_strtol_l.isra.0+0x18>
 8009972:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009976:	e007      	b.n	8009988 <_strtol_l.isra.0+0xf0>
 8009978:	f1b8 0f00 	cmp.w	r8, #0
 800997c:	d000      	beq.n	8009980 <_strtol_l.isra.0+0xe8>
 800997e:	4240      	negs	r0, r0
 8009980:	2a00      	cmp	r2, #0
 8009982:	d095      	beq.n	80098b0 <_strtol_l.isra.0+0x18>
 8009984:	2d00      	cmp	r5, #0
 8009986:	d1f4      	bne.n	8009972 <_strtol_l.isra.0+0xda>
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	e791      	b.n	80098b0 <_strtol_l.isra.0+0x18>
 800998c:	2430      	movs	r4, #48	; 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1b2      	bne.n	80098f8 <_strtol_l.isra.0+0x60>
 8009992:	2308      	movs	r3, #8
 8009994:	e7b0      	b.n	80098f8 <_strtol_l.isra.0+0x60>
 8009996:	2c30      	cmp	r4, #48	; 0x30
 8009998:	d0a3      	beq.n	80098e2 <_strtol_l.isra.0+0x4a>
 800999a:	230a      	movs	r3, #10
 800999c:	e7ac      	b.n	80098f8 <_strtol_l.isra.0+0x60>
 800999e:	bf00      	nop
 80099a0:	0800b320 	.word	0x0800b320

080099a4 <_strtol_r>:
 80099a4:	f7ff bf78 	b.w	8009898 <_strtol_l.isra.0>

080099a8 <strtol>:
 80099a8:	4613      	mov	r3, r2
 80099aa:	460a      	mov	r2, r1
 80099ac:	4601      	mov	r1, r0
 80099ae:	4802      	ldr	r0, [pc, #8]	; (80099b8 <strtol+0x10>)
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f7ff bf71 	b.w	8009898 <_strtol_l.isra.0>
 80099b6:	bf00      	nop
 80099b8:	2000027c 	.word	0x2000027c

080099bc <time>:
 80099bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <time+0x30>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	2200      	movs	r2, #0
 80099c4:	4669      	mov	r1, sp
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	f000 f864 	bl	8009a94 <_gettimeofday_r>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	da05      	bge.n	80099dc <time+0x20>
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	e9cd 2300 	strd	r2, r3, [sp]
 80099dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e0:	b10c      	cbz	r4, 80099e6 <time+0x2a>
 80099e2:	e9c4 0100 	strd	r0, r1, [r4]
 80099e6:	b004      	add	sp, #16
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	2000027c 	.word	0x2000027c

080099f0 <_write_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	2200      	movs	r2, #0
 80099fa:	4d05      	ldr	r5, [pc, #20]	; (8009a10 <_write_r+0x20>)
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f7f7 f8bc 	bl	8000b7c <_write>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_write_r+0x1e>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_write_r+0x1e>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20001740 	.word	0x20001740

08009a14 <__assert_func>:
 8009a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a16:	4614      	mov	r4, r2
 8009a18:	461a      	mov	r2, r3
 8009a1a:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <__assert_func+0x2c>)
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68d8      	ldr	r0, [r3, #12]
 8009a22:	b14c      	cbz	r4, 8009a38 <__assert_func+0x24>
 8009a24:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <__assert_func+0x30>)
 8009a26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a2a:	9100      	str	r1, [sp, #0]
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	4906      	ldr	r1, [pc, #24]	; (8009a48 <__assert_func+0x34>)
 8009a30:	f000 f81e 	bl	8009a70 <fiprintf>
 8009a34:	f001 f82c 	bl	800aa90 <abort>
 8009a38:	4b04      	ldr	r3, [pc, #16]	; (8009a4c <__assert_func+0x38>)
 8009a3a:	461c      	mov	r4, r3
 8009a3c:	e7f3      	b.n	8009a26 <__assert_func+0x12>
 8009a3e:	bf00      	nop
 8009a40:	2000027c 	.word	0x2000027c
 8009a44:	0800b2e3 	.word	0x0800b2e3
 8009a48:	0800b2f0 	.word	0x0800b2f0
 8009a4c:	0800b31e 	.word	0x0800b31e

08009a50 <_close_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	2300      	movs	r3, #0
 8009a54:	4d05      	ldr	r5, [pc, #20]	; (8009a6c <_close_r+0x1c>)
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f7 f8aa 	bl	8000bb4 <_close>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_close_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_close_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	20001740 	.word	0x20001740

08009a70 <fiprintf>:
 8009a70:	b40e      	push	{r1, r2, r3}
 8009a72:	b503      	push	{r0, r1, lr}
 8009a74:	4601      	mov	r1, r0
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	4805      	ldr	r0, [pc, #20]	; (8009a90 <fiprintf+0x20>)
 8009a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7e:	6800      	ldr	r0, [r0, #0]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	f000 fa33 	bl	8009eec <_vfiprintf_r>
 8009a86:	b002      	add	sp, #8
 8009a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a8c:	b003      	add	sp, #12
 8009a8e:	4770      	bx	lr
 8009a90:	2000027c 	.word	0x2000027c

08009a94 <_gettimeofday_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	2300      	movs	r3, #0
 8009a98:	4d06      	ldr	r5, [pc, #24]	; (8009ab4 <_gettimeofday_r+0x20>)
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	f001 facb 	bl	800b03c <_gettimeofday>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d102      	bne.n	8009ab0 <_gettimeofday_r+0x1c>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b103      	cbz	r3, 8009ab0 <_gettimeofday_r+0x1c>
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20001740 	.word	0x20001740

08009ab8 <_lseek_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4d05      	ldr	r5, [pc, #20]	; (8009ad8 <_lseek_r+0x20>)
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f7 f898 	bl	8000bfc <_lseek>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_lseek_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_lseek_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20001740 	.word	0x20001740

08009adc <__malloc_lock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_lock+0x8>)
 8009ade:	f001 b997 	b.w	800ae10 <__retarget_lock_acquire_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20001748 	.word	0x20001748

08009ae8 <__malloc_unlock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__malloc_unlock+0x8>)
 8009aea:	f001 b992 	b.w	800ae12 <__retarget_lock_release_recursive>
 8009aee:	bf00      	nop
 8009af0:	20001748 	.word	0x20001748

08009af4 <_sungetc_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	1c4b      	adds	r3, r1, #1
 8009af8:	4614      	mov	r4, r2
 8009afa:	d103      	bne.n	8009b04 <_sungetc_r+0x10>
 8009afc:	f04f 35ff 	mov.w	r5, #4294967295
 8009b00:	4628      	mov	r0, r5
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	8993      	ldrh	r3, [r2, #12]
 8009b06:	b2cd      	uxtb	r5, r1
 8009b08:	f023 0320 	bic.w	r3, r3, #32
 8009b0c:	8193      	strh	r3, [r2, #12]
 8009b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b10:	6852      	ldr	r2, [r2, #4]
 8009b12:	b18b      	cbz	r3, 8009b38 <_sungetc_r+0x44>
 8009b14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b16:	4293      	cmp	r3, r2
 8009b18:	dd08      	ble.n	8009b2c <_sungetc_r+0x38>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	6022      	str	r2, [r4, #0]
 8009b20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b24:	6863      	ldr	r3, [r4, #4]
 8009b26:	3301      	adds	r3, #1
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	e7e9      	b.n	8009b00 <_sungetc_r+0xc>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f000 feb7 	bl	800a8a0 <__submore>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0f1      	beq.n	8009b1a <_sungetc_r+0x26>
 8009b36:	e7e1      	b.n	8009afc <_sungetc_r+0x8>
 8009b38:	6921      	ldr	r1, [r4, #16]
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	b151      	cbz	r1, 8009b54 <_sungetc_r+0x60>
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	d208      	bcs.n	8009b54 <_sungetc_r+0x60>
 8009b42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009b46:	42a9      	cmp	r1, r5
 8009b48:	d104      	bne.n	8009b54 <_sungetc_r+0x60>
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	3201      	adds	r2, #1
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	6062      	str	r2, [r4, #4]
 8009b52:	e7d5      	b.n	8009b00 <_sungetc_r+0xc>
 8009b54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009b5e:	2303      	movs	r3, #3
 8009b60:	63a3      	str	r3, [r4, #56]	; 0x38
 8009b62:	4623      	mov	r3, r4
 8009b64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e7dc      	b.n	8009b28 <_sungetc_r+0x34>

08009b6e <__ssrefill_r>:
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	460c      	mov	r4, r1
 8009b72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009b74:	b169      	cbz	r1, 8009b92 <__ssrefill_r+0x24>
 8009b76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	d001      	beq.n	8009b82 <__ssrefill_r+0x14>
 8009b7e:	f7ff fc85 	bl	800948c <_free_r>
 8009b82:	2000      	movs	r0, #0
 8009b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b86:	6360      	str	r0, [r4, #52]	; 0x34
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	b113      	cbz	r3, 8009b92 <__ssrefill_r+0x24>
 8009b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	f043 0320 	orr.w	r3, r3, #32
 8009ba4:	81a3      	strh	r3, [r4, #12]
 8009ba6:	e7f3      	b.n	8009b90 <__ssrefill_r+0x22>

08009ba8 <__ssvfiscanf_r>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009bb6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009bba:	49b3      	ldr	r1, [pc, #716]	; (8009e88 <__ssvfiscanf_r+0x2e0>)
 8009bbc:	f10d 0804 	add.w	r8, sp, #4
 8009bc0:	91a0      	str	r1, [sp, #640]	; 0x280
 8009bc2:	49b2      	ldr	r1, [pc, #712]	; (8009e8c <__ssvfiscanf_r+0x2e4>)
 8009bc4:	4fb2      	ldr	r7, [pc, #712]	; (8009e90 <__ssvfiscanf_r+0x2e8>)
 8009bc6:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009e94 <__ssvfiscanf_r+0x2ec>
 8009bca:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009bce:	91a1      	str	r1, [sp, #644]	; 0x284
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	f892 a000 	ldrb.w	sl, [r2]
 8009bd6:	f1ba 0f00 	cmp.w	sl, #0
 8009bda:	f000 8153 	beq.w	8009e84 <__ssvfiscanf_r+0x2dc>
 8009bde:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009be2:	1c55      	adds	r5, r2, #1
 8009be4:	f013 0308 	ands.w	r3, r3, #8
 8009be8:	d019      	beq.n	8009c1e <__ssvfiscanf_r+0x76>
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dd0f      	ble.n	8009c10 <__ssvfiscanf_r+0x68>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	5cba      	ldrb	r2, [r7, r2]
 8009bf6:	0712      	lsls	r2, r2, #28
 8009bf8:	d401      	bmi.n	8009bfe <__ssvfiscanf_r+0x56>
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	e7e9      	b.n	8009bd2 <__ssvfiscanf_r+0x2a>
 8009bfe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c00:	3301      	adds	r3, #1
 8009c02:	3201      	adds	r2, #1
 8009c04:	9245      	str	r2, [sp, #276]	; 0x114
 8009c06:	6862      	ldr	r2, [r4, #4]
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	6062      	str	r2, [r4, #4]
 8009c0e:	e7ec      	b.n	8009bea <__ssvfiscanf_r+0x42>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4630      	mov	r0, r6
 8009c14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c16:	4798      	blx	r3
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0e9      	beq.n	8009bf0 <__ssvfiscanf_r+0x48>
 8009c1c:	e7ed      	b.n	8009bfa <__ssvfiscanf_r+0x52>
 8009c1e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009c22:	f040 8086 	bne.w	8009d32 <__ssvfiscanf_r+0x18a>
 8009c26:	9341      	str	r3, [sp, #260]	; 0x104
 8009c28:	9343      	str	r3, [sp, #268]	; 0x10c
 8009c2a:	7853      	ldrb	r3, [r2, #1]
 8009c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2e:	bf04      	itt	eq
 8009c30:	2310      	moveq	r3, #16
 8009c32:	1c95      	addeq	r5, r2, #2
 8009c34:	f04f 020a 	mov.w	r2, #10
 8009c38:	bf08      	it	eq
 8009c3a:	9341      	streq	r3, [sp, #260]	; 0x104
 8009c3c:	46ab      	mov	fp, r5
 8009c3e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009c42:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d91d      	bls.n	8009c86 <__ssvfiscanf_r+0xde>
 8009c4a:	2203      	movs	r2, #3
 8009c4c:	4891      	ldr	r0, [pc, #580]	; (8009e94 <__ssvfiscanf_r+0x2ec>)
 8009c4e:	f001 f945 	bl	800aedc <memchr>
 8009c52:	b140      	cbz	r0, 8009c66 <__ssvfiscanf_r+0xbe>
 8009c54:	2301      	movs	r3, #1
 8009c56:	465d      	mov	r5, fp
 8009c58:	eba0 0009 	sub.w	r0, r0, r9
 8009c5c:	fa03 f000 	lsl.w	r0, r3, r0
 8009c60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c62:	4318      	orrs	r0, r3
 8009c64:	9041      	str	r0, [sp, #260]	; 0x104
 8009c66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c6a:	2b78      	cmp	r3, #120	; 0x78
 8009c6c:	d806      	bhi.n	8009c7c <__ssvfiscanf_r+0xd4>
 8009c6e:	2b57      	cmp	r3, #87	; 0x57
 8009c70:	d810      	bhi.n	8009c94 <__ssvfiscanf_r+0xec>
 8009c72:	2b25      	cmp	r3, #37	; 0x25
 8009c74:	d05d      	beq.n	8009d32 <__ssvfiscanf_r+0x18a>
 8009c76:	d857      	bhi.n	8009d28 <__ssvfiscanf_r+0x180>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d075      	beq.n	8009d68 <__ssvfiscanf_r+0x1c0>
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c80:	230a      	movs	r3, #10
 8009c82:	9342      	str	r3, [sp, #264]	; 0x108
 8009c84:	e082      	b.n	8009d8c <__ssvfiscanf_r+0x1e4>
 8009c86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009c88:	465d      	mov	r5, fp
 8009c8a:	fb02 1303 	mla	r3, r2, r3, r1
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	9343      	str	r3, [sp, #268]	; 0x10c
 8009c92:	e7d3      	b.n	8009c3c <__ssvfiscanf_r+0x94>
 8009c94:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009c98:	2a20      	cmp	r2, #32
 8009c9a:	d8ef      	bhi.n	8009c7c <__ssvfiscanf_r+0xd4>
 8009c9c:	a101      	add	r1, pc, #4	; (adr r1, 8009ca4 <__ssvfiscanf_r+0xfc>)
 8009c9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009d77 	.word	0x08009d77
 8009ca8:	08009c7d 	.word	0x08009c7d
 8009cac:	08009c7d 	.word	0x08009c7d
 8009cb0:	08009dd5 	.word	0x08009dd5
 8009cb4:	08009c7d 	.word	0x08009c7d
 8009cb8:	08009c7d 	.word	0x08009c7d
 8009cbc:	08009c7d 	.word	0x08009c7d
 8009cc0:	08009c7d 	.word	0x08009c7d
 8009cc4:	08009c7d 	.word	0x08009c7d
 8009cc8:	08009c7d 	.word	0x08009c7d
 8009ccc:	08009c7d 	.word	0x08009c7d
 8009cd0:	08009deb 	.word	0x08009deb
 8009cd4:	08009dc1 	.word	0x08009dc1
 8009cd8:	08009d2f 	.word	0x08009d2f
 8009cdc:	08009d2f 	.word	0x08009d2f
 8009ce0:	08009d2f 	.word	0x08009d2f
 8009ce4:	08009c7d 	.word	0x08009c7d
 8009ce8:	08009dc5 	.word	0x08009dc5
 8009cec:	08009c7d 	.word	0x08009c7d
 8009cf0:	08009c7d 	.word	0x08009c7d
 8009cf4:	08009c7d 	.word	0x08009c7d
 8009cf8:	08009c7d 	.word	0x08009c7d
 8009cfc:	08009dfb 	.word	0x08009dfb
 8009d00:	08009dcd 	.word	0x08009dcd
 8009d04:	08009d6f 	.word	0x08009d6f
 8009d08:	08009c7d 	.word	0x08009c7d
 8009d0c:	08009c7d 	.word	0x08009c7d
 8009d10:	08009df7 	.word	0x08009df7
 8009d14:	08009c7d 	.word	0x08009c7d
 8009d18:	08009dc1 	.word	0x08009dc1
 8009d1c:	08009c7d 	.word	0x08009c7d
 8009d20:	08009c7d 	.word	0x08009c7d
 8009d24:	08009d77 	.word	0x08009d77
 8009d28:	3b45      	subs	r3, #69	; 0x45
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d8a6      	bhi.n	8009c7c <__ssvfiscanf_r+0xd4>
 8009d2e:	2305      	movs	r3, #5
 8009d30:	e02b      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd0d      	ble.n	8009d54 <__ssvfiscanf_r+0x1ac>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	4552      	cmp	r2, sl
 8009d3e:	f040 80a1 	bne.w	8009e84 <__ssvfiscanf_r+0x2dc>
 8009d42:	3301      	adds	r3, #1
 8009d44:	6862      	ldr	r2, [r4, #4]
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009d4a:	3a01      	subs	r2, #1
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	6062      	str	r2, [r4, #4]
 8009d50:	9345      	str	r3, [sp, #276]	; 0x114
 8009d52:	e752      	b.n	8009bfa <__ssvfiscanf_r+0x52>
 8009d54:	4621      	mov	r1, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d5a:	4798      	blx	r3
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0eb      	beq.n	8009d38 <__ssvfiscanf_r+0x190>
 8009d60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f040 8084 	bne.w	8009e70 <__ssvfiscanf_r+0x2c8>
 8009d68:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6c:	e086      	b.n	8009e7c <__ssvfiscanf_r+0x2d4>
 8009d6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d70:	f042 0220 	orr.w	r2, r2, #32
 8009d74:	9241      	str	r2, [sp, #260]	; 0x104
 8009d76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d7c:	9241      	str	r2, [sp, #260]	; 0x104
 8009d7e:	2210      	movs	r2, #16
 8009d80:	2b6f      	cmp	r3, #111	; 0x6f
 8009d82:	bf34      	ite	cc
 8009d84:	2303      	movcc	r3, #3
 8009d86:	2304      	movcs	r3, #4
 8009d88:	9242      	str	r2, [sp, #264]	; 0x108
 8009d8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d8c:	6863      	ldr	r3, [r4, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dd41      	ble.n	8009e16 <__ssvfiscanf_r+0x26e>
 8009d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d94:	0659      	lsls	r1, r3, #25
 8009d96:	d404      	bmi.n	8009da2 <__ssvfiscanf_r+0x1fa>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	5cba      	ldrb	r2, [r7, r2]
 8009d9e:	0712      	lsls	r2, r2, #28
 8009da0:	d440      	bmi.n	8009e24 <__ssvfiscanf_r+0x27c>
 8009da2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	dc4f      	bgt.n	8009e48 <__ssvfiscanf_r+0x2a0>
 8009da8:	466b      	mov	r3, sp
 8009daa:	4622      	mov	r2, r4
 8009dac:	4630      	mov	r0, r6
 8009dae:	a941      	add	r1, sp, #260	; 0x104
 8009db0:	f000 fb62 	bl	800a478 <_scanf_chars>
 8009db4:	2801      	cmp	r0, #1
 8009db6:	d065      	beq.n	8009e84 <__ssvfiscanf_r+0x2dc>
 8009db8:	2802      	cmp	r0, #2
 8009dba:	f47f af1e 	bne.w	8009bfa <__ssvfiscanf_r+0x52>
 8009dbe:	e7cf      	b.n	8009d60 <__ssvfiscanf_r+0x1b8>
 8009dc0:	220a      	movs	r2, #10
 8009dc2:	e7dd      	b.n	8009d80 <__ssvfiscanf_r+0x1d8>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9342      	str	r3, [sp, #264]	; 0x108
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e7de      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009dcc:	2308      	movs	r3, #8
 8009dce:	9342      	str	r3, [sp, #264]	; 0x108
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	e7da      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f000 fcaa 	bl	800a730 <__sccl>
 8009ddc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009dde:	4605      	mov	r5, r0
 8009de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de4:	9341      	str	r3, [sp, #260]	; 0x104
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7cf      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009dea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df0:	9341      	str	r3, [sp, #260]	; 0x104
 8009df2:	2300      	movs	r3, #0
 8009df4:	e7c9      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e7c7      	b.n	8009d8a <__ssvfiscanf_r+0x1e2>
 8009dfa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009dfc:	06c3      	lsls	r3, r0, #27
 8009dfe:	f53f aefc 	bmi.w	8009bfa <__ssvfiscanf_r+0x52>
 8009e02:	9b00      	ldr	r3, [sp, #0]
 8009e04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e06:	1d19      	adds	r1, r3, #4
 8009e08:	9100      	str	r1, [sp, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	07c0      	lsls	r0, r0, #31
 8009e0e:	bf4c      	ite	mi
 8009e10:	801a      	strhmi	r2, [r3, #0]
 8009e12:	601a      	strpl	r2, [r3, #0]
 8009e14:	e6f1      	b.n	8009bfa <__ssvfiscanf_r+0x52>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4630      	mov	r0, r6
 8009e1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e1c:	4798      	blx	r3
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0b7      	beq.n	8009d92 <__ssvfiscanf_r+0x1ea>
 8009e22:	e79d      	b.n	8009d60 <__ssvfiscanf_r+0x1b8>
 8009e24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e26:	3201      	adds	r2, #1
 8009e28:	9245      	str	r2, [sp, #276]	; 0x114
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	3a01      	subs	r2, #1
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
 8009e32:	dd02      	ble.n	8009e3a <__ssvfiscanf_r+0x292>
 8009e34:	3301      	adds	r3, #1
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	e7ae      	b.n	8009d98 <__ssvfiscanf_r+0x1f0>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e40:	4798      	blx	r3
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0a8      	beq.n	8009d98 <__ssvfiscanf_r+0x1f0>
 8009e46:	e78b      	b.n	8009d60 <__ssvfiscanf_r+0x1b8>
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	dc06      	bgt.n	8009e5a <__ssvfiscanf_r+0x2b2>
 8009e4c:	466b      	mov	r3, sp
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4630      	mov	r0, r6
 8009e52:	a941      	add	r1, sp, #260	; 0x104
 8009e54:	f000 fb68 	bl	800a528 <_scanf_i>
 8009e58:	e7ac      	b.n	8009db4 <__ssvfiscanf_r+0x20c>
 8009e5a:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <__ssvfiscanf_r+0x2f0>)
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f43f aecc 	beq.w	8009bfa <__ssvfiscanf_r+0x52>
 8009e62:	466b      	mov	r3, sp
 8009e64:	4622      	mov	r2, r4
 8009e66:	4630      	mov	r0, r6
 8009e68:	a941      	add	r1, sp, #260	; 0x104
 8009e6a:	f3af 8000 	nop.w
 8009e6e:	e7a1      	b.n	8009db4 <__ssvfiscanf_r+0x20c>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e76:	bf18      	it	ne
 8009e78:	f04f 30ff 	movne.w	r0, #4294967295
 8009e7c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e86:	e7f9      	b.n	8009e7c <__ssvfiscanf_r+0x2d4>
 8009e88:	08009af5 	.word	0x08009af5
 8009e8c:	08009b6f 	.word	0x08009b6f
 8009e90:	0800b320 	.word	0x0800b320
 8009e94:	0800b420 	.word	0x0800b420
 8009e98:	00000000 	.word	0x00000000

08009e9c <__sfputc_r>:
 8009e9c:	6893      	ldr	r3, [r2, #8]
 8009e9e:	b410      	push	{r4}
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	6093      	str	r3, [r2, #8]
 8009ea6:	da07      	bge.n	8009eb8 <__sfputc_r+0x1c>
 8009ea8:	6994      	ldr	r4, [r2, #24]
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	db01      	blt.n	8009eb2 <__sfputc_r+0x16>
 8009eae:	290a      	cmp	r1, #10
 8009eb0:	d102      	bne.n	8009eb8 <__sfputc_r+0x1c>
 8009eb2:	bc10      	pop	{r4}
 8009eb4:	f000 bd2c 	b.w	800a910 <__swbuf_r>
 8009eb8:	6813      	ldr	r3, [r2, #0]
 8009eba:	1c58      	adds	r0, r3, #1
 8009ebc:	6010      	str	r0, [r2, #0]
 8009ebe:	7019      	strb	r1, [r3, #0]
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	bc10      	pop	{r4}
 8009ec4:	4770      	bx	lr

08009ec6 <__sfputs_r>:
 8009ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec8:	4606      	mov	r6, r0
 8009eca:	460f      	mov	r7, r1
 8009ecc:	4614      	mov	r4, r2
 8009ece:	18d5      	adds	r5, r2, r3
 8009ed0:	42ac      	cmp	r4, r5
 8009ed2:	d101      	bne.n	8009ed8 <__sfputs_r+0x12>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e007      	b.n	8009ee8 <__sfputs_r+0x22>
 8009ed8:	463a      	mov	r2, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee0:	f7ff ffdc 	bl	8009e9c <__sfputc_r>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d1f3      	bne.n	8009ed0 <__sfputs_r+0xa>
 8009ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009eec <_vfiprintf_r>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	4698      	mov	r8, r3
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	b09d      	sub	sp, #116	; 0x74
 8009efa:	b118      	cbz	r0, 8009f04 <_vfiprintf_r+0x18>
 8009efc:	6983      	ldr	r3, [r0, #24]
 8009efe:	b90b      	cbnz	r3, 8009f04 <_vfiprintf_r+0x18>
 8009f00:	f000 fee8 	bl	800acd4 <__sinit>
 8009f04:	4b89      	ldr	r3, [pc, #548]	; (800a12c <_vfiprintf_r+0x240>)
 8009f06:	429d      	cmp	r5, r3
 8009f08:	d11b      	bne.n	8009f42 <_vfiprintf_r+0x56>
 8009f0a:	6875      	ldr	r5, [r6, #4]
 8009f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_vfiprintf_r+0x32>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_vfiprintf_r+0x32>
 8009f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1a:	f000 ff79 	bl	800ae10 <__retarget_lock_acquire_recursive>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	d501      	bpl.n	8009f28 <_vfiprintf_r+0x3c>
 8009f24:	692b      	ldr	r3, [r5, #16]
 8009f26:	b9eb      	cbnz	r3, 8009f64 <_vfiprintf_r+0x78>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 fd42 	bl	800a9b4 <__swsetup_r>
 8009f30:	b1c0      	cbz	r0, 8009f64 <_vfiprintf_r+0x78>
 8009f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f34:	07dc      	lsls	r4, r3, #31
 8009f36:	d50e      	bpl.n	8009f56 <_vfiprintf_r+0x6a>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	b01d      	add	sp, #116	; 0x74
 8009f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	4b7b      	ldr	r3, [pc, #492]	; (800a130 <_vfiprintf_r+0x244>)
 8009f44:	429d      	cmp	r5, r3
 8009f46:	d101      	bne.n	8009f4c <_vfiprintf_r+0x60>
 8009f48:	68b5      	ldr	r5, [r6, #8]
 8009f4a:	e7df      	b.n	8009f0c <_vfiprintf_r+0x20>
 8009f4c:	4b79      	ldr	r3, [pc, #484]	; (800a134 <_vfiprintf_r+0x248>)
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	bf08      	it	eq
 8009f52:	68f5      	ldreq	r5, [r6, #12]
 8009f54:	e7da      	b.n	8009f0c <_vfiprintf_r+0x20>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	0598      	lsls	r0, r3, #22
 8009f5a:	d4ed      	bmi.n	8009f38 <_vfiprintf_r+0x4c>
 8009f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5e:	f000 ff58 	bl	800ae12 <__retarget_lock_release_recursive>
 8009f62:	e7e9      	b.n	8009f38 <_vfiprintf_r+0x4c>
 8009f64:	2300      	movs	r3, #0
 8009f66:	9309      	str	r3, [sp, #36]	; 0x24
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f6e:	2330      	movs	r3, #48	; 0x30
 8009f70:	f04f 0901 	mov.w	r9, #1
 8009f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a138 <_vfiprintf_r+0x24c>
 8009f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f80:	4623      	mov	r3, r4
 8009f82:	469a      	mov	sl, r3
 8009f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f88:	b10a      	cbz	r2, 8009f8e <_vfiprintf_r+0xa2>
 8009f8a:	2a25      	cmp	r2, #37	; 0x25
 8009f8c:	d1f9      	bne.n	8009f82 <_vfiprintf_r+0x96>
 8009f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f92:	d00b      	beq.n	8009fac <_vfiprintf_r+0xc0>
 8009f94:	465b      	mov	r3, fp
 8009f96:	4622      	mov	r2, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff ff93 	bl	8009ec6 <__sfputs_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f000 80aa 	beq.w	800a0fa <_vfiprintf_r+0x20e>
 8009fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa8:	445a      	add	r2, fp
 8009faa:	9209      	str	r2, [sp, #36]	; 0x24
 8009fac:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 80a2 	beq.w	800a0fa <_vfiprintf_r+0x20e>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc0:	f10a 0a01 	add.w	sl, sl, #1
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8009fce:	4654      	mov	r4, sl
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd6:	4858      	ldr	r0, [pc, #352]	; (800a138 <_vfiprintf_r+0x24c>)
 8009fd8:	f000 ff80 	bl	800aedc <memchr>
 8009fdc:	9a04      	ldr	r2, [sp, #16]
 8009fde:	b9d8      	cbnz	r0, 800a018 <_vfiprintf_r+0x12c>
 8009fe0:	06d1      	lsls	r1, r2, #27
 8009fe2:	bf44      	itt	mi
 8009fe4:	2320      	movmi	r3, #32
 8009fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fea:	0713      	lsls	r3, r2, #28
 8009fec:	bf44      	itt	mi
 8009fee:	232b      	movmi	r3, #43	; 0x2b
 8009ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffa:	d015      	beq.n	800a028 <_vfiprintf_r+0x13c>
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2000      	movs	r0, #0
 800a000:	f04f 0c0a 	mov.w	ip, #10
 800a004:	9a07      	ldr	r2, [sp, #28]
 800a006:	4621      	mov	r1, r4
 800a008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00c:	3b30      	subs	r3, #48	; 0x30
 800a00e:	2b09      	cmp	r3, #9
 800a010:	d94e      	bls.n	800a0b0 <_vfiprintf_r+0x1c4>
 800a012:	b1b0      	cbz	r0, 800a042 <_vfiprintf_r+0x156>
 800a014:	9207      	str	r2, [sp, #28]
 800a016:	e014      	b.n	800a042 <_vfiprintf_r+0x156>
 800a018:	eba0 0308 	sub.w	r3, r0, r8
 800a01c:	fa09 f303 	lsl.w	r3, r9, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	46a2      	mov	sl, r4
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	e7d2      	b.n	8009fce <_vfiprintf_r+0xe2>
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	1d19      	adds	r1, r3, #4
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	9103      	str	r1, [sp, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	bfbb      	ittet	lt
 800a034:	425b      	neglt	r3, r3
 800a036:	f042 0202 	orrlt.w	r2, r2, #2
 800a03a:	9307      	strge	r3, [sp, #28]
 800a03c:	9307      	strlt	r3, [sp, #28]
 800a03e:	bfb8      	it	lt
 800a040:	9204      	strlt	r2, [sp, #16]
 800a042:	7823      	ldrb	r3, [r4, #0]
 800a044:	2b2e      	cmp	r3, #46	; 0x2e
 800a046:	d10c      	bne.n	800a062 <_vfiprintf_r+0x176>
 800a048:	7863      	ldrb	r3, [r4, #1]
 800a04a:	2b2a      	cmp	r3, #42	; 0x2a
 800a04c:	d135      	bne.n	800a0ba <_vfiprintf_r+0x1ce>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	3402      	adds	r4, #2
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	9203      	str	r2, [sp, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfb8      	it	lt
 800a05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a060:	9305      	str	r3, [sp, #20]
 800a062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a148 <_vfiprintf_r+0x25c>
 800a066:	2203      	movs	r2, #3
 800a068:	4650      	mov	r0, sl
 800a06a:	7821      	ldrb	r1, [r4, #0]
 800a06c:	f000 ff36 	bl	800aedc <memchr>
 800a070:	b140      	cbz	r0, 800a084 <_vfiprintf_r+0x198>
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	eba0 000a 	sub.w	r0, r0, sl
 800a078:	fa03 f000 	lsl.w	r0, r3, r0
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	3401      	adds	r4, #1
 800a080:	4303      	orrs	r3, r0
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	2206      	movs	r2, #6
 800a08a:	482c      	ldr	r0, [pc, #176]	; (800a13c <_vfiprintf_r+0x250>)
 800a08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a090:	f000 ff24 	bl	800aedc <memchr>
 800a094:	2800      	cmp	r0, #0
 800a096:	d03f      	beq.n	800a118 <_vfiprintf_r+0x22c>
 800a098:	4b29      	ldr	r3, [pc, #164]	; (800a140 <_vfiprintf_r+0x254>)
 800a09a:	bb1b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x1f8>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	3307      	adds	r3, #7
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0aa:	443b      	add	r3, r7
 800a0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ae:	e767      	b.n	8009f80 <_vfiprintf_r+0x94>
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b8:	e7a5      	b.n	800a006 <_vfiprintf_r+0x11a>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f04f 0c0a 	mov.w	ip, #10
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0cc:	3a30      	subs	r2, #48	; 0x30
 800a0ce:	2a09      	cmp	r2, #9
 800a0d0:	d903      	bls.n	800a0da <_vfiprintf_r+0x1ee>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c5      	beq.n	800a062 <_vfiprintf_r+0x176>
 800a0d6:	9105      	str	r1, [sp, #20]
 800a0d8:	e7c3      	b.n	800a062 <_vfiprintf_r+0x176>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	2301      	movs	r3, #1
 800a0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e2:	e7f0      	b.n	800a0c6 <_vfiprintf_r+0x1da>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4b15      	ldr	r3, [pc, #84]	; (800a144 <_vfiprintf_r+0x258>)
 800a0ee:	a904      	add	r1, sp, #16
 800a0f0:	f3af 8000 	nop.w
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	1c78      	adds	r0, r7, #1
 800a0f8:	d1d6      	bne.n	800a0a8 <_vfiprintf_r+0x1bc>
 800a0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0fc:	07d9      	lsls	r1, r3, #31
 800a0fe:	d405      	bmi.n	800a10c <_vfiprintf_r+0x220>
 800a100:	89ab      	ldrh	r3, [r5, #12]
 800a102:	059a      	lsls	r2, r3, #22
 800a104:	d402      	bmi.n	800a10c <_vfiprintf_r+0x220>
 800a106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a108:	f000 fe83 	bl	800ae12 <__retarget_lock_release_recursive>
 800a10c:	89ab      	ldrh	r3, [r5, #12]
 800a10e:	065b      	lsls	r3, r3, #25
 800a110:	f53f af12 	bmi.w	8009f38 <_vfiprintf_r+0x4c>
 800a114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a116:	e711      	b.n	8009f3c <_vfiprintf_r+0x50>
 800a118:	ab03      	add	r3, sp, #12
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	462a      	mov	r2, r5
 800a11e:	4630      	mov	r0, r6
 800a120:	4b08      	ldr	r3, [pc, #32]	; (800a144 <_vfiprintf_r+0x258>)
 800a122:	a904      	add	r1, sp, #16
 800a124:	f000 f882 	bl	800a22c <_printf_i>
 800a128:	e7e4      	b.n	800a0f4 <_vfiprintf_r+0x208>
 800a12a:	bf00      	nop
 800a12c:	0800b490 	.word	0x0800b490
 800a130:	0800b4b0 	.word	0x0800b4b0
 800a134:	0800b470 	.word	0x0800b470
 800a138:	0800b424 	.word	0x0800b424
 800a13c:	0800b42a 	.word	0x0800b42a
 800a140:	00000000 	.word	0x00000000
 800a144:	08009ec7 	.word	0x08009ec7
 800a148:	0800b420 	.word	0x0800b420

0800a14c <_printf_common>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	4616      	mov	r6, r2
 800a152:	4699      	mov	r9, r3
 800a154:	688a      	ldr	r2, [r1, #8]
 800a156:	690b      	ldr	r3, [r1, #16]
 800a158:	4607      	mov	r7, r0
 800a15a:	4293      	cmp	r3, r2
 800a15c:	bfb8      	it	lt
 800a15e:	4613      	movlt	r3, r2
 800a160:	6033      	str	r3, [r6, #0]
 800a162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a166:	460c      	mov	r4, r1
 800a168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16c:	b10a      	cbz	r2, 800a172 <_printf_common+0x26>
 800a16e:	3301      	adds	r3, #1
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	0699      	lsls	r1, r3, #26
 800a176:	bf42      	ittt	mi
 800a178:	6833      	ldrmi	r3, [r6, #0]
 800a17a:	3302      	addmi	r3, #2
 800a17c:	6033      	strmi	r3, [r6, #0]
 800a17e:	6825      	ldr	r5, [r4, #0]
 800a180:	f015 0506 	ands.w	r5, r5, #6
 800a184:	d106      	bne.n	800a194 <_printf_common+0x48>
 800a186:	f104 0a19 	add.w	sl, r4, #25
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	6832      	ldr	r2, [r6, #0]
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	42ab      	cmp	r3, r5
 800a192:	dc28      	bgt.n	800a1e6 <_printf_common+0x9a>
 800a194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a198:	1e13      	subs	r3, r2, #0
 800a19a:	6822      	ldr	r2, [r4, #0]
 800a19c:	bf18      	it	ne
 800a19e:	2301      	movne	r3, #1
 800a1a0:	0692      	lsls	r2, r2, #26
 800a1a2:	d42d      	bmi.n	800a200 <_printf_common+0xb4>
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1ac:	47c0      	blx	r8
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d020      	beq.n	800a1f4 <_printf_common+0xa8>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	68e5      	ldr	r5, [r4, #12]
 800a1b6:	f003 0306 	and.w	r3, r3, #6
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	bf18      	it	ne
 800a1be:	2500      	movne	r5, #0
 800a1c0:	6832      	ldr	r2, [r6, #0]
 800a1c2:	f04f 0600 	mov.w	r6, #0
 800a1c6:	68a3      	ldr	r3, [r4, #8]
 800a1c8:	bf08      	it	eq
 800a1ca:	1aad      	subeq	r5, r5, r2
 800a1cc:	6922      	ldr	r2, [r4, #16]
 800a1ce:	bf08      	it	eq
 800a1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	bfc4      	itt	gt
 800a1d8:	1a9b      	subgt	r3, r3, r2
 800a1da:	18ed      	addgt	r5, r5, r3
 800a1dc:	341a      	adds	r4, #26
 800a1de:	42b5      	cmp	r5, r6
 800a1e0:	d11a      	bne.n	800a218 <_printf_common+0xcc>
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	e008      	b.n	800a1f8 <_printf_common+0xac>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	47c0      	blx	r8
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d103      	bne.n	800a1fc <_printf_common+0xb0>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	e7c4      	b.n	800a18a <_printf_common+0x3e>
 800a200:	2030      	movs	r0, #48	; 0x30
 800a202:	18e1      	adds	r1, r4, r3
 800a204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a20e:	4422      	add	r2, r4
 800a210:	3302      	adds	r3, #2
 800a212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a216:	e7c5      	b.n	800a1a4 <_printf_common+0x58>
 800a218:	2301      	movs	r3, #1
 800a21a:	4622      	mov	r2, r4
 800a21c:	4649      	mov	r1, r9
 800a21e:	4638      	mov	r0, r7
 800a220:	47c0      	blx	r8
 800a222:	3001      	adds	r0, #1
 800a224:	d0e6      	beq.n	800a1f4 <_printf_common+0xa8>
 800a226:	3601      	adds	r6, #1
 800a228:	e7d9      	b.n	800a1de <_printf_common+0x92>
	...

0800a22c <_printf_i>:
 800a22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	7e27      	ldrb	r7, [r4, #24]
 800a234:	4691      	mov	r9, r2
 800a236:	2f78      	cmp	r7, #120	; 0x78
 800a238:	4680      	mov	r8, r0
 800a23a:	469a      	mov	sl, r3
 800a23c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a23e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a242:	d807      	bhi.n	800a254 <_printf_i+0x28>
 800a244:	2f62      	cmp	r7, #98	; 0x62
 800a246:	d80a      	bhi.n	800a25e <_printf_i+0x32>
 800a248:	2f00      	cmp	r7, #0
 800a24a:	f000 80d9 	beq.w	800a400 <_printf_i+0x1d4>
 800a24e:	2f58      	cmp	r7, #88	; 0x58
 800a250:	f000 80a4 	beq.w	800a39c <_printf_i+0x170>
 800a254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a25c:	e03a      	b.n	800a2d4 <_printf_i+0xa8>
 800a25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a262:	2b15      	cmp	r3, #21
 800a264:	d8f6      	bhi.n	800a254 <_printf_i+0x28>
 800a266:	a001      	add	r0, pc, #4	; (adr r0, 800a26c <_printf_i+0x40>)
 800a268:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a26c:	0800a2c5 	.word	0x0800a2c5
 800a270:	0800a2d9 	.word	0x0800a2d9
 800a274:	0800a255 	.word	0x0800a255
 800a278:	0800a255 	.word	0x0800a255
 800a27c:	0800a255 	.word	0x0800a255
 800a280:	0800a255 	.word	0x0800a255
 800a284:	0800a2d9 	.word	0x0800a2d9
 800a288:	0800a255 	.word	0x0800a255
 800a28c:	0800a255 	.word	0x0800a255
 800a290:	0800a255 	.word	0x0800a255
 800a294:	0800a255 	.word	0x0800a255
 800a298:	0800a3e7 	.word	0x0800a3e7
 800a29c:	0800a309 	.word	0x0800a309
 800a2a0:	0800a3c9 	.word	0x0800a3c9
 800a2a4:	0800a255 	.word	0x0800a255
 800a2a8:	0800a255 	.word	0x0800a255
 800a2ac:	0800a409 	.word	0x0800a409
 800a2b0:	0800a255 	.word	0x0800a255
 800a2b4:	0800a309 	.word	0x0800a309
 800a2b8:	0800a255 	.word	0x0800a255
 800a2bc:	0800a255 	.word	0x0800a255
 800a2c0:	0800a3d1 	.word	0x0800a3d1
 800a2c4:	680b      	ldr	r3, [r1, #0]
 800a2c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	600a      	str	r2, [r1, #0]
 800a2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0a4      	b.n	800a422 <_printf_i+0x1f6>
 800a2d8:	6825      	ldr	r5, [r4, #0]
 800a2da:	6808      	ldr	r0, [r1, #0]
 800a2dc:	062e      	lsls	r6, r5, #24
 800a2de:	f100 0304 	add.w	r3, r0, #4
 800a2e2:	d50a      	bpl.n	800a2fa <_printf_i+0xce>
 800a2e4:	6805      	ldr	r5, [r0, #0]
 800a2e6:	600b      	str	r3, [r1, #0]
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	da03      	bge.n	800a2f4 <_printf_i+0xc8>
 800a2ec:	232d      	movs	r3, #45	; 0x2d
 800a2ee:	426d      	negs	r5, r5
 800a2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f4:	230a      	movs	r3, #10
 800a2f6:	485e      	ldr	r0, [pc, #376]	; (800a470 <_printf_i+0x244>)
 800a2f8:	e019      	b.n	800a32e <_printf_i+0x102>
 800a2fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2fe:	6805      	ldr	r5, [r0, #0]
 800a300:	600b      	str	r3, [r1, #0]
 800a302:	bf18      	it	ne
 800a304:	b22d      	sxthne	r5, r5
 800a306:	e7ef      	b.n	800a2e8 <_printf_i+0xbc>
 800a308:	680b      	ldr	r3, [r1, #0]
 800a30a:	6825      	ldr	r5, [r4, #0]
 800a30c:	1d18      	adds	r0, r3, #4
 800a30e:	6008      	str	r0, [r1, #0]
 800a310:	0628      	lsls	r0, r5, #24
 800a312:	d501      	bpl.n	800a318 <_printf_i+0xec>
 800a314:	681d      	ldr	r5, [r3, #0]
 800a316:	e002      	b.n	800a31e <_printf_i+0xf2>
 800a318:	0669      	lsls	r1, r5, #25
 800a31a:	d5fb      	bpl.n	800a314 <_printf_i+0xe8>
 800a31c:	881d      	ldrh	r5, [r3, #0]
 800a31e:	2f6f      	cmp	r7, #111	; 0x6f
 800a320:	bf0c      	ite	eq
 800a322:	2308      	moveq	r3, #8
 800a324:	230a      	movne	r3, #10
 800a326:	4852      	ldr	r0, [pc, #328]	; (800a470 <_printf_i+0x244>)
 800a328:	2100      	movs	r1, #0
 800a32a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a32e:	6866      	ldr	r6, [r4, #4]
 800a330:	2e00      	cmp	r6, #0
 800a332:	bfa8      	it	ge
 800a334:	6821      	ldrge	r1, [r4, #0]
 800a336:	60a6      	str	r6, [r4, #8]
 800a338:	bfa4      	itt	ge
 800a33a:	f021 0104 	bicge.w	r1, r1, #4
 800a33e:	6021      	strge	r1, [r4, #0]
 800a340:	b90d      	cbnz	r5, 800a346 <_printf_i+0x11a>
 800a342:	2e00      	cmp	r6, #0
 800a344:	d04d      	beq.n	800a3e2 <_printf_i+0x1b6>
 800a346:	4616      	mov	r6, r2
 800a348:	fbb5 f1f3 	udiv	r1, r5, r3
 800a34c:	fb03 5711 	mls	r7, r3, r1, r5
 800a350:	5dc7      	ldrb	r7, [r0, r7]
 800a352:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a356:	462f      	mov	r7, r5
 800a358:	42bb      	cmp	r3, r7
 800a35a:	460d      	mov	r5, r1
 800a35c:	d9f4      	bls.n	800a348 <_printf_i+0x11c>
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d10b      	bne.n	800a37a <_printf_i+0x14e>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	07df      	lsls	r7, r3, #31
 800a366:	d508      	bpl.n	800a37a <_printf_i+0x14e>
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	6861      	ldr	r1, [r4, #4]
 800a36c:	4299      	cmp	r1, r3
 800a36e:	bfde      	ittt	le
 800a370:	2330      	movle	r3, #48	; 0x30
 800a372:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a376:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a37a:	1b92      	subs	r2, r2, r6
 800a37c:	6122      	str	r2, [r4, #16]
 800a37e:	464b      	mov	r3, r9
 800a380:	4621      	mov	r1, r4
 800a382:	4640      	mov	r0, r8
 800a384:	f8cd a000 	str.w	sl, [sp]
 800a388:	aa03      	add	r2, sp, #12
 800a38a:	f7ff fedf 	bl	800a14c <_printf_common>
 800a38e:	3001      	adds	r0, #1
 800a390:	d14c      	bne.n	800a42c <_printf_i+0x200>
 800a392:	f04f 30ff 	mov.w	r0, #4294967295
 800a396:	b004      	add	sp, #16
 800a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39c:	4834      	ldr	r0, [pc, #208]	; (800a470 <_printf_i+0x244>)
 800a39e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3a2:	680e      	ldr	r6, [r1, #0]
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3aa:	061f      	lsls	r7, r3, #24
 800a3ac:	600e      	str	r6, [r1, #0]
 800a3ae:	d514      	bpl.n	800a3da <_printf_i+0x1ae>
 800a3b0:	07d9      	lsls	r1, r3, #31
 800a3b2:	bf44      	itt	mi
 800a3b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b8:	6023      	strmi	r3, [r4, #0]
 800a3ba:	b91d      	cbnz	r5, 800a3c4 <_printf_i+0x198>
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	f023 0320 	bic.w	r3, r3, #32
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	e7af      	b.n	800a328 <_printf_i+0xfc>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	f043 0320 	orr.w	r3, r3, #32
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	2378      	movs	r3, #120	; 0x78
 800a3d2:	4828      	ldr	r0, [pc, #160]	; (800a474 <_printf_i+0x248>)
 800a3d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3d8:	e7e3      	b.n	800a3a2 <_printf_i+0x176>
 800a3da:	065e      	lsls	r6, r3, #25
 800a3dc:	bf48      	it	mi
 800a3de:	b2ad      	uxthmi	r5, r5
 800a3e0:	e7e6      	b.n	800a3b0 <_printf_i+0x184>
 800a3e2:	4616      	mov	r6, r2
 800a3e4:	e7bb      	b.n	800a35e <_printf_i+0x132>
 800a3e6:	680b      	ldr	r3, [r1, #0]
 800a3e8:	6826      	ldr	r6, [r4, #0]
 800a3ea:	1d1d      	adds	r5, r3, #4
 800a3ec:	6960      	ldr	r0, [r4, #20]
 800a3ee:	600d      	str	r5, [r1, #0]
 800a3f0:	0635      	lsls	r5, r6, #24
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	d501      	bpl.n	800a3fa <_printf_i+0x1ce>
 800a3f6:	6018      	str	r0, [r3, #0]
 800a3f8:	e002      	b.n	800a400 <_printf_i+0x1d4>
 800a3fa:	0671      	lsls	r1, r6, #25
 800a3fc:	d5fb      	bpl.n	800a3f6 <_printf_i+0x1ca>
 800a3fe:	8018      	strh	r0, [r3, #0]
 800a400:	2300      	movs	r3, #0
 800a402:	4616      	mov	r6, r2
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	e7ba      	b.n	800a37e <_printf_i+0x152>
 800a408:	680b      	ldr	r3, [r1, #0]
 800a40a:	1d1a      	adds	r2, r3, #4
 800a40c:	600a      	str	r2, [r1, #0]
 800a40e:	681e      	ldr	r6, [r3, #0]
 800a410:	2100      	movs	r1, #0
 800a412:	4630      	mov	r0, r6
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	f000 fd61 	bl	800aedc <memchr>
 800a41a:	b108      	cbz	r0, 800a420 <_printf_i+0x1f4>
 800a41c:	1b80      	subs	r0, r0, r6
 800a41e:	6060      	str	r0, [r4, #4]
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	2300      	movs	r3, #0
 800a426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42a:	e7a8      	b.n	800a37e <_printf_i+0x152>
 800a42c:	4632      	mov	r2, r6
 800a42e:	4649      	mov	r1, r9
 800a430:	4640      	mov	r0, r8
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	47d0      	blx	sl
 800a436:	3001      	adds	r0, #1
 800a438:	d0ab      	beq.n	800a392 <_printf_i+0x166>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	079b      	lsls	r3, r3, #30
 800a43e:	d413      	bmi.n	800a468 <_printf_i+0x23c>
 800a440:	68e0      	ldr	r0, [r4, #12]
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	4298      	cmp	r0, r3
 800a446:	bfb8      	it	lt
 800a448:	4618      	movlt	r0, r3
 800a44a:	e7a4      	b.n	800a396 <_printf_i+0x16a>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4632      	mov	r2, r6
 800a450:	4649      	mov	r1, r9
 800a452:	4640      	mov	r0, r8
 800a454:	47d0      	blx	sl
 800a456:	3001      	adds	r0, #1
 800a458:	d09b      	beq.n	800a392 <_printf_i+0x166>
 800a45a:	3501      	adds	r5, #1
 800a45c:	68e3      	ldr	r3, [r4, #12]
 800a45e:	9903      	ldr	r1, [sp, #12]
 800a460:	1a5b      	subs	r3, r3, r1
 800a462:	42ab      	cmp	r3, r5
 800a464:	dcf2      	bgt.n	800a44c <_printf_i+0x220>
 800a466:	e7eb      	b.n	800a440 <_printf_i+0x214>
 800a468:	2500      	movs	r5, #0
 800a46a:	f104 0619 	add.w	r6, r4, #25
 800a46e:	e7f5      	b.n	800a45c <_printf_i+0x230>
 800a470:	0800b431 	.word	0x0800b431
 800a474:	0800b442 	.word	0x0800b442

0800a478 <_scanf_chars>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4615      	mov	r5, r2
 800a47e:	688a      	ldr	r2, [r1, #8]
 800a480:	4680      	mov	r8, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b932      	cbnz	r2, 800a494 <_scanf_chars+0x1c>
 800a486:	698a      	ldr	r2, [r1, #24]
 800a488:	2a00      	cmp	r2, #0
 800a48a:	bf0c      	ite	eq
 800a48c:	2201      	moveq	r2, #1
 800a48e:	f04f 32ff 	movne.w	r2, #4294967295
 800a492:	608a      	str	r2, [r1, #8]
 800a494:	2700      	movs	r7, #0
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a524 <_scanf_chars+0xac>
 800a49c:	06d1      	lsls	r1, r2, #27
 800a49e:	bf5f      	itttt	pl
 800a4a0:	681a      	ldrpl	r2, [r3, #0]
 800a4a2:	1d11      	addpl	r1, r2, #4
 800a4a4:	6019      	strpl	r1, [r3, #0]
 800a4a6:	6816      	ldrpl	r6, [r2, #0]
 800a4a8:	69a0      	ldr	r0, [r4, #24]
 800a4aa:	b188      	cbz	r0, 800a4d0 <_scanf_chars+0x58>
 800a4ac:	2801      	cmp	r0, #1
 800a4ae:	d107      	bne.n	800a4c0 <_scanf_chars+0x48>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	6963      	ldr	r3, [r4, #20]
 800a4b6:	5c9b      	ldrb	r3, [r3, r2]
 800a4b8:	b953      	cbnz	r3, 800a4d0 <_scanf_chars+0x58>
 800a4ba:	bb27      	cbnz	r7, 800a506 <_scanf_chars+0x8e>
 800a4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4c0:	2802      	cmp	r0, #2
 800a4c2:	d120      	bne.n	800a506 <_scanf_chars+0x8e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a4cc:	071b      	lsls	r3, r3, #28
 800a4ce:	d41a      	bmi.n	800a506 <_scanf_chars+0x8e>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	3701      	adds	r7, #1
 800a4d4:	06da      	lsls	r2, r3, #27
 800a4d6:	bf5e      	ittt	pl
 800a4d8:	682b      	ldrpl	r3, [r5, #0]
 800a4da:	781b      	ldrbpl	r3, [r3, #0]
 800a4dc:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a4e0:	682a      	ldr	r2, [r5, #0]
 800a4e2:	686b      	ldr	r3, [r5, #4]
 800a4e4:	3201      	adds	r2, #1
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	68a2      	ldr	r2, [r4, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	3a01      	subs	r2, #1
 800a4ee:	606b      	str	r3, [r5, #4]
 800a4f0:	60a2      	str	r2, [r4, #8]
 800a4f2:	b142      	cbz	r2, 800a506 <_scanf_chars+0x8e>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dcd7      	bgt.n	800a4a8 <_scanf_chars+0x30>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a500:	4798      	blx	r3
 800a502:	2800      	cmp	r0, #0
 800a504:	d0d0      	beq.n	800a4a8 <_scanf_chars+0x30>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f013 0310 	ands.w	r3, r3, #16
 800a50c:	d105      	bne.n	800a51a <_scanf_chars+0xa2>
 800a50e:	68e2      	ldr	r2, [r4, #12]
 800a510:	3201      	adds	r2, #1
 800a512:	60e2      	str	r2, [r4, #12]
 800a514:	69a2      	ldr	r2, [r4, #24]
 800a516:	b102      	cbz	r2, 800a51a <_scanf_chars+0xa2>
 800a518:	7033      	strb	r3, [r6, #0]
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	2000      	movs	r0, #0
 800a51e:	441f      	add	r7, r3
 800a520:	6127      	str	r7, [r4, #16]
 800a522:	e7cb      	b.n	800a4bc <_scanf_chars+0x44>
 800a524:	0800b320 	.word	0x0800b320

0800a528 <_scanf_i>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	4698      	mov	r8, r3
 800a530:	4b72      	ldr	r3, [pc, #456]	; (800a6fc <_scanf_i+0x1d4>)
 800a532:	b087      	sub	sp, #28
 800a534:	4682      	mov	sl, r0
 800a536:	4616      	mov	r6, r2
 800a538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a53c:	ab03      	add	r3, sp, #12
 800a53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a542:	4b6f      	ldr	r3, [pc, #444]	; (800a700 <_scanf_i+0x1d8>)
 800a544:	69a1      	ldr	r1, [r4, #24]
 800a546:	4a6f      	ldr	r2, [pc, #444]	; (800a704 <_scanf_i+0x1dc>)
 800a548:	4627      	mov	r7, r4
 800a54a:	2903      	cmp	r1, #3
 800a54c:	bf18      	it	ne
 800a54e:	461a      	movne	r2, r3
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	9201      	str	r2, [sp, #4]
 800a554:	1e5a      	subs	r2, r3, #1
 800a556:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a55a:	bf81      	itttt	hi
 800a55c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a560:	eb03 0905 	addhi.w	r9, r3, r5
 800a564:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a568:	60a3      	strhi	r3, [r4, #8]
 800a56a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a56e:	bf98      	it	ls
 800a570:	f04f 0900 	movls.w	r9, #0
 800a574:	463d      	mov	r5, r7
 800a576:	f04f 0b00 	mov.w	fp, #0
 800a57a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	6831      	ldr	r1, [r6, #0]
 800a582:	ab03      	add	r3, sp, #12
 800a584:	2202      	movs	r2, #2
 800a586:	7809      	ldrb	r1, [r1, #0]
 800a588:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a58c:	f000 fca6 	bl	800aedc <memchr>
 800a590:	b328      	cbz	r0, 800a5de <_scanf_i+0xb6>
 800a592:	f1bb 0f01 	cmp.w	fp, #1
 800a596:	d159      	bne.n	800a64c <_scanf_i+0x124>
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	b92a      	cbnz	r2, 800a5a8 <_scanf_i+0x80>
 800a59c:	2308      	movs	r3, #8
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5ae:	6022      	str	r2, [r4, #0]
 800a5b0:	68a2      	ldr	r2, [r4, #8]
 800a5b2:	1e51      	subs	r1, r2, #1
 800a5b4:	60a1      	str	r1, [r4, #8]
 800a5b6:	b192      	cbz	r2, 800a5de <_scanf_i+0xb6>
 800a5b8:	6832      	ldr	r2, [r6, #0]
 800a5ba:	1c51      	adds	r1, r2, #1
 800a5bc:	6031      	str	r1, [r6, #0]
 800a5be:	7812      	ldrb	r2, [r2, #0]
 800a5c0:	f805 2b01 	strb.w	r2, [r5], #1
 800a5c4:	6872      	ldr	r2, [r6, #4]
 800a5c6:	3a01      	subs	r2, #1
 800a5c8:	2a00      	cmp	r2, #0
 800a5ca:	6072      	str	r2, [r6, #4]
 800a5cc:	dc07      	bgt.n	800a5de <_scanf_i+0xb6>
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a5d6:	4790      	blx	r2
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f040 8085 	bne.w	800a6e8 <_scanf_i+0x1c0>
 800a5de:	f10b 0b01 	add.w	fp, fp, #1
 800a5e2:	f1bb 0f03 	cmp.w	fp, #3
 800a5e6:	d1cb      	bne.n	800a580 <_scanf_i+0x58>
 800a5e8:	6863      	ldr	r3, [r4, #4]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <_scanf_i+0xc8>
 800a5ec:	230a      	movs	r3, #10
 800a5ee:	6063      	str	r3, [r4, #4]
 800a5f0:	6863      	ldr	r3, [r4, #4]
 800a5f2:	4945      	ldr	r1, [pc, #276]	; (800a708 <_scanf_i+0x1e0>)
 800a5f4:	6960      	ldr	r0, [r4, #20]
 800a5f6:	1ac9      	subs	r1, r1, r3
 800a5f8:	f000 f89a 	bl	800a730 <__sccl>
 800a5fc:	f04f 0b00 	mov.w	fp, #0
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d03d      	beq.n	800a684 <_scanf_i+0x15c>
 800a608:	6831      	ldr	r1, [r6, #0]
 800a60a:	6960      	ldr	r0, [r4, #20]
 800a60c:	f891 c000 	ldrb.w	ip, [r1]
 800a610:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a614:	2800      	cmp	r0, #0
 800a616:	d035      	beq.n	800a684 <_scanf_i+0x15c>
 800a618:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a61c:	d124      	bne.n	800a668 <_scanf_i+0x140>
 800a61e:	0510      	lsls	r0, r2, #20
 800a620:	d522      	bpl.n	800a668 <_scanf_i+0x140>
 800a622:	f10b 0b01 	add.w	fp, fp, #1
 800a626:	f1b9 0f00 	cmp.w	r9, #0
 800a62a:	d003      	beq.n	800a634 <_scanf_i+0x10c>
 800a62c:	3301      	adds	r3, #1
 800a62e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a632:	60a3      	str	r3, [r4, #8]
 800a634:	6873      	ldr	r3, [r6, #4]
 800a636:	3b01      	subs	r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	6073      	str	r3, [r6, #4]
 800a63c:	dd1b      	ble.n	800a676 <_scanf_i+0x14e>
 800a63e:	6833      	ldr	r3, [r6, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	6033      	str	r3, [r6, #0]
 800a644:	68a3      	ldr	r3, [r4, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	60a3      	str	r3, [r4, #8]
 800a64a:	e7d9      	b.n	800a600 <_scanf_i+0xd8>
 800a64c:	f1bb 0f02 	cmp.w	fp, #2
 800a650:	d1ae      	bne.n	800a5b0 <_scanf_i+0x88>
 800a652:	6822      	ldr	r2, [r4, #0]
 800a654:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a658:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a65c:	d1bf      	bne.n	800a5de <_scanf_i+0xb6>
 800a65e:	2310      	movs	r3, #16
 800a660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a664:	6063      	str	r3, [r4, #4]
 800a666:	e7a2      	b.n	800a5ae <_scanf_i+0x86>
 800a668:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a66c:	6022      	str	r2, [r4, #0]
 800a66e:	780b      	ldrb	r3, [r1, #0]
 800a670:	f805 3b01 	strb.w	r3, [r5], #1
 800a674:	e7de      	b.n	800a634 <_scanf_i+0x10c>
 800a676:	4631      	mov	r1, r6
 800a678:	4650      	mov	r0, sl
 800a67a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a67e:	4798      	blx	r3
 800a680:	2800      	cmp	r0, #0
 800a682:	d0df      	beq.n	800a644 <_scanf_i+0x11c>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	05d9      	lsls	r1, r3, #23
 800a688:	d50d      	bpl.n	800a6a6 <_scanf_i+0x17e>
 800a68a:	42bd      	cmp	r5, r7
 800a68c:	d909      	bls.n	800a6a2 <_scanf_i+0x17a>
 800a68e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a692:	4632      	mov	r2, r6
 800a694:	4650      	mov	r0, sl
 800a696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a69a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a69e:	4798      	blx	r3
 800a6a0:	464d      	mov	r5, r9
 800a6a2:	42bd      	cmp	r5, r7
 800a6a4:	d028      	beq.n	800a6f8 <_scanf_i+0x1d0>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	f012 0210 	ands.w	r2, r2, #16
 800a6ac:	d113      	bne.n	800a6d6 <_scanf_i+0x1ae>
 800a6ae:	702a      	strb	r2, [r5, #0]
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	9e01      	ldr	r6, [sp, #4]
 800a6b8:	47b0      	blx	r6
 800a6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a6be:	6821      	ldr	r1, [r4, #0]
 800a6c0:	1d1a      	adds	r2, r3, #4
 800a6c2:	f8c8 2000 	str.w	r2, [r8]
 800a6c6:	f011 0f20 	tst.w	r1, #32
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	d00f      	beq.n	800a6ee <_scanf_i+0x1c6>
 800a6ce:	6018      	str	r0, [r3, #0]
 800a6d0:	68e3      	ldr	r3, [r4, #12]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	60e3      	str	r3, [r4, #12]
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	1bed      	subs	r5, r5, r7
 800a6da:	44ab      	add	fp, r5
 800a6dc:	6925      	ldr	r5, [r4, #16]
 800a6de:	445d      	add	r5, fp
 800a6e0:	6125      	str	r5, [r4, #16]
 800a6e2:	b007      	add	sp, #28
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	f04f 0b00 	mov.w	fp, #0
 800a6ec:	e7ca      	b.n	800a684 <_scanf_i+0x15c>
 800a6ee:	07ca      	lsls	r2, r1, #31
 800a6f0:	bf4c      	ite	mi
 800a6f2:	8018      	strhmi	r0, [r3, #0]
 800a6f4:	6018      	strpl	r0, [r3, #0]
 800a6f6:	e7eb      	b.n	800a6d0 <_scanf_i+0x1a8>
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	e7f2      	b.n	800a6e2 <_scanf_i+0x1ba>
 800a6fc:	0800b0ec 	.word	0x0800b0ec
 800a700:	0800a89d 	.word	0x0800a89d
 800a704:	080099a5 	.word	0x080099a5
 800a708:	0800b46c 	.word	0x0800b46c

0800a70c <_read_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	2200      	movs	r2, #0
 800a716:	4d05      	ldr	r5, [pc, #20]	; (800a72c <_read_r+0x20>)
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f6 fa11 	bl	8000b42 <_read>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_read_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_read_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20001740 	.word	0x20001740

0800a730 <__sccl>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	780b      	ldrb	r3, [r1, #0]
 800a734:	4604      	mov	r4, r0
 800a736:	2b5e      	cmp	r3, #94	; 0x5e
 800a738:	bf13      	iteet	ne
 800a73a:	2200      	movne	r2, #0
 800a73c:	2201      	moveq	r2, #1
 800a73e:	784b      	ldrbeq	r3, [r1, #1]
 800a740:	1c48      	addne	r0, r1, #1
 800a742:	bf08      	it	eq
 800a744:	1c88      	addeq	r0, r1, #2
 800a746:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a74a:	1e61      	subs	r1, r4, #1
 800a74c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a750:	42a9      	cmp	r1, r5
 800a752:	d1fb      	bne.n	800a74c <__sccl+0x1c>
 800a754:	b90b      	cbnz	r3, 800a75a <__sccl+0x2a>
 800a756:	3801      	subs	r0, #1
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	f082 0101 	eor.w	r1, r2, #1
 800a75e:	54e1      	strb	r1, [r4, r3]
 800a760:	1c42      	adds	r2, r0, #1
 800a762:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a766:	4610      	mov	r0, r2
 800a768:	2d2d      	cmp	r5, #45	; 0x2d
 800a76a:	f102 36ff 	add.w	r6, r2, #4294967295
 800a76e:	d006      	beq.n	800a77e <__sccl+0x4e>
 800a770:	2d5d      	cmp	r5, #93	; 0x5d
 800a772:	d0f1      	beq.n	800a758 <__sccl+0x28>
 800a774:	b90d      	cbnz	r5, 800a77a <__sccl+0x4a>
 800a776:	4630      	mov	r0, r6
 800a778:	e7ee      	b.n	800a758 <__sccl+0x28>
 800a77a:	462b      	mov	r3, r5
 800a77c:	e7ef      	b.n	800a75e <__sccl+0x2e>
 800a77e:	7816      	ldrb	r6, [r2, #0]
 800a780:	2e5d      	cmp	r6, #93	; 0x5d
 800a782:	d0fa      	beq.n	800a77a <__sccl+0x4a>
 800a784:	42b3      	cmp	r3, r6
 800a786:	dcf8      	bgt.n	800a77a <__sccl+0x4a>
 800a788:	4618      	mov	r0, r3
 800a78a:	3001      	adds	r0, #1
 800a78c:	4286      	cmp	r6, r0
 800a78e:	5421      	strb	r1, [r4, r0]
 800a790:	dcfb      	bgt.n	800a78a <__sccl+0x5a>
 800a792:	43d8      	mvns	r0, r3
 800a794:	4430      	add	r0, r6
 800a796:	42b3      	cmp	r3, r6
 800a798:	bfa8      	it	ge
 800a79a:	2000      	movge	r0, #0
 800a79c:	1c5d      	adds	r5, r3, #1
 800a79e:	182b      	adds	r3, r5, r0
 800a7a0:	3202      	adds	r2, #2
 800a7a2:	e7de      	b.n	800a762 <__sccl+0x32>

0800a7a4 <_strtoul_l.isra.0>:
 800a7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	468c      	mov	ip, r1
 800a7aa:	4686      	mov	lr, r0
 800a7ac:	4e3a      	ldr	r6, [pc, #232]	; (800a898 <_strtoul_l.isra.0+0xf4>)
 800a7ae:	4660      	mov	r0, ip
 800a7b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a7b4:	5da5      	ldrb	r5, [r4, r6]
 800a7b6:	f015 0508 	ands.w	r5, r5, #8
 800a7ba:	d1f8      	bne.n	800a7ae <_strtoul_l.isra.0+0xa>
 800a7bc:	2c2d      	cmp	r4, #45	; 0x2d
 800a7be:	d134      	bne.n	800a82a <_strtoul_l.isra.0+0x86>
 800a7c0:	f04f 0801 	mov.w	r8, #1
 800a7c4:	f89c 4000 	ldrb.w	r4, [ip]
 800a7c8:	f100 0c02 	add.w	ip, r0, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d05e      	beq.n	800a88e <_strtoul_l.isra.0+0xea>
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d10c      	bne.n	800a7ee <_strtoul_l.isra.0+0x4a>
 800a7d4:	2c30      	cmp	r4, #48	; 0x30
 800a7d6:	d10a      	bne.n	800a7ee <_strtoul_l.isra.0+0x4a>
 800a7d8:	f89c 0000 	ldrb.w	r0, [ip]
 800a7dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a7e0:	2858      	cmp	r0, #88	; 0x58
 800a7e2:	d14f      	bne.n	800a884 <_strtoul_l.isra.0+0xe0>
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a7ea:	f10c 0c02 	add.w	ip, ip, #2
 800a7ee:	f04f 37ff 	mov.w	r7, #4294967295
 800a7f2:	fbb7 f7f3 	udiv	r7, r7, r3
 800a7f6:	2500      	movs	r5, #0
 800a7f8:	fb03 f907 	mul.w	r9, r3, r7
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	ea6f 0909 	mvn.w	r9, r9
 800a802:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a806:	2e09      	cmp	r6, #9
 800a808:	d818      	bhi.n	800a83c <_strtoul_l.isra.0+0x98>
 800a80a:	4634      	mov	r4, r6
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	dd24      	ble.n	800a85a <_strtoul_l.isra.0+0xb6>
 800a810:	2d00      	cmp	r5, #0
 800a812:	db1f      	blt.n	800a854 <_strtoul_l.isra.0+0xb0>
 800a814:	4287      	cmp	r7, r0
 800a816:	d31d      	bcc.n	800a854 <_strtoul_l.isra.0+0xb0>
 800a818:	d101      	bne.n	800a81e <_strtoul_l.isra.0+0x7a>
 800a81a:	45a1      	cmp	r9, r4
 800a81c:	db1a      	blt.n	800a854 <_strtoul_l.isra.0+0xb0>
 800a81e:	2501      	movs	r5, #1
 800a820:	fb00 4003 	mla	r0, r0, r3, r4
 800a824:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a828:	e7eb      	b.n	800a802 <_strtoul_l.isra.0+0x5e>
 800a82a:	2c2b      	cmp	r4, #43	; 0x2b
 800a82c:	bf08      	it	eq
 800a82e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a832:	46a8      	mov	r8, r5
 800a834:	bf08      	it	eq
 800a836:	f100 0c02 	addeq.w	ip, r0, #2
 800a83a:	e7c7      	b.n	800a7cc <_strtoul_l.isra.0+0x28>
 800a83c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a840:	2e19      	cmp	r6, #25
 800a842:	d801      	bhi.n	800a848 <_strtoul_l.isra.0+0xa4>
 800a844:	3c37      	subs	r4, #55	; 0x37
 800a846:	e7e1      	b.n	800a80c <_strtoul_l.isra.0+0x68>
 800a848:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a84c:	2e19      	cmp	r6, #25
 800a84e:	d804      	bhi.n	800a85a <_strtoul_l.isra.0+0xb6>
 800a850:	3c57      	subs	r4, #87	; 0x57
 800a852:	e7db      	b.n	800a80c <_strtoul_l.isra.0+0x68>
 800a854:	f04f 35ff 	mov.w	r5, #4294967295
 800a858:	e7e4      	b.n	800a824 <_strtoul_l.isra.0+0x80>
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	da07      	bge.n	800a86e <_strtoul_l.isra.0+0xca>
 800a85e:	2322      	movs	r3, #34	; 0x22
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	f8ce 3000 	str.w	r3, [lr]
 800a868:	b942      	cbnz	r2, 800a87c <_strtoul_l.isra.0+0xd8>
 800a86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a86e:	f1b8 0f00 	cmp.w	r8, #0
 800a872:	d000      	beq.n	800a876 <_strtoul_l.isra.0+0xd2>
 800a874:	4240      	negs	r0, r0
 800a876:	2a00      	cmp	r2, #0
 800a878:	d0f7      	beq.n	800a86a <_strtoul_l.isra.0+0xc6>
 800a87a:	b10d      	cbz	r5, 800a880 <_strtoul_l.isra.0+0xdc>
 800a87c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a880:	6011      	str	r1, [r2, #0]
 800a882:	e7f2      	b.n	800a86a <_strtoul_l.isra.0+0xc6>
 800a884:	2430      	movs	r4, #48	; 0x30
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1b1      	bne.n	800a7ee <_strtoul_l.isra.0+0x4a>
 800a88a:	2308      	movs	r3, #8
 800a88c:	e7af      	b.n	800a7ee <_strtoul_l.isra.0+0x4a>
 800a88e:	2c30      	cmp	r4, #48	; 0x30
 800a890:	d0a2      	beq.n	800a7d8 <_strtoul_l.isra.0+0x34>
 800a892:	230a      	movs	r3, #10
 800a894:	e7ab      	b.n	800a7ee <_strtoul_l.isra.0+0x4a>
 800a896:	bf00      	nop
 800a898:	0800b320 	.word	0x0800b320

0800a89c <_strtoul_r>:
 800a89c:	f7ff bf82 	b.w	800a7a4 <_strtoul_l.isra.0>

0800a8a0 <__submore>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	d11b      	bne.n	800a8e8 <__submore+0x48>
 800a8b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8b4:	f7fe fe36 	bl	8009524 <_malloc_r>
 800a8b8:	b918      	cbnz	r0, 800a8c2 <__submore+0x22>
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a8d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a8da:	7043      	strb	r3, [r0, #1]
 800a8dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8e0:	7003      	strb	r3, [r0, #0]
 800a8e2:	6020      	str	r0, [r4, #0]
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7ea      	b.n	800a8be <__submore+0x1e>
 800a8e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a8ea:	0077      	lsls	r7, r6, #1
 800a8ec:	463a      	mov	r2, r7
 800a8ee:	f000 fb11 	bl	800af14 <_realloc_r>
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d0e0      	beq.n	800a8ba <__submore+0x1a>
 800a8f8:	eb00 0806 	add.w	r8, r0, r6
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4632      	mov	r2, r6
 800a900:	4640      	mov	r0, r8
 800a902:	f000 faf9 	bl	800aef8 <memcpy>
 800a906:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a90a:	f8c4 8000 	str.w	r8, [r4]
 800a90e:	e7e9      	b.n	800a8e4 <__submore+0x44>

0800a910 <__swbuf_r>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	460e      	mov	r6, r1
 800a914:	4614      	mov	r4, r2
 800a916:	4605      	mov	r5, r0
 800a918:	b118      	cbz	r0, 800a922 <__swbuf_r+0x12>
 800a91a:	6983      	ldr	r3, [r0, #24]
 800a91c:	b90b      	cbnz	r3, 800a922 <__swbuf_r+0x12>
 800a91e:	f000 f9d9 	bl	800acd4 <__sinit>
 800a922:	4b21      	ldr	r3, [pc, #132]	; (800a9a8 <__swbuf_r+0x98>)
 800a924:	429c      	cmp	r4, r3
 800a926:	d12b      	bne.n	800a980 <__swbuf_r+0x70>
 800a928:	686c      	ldr	r4, [r5, #4]
 800a92a:	69a3      	ldr	r3, [r4, #24]
 800a92c:	60a3      	str	r3, [r4, #8]
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	071a      	lsls	r2, r3, #28
 800a932:	d52f      	bpl.n	800a994 <__swbuf_r+0x84>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	b36b      	cbz	r3, 800a994 <__swbuf_r+0x84>
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	6820      	ldr	r0, [r4, #0]
 800a93c:	b2f6      	uxtb	r6, r6
 800a93e:	1ac0      	subs	r0, r0, r3
 800a940:	6963      	ldr	r3, [r4, #20]
 800a942:	4637      	mov	r7, r6
 800a944:	4283      	cmp	r3, r0
 800a946:	dc04      	bgt.n	800a952 <__swbuf_r+0x42>
 800a948:	4621      	mov	r1, r4
 800a94a:	4628      	mov	r0, r5
 800a94c:	f000 f92e 	bl	800abac <_fflush_r>
 800a950:	bb30      	cbnz	r0, 800a9a0 <__swbuf_r+0x90>
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	3001      	adds	r0, #1
 800a956:	3b01      	subs	r3, #1
 800a958:	60a3      	str	r3, [r4, #8]
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	6022      	str	r2, [r4, #0]
 800a960:	701e      	strb	r6, [r3, #0]
 800a962:	6963      	ldr	r3, [r4, #20]
 800a964:	4283      	cmp	r3, r0
 800a966:	d004      	beq.n	800a972 <__swbuf_r+0x62>
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	07db      	lsls	r3, r3, #31
 800a96c:	d506      	bpl.n	800a97c <__swbuf_r+0x6c>
 800a96e:	2e0a      	cmp	r6, #10
 800a970:	d104      	bne.n	800a97c <__swbuf_r+0x6c>
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f000 f919 	bl	800abac <_fflush_r>
 800a97a:	b988      	cbnz	r0, 800a9a0 <__swbuf_r+0x90>
 800a97c:	4638      	mov	r0, r7
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <__swbuf_r+0x9c>)
 800a982:	429c      	cmp	r4, r3
 800a984:	d101      	bne.n	800a98a <__swbuf_r+0x7a>
 800a986:	68ac      	ldr	r4, [r5, #8]
 800a988:	e7cf      	b.n	800a92a <__swbuf_r+0x1a>
 800a98a:	4b09      	ldr	r3, [pc, #36]	; (800a9b0 <__swbuf_r+0xa0>)
 800a98c:	429c      	cmp	r4, r3
 800a98e:	bf08      	it	eq
 800a990:	68ec      	ldreq	r4, [r5, #12]
 800a992:	e7ca      	b.n	800a92a <__swbuf_r+0x1a>
 800a994:	4621      	mov	r1, r4
 800a996:	4628      	mov	r0, r5
 800a998:	f000 f80c 	bl	800a9b4 <__swsetup_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d0cb      	beq.n	800a938 <__swbuf_r+0x28>
 800a9a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a9a4:	e7ea      	b.n	800a97c <__swbuf_r+0x6c>
 800a9a6:	bf00      	nop
 800a9a8:	0800b490 	.word	0x0800b490
 800a9ac:	0800b4b0 	.word	0x0800b4b0
 800a9b0:	0800b470 	.word	0x0800b470

0800a9b4 <__swsetup_r>:
 800a9b4:	4b32      	ldr	r3, [pc, #200]	; (800aa80 <__swsetup_r+0xcc>)
 800a9b6:	b570      	push	{r4, r5, r6, lr}
 800a9b8:	681d      	ldr	r5, [r3, #0]
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	b125      	cbz	r5, 800a9ca <__swsetup_r+0x16>
 800a9c0:	69ab      	ldr	r3, [r5, #24]
 800a9c2:	b913      	cbnz	r3, 800a9ca <__swsetup_r+0x16>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f000 f985 	bl	800acd4 <__sinit>
 800a9ca:	4b2e      	ldr	r3, [pc, #184]	; (800aa84 <__swsetup_r+0xd0>)
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	d10f      	bne.n	800a9f0 <__swsetup_r+0x3c>
 800a9d0:	686c      	ldr	r4, [r5, #4]
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d8:	0719      	lsls	r1, r3, #28
 800a9da:	d42c      	bmi.n	800aa36 <__swsetup_r+0x82>
 800a9dc:	06dd      	lsls	r5, r3, #27
 800a9de:	d411      	bmi.n	800aa04 <__swsetup_r+0x50>
 800a9e0:	2309      	movs	r3, #9
 800a9e2:	6033      	str	r3, [r6, #0]
 800a9e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	e03e      	b.n	800aa6e <__swsetup_r+0xba>
 800a9f0:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <__swsetup_r+0xd4>)
 800a9f2:	429c      	cmp	r4, r3
 800a9f4:	d101      	bne.n	800a9fa <__swsetup_r+0x46>
 800a9f6:	68ac      	ldr	r4, [r5, #8]
 800a9f8:	e7eb      	b.n	800a9d2 <__swsetup_r+0x1e>
 800a9fa:	4b24      	ldr	r3, [pc, #144]	; (800aa8c <__swsetup_r+0xd8>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	bf08      	it	eq
 800aa00:	68ec      	ldreq	r4, [r5, #12]
 800aa02:	e7e6      	b.n	800a9d2 <__swsetup_r+0x1e>
 800aa04:	0758      	lsls	r0, r3, #29
 800aa06:	d512      	bpl.n	800aa2e <__swsetup_r+0x7a>
 800aa08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0a:	b141      	cbz	r1, 800aa1e <__swsetup_r+0x6a>
 800aa0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa10:	4299      	cmp	r1, r3
 800aa12:	d002      	beq.n	800aa1a <__swsetup_r+0x66>
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7fe fd39 	bl	800948c <_free_r>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	2300      	movs	r3, #0
 800aa28:	6063      	str	r3, [r4, #4]
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f043 0308 	orr.w	r3, r3, #8
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	6923      	ldr	r3, [r4, #16]
 800aa38:	b94b      	cbnz	r3, 800aa4e <__swsetup_r+0x9a>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa44:	d003      	beq.n	800aa4e <__swsetup_r+0x9a>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f000 fa07 	bl	800ae5c <__smakebuf_r>
 800aa4e:	89a0      	ldrh	r0, [r4, #12]
 800aa50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa54:	f010 0301 	ands.w	r3, r0, #1
 800aa58:	d00a      	beq.n	800aa70 <__swsetup_r+0xbc>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60a3      	str	r3, [r4, #8]
 800aa5e:	6963      	ldr	r3, [r4, #20]
 800aa60:	425b      	negs	r3, r3
 800aa62:	61a3      	str	r3, [r4, #24]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	b943      	cbnz	r3, 800aa7a <__swsetup_r+0xc6>
 800aa68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa6c:	d1ba      	bne.n	800a9e4 <__swsetup_r+0x30>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	0781      	lsls	r1, r0, #30
 800aa72:	bf58      	it	pl
 800aa74:	6963      	ldrpl	r3, [r4, #20]
 800aa76:	60a3      	str	r3, [r4, #8]
 800aa78:	e7f4      	b.n	800aa64 <__swsetup_r+0xb0>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e7f7      	b.n	800aa6e <__swsetup_r+0xba>
 800aa7e:	bf00      	nop
 800aa80:	2000027c 	.word	0x2000027c
 800aa84:	0800b490 	.word	0x0800b490
 800aa88:	0800b4b0 	.word	0x0800b4b0
 800aa8c:	0800b470 	.word	0x0800b470

0800aa90 <abort>:
 800aa90:	2006      	movs	r0, #6
 800aa92:	b508      	push	{r3, lr}
 800aa94:	f000 fa8c 	bl	800afb0 <raise>
 800aa98:	2001      	movs	r0, #1
 800aa9a:	f7f6 f848 	bl	8000b2e <_exit>
	...

0800aaa0 <__sflush_r>:
 800aaa0:	898a      	ldrh	r2, [r1, #12]
 800aaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	0710      	lsls	r0, r2, #28
 800aaaa:	460c      	mov	r4, r1
 800aaac:	d458      	bmi.n	800ab60 <__sflush_r+0xc0>
 800aaae:	684b      	ldr	r3, [r1, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc05      	bgt.n	800aac0 <__sflush_r+0x20>
 800aab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	dc02      	bgt.n	800aac0 <__sflush_r+0x20>
 800aaba:	2000      	movs	r0, #0
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aac2:	2e00      	cmp	r6, #0
 800aac4:	d0f9      	beq.n	800aaba <__sflush_r+0x1a>
 800aac6:	2300      	movs	r3, #0
 800aac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aacc:	682f      	ldr	r7, [r5, #0]
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	d032      	beq.n	800ab38 <__sflush_r+0x98>
 800aad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	075a      	lsls	r2, r3, #29
 800aad8:	d505      	bpl.n	800aae6 <__sflush_r+0x46>
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	1ac0      	subs	r0, r0, r3
 800aade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aae0:	b10b      	cbz	r3, 800aae6 <__sflush_r+0x46>
 800aae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aae4:	1ac0      	subs	r0, r0, r3
 800aae6:	2300      	movs	r3, #0
 800aae8:	4602      	mov	r2, r0
 800aaea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaec:	4628      	mov	r0, r5
 800aaee:	6a21      	ldr	r1, [r4, #32]
 800aaf0:	47b0      	blx	r6
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	d106      	bne.n	800ab06 <__sflush_r+0x66>
 800aaf8:	6829      	ldr	r1, [r5, #0]
 800aafa:	291d      	cmp	r1, #29
 800aafc:	d82c      	bhi.n	800ab58 <__sflush_r+0xb8>
 800aafe:	4a2a      	ldr	r2, [pc, #168]	; (800aba8 <__sflush_r+0x108>)
 800ab00:	40ca      	lsrs	r2, r1
 800ab02:	07d6      	lsls	r6, r2, #31
 800ab04:	d528      	bpl.n	800ab58 <__sflush_r+0xb8>
 800ab06:	2200      	movs	r2, #0
 800ab08:	6062      	str	r2, [r4, #4]
 800ab0a:	6922      	ldr	r2, [r4, #16]
 800ab0c:	04d9      	lsls	r1, r3, #19
 800ab0e:	6022      	str	r2, [r4, #0]
 800ab10:	d504      	bpl.n	800ab1c <__sflush_r+0x7c>
 800ab12:	1c42      	adds	r2, r0, #1
 800ab14:	d101      	bne.n	800ab1a <__sflush_r+0x7a>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	b903      	cbnz	r3, 800ab1c <__sflush_r+0x7c>
 800ab1a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab1e:	602f      	str	r7, [r5, #0]
 800ab20:	2900      	cmp	r1, #0
 800ab22:	d0ca      	beq.n	800aaba <__sflush_r+0x1a>
 800ab24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d002      	beq.n	800ab32 <__sflush_r+0x92>
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7fe fcad 	bl	800948c <_free_r>
 800ab32:	2000      	movs	r0, #0
 800ab34:	6360      	str	r0, [r4, #52]	; 0x34
 800ab36:	e7c1      	b.n	800aabc <__sflush_r+0x1c>
 800ab38:	6a21      	ldr	r1, [r4, #32]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47b0      	blx	r6
 800ab40:	1c41      	adds	r1, r0, #1
 800ab42:	d1c7      	bne.n	800aad4 <__sflush_r+0x34>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0c4      	beq.n	800aad4 <__sflush_r+0x34>
 800ab4a:	2b1d      	cmp	r3, #29
 800ab4c:	d001      	beq.n	800ab52 <__sflush_r+0xb2>
 800ab4e:	2b16      	cmp	r3, #22
 800ab50:	d101      	bne.n	800ab56 <__sflush_r+0xb6>
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	e7b1      	b.n	800aaba <__sflush_r+0x1a>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	e7ad      	b.n	800aabc <__sflush_r+0x1c>
 800ab60:	690f      	ldr	r7, [r1, #16]
 800ab62:	2f00      	cmp	r7, #0
 800ab64:	d0a9      	beq.n	800aaba <__sflush_r+0x1a>
 800ab66:	0793      	lsls	r3, r2, #30
 800ab68:	bf18      	it	ne
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	680e      	ldr	r6, [r1, #0]
 800ab6e:	bf08      	it	eq
 800ab70:	694b      	ldreq	r3, [r1, #20]
 800ab72:	eba6 0807 	sub.w	r8, r6, r7
 800ab76:	600f      	str	r7, [r1, #0]
 800ab78:	608b      	str	r3, [r1, #8]
 800ab7a:	f1b8 0f00 	cmp.w	r8, #0
 800ab7e:	dd9c      	ble.n	800aaba <__sflush_r+0x1a>
 800ab80:	4643      	mov	r3, r8
 800ab82:	463a      	mov	r2, r7
 800ab84:	4628      	mov	r0, r5
 800ab86:	6a21      	ldr	r1, [r4, #32]
 800ab88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab8a:	47b0      	blx	r6
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	dc06      	bgt.n	800ab9e <__sflush_r+0xfe>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f04f 30ff 	mov.w	r0, #4294967295
 800ab96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	e78e      	b.n	800aabc <__sflush_r+0x1c>
 800ab9e:	4407      	add	r7, r0
 800aba0:	eba8 0800 	sub.w	r8, r8, r0
 800aba4:	e7e9      	b.n	800ab7a <__sflush_r+0xda>
 800aba6:	bf00      	nop
 800aba8:	20400001 	.word	0x20400001

0800abac <_fflush_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	690b      	ldr	r3, [r1, #16]
 800abb0:	4605      	mov	r5, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	b913      	cbnz	r3, 800abbc <_fflush_r+0x10>
 800abb6:	2500      	movs	r5, #0
 800abb8:	4628      	mov	r0, r5
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	b118      	cbz	r0, 800abc6 <_fflush_r+0x1a>
 800abbe:	6983      	ldr	r3, [r0, #24]
 800abc0:	b90b      	cbnz	r3, 800abc6 <_fflush_r+0x1a>
 800abc2:	f000 f887 	bl	800acd4 <__sinit>
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <_fflush_r+0x6c>)
 800abc8:	429c      	cmp	r4, r3
 800abca:	d11b      	bne.n	800ac04 <_fflush_r+0x58>
 800abcc:	686c      	ldr	r4, [r5, #4]
 800abce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0ef      	beq.n	800abb6 <_fflush_r+0xa>
 800abd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abd8:	07d0      	lsls	r0, r2, #31
 800abda:	d404      	bmi.n	800abe6 <_fflush_r+0x3a>
 800abdc:	0599      	lsls	r1, r3, #22
 800abde:	d402      	bmi.n	800abe6 <_fflush_r+0x3a>
 800abe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abe2:	f000 f915 	bl	800ae10 <__retarget_lock_acquire_recursive>
 800abe6:	4628      	mov	r0, r5
 800abe8:	4621      	mov	r1, r4
 800abea:	f7ff ff59 	bl	800aaa0 <__sflush_r>
 800abee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abf0:	4605      	mov	r5, r0
 800abf2:	07da      	lsls	r2, r3, #31
 800abf4:	d4e0      	bmi.n	800abb8 <_fflush_r+0xc>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	059b      	lsls	r3, r3, #22
 800abfa:	d4dd      	bmi.n	800abb8 <_fflush_r+0xc>
 800abfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfe:	f000 f908 	bl	800ae12 <__retarget_lock_release_recursive>
 800ac02:	e7d9      	b.n	800abb8 <_fflush_r+0xc>
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <_fflush_r+0x70>)
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d101      	bne.n	800ac0e <_fflush_r+0x62>
 800ac0a:	68ac      	ldr	r4, [r5, #8]
 800ac0c:	e7df      	b.n	800abce <_fflush_r+0x22>
 800ac0e:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <_fflush_r+0x74>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	bf08      	it	eq
 800ac14:	68ec      	ldreq	r4, [r5, #12]
 800ac16:	e7da      	b.n	800abce <_fflush_r+0x22>
 800ac18:	0800b490 	.word	0x0800b490
 800ac1c:	0800b4b0 	.word	0x0800b4b0
 800ac20:	0800b470 	.word	0x0800b470

0800ac24 <std>:
 800ac24:	2300      	movs	r3, #0
 800ac26:	b510      	push	{r4, lr}
 800ac28:	4604      	mov	r4, r0
 800ac2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac32:	6083      	str	r3, [r0, #8]
 800ac34:	8181      	strh	r1, [r0, #12]
 800ac36:	6643      	str	r3, [r0, #100]	; 0x64
 800ac38:	81c2      	strh	r2, [r0, #14]
 800ac3a:	6183      	str	r3, [r0, #24]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	2208      	movs	r2, #8
 800ac40:	305c      	adds	r0, #92	; 0x5c
 800ac42:	f7fe fc1b 	bl	800947c <memset>
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <std+0x38>)
 800ac48:	6224      	str	r4, [r4, #32]
 800ac4a:	6263      	str	r3, [r4, #36]	; 0x24
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <std+0x3c>)
 800ac4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac50:	4b04      	ldr	r3, [pc, #16]	; (800ac64 <std+0x40>)
 800ac52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac54:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <std+0x44>)
 800ac56:	6323      	str	r3, [r4, #48]	; 0x30
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	bf00      	nop
 800ac5c:	08009729 	.word	0x08009729
 800ac60:	0800974f 	.word	0x0800974f
 800ac64:	08009787 	.word	0x08009787
 800ac68:	080097ab 	.word	0x080097ab

0800ac6c <_cleanup_r>:
 800ac6c:	4901      	ldr	r1, [pc, #4]	; (800ac74 <_cleanup_r+0x8>)
 800ac6e:	f000 b8af 	b.w	800add0 <_fwalk_reent>
 800ac72:	bf00      	nop
 800ac74:	0800abad 	.word	0x0800abad

0800ac78 <__sfmoreglue>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	2568      	movs	r5, #104	; 0x68
 800ac7c:	1e4a      	subs	r2, r1, #1
 800ac7e:	4355      	muls	r5, r2
 800ac80:	460e      	mov	r6, r1
 800ac82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac86:	f7fe fc4d 	bl	8009524 <_malloc_r>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	b140      	cbz	r0, 800aca0 <__sfmoreglue+0x28>
 800ac8e:	2100      	movs	r1, #0
 800ac90:	e9c0 1600 	strd	r1, r6, [r0]
 800ac94:	300c      	adds	r0, #12
 800ac96:	60a0      	str	r0, [r4, #8]
 800ac98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac9c:	f7fe fbee 	bl	800947c <memset>
 800aca0:	4620      	mov	r0, r4
 800aca2:	bd70      	pop	{r4, r5, r6, pc}

0800aca4 <__sfp_lock_acquire>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sfp_lock_acquire+0x8>)
 800aca6:	f000 b8b3 	b.w	800ae10 <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	2000174c 	.word	0x2000174c

0800acb0 <__sfp_lock_release>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__sfp_lock_release+0x8>)
 800acb2:	f000 b8ae 	b.w	800ae12 <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	2000174c 	.word	0x2000174c

0800acbc <__sinit_lock_acquire>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__sinit_lock_acquire+0x8>)
 800acbe:	f000 b8a7 	b.w	800ae10 <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	20001747 	.word	0x20001747

0800acc8 <__sinit_lock_release>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__sinit_lock_release+0x8>)
 800acca:	f000 b8a2 	b.w	800ae12 <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	20001747 	.word	0x20001747

0800acd4 <__sinit>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	4604      	mov	r4, r0
 800acd8:	f7ff fff0 	bl	800acbc <__sinit_lock_acquire>
 800acdc:	69a3      	ldr	r3, [r4, #24]
 800acde:	b11b      	cbz	r3, 800ace8 <__sinit+0x14>
 800ace0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace4:	f7ff bff0 	b.w	800acc8 <__sinit_lock_release>
 800ace8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acec:	6523      	str	r3, [r4, #80]	; 0x50
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <__sinit+0x68>)
 800acf0:	4a13      	ldr	r2, [pc, #76]	; (800ad40 <__sinit+0x6c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800acf6:	42a3      	cmp	r3, r4
 800acf8:	bf08      	it	eq
 800acfa:	2301      	moveq	r3, #1
 800acfc:	4620      	mov	r0, r4
 800acfe:	bf08      	it	eq
 800ad00:	61a3      	streq	r3, [r4, #24]
 800ad02:	f000 f81f 	bl	800ad44 <__sfp>
 800ad06:	6060      	str	r0, [r4, #4]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 f81b 	bl	800ad44 <__sfp>
 800ad0e:	60a0      	str	r0, [r4, #8]
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 f817 	bl	800ad44 <__sfp>
 800ad16:	2200      	movs	r2, #0
 800ad18:	2104      	movs	r1, #4
 800ad1a:	60e0      	str	r0, [r4, #12]
 800ad1c:	6860      	ldr	r0, [r4, #4]
 800ad1e:	f7ff ff81 	bl	800ac24 <std>
 800ad22:	2201      	movs	r2, #1
 800ad24:	2109      	movs	r1, #9
 800ad26:	68a0      	ldr	r0, [r4, #8]
 800ad28:	f7ff ff7c 	bl	800ac24 <std>
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	2112      	movs	r1, #18
 800ad30:	68e0      	ldr	r0, [r4, #12]
 800ad32:	f7ff ff77 	bl	800ac24 <std>
 800ad36:	2301      	movs	r3, #1
 800ad38:	61a3      	str	r3, [r4, #24]
 800ad3a:	e7d1      	b.n	800ace0 <__sinit+0xc>
 800ad3c:	0800b208 	.word	0x0800b208
 800ad40:	0800ac6d 	.word	0x0800ac6d

0800ad44 <__sfp>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	4607      	mov	r7, r0
 800ad48:	f7ff ffac 	bl	800aca4 <__sfp_lock_acquire>
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	; (800adc8 <__sfp+0x84>)
 800ad4e:	681e      	ldr	r6, [r3, #0]
 800ad50:	69b3      	ldr	r3, [r6, #24]
 800ad52:	b913      	cbnz	r3, 800ad5a <__sfp+0x16>
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ffbd 	bl	800acd4 <__sinit>
 800ad5a:	3648      	adds	r6, #72	; 0x48
 800ad5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	d503      	bpl.n	800ad6c <__sfp+0x28>
 800ad64:	6833      	ldr	r3, [r6, #0]
 800ad66:	b30b      	cbz	r3, 800adac <__sfp+0x68>
 800ad68:	6836      	ldr	r6, [r6, #0]
 800ad6a:	e7f7      	b.n	800ad5c <__sfp+0x18>
 800ad6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad70:	b9d5      	cbnz	r5, 800ada8 <__sfp+0x64>
 800ad72:	4b16      	ldr	r3, [pc, #88]	; (800adcc <__sfp+0x88>)
 800ad74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad78:	60e3      	str	r3, [r4, #12]
 800ad7a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad7c:	f000 f847 	bl	800ae0e <__retarget_lock_init_recursive>
 800ad80:	f7ff ff96 	bl	800acb0 <__sfp_lock_release>
 800ad84:	2208      	movs	r2, #8
 800ad86:	4629      	mov	r1, r5
 800ad88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad90:	6025      	str	r5, [r4, #0]
 800ad92:	61a5      	str	r5, [r4, #24]
 800ad94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad98:	f7fe fb70 	bl	800947c <memset>
 800ad9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ada0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ada4:	4620      	mov	r0, r4
 800ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada8:	3468      	adds	r4, #104	; 0x68
 800adaa:	e7d9      	b.n	800ad60 <__sfp+0x1c>
 800adac:	2104      	movs	r1, #4
 800adae:	4638      	mov	r0, r7
 800adb0:	f7ff ff62 	bl	800ac78 <__sfmoreglue>
 800adb4:	4604      	mov	r4, r0
 800adb6:	6030      	str	r0, [r6, #0]
 800adb8:	2800      	cmp	r0, #0
 800adba:	d1d5      	bne.n	800ad68 <__sfp+0x24>
 800adbc:	f7ff ff78 	bl	800acb0 <__sfp_lock_release>
 800adc0:	230c      	movs	r3, #12
 800adc2:	603b      	str	r3, [r7, #0]
 800adc4:	e7ee      	b.n	800ada4 <__sfp+0x60>
 800adc6:	bf00      	nop
 800adc8:	0800b208 	.word	0x0800b208
 800adcc:	ffff0001 	.word	0xffff0001

0800add0 <_fwalk_reent>:
 800add0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add4:	4606      	mov	r6, r0
 800add6:	4688      	mov	r8, r1
 800add8:	2700      	movs	r7, #0
 800adda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ade2:	f1b9 0901 	subs.w	r9, r9, #1
 800ade6:	d505      	bpl.n	800adf4 <_fwalk_reent+0x24>
 800ade8:	6824      	ldr	r4, [r4, #0]
 800adea:	2c00      	cmp	r4, #0
 800adec:	d1f7      	bne.n	800adde <_fwalk_reent+0xe>
 800adee:	4638      	mov	r0, r7
 800adf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf4:	89ab      	ldrh	r3, [r5, #12]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d907      	bls.n	800ae0a <_fwalk_reent+0x3a>
 800adfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adfe:	3301      	adds	r3, #1
 800ae00:	d003      	beq.n	800ae0a <_fwalk_reent+0x3a>
 800ae02:	4629      	mov	r1, r5
 800ae04:	4630      	mov	r0, r6
 800ae06:	47c0      	blx	r8
 800ae08:	4307      	orrs	r7, r0
 800ae0a:	3568      	adds	r5, #104	; 0x68
 800ae0c:	e7e9      	b.n	800ade2 <_fwalk_reent+0x12>

0800ae0e <__retarget_lock_init_recursive>:
 800ae0e:	4770      	bx	lr

0800ae10 <__retarget_lock_acquire_recursive>:
 800ae10:	4770      	bx	lr

0800ae12 <__retarget_lock_release_recursive>:
 800ae12:	4770      	bx	lr

0800ae14 <__swhatbuf_r>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	460e      	mov	r6, r1
 800ae18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	2900      	cmp	r1, #0
 800ae20:	461d      	mov	r5, r3
 800ae22:	b096      	sub	sp, #88	; 0x58
 800ae24:	da07      	bge.n	800ae36 <__swhatbuf_r+0x22>
 800ae26:	2300      	movs	r3, #0
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	89b3      	ldrh	r3, [r6, #12]
 800ae2c:	061a      	lsls	r2, r3, #24
 800ae2e:	d410      	bmi.n	800ae52 <__swhatbuf_r+0x3e>
 800ae30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae34:	e00e      	b.n	800ae54 <__swhatbuf_r+0x40>
 800ae36:	466a      	mov	r2, sp
 800ae38:	f000 f8d6 	bl	800afe8 <_fstat_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	dbf2      	blt.n	800ae26 <__swhatbuf_r+0x12>
 800ae40:	9a01      	ldr	r2, [sp, #4]
 800ae42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae4a:	425a      	negs	r2, r3
 800ae4c:	415a      	adcs	r2, r3
 800ae4e:	602a      	str	r2, [r5, #0]
 800ae50:	e7ee      	b.n	800ae30 <__swhatbuf_r+0x1c>
 800ae52:	2340      	movs	r3, #64	; 0x40
 800ae54:	2000      	movs	r0, #0
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	b016      	add	sp, #88	; 0x58
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}

0800ae5c <__smakebuf_r>:
 800ae5c:	898b      	ldrh	r3, [r1, #12]
 800ae5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae60:	079d      	lsls	r5, r3, #30
 800ae62:	4606      	mov	r6, r0
 800ae64:	460c      	mov	r4, r1
 800ae66:	d507      	bpl.n	800ae78 <__smakebuf_r+0x1c>
 800ae68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	2301      	movs	r3, #1
 800ae72:	6163      	str	r3, [r4, #20]
 800ae74:	b002      	add	sp, #8
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	466a      	mov	r2, sp
 800ae7a:	ab01      	add	r3, sp, #4
 800ae7c:	f7ff ffca 	bl	800ae14 <__swhatbuf_r>
 800ae80:	9900      	ldr	r1, [sp, #0]
 800ae82:	4605      	mov	r5, r0
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7fe fb4d 	bl	8009524 <_malloc_r>
 800ae8a:	b948      	cbnz	r0, 800aea0 <__smakebuf_r+0x44>
 800ae8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae90:	059a      	lsls	r2, r3, #22
 800ae92:	d4ef      	bmi.n	800ae74 <__smakebuf_r+0x18>
 800ae94:	f023 0303 	bic.w	r3, r3, #3
 800ae98:	f043 0302 	orr.w	r3, r3, #2
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	e7e3      	b.n	800ae68 <__smakebuf_r+0xc>
 800aea0:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <__smakebuf_r+0x7c>)
 800aea2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	6020      	str	r0, [r4, #0]
 800aea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	9b00      	ldr	r3, [sp, #0]
 800aeb0:	6120      	str	r0, [r4, #16]
 800aeb2:	6163      	str	r3, [r4, #20]
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	b15b      	cbz	r3, 800aed0 <__smakebuf_r+0x74>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aebe:	f000 f8a5 	bl	800b00c <_isatty_r>
 800aec2:	b128      	cbz	r0, 800aed0 <__smakebuf_r+0x74>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	f043 0301 	orr.w	r3, r3, #1
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	89a0      	ldrh	r0, [r4, #12]
 800aed2:	4305      	orrs	r5, r0
 800aed4:	81a5      	strh	r5, [r4, #12]
 800aed6:	e7cd      	b.n	800ae74 <__smakebuf_r+0x18>
 800aed8:	0800ac6d 	.word	0x0800ac6d

0800aedc <memchr>:
 800aedc:	4603      	mov	r3, r0
 800aede:	b510      	push	{r4, lr}
 800aee0:	b2c9      	uxtb	r1, r1
 800aee2:	4402      	add	r2, r0
 800aee4:	4293      	cmp	r3, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	d101      	bne.n	800aeee <memchr+0x12>
 800aeea:	2000      	movs	r0, #0
 800aeec:	e003      	b.n	800aef6 <memchr+0x1a>
 800aeee:	7804      	ldrb	r4, [r0, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	428c      	cmp	r4, r1
 800aef4:	d1f6      	bne.n	800aee4 <memchr+0x8>
 800aef6:	bd10      	pop	{r4, pc}

0800aef8 <memcpy>:
 800aef8:	440a      	add	r2, r1
 800aefa:	4291      	cmp	r1, r2
 800aefc:	f100 33ff 	add.w	r3, r0, #4294967295
 800af00:	d100      	bne.n	800af04 <memcpy+0xc>
 800af02:	4770      	bx	lr
 800af04:	b510      	push	{r4, lr}
 800af06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af10:	d1f9      	bne.n	800af06 <memcpy+0xe>
 800af12:	bd10      	pop	{r4, pc}

0800af14 <_realloc_r>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	4607      	mov	r7, r0
 800af18:	4614      	mov	r4, r2
 800af1a:	460e      	mov	r6, r1
 800af1c:	b921      	cbnz	r1, 800af28 <_realloc_r+0x14>
 800af1e:	4611      	mov	r1, r2
 800af20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af24:	f7fe bafe 	b.w	8009524 <_malloc_r>
 800af28:	b922      	cbnz	r2, 800af34 <_realloc_r+0x20>
 800af2a:	f7fe faaf 	bl	800948c <_free_r>
 800af2e:	4625      	mov	r5, r4
 800af30:	4628      	mov	r0, r5
 800af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af34:	f000 f87a 	bl	800b02c <_malloc_usable_size_r>
 800af38:	42a0      	cmp	r0, r4
 800af3a:	d20f      	bcs.n	800af5c <_realloc_r+0x48>
 800af3c:	4621      	mov	r1, r4
 800af3e:	4638      	mov	r0, r7
 800af40:	f7fe faf0 	bl	8009524 <_malloc_r>
 800af44:	4605      	mov	r5, r0
 800af46:	2800      	cmp	r0, #0
 800af48:	d0f2      	beq.n	800af30 <_realloc_r+0x1c>
 800af4a:	4631      	mov	r1, r6
 800af4c:	4622      	mov	r2, r4
 800af4e:	f7ff ffd3 	bl	800aef8 <memcpy>
 800af52:	4631      	mov	r1, r6
 800af54:	4638      	mov	r0, r7
 800af56:	f7fe fa99 	bl	800948c <_free_r>
 800af5a:	e7e9      	b.n	800af30 <_realloc_r+0x1c>
 800af5c:	4635      	mov	r5, r6
 800af5e:	e7e7      	b.n	800af30 <_realloc_r+0x1c>

0800af60 <_raise_r>:
 800af60:	291f      	cmp	r1, #31
 800af62:	b538      	push	{r3, r4, r5, lr}
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	d904      	bls.n	800af74 <_raise_r+0x14>
 800af6a:	2316      	movs	r3, #22
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af76:	b112      	cbz	r2, 800af7e <_raise_r+0x1e>
 800af78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af7c:	b94b      	cbnz	r3, 800af92 <_raise_r+0x32>
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 f830 	bl	800afe4 <_getpid_r>
 800af84:	462a      	mov	r2, r5
 800af86:	4601      	mov	r1, r0
 800af88:	4620      	mov	r0, r4
 800af8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8e:	f000 b817 	b.w	800afc0 <_kill_r>
 800af92:	2b01      	cmp	r3, #1
 800af94:	d00a      	beq.n	800afac <_raise_r+0x4c>
 800af96:	1c59      	adds	r1, r3, #1
 800af98:	d103      	bne.n	800afa2 <_raise_r+0x42>
 800af9a:	2316      	movs	r3, #22
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	2001      	movs	r0, #1
 800afa0:	e7e7      	b.n	800af72 <_raise_r+0x12>
 800afa2:	2400      	movs	r4, #0
 800afa4:	4628      	mov	r0, r5
 800afa6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afaa:	4798      	blx	r3
 800afac:	2000      	movs	r0, #0
 800afae:	e7e0      	b.n	800af72 <_raise_r+0x12>

0800afb0 <raise>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <raise+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f7ff bfd3 	b.w	800af60 <_raise_r>
 800afba:	bf00      	nop
 800afbc:	2000027c 	.word	0x2000027c

0800afc0 <_kill_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	2300      	movs	r3, #0
 800afc4:	4d06      	ldr	r5, [pc, #24]	; (800afe0 <_kill_r+0x20>)
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	4611      	mov	r1, r2
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	f7f5 fd9e 	bl	8000b0e <_kill>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d102      	bne.n	800afdc <_kill_r+0x1c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b103      	cbz	r3, 800afdc <_kill_r+0x1c>
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	20001740 	.word	0x20001740

0800afe4 <_getpid_r>:
 800afe4:	f7f5 bd8c 	b.w	8000b00 <_getpid>

0800afe8 <_fstat_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	2300      	movs	r3, #0
 800afec:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_fstat_r+0x20>)
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f5 fde8 	bl	8000bca <_fstat>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_fstat_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_fstat_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	20001740 	.word	0x20001740

0800b00c <_isatty_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	2300      	movs	r3, #0
 800b010:	4d05      	ldr	r5, [pc, #20]	; (800b028 <_isatty_r+0x1c>)
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f5 fde6 	bl	8000be8 <_isatty>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_isatty_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_isatty_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	20001740 	.word	0x20001740

0800b02c <_malloc_usable_size_r>:
 800b02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b030:	1f18      	subs	r0, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfbc      	itt	lt
 800b036:	580b      	ldrlt	r3, [r1, r0]
 800b038:	18c0      	addlt	r0, r0, r3
 800b03a:	4770      	bx	lr

0800b03c <_gettimeofday>:
 800b03c:	2258      	movs	r2, #88	; 0x58
 800b03e:	4b02      	ldr	r3, [pc, #8]	; (800b048 <_gettimeofday+0xc>)
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	4770      	bx	lr
 800b048:	20001740 	.word	0x20001740

0800b04c <_init>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr

0800b058 <_fini>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr
