
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a490  0800a490  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a490  0800a490  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a490  0800a490  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a494  0800a494  0001a494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000136c  200001fc  0800a694  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  0800a694  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019907  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c20  00000000  00000000  00039b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015281  00000000  00000000  0005b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb61  00000000  00000000  00070413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fef74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  000fefc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00104174  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00104198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a1c4 	.word	0x0800a1c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	0800a1c4 	.word	0x0800a1c4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fcdb 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f861 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f94d 	bl	8000408 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f92d 	bl	80003cc <MX_DMA_Init>
  MX_TIM3_Init();
 8000172:	f000 f8b5 	bl	80002e0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000176:	f008 fa89 	bl	800868c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
 800017e:	e007      	b.n	8000190 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000180:	7bfb      	ldrb	r3, [r7, #15]
 8000182:	4a28      	ldr	r2, [pc, #160]	; (8000224 <main+0xc8>)
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	3301      	adds	r3, #1
 800018e:	73fb      	strb	r3, [r7, #15]
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	2b03      	cmp	r3, #3
 8000194:	d9f4      	bls.n	8000180 <main+0x24>
  }

  ws2812b_init();
 8000196:	f000 fbfb 	bl	8000990 <ws2812b_init>

  srand( (unsigned) time( NULL ));
 800019a:	2000      	movs	r0, #0
 800019c:	f009 f8d0 	bl	8009340 <time>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f009 f836 	bl	8009214 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint16_t volume = 128; // max 256
 80001a8:	2380      	movs	r3, #128	; 0x80
 80001aa:	80fb      	strh	r3, [r7, #6]
	uint8_t r = gamma8[ rand() % volume ];
 80001ac:	f009 f860 	bl	8009270 <rand>
 80001b0:	4602      	mov	r2, r0
 80001b2:	88fb      	ldrh	r3, [r7, #6]
 80001b4:	fb92 f1f3 	sdiv	r1, r2, r3
 80001b8:	fb03 f301 	mul.w	r3, r3, r1
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <main+0xcc>)
 80001c0:	5cd3      	ldrb	r3, [r2, r3]
 80001c2:	717b      	strb	r3, [r7, #5]
	uint8_t g = gamma8[ rand() % volume ];
 80001c4:	f009 f854 	bl	8009270 <rand>
 80001c8:	4602      	mov	r2, r0
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80001d0:	fb03 f301 	mul.w	r3, r3, r1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	4a14      	ldr	r2, [pc, #80]	; (8000228 <main+0xcc>)
 80001d8:	5cd3      	ldrb	r3, [r2, r3]
 80001da:	713b      	strb	r3, [r7, #4]
	uint8_t b = gamma8[ rand() % volume ];
 80001dc:	f009 f848 	bl	8009270 <rand>
 80001e0:	4602      	mov	r2, r0
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	fb92 f1f3 	sdiv	r1, r2, r3
 80001e8:	fb03 f301 	mul.w	r3, r3, r1
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <main+0xcc>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	70fb      	strb	r3, [r7, #3]

	for( int led = 0; led < LED_N; led++ ) {
 80001f4:	2300      	movs	r3, #0
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	e00f      	b.n	800021a <main+0xbe>
	  ws2812b_set_color( led, r, g, b );
 80001fa:	68b8      	ldr	r0, [r7, #8]
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	793a      	ldrb	r2, [r7, #4]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	f000 fc2f 	bl	8000a64 <ws2812b_set_color>
	  ws2812b_update();
 8000206:	f000 fbf3 	bl	80009f0 <ws2812b_update>
	  send_queue_via_usb();
 800020a:	f000 f97b 	bl	8000504 <send_queue_via_usb>
	  HAL_Delay( 100 );
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 fce6 	bl	8000be0 <HAL_Delay>
	for( int led = 0; led < LED_N; led++ ) {
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	3301      	adds	r3, #1
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	2b07      	cmp	r3, #7
 800021e:	ddec      	ble.n	80001fa <main+0x9e>
  {
 8000220:	e7c2      	b.n	80001a8 <main+0x4c>
 8000222:	bf00      	nop
 8000224:	200005c4 	.word	0x200005c4
 8000228:	0800a244 	.word	0x0800a244

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b094      	sub	sp, #80	; 0x50
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f008 ff3c 	bl	80090b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000278:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fe2e 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028e:	f000 f9b1 	bl	80005f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 f898 	bl	80033e4 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ba:	f000 f99b 	bl	80005f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002be:	2310      	movs	r3, #16
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 f9f3 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d4:	f000 f98e 	bl	80005f4 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3750      	adds	r7, #80	; 0x50
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08e      	sub	sp, #56	; 0x38
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]
 800030e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000310:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000312:	4a2d      	ldr	r2, [pc, #180]	; (80003c8 <MX_TIM3_Init+0xe8>)
 8000314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <MX_TIM3_Init+0xe4>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000324:	2259      	movs	r2, #89	; 0x59
 8000326:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM3_Init+0xe4>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000336:	f003 fa73 	bl	8003820 <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000340:	f000 f958 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000352:	f003 feb7 	bl	80040c4 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800035c:	f000 f94a 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000362:	f003 faf7 	bl	8003954 <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 f942 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000380:	f004 fb18 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800038a:	f000 f933 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM3_Init+0xe4>)
 80003a6:	f003 fdcf 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80003b0:	f000 f920 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM3_Init+0xe4>)
 80003b6:	f000 f9ab 	bl	8000710 <HAL_TIM_MspPostInit>

}
 80003ba:	bf00      	nop
 80003bc:	3738      	adds	r7, #56	; 0x38
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000538 	.word	0x20000538
 80003c8:	40000400 	.word	0x40000400

080003cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_DMA_Init+0x38>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <MX_DMA_Init+0x38>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2010      	movs	r0, #16
 80003f0:	f000 fcf1 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003f4:	2010      	movs	r0, #16
 80003f6:	f000 fd0a 	bl	8000e0e <HAL_NVIC_EnableIRQ>

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MX_GPIO_Init+0x90>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MX_GPIO_Init+0x90>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MX_GPIO_Init+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x94>)
 800046c:	f001 f85c 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x94>)
 800048a:	f000 fec9 	bl	8001220 <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40011000 	.word	0x40011000

080004a0 <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	void wait_for_CDC_transmit_ready();
	CDC_Transmit_FS( txBuf, buf_len );
 80004aa:	6839      	ldr	r1, [r7, #0]
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f008 f9eb 	bl	8008888 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <welcome>:

void welcome(void) {
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 80004c2:	480e      	ldr	r0, [pc, #56]	; (80004fc <welcome+0x40>)
 80004c4:	f7ff fe42 	bl	800014c <strlen>
 80004c8:	4604      	mov	r4, r0
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <welcome+0x44>)
 80004cc:	f7ff fe3e 	bl	800014c <strlen>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4423      	add	r3, r4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f008 fddf 	bl	8009098 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 80004de:	4907      	ldr	r1, [pc, #28]	; (80004fc <welcome+0x40>)
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f008 ff24 	bl	800932e <strcpy>
	strcat( tmp_buf, prompt );
 80004e6:	4906      	ldr	r1, [pc, #24]	; (8000500 <welcome+0x44>)
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f008 ff11 	bl	8009310 <strcat>
	write_to_future_send_via_usb( tmp_buf );
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f844 	bl	800057c <write_to_future_send_via_usb>
//	usb_transmit_fs( info, strlen( info ));
//	usb_transmit_fs( prompt, strlen( prompt ));
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000

08000504 <send_queue_via_usb>:
void get_command(void) {
	in_usb_buf_pos = 0;
	usb_transmit_fs( prompt, strlen( prompt ));
}

void send_queue_via_usb(void) {
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e02b      	b.n	8000568 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] && strlen( output_usb_buffer[ loop ]) > 0 ) {
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <send_queue_via_usb+0x74>)
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <send_queue_via_usb+0x5e>
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <send_queue_via_usb+0x74>)
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d01b      	beq.n	8000562 <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <send_queue_via_usb+0x74>)
 800052e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <send_queue_via_usb+0x74>)
 8000536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe06 	bl	800014c <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	4620      	mov	r0, r4
 8000546:	f7ff ffab 	bl	80004a0 <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <send_queue_via_usb+0x74>)
 800054e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000552:	4618      	mov	r0, r3
 8000554:	f008 fda8 	bl	80090a8 <free>
			output_usb_buffer[ loop ] = NULL;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <send_queue_via_usb+0x74>)
 800055c:	2100      	movs	r1, #0
 800055e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3301      	adds	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d9d0      	bls.n	8000510 <send_queue_via_usb+0xc>
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	200005c4 	.word	0x200005c4

0800057c <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000588:	e002      	b.n	8000590 <write_to_future_send_via_usb+0x14>
		loop++;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	3301      	adds	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	2b03      	cmp	r3, #3
 8000594:	d805      	bhi.n	80005a2 <write_to_future_send_via_usb+0x26>
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <write_to_future_send_via_usb+0x40>)
 800059a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f3      	bne.n	800058a <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d804      	bhi.n	80005b2 <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <write_to_future_send_via_usb+0x40>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	200005c4 	.word	0x200005c4

080005c0 <send_prompt>:

void send_prompt(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( strlen( prompt ) * sizeof( char ));
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <send_prompt+0x30>)
 80005c8:	f7ff fdc0 	bl	800014c <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fd62 	bl	8009098 <malloc>
 80005d4:	4603      	mov	r3, r0
 80005d6:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, prompt );
 80005d8:	4905      	ldr	r1, [pc, #20]	; (80005f0 <send_prompt+0x30>)
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f008 fea7 	bl	800932e <strcpy>
	write_to_future_send_via_usb( tmp_buf );
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ffcb 	bl	800057c <write_to_future_send_via_usb>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <HAL_TIM_Base_MspInit+0x9c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d140      	bne.n	80006f8 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <HAL_TIM_Base_MspInit+0xa0>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <HAL_TIM_Base_MspInit+0xa0>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <HAL_TIM_Base_MspInit+0xa0>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 8000690:	4a1e      	ldr	r2, [pc, #120]	; (800070c <HAL_TIM_Base_MspInit+0xa8>)
 8000692:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 8000696:	2210      	movs	r2, #16
 8000698:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006c2:	f000 fbbf 	bl	8000e44 <HAL_DMA_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 80006cc:	f7ff ff92 	bl	80005f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <HAL_TIM_Base_MspInit+0xa4>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	201d      	movs	r0, #29
 80006ee:	f000 fb72 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006f2:	201d      	movs	r0, #29
 80006f4:	f000 fb8b 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40000400 	.word	0x40000400
 8000704:	40021000 	.word	0x40021000
 8000708:	20000580 	.word	0x20000580
 800070c:	4002006c 	.word	0x4002006c

08000710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <HAL_TIM_MspPostInit+0x58>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d117      	bne.n	8000760 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_TIM_MspPostInit+0x5c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <HAL_TIM_MspPostInit+0x5c>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_TIM_MspPostInit+0x5c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_TIM_MspPostInit+0x60>)
 800075c:	f000 fd60 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40000400 	.word	0x40000400
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <HardFault_Handler+0x4>

08000786 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <BusFault_Handler+0x4>

08000792 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 f9f2 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <DMA1_Channel6_IRQHandler+0x10>)
 80007ce:	f000 fbf3 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000580 	.word	0x20000580

080007dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007e2:	f000 ffea 	bl	80017ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000126c 	.word	0x2000126c

080007f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM3_IRQHandler+0x10>)
 80007f6:	f003 fa9f 	bl	8003d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000538 	.word	0x20000538

08000804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	return 1;
 8000808:	2301      	movs	r3, #1
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <_kill>:

int _kill(int pid, int sig)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800081c:	f008 fc12 	bl	8009044 <__errno>
 8000820:	4603      	mov	r3, r0
 8000822:	2216      	movs	r2, #22
 8000824:	601a      	str	r2, [r3, #0]
	return -1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_exit>:

void _exit (int status)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800083a:	f04f 31ff 	mov.w	r1, #4294967295
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffe7 	bl	8000812 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000844:	e7fe      	b.n	8000844 <_exit+0x12>

08000846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e00a      	b.n	800086e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000858:	f3af 8000 	nop.w
 800085c:	4601      	mov	r1, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	60ba      	str	r2, [r7, #8]
 8000864:	b2ca      	uxtb	r2, r1
 8000866:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbf0      	blt.n	8000858 <_read+0x12>
	}

return len;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e009      	b.n	80008a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	60ba      	str	r2, [r7, #8]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf1      	blt.n	8000892 <_write+0x12>
	}
	return len;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_close>:

int _close(int file)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	return -1;
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008de:	605a      	str	r2, [r3, #4]
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <_isatty>:

int _isatty(int file)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	return 1;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f008 fb7c 	bl	8009044 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20005000 	.word	0x20005000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000218 	.word	0x20000218
 8000980:	20001568 	.word	0x20001568

08000984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	e007      	b.n	80009ac <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <ws2812b_init+0x58>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3301      	adds	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b2f      	cmp	r3, #47	; 0x2f
 80009b0:	ddf4      	ble.n	800099c <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	e007      	b.n	80009c8 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3330      	adds	r3, #48	; 0x30
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <ws2812b_init+0x58>)
 80009be:	2120      	movs	r1, #32
 80009c0:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2bbf      	cmp	r3, #191	; 0xbf
 80009cc:	ddf4      	ble.n	80009b8 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 90; //100;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <ws2812b_init+0x58>)
 80009d0:	225a      	movs	r2, #90	; 0x5a
 80009d2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  HAL_TIM_Base_Start(&htim3);
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <ws2812b_init+0x5c>)
 80009d8:	f002 ff72 	bl	80038c0 <HAL_TIM_Base_Start>
  ws2812b_update();
 80009dc:	f000 f808 	bl	80009f0 <ws2812b_update>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000021c 	.word	0x2000021c
 80009ec:	20000538 	.word	0x20000538

080009f0 <ws2812b_update>:

void ws2812b_update(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 80009f4:	23f1      	movs	r3, #241	; 0xf1
 80009f6:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <ws2812b_update+0x14>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <ws2812b_update+0x18>)
 80009fc:	f003 f802 	bl	8003a04 <HAL_TIM_PWM_Start_DMA>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000021c 	.word	0x2000021c
 8000a08:	20000538 	.word	0x20000538

08000a0c <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e016      	b.n	8000a4c <set_byte+0x40>
    if (value & 0x80) {
 8000a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da06      	bge.n	8000a34 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <set_byte+0x54>)
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	54d1      	strb	r1, [r2, r3]
 8000a32:	e005      	b.n	8000a40 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <set_byte+0x54>)
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	dde5      	ble.n	8000a1e <set_byte+0x12>
  }
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000021c 	.word	0x2000021c

08000a64 <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	70fb      	strb	r3, [r7, #3]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70bb      	strb	r3, [r7, #2]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d820      	bhi.n	8000ac6 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	3330      	adds	r3, #48	; 0x30
 8000a90:	78ba      	ldrb	r2, [r7, #2]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffb9 	bl	8000a0c <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	3338      	adds	r3, #56	; 0x38
 8000aa6:	78fa      	ldrb	r2, [r7, #3]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffae 	bl	8000a0c <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	3340      	adds	r3, #64	; 0x40
 8000abc:	787a      	ldrb	r2, [r7, #1]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffa3 	bl	8000a0c <set_byte>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af6:	f7ff ff45 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f008 faa9 	bl	8009050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afe:	f7ff fb2d 	bl	800015c <main>
  bx lr
 8000b02:	4770      	bx	lr
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000b0c:	0800a498 	.word	0x0800a498
  ldr r2, =_sbss
 8000b10:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000b14:	20001568 	.word	0x20001568

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f947 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fd62 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f95f 	bl	8000e2a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f927 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000001c 	.word	0x2000001c
 8000ba0:	20000024 	.word	0x20000024
 8000ba4:	20000020 	.word	0x20000020

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000024 	.word	0x20000024
 8000bc8:	200005d4 	.word	0x200005d4

08000bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	200005d4 	.word	0x200005d4

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff fff0 	bl	8000bcc <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffe0 	bl	8000bcc <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000024 	.word	0x20000024

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <__NVIC_EnableIRQ+0x34>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff2d 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff42 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff35 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e043      	b.n	8000ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_DMA_Init+0xa8>)
 8000e62:	4413      	add	r3, r2
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_DMA_Init+0xac>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_DMA_Init+0xb0>)
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Start_IT+0x20>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e04a      	b.n	8000fae <HAL_DMA_Start_IT+0xb6>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d13a      	bne.n	8000fa0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f938 	bl	80011c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 020e 	orr.w	r2, r2, #14
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e00f      	b.n	8000f8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0204 	bic.w	r2, r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 020a 	orr.w	r2, r2, #10
 8000f8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0201 	orr.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e005      	b.n	8000fac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af06      	add	r7, sp, #24
 800155e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0fd      	b.n	8001766 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 fab6 	bl	8008af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f003 faa5 	bl	8004ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	687e      	ldr	r6, [r7, #4]
 800159e:	466d      	mov	r5, sp
 80015a0:	f106 0410 	add.w	r4, r6, #16
 80015a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	1d33      	adds	r3, r6, #4
 80015ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	f003 fa6f 	bl	8004a94 <USB_CoreInit>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0ce      	b.n	8001766 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 faa0 	bl	8004b14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e04c      	b.n	8001674 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3301      	adds	r3, #1
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b298      	uxth	r0, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3336      	adds	r3, #54	; 0x36
 8001618:	4602      	mov	r2, r0
 800161a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3303      	adds	r3, #3
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3338      	adds	r3, #56	; 0x38
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	333c      	adds	r3, #60	; 0x3c
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	3340      	adds	r3, #64	; 0x40
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3301      	adds	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3ad      	bcc.n	80015da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e044      	b.n	800170e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	3301      	adds	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3b5      	bcc.n	8001684 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	687e      	ldr	r6, [r7, #4]
 8001720:	466d      	mov	r5, sp
 8001722:	f106 0410 	add.w	r4, r6, #16
 8001726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	1d33      	adds	r3, r6, #4
 8001730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f003 f9fa 	bl	8004b2c <USB_DevInit>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00d      	b.n	8001766 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f005 fb6b 	bl	8006e3a <USB_DevDisconnect>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_Start+0x16>
 8001780:	2302      	movs	r3, #2
 8001782:	e016      	b.n	80017b2 <HAL_PCD_Start+0x44>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f98f 	bl	8004ab4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f007 fc1c 	bl	8008fd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fb3f 	bl	8006e26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b088      	sub	sp, #32
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fb41 	bl	8006e4e <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d6:	d102      	bne.n	80017de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fb61 	bl	8001ea0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 fb33 	bl	8006e4e <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f2:	d112      	bne.n	800181a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	b292      	uxth	r2, r2
 8001808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f007 f9ea 	bl	8008be6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001812:	2100      	movs	r1, #0
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f925 	bl	8001a64 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f005 fb15 	bl	8006e4e <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800182e:	d10b      	bne.n	8001848 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f005 fafe 	bl	8006e4e <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185c:	d10b      	bne.n	8001876 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001870:	b292      	uxth	r2, r2
 8001872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fae7 	bl	8006e4e <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800188a:	d126      	bne.n	80018da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0204 	bic.w	r2, r2, #4
 800189e:	b292      	uxth	r2, r2
 80018a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0208 	bic.w	r2, r2, #8
 80018b6:	b292      	uxth	r2, r2
 80018b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f007 f9cb 	bl	8008c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fab5 	bl	8006e4e <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ee:	f040 8084 	bne.w	80019fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	77fb      	strb	r3, [r7, #31]
 80018f6:	e011      	b.n	800191c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	441a      	add	r2, r3
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	b292      	uxth	r2, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	f107 0120 	add.w	r1, r7, #32
 8001910:	440b      	add	r3, r1
 8001912:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	3301      	adds	r3, #1
 800191a:	77fb      	strb	r3, [r7, #31]
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d9ea      	bls.n	80018f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001952:	bf00      	nop
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195c:	b29b      	uxth	r3, r3
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f6      	beq.n	8001954 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	77fb      	strb	r3, [r7, #31]
 8001982:	e010      	b.n	80019a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4611      	mov	r1, r2
 800198c:	7ffa      	ldrb	r2, [r7, #31]
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	440a      	add	r2, r1
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	f107 0120 	add.w	r1, r7, #32
 8001998:	440b      	add	r3, r1
 800199a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800199e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019a0:	7ffb      	ldrb	r3, [r7, #31]
 80019a2:	3301      	adds	r3, #1
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	d9eb      	bls.n	8001984 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0208 	orr.w	r2, r2, #8
 80019be:	b292      	uxth	r2, r2
 80019c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0204 	orr.w	r2, r2, #4
 80019ee:	b292      	uxth	r2, r2
 80019f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f007 f915 	bl	8008c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fa25 	bl	8006e4e <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0e:	d10e      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a22:	b292      	uxth	r2, r2
 8001a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f007 f8ce 	bl	8008bca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fa0b 	bl	8006e4e <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a42:	d10b      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a56:	b292      	uxth	r2, r2
 8001a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_SetAddress+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e013      	b.n	8001aa6 <HAL_PCD_SetAddress+0x42>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 f9b2 	bl	8006e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	4608      	mov	r0, r1
 8001ab8:	4611      	mov	r1, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	70fb      	strb	r3, [r7, #3]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	803b      	strh	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0e      	bge.n	8001af2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00e      	b.n	8001b10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0207 	and.w	r2, r3, #7
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b1c:	883a      	ldrh	r2, [r7, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	78ba      	ldrb	r2, [r7, #2]
 8001b26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3a:	78bb      	ldrb	r3, [r7, #2]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d102      	bne.n	8001b46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_PCD_EP_Open+0xa6>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e00e      	b.n	8001b72 <HAL_PCD_EP_Open+0xc4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f802 	bl	8004b6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b70:	7afb      	ldrb	r3, [r7, #11]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	da0e      	bge.n	8001bac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	705a      	strb	r2, [r3, #1]
 8001baa:	e00e      	b.n	8001bca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_PCD_EP_Close+0x6a>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e00e      	b.n	8001c02 <HAL_PCD_EP_Close+0x88>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fb24 	bl	8005240 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	460b      	mov	r3, r1
 8001c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	f003 0207 	and.w	r2, r3, #7
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2200      	movs	r2, #0
 8001c42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6979      	ldr	r1, [r7, #20]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fcd6 	bl	8005618 <USB_EPStartXfer>
 8001c6c:	e005      	b.n	8001c7a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fccf 	bl	8005618 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0207 	and.w	r2, r3, #7
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6979      	ldr	r1, [r7, #20]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fc7c 	bl	8005618 <USB_EPStartXfer>
 8001d20:	e005      	b.n	8001d2e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6979      	ldr	r1, [r7, #20]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fc75 	bl	8005618 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 0207 	and.w	r2, r3, #7
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d901      	bls.n	8001d56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e04c      	b.n	8001df0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da0e      	bge.n	8001d7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	705a      	strb	r2, [r3, #1]
 8001d7a:	e00c      	b.n	8001d96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_EP_SetStall+0x7e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e01c      	b.n	8001df0 <HAL_PCD_EP_SetStall+0xb8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 ff1e 	bl	8006c06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d108      	bne.n	8001de6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f005 f843 	bl	8006e6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 020f 	and.w	r2, r3, #15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d901      	bls.n	8001e16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e040      	b.n	8001e98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0e      	bge.n	8001e3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
 8001e3a:	e00e      	b.n	8001e5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_PCD_EP_ClrStall+0x82>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e00e      	b.n	8001e98 <HAL_PCD_EP_ClrStall+0xa0>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68f9      	ldr	r1, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 ff0c 	bl	8006ca6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ea8:	e2ec      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ec0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 8161 	bne.w	800218c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d152      	bne.n	8001f7a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee4:	81fb      	strh	r3, [r7, #14]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3328      	adds	r3, #40	; 0x28
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	3302      	adds	r3, #2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	441a      	add	r2, r3
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f006 fe2b 	bl	8008b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 829b 	beq.w	8002484 <PCD_EP_ISR_Handler+0x5e4>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 8296 	bne.w	8002484 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f78:	e284      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d034      	beq.n	8001ffe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f004 ff9a 	bl	8006f0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	823b      	strh	r3, [r7, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	8a3a      	ldrh	r2, [r7, #16]
 8001fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f006 fda0 	bl	8008b3c <HAL_PCD_SetupStageCallback>
 8001ffc:	e242      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ffe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002002:	2b00      	cmp	r3, #0
 8002004:	f280 823e 	bge.w	8002484 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29a      	uxth	r2, r3
 8002010:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002014:	4013      	ands	r3, r2
 8002016:	83bb      	strh	r3, [r7, #28]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	8bba      	ldrh	r2, [r7, #28]
 800201e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002022:	b292      	uxth	r2, r2
 8002024:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	3306      	adds	r3, #6
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d019      	beq.n	800208e <PCD_EP_ISR_Handler+0x1ee>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	6959      	ldr	r1, [r3, #20]
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002072:	b29b      	uxth	r3, r3
 8002074:	f004 ff4a 	bl	8006f0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	441a      	add	r2, r3
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002086:	2100      	movs	r1, #0
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f006 fd69 	bl	8008b60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 81f2 	bne.w	8002484 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4413      	add	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d112      	bne.n	80020ee <PCD_EP_ISR_Handler+0x24e>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	e02f      	b.n	800214e <PCD_EP_ISR_Handler+0x2ae>
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b3e      	cmp	r3, #62	; 0x3e
 80020f4:	d813      	bhi.n	800211e <PCD_EP_ISR_Handler+0x27e>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <PCD_EP_ISR_Handler+0x270>
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	3301      	adds	r3, #1
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	b29b      	uxth	r3, r3
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	b29a      	uxth	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e017      	b.n	800214e <PCD_EP_ISR_Handler+0x2ae>
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <PCD_EP_ISR_Handler+0x298>
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	3b01      	subs	r3, #1
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	b29b      	uxth	r3, r3
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	b29b      	uxth	r3, r3
 8002140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002148:	b29a      	uxth	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	827b      	strh	r3, [r7, #18]
 8002160:	8a7b      	ldrh	r3, [r7, #18]
 8002162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002166:	827b      	strh	r3, [r7, #18]
 8002168:	8a7b      	ldrh	r3, [r7, #18]
 800216a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800216e:	827b      	strh	r3, [r7, #18]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	8a7b      	ldrh	r3, [r7, #18]
 8002176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800217a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002186:	b29b      	uxth	r3, r3
 8002188:	8013      	strh	r3, [r2, #0]
 800218a:	e17b      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800219e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f280 80ea 	bge.w	800237c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021be:	4013      	ands	r3, r2
 80021c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d6:	b292      	uxth	r2, r2
 80021d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d122      	bne.n	800223e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	3306      	adds	r3, #6
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8087 	beq.w	8002338 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	6959      	ldr	r1, [r3, #20]
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	88da      	ldrh	r2, [r3, #6]
 8002236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002238:	f004 fe68 	bl	8006f0c <USB_ReadPMA>
 800223c:	e07c      	b.n	8002338 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	78db      	ldrb	r3, [r3, #3]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d108      	bne.n	8002258 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002248:	461a      	mov	r2, r3
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f927 	bl	80024a0 <HAL_PCD_EP_DB_Receive>
 8002252:	4603      	mov	r3, r0
 8002254:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002256:	e06f      	b.n	8002338 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	847b      	strh	r3, [r7, #34]	; 0x22
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002294:	b29b      	uxth	r3, r3
 8002296:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d021      	beq.n	80022f6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	3302      	adds	r3, #2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d02a      	beq.n	8002338 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	6959      	ldr	r1, [r3, #20]
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	891a      	ldrh	r2, [r3, #8]
 80022ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022f0:	f004 fe0c 	bl	8006f0c <USB_ReadPMA>
 80022f4:	e020      	b.n	8002338 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	3306      	adds	r3, #6
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	6959      	ldr	r1, [r3, #20]
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	895a      	ldrh	r2, [r3, #10]
 8002332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002334:	f004 fdea 	bl	8006f0c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800233e:	441a      	add	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800234a:	441a      	add	r2, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <PCD_EP_ISR_Handler+0x4c2>
 8002358:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d206      	bcs.n	8002370 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f006 fbf9 	bl	8008b60 <HAL_PCD_DataOutStageCallback>
 800236e:	e005      	b.n	800237c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f94e 	bl	8005618 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800237c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d07e      	beq.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002386:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b4:	843b      	strh	r3, [r7, #32]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	8c3b      	ldrh	r3, [r7, #32]
 80023c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d00c      	beq.n	80023f4 <PCD_EP_ISR_Handler+0x554>
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	78db      	ldrb	r3, [r3, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d146      	bne.n	8002478 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d141      	bne.n	8002478 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	3302      	adds	r3, #2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	8bfb      	ldrh	r3, [r7, #30]
 8002424:	429a      	cmp	r2, r3
 8002426:	d906      	bls.n	8002436 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	8bfb      	ldrh	r3, [r7, #30]
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	619a      	str	r2, [r3, #24]
 8002434:	e002      	b.n	800243c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f006 fba3 	bl	8008b96 <HAL_PCD_DataInStageCallback>
 8002450:	e018      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	8bfb      	ldrh	r3, [r7, #30]
 8002458:	441a      	add	r2, r3
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	8bfb      	ldrh	r3, [r7, #30]
 8002464:	441a      	add	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002470:	4618      	mov	r0, r3
 8002472:	f003 f8d1 	bl	8005618 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002476:	e005      	b.n	8002484 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002478:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800247a:	461a      	mov	r2, r3
 800247c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f91b 	bl	80026ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800248c:	b29b      	uxth	r3, r3
 800248e:	b21b      	sxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f6ff ad0a 	blt.w	8001eaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3738      	adds	r7, #56	; 0x38
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d07e      	beq.n	80025b6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	3302      	adds	r3, #2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	8b7b      	ldrh	r3, [r7, #26]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d306      	bcc.n	80024fa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e002      	b.n	8002500 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d123      	bne.n	8002550 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	833b      	strh	r3, [r7, #24]
 8002524:	8b3b      	ldrh	r3, [r7, #24]
 8002526:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800252a:	833b      	strh	r3, [r7, #24]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	8b3b      	ldrh	r3, [r7, #24]
 800253c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	b29b      	uxth	r3, r3
 800254e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01f      	beq.n	800259a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002574:	82fb      	strh	r3, [r7, #22]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	441a      	add	r2, r3
 8002584:	8afb      	ldrh	r3, [r7, #22]
 8002586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002596:	b29b      	uxth	r3, r3
 8002598:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800259a:	8b7b      	ldrh	r3, [r7, #26]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	891a      	ldrh	r2, [r3, #8]
 80025ae:	8b7b      	ldrh	r3, [r7, #26]
 80025b0:	f004 fcac 	bl	8006f0c <USB_ReadPMA>
 80025b4:	e07c      	b.n	80026b0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	3306      	adds	r3, #6
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	8b7b      	ldrh	r3, [r7, #26]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d306      	bcc.n	80025f8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	1ad2      	subs	r2, r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	e002      	b.n	80025fe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d123      	bne.n	800264e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	83fb      	strh	r3, [r7, #30]
 8002622:	8bfb      	ldrh	r3, [r7, #30]
 8002624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002628:	83fb      	strh	r3, [r7, #30]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	441a      	add	r2, r3
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264a:	b29b      	uxth	r3, r3
 800264c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11f      	bne.n	8002698 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	83bb      	strh	r3, [r7, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	8bbb      	ldrh	r3, [r7, #28]
 8002684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002694:	b29b      	uxth	r3, r3
 8002696:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002698:	8b7b      	ldrh	r3, [r7, #26]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6959      	ldr	r1, [r3, #20]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	895a      	ldrh	r2, [r3, #10]
 80026aa:	8b7b      	ldrh	r3, [r7, #26]
 80026ac:	f004 fc2e 	bl	8006f0c <USB_ReadPMA>
    }
  }

  return count;
 80026b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b0a2      	sub	sp, #136	; 0x88
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 81c7 	beq.w	8002a62 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	3302      	adds	r3, #2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002708:	429a      	cmp	r2, r3
 800270a:	d907      	bls.n	800271c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	e002      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80b9 	bne.w	800289e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d126      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	4413      	add	r3, r2
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	011a      	lsls	r2, r3, #4
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	4413      	add	r3, r2
 8002756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002766:	b29a      	uxth	r2, r3
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277a:	b29a      	uxth	r2, r3
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e01a      	b.n	80027b8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d116      	bne.n	80027b8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	4413      	add	r3, r2
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	011a      	lsls	r2, r3, #4
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	4413      	add	r3, r2
 80027ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2200      	movs	r2, #0
 80027b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d126      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x15a>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	011a      	lsls	r2, r3, #4
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280c:	b29a      	uxth	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	e017      	b.n	8002844 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d113      	bne.n	8002844 <HAL_PCD_EP_DB_Transmit+0x18a>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	4413      	add	r3, r2
 800282c:	623b      	str	r3, [r7, #32]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	011a      	lsls	r2, r3, #4
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	4413      	add	r3, r2
 8002838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2200      	movs	r2, #0
 8002842:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f006 f9a3 	bl	8008b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 82d4 	beq.w	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	827b      	strh	r3, [r7, #18]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	8a7b      	ldrh	r3, [r7, #18]
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]
 800289c:	e2b2      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d021      	beq.n	80028ec <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f040 8286 	bne.w	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002900:	441a      	add	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290e:	441a      	add	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d309      	bcc.n	8002934 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	621a      	str	r2, [r3, #32]
 8002932:	e015      	b.n	8002960 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800294a:	e009      	b.n	8002960 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d155      	bne.n	8002a14 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	4413      	add	r3, r2
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	011a      	lsls	r2, r3, #4
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	4413      	add	r3, r2
 800298a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
 8002990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d112      	bne.n	80029bc <HAL_PCD_EP_DB_Transmit+0x302>
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	e047      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x392>
 80029bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029be:	2b3e      	cmp	r3, #62	; 0x3e
 80029c0:	d811      	bhi.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80029c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	3301      	adds	r3, #1
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029da:	b29b      	uxth	r3, r3
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	b29a      	uxth	r2, r3
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	e032      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x392>
 80029e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_PCD_EP_DB_Transmit+0x342>
 80029f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f8:	3b01      	subs	r3, #1
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80029fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	801a      	strh	r2, [r3, #0]
 8002a12:	e01b      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d117      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	4413      	add	r3, r2
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	011a      	lsls	r2, r3, #4
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6959      	ldr	r1, [r3, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	891a      	ldrh	r2, [r3, #8]
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f004 fa11 	bl	8006e82 <USB_WritePMA>
 8002a60:	e1d0      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	3306      	adds	r3, #6
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d307      	bcc.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	e002      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 80c4 	bne.w	8002c42 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d126      	bne.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	011a      	lsls	r2, r3, #4
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0c:	801a      	strh	r2, [r3, #0]
 8002b0e:	e01a      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d116      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2c:	4413      	add	r3, r2
 8002b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	011a      	lsls	r2, r3, #4
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	785b      	ldrb	r3, [r3, #1]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d12f      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	011a      	lsls	r2, r3, #4
 8002b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e017      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d113      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bca:	4413      	add	r3, r2
 8002bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be0:	2200      	movs	r2, #0
 8002be2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f005 ffd3 	bl	8008b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8104 	bne.w	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	441a      	add	r2, r3
 8002c28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]
 8002c40:	e0e0      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d121      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	441a      	add	r2, r3
 8002c78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	f040 80b4 	bne.w	8002e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d309      	bcc.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6a1a      	ldr	r2, [r3, #32]
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	621a      	str	r2, [r3, #32]
 8002cd6:	e015      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cee:	e009      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	667b      	str	r3, [r7, #100]	; 0x64
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d155      	bne.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x704>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d26:	4413      	add	r3, r2
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	011a      	lsls	r2, r3, #4
 8002d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d112      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	801a      	strh	r2, [r3, #0]
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	e044      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d68:	2b3e      	cmp	r3, #62	; 0x3e
 8002d6a:	d811      	bhi.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	657b      	str	r3, [r7, #84]	; 0x54
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	3301      	adds	r3, #1
 8002d80:	657b      	str	r3, [r7, #84]	; 0x54
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	e02f      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
 8002d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	3b01      	subs	r3, #1
 8002da4:	657b      	str	r3, [r7, #84]	; 0x54
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e018      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d114      	bne.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd4:	4413      	add	r3, r2
 8002dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	011a      	lsls	r2, r3, #4
 8002dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de0:	4413      	add	r3, r2
 8002de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
 8002de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	6959      	ldr	r1, [r3, #20]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	895a      	ldrh	r2, [r3, #10]
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f004 f83f 	bl	8006e82 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1e:	823b      	strh	r3, [r7, #16]
 8002e20:	8a3b      	ldrh	r3, [r7, #16]
 8002e22:	f083 0310 	eor.w	r3, r3, #16
 8002e26:	823b      	strh	r3, [r7, #16]
 8002e28:	8a3b      	ldrh	r3, [r7, #16]
 8002e2a:	f083 0320 	eor.w	r3, r3, #32
 8002e2e:	823b      	strh	r3, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	8a3b      	ldrh	r3, [r7, #16]
 8002e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3788      	adds	r7, #136	; 0x88
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	817b      	strh	r3, [r7, #10]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e009      	b.n	8002ea8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e94:	897a      	ldrh	r2, [r7, #10]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	80da      	strh	r2, [r3, #6]
 8002ebc:	e00b      	b.n	8002ed6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e26c      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8087 	beq.w	8003012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f04:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d112      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
 8002f1c:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06c      	beq.n	8003010 <HAL_RCC_OscConfig+0x12c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d168      	bne.n	8003010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e246      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x76>
 8002f4c:	4b80      	ldr	r3, [pc, #512]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7f      	ldr	r2, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7a      	ldr	r2, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xbc>
 8002f86:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a71      	ldr	r2, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6a      	ldr	r2, [pc, #424]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fd fe04 	bl	8000bcc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fd fe00 	bl	8000bcc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1fa      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe4>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fdf0 	bl	8000bcc <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fd fdec 	bl	8000bcc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1e6      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x10c>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d063      	beq.n	80030e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1ba      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fd fda5 	bl	8000bcc <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7fd fda1 	bl	8000bcc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e19b      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4927      	ldr	r1, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd fd84 	bl	8000bcc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fd fd80 	bl	8000bcc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e17a      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03a      	beq.n	8003168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fd fd64 	bl	8000bcc <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7fd fd60 	bl	8000bcc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e15a      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 faa6 	bl	8003678 <RCC_Delay>
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fd fd4a 	bl	8000bcc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313a:	e00f      	b.n	800315c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fd fd46 	bl	8000bcc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d908      	bls.n	800315c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e140      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	42420000 	.word	0x42420000
 8003158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b9e      	ldr	r3, [pc, #632]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e9      	bne.n	800313c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b97      	ldr	r3, [pc, #604]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b94      	ldr	r3, [pc, #592]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a93      	ldr	r2, [pc, #588]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b8b      	ldr	r3, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a8a      	ldr	r2, [pc, #552]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fd fd07 	bl	8000bcc <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fd fd03 	bl	8000bcc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0fd      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x312>
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	e02d      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x334>
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a72      	ldr	r2, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	e01c      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d10c      	bne.n	800323a <HAL_RCC_OscConfig+0x356>
 8003220:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a6c      	ldr	r2, [pc, #432]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e00b      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a63      	ldr	r2, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d015      	beq.n	8003286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fd fcb7 	bl	8000bcc <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fd fcb3 	bl	8000bcc <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0ab      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ee      	beq.n	8003262 <HAL_RCC_OscConfig+0x37e>
 8003284:	e014      	b.n	80032b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fd fca1 	bl	8000bcc <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fd fc9d 	bl	8000bcc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e095      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8081 	beq.w	80033ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d061      	beq.n	800339c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d146      	bne.n	800336e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fd fc71 	bl	8000bcc <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fd fc6d 	bl	8000bcc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e067      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003316:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	492d      	ldr	r1, [pc, #180]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a19      	ldr	r1, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	430b      	orrs	r3, r1
 800333a:	4927      	ldr	r1, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fc41 	bl	8000bcc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fc3d 	bl	8000bcc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e037      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x46a>
 800336c:	e02f      	b.n	80033ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_RCC_OscConfig+0x4fc>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fd fc2a 	bl	8000bcc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fd fc26 	bl	8000bcc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e020      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x498>
 800339a:	e018      	b.n	80033ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e013      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42420060 	.word	0x42420060

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d0      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d910      	bls.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4965      	ldr	r1, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d040      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e073      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4936      	ldr	r1, [pc, #216]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fb7a 	bl	8000bcc <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fd fb76 	bl	8000bcc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e053      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d210      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1cc>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fad8 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800a234 	.word	0x0800a234
 80035b0:	2000001c 	.word	0x2000001c
 80035b4:	20000020 	.word	0x20000020

080035b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b490      	push	{r4, r7}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035c0:	1d3c      	adds	r4, r7, #4
 80035c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035c8:	f240 2301 	movw	r3, #513	; 0x201
 80035cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x46>
 80035f6:	e02d      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e02d      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800360a:	4413      	add	r3, r2
 800360c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c5b      	lsrs	r3, r3, #17
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800362a:	4413      	add	r3, r2
 800362c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003636:	fb02 f203 	mul.w	r2, r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e004      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	623b      	str	r3, [r7, #32]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6a3b      	ldr	r3, [r7, #32]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc90      	pop	{r4, r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	0800a1dc 	.word	0x0800a1dc
 800366c:	40021000 	.word	0x40021000
 8003670:	007a1200 	.word	0x007a1200
 8003674:	003d0900 	.word	0x003d0900

08003678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <RCC_Delay+0x34>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <RCC_Delay+0x38>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0a5b      	lsrs	r3, r3, #9
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003694:	bf00      	nop
  }
  while (Delay --);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	60fa      	str	r2, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <RCC_Delay+0x1c>
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	2000001c 	.word	0x2000001c
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d07d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d4:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b4c      	ldr	r3, [pc, #304]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	61d3      	str	r3, [r2, #28]
 80036ec:	4b49      	ldr	r3, [pc, #292]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003708:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fd fa5a 	bl	8000bcc <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd fa56 	bl	8000bcc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e06d      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02e      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d027      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003758:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800376e:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d014      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fa25 	bl	8000bcc <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fa21 	bl	8000bcc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e036      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4917      	ldr	r1, [pc, #92]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	490b      	ldr	r1, [pc, #44]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	42420440 	.word	0x42420440

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fc ff0c 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fe04 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d001      	beq.n	80038d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_TIM_Base_Start+0x88>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_TIM_Base_Start+0x48>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d009      	beq.n	8003908 <HAL_TIM_Base_Start+0x48>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <HAL_TIM_Base_Start+0x8c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_TIM_Base_Start+0x48>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <HAL_TIM_Base_Start+0x90>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d111      	bne.n	800392c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b06      	cmp	r3, #6
 8003918:	d010      	beq.n	800393c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	e007      	b.n	800393c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800

08003954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f839 	bl	80039f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 fd6a 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x28>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e022      	b.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d109      	bne.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x42>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	e015      	b.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d109      	bne.n	8003a60 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e008      	b.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
 8003a78:	e14e      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x90>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e022      	b.n	8003ada <HAL_TIM_PWM_Start_DMA+0xd6>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d109      	bne.n	8003aae <HAL_TIM_PWM_Start_DMA+0xaa>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e015      	b.n	8003ada <HAL_TIM_PWM_Start_DMA+0xd6>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e008      	b.n	8003ada <HAL_TIM_PWM_Start_DMA+0xd6>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Start_DMA+0xea>
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e114      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_PWM_Start_DMA+0xfa>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	e016      	b.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x128>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PWM_Start_DMA+0x10a>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	e00e      	b.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x128>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_PWM_Start_DMA+0x11a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b1c:	e006      	b.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x128>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b26:	e001      	b.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0f5      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	f200 80ae 	bhi.w	8003c90 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_TIM_PWM_Start_DMA+0x138>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003c91 	.word	0x08003c91
 8003b44:	08003c91 	.word	0x08003c91
 8003b48:	08003c91 	.word	0x08003c91
 8003b4c:	08003bb9 	.word	0x08003bb9
 8003b50:	08003c91 	.word	0x08003c91
 8003b54:	08003c91 	.word	0x08003c91
 8003b58:	08003c91 	.word	0x08003c91
 8003b5c:	08003c01 	.word	0x08003c01
 8003b60:	08003c91 	.word	0x08003c91
 8003b64:	08003c91 	.word	0x08003c91
 8003b68:	08003c91 	.word	0x08003c91
 8003b6c:	08003c49 	.word	0x08003c49
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	4a6a      	ldr	r2, [pc, #424]	; (8003d20 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	4a68      	ldr	r2, [pc, #416]	; (8003d28 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3334      	adds	r3, #52	; 0x34
 8003b94:	461a      	mov	r2, r3
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	f7fd f9ae 	bl	8000ef8 <HAL_DMA_Start_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0b8      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	60da      	str	r2, [r3, #12]
      break;
 8003bb6:	e06c      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	4a57      	ldr	r2, [pc, #348]	; (8003d24 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	4a56      	ldr	r2, [pc, #344]	; (8003d28 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3338      	adds	r3, #56	; 0x38
 8003bdc:	461a      	mov	r2, r3
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	f7fd f98a 	bl	8000ef8 <HAL_DMA_Start_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e094      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bfc:	60da      	str	r2, [r3, #12]
      break;
 8003bfe:	e048      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a46      	ldr	r2, [pc, #280]	; (8003d20 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a45      	ldr	r2, [pc, #276]	; (8003d24 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	333c      	adds	r3, #60	; 0x3c
 8003c24:	461a      	mov	r2, r3
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	f7fd f966 	bl	8000ef8 <HAL_DMA_Start_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e070      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c44:	60da      	str	r2, [r3, #12]
      break;
 8003c46:	e024      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3340      	adds	r3, #64	; 0x40
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	f7fd f942 	bl	8000ef8 <HAL_DMA_Start_IT>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e04c      	b.n	8003d18 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c8c:	60da      	str	r2, [r3, #12]
      break;
 8003c8e:	e000      	b.n	8003c92 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003c90:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fe66 	bl	800496c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_TIM_PWM_Start_DMA+0x328>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d107      	bne.n	8003cba <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_TIM_PWM_Start_DMA+0x328>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d009      	beq.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d111      	bne.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d010      	beq.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	e007      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	0800435d 	.word	0x0800435d
 8003d24:	08004405 	.word	0x08004405
 8003d28:	080042cb 	.word	0x080042cb
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0202 	mvn.w	r2, #2
 8003d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa78 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa6b 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa7a 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0204 	mvn.w	r2, #4
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa4e 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa41 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa50 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d122      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d11b      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0208 	mvn.w	r2, #8
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fa24 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa17 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fa26 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0210 	mvn.w	r2, #16
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2208      	movs	r2, #8
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9fa 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9ed 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f9fc 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0201 	mvn.w	r2, #1
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9c8 	bl	800424c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b80      	cmp	r3, #128	; 0x80
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fdcd 	bl	8004a82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9c9 	bl	80042a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0220 	mvn.w	r2, #32
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd98 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0ac      	b.n	80040bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	f200 809f 	bhi.w	80040b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003fad 	.word	0x08003fad
 8003f7c:	080040b1 	.word	0x080040b1
 8003f80:	080040b1 	.word	0x080040b1
 8003f84:	080040b1 	.word	0x080040b1
 8003f88:	08003fed 	.word	0x08003fed
 8003f8c:	080040b1 	.word	0x080040b1
 8003f90:	080040b1 	.word	0x080040b1
 8003f94:	080040b1 	.word	0x080040b1
 8003f98:	0800402f 	.word	0x0800402f
 8003f9c:	080040b1 	.word	0x080040b1
 8003fa0:	080040b1 	.word	0x080040b1
 8003fa4:	080040b1 	.word	0x080040b1
 8003fa8:	0800406f 	.word	0x0800406f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fabc 	bl	8004530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
      break;
 8003fea:	e062      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb02 	bl	80045fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	619a      	str	r2, [r3, #24]
      break;
 800402c:	e041      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fb4b 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0208 	orr.w	r2, r2, #8
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0204 	bic.w	r2, r2, #4
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	61da      	str	r2, [r3, #28]
      break;
 800406c:	e021      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fb95 	bl	80047a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
      break;
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIM_ConfigClockSource+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e0b3      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x180>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004114:	d03e      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0xd0>
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	f200 8087 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x168>
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004122:	f000 8085 	beq.w	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d87f      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d01a      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0xa2>
 8004130:	2b70      	cmp	r3, #112	; 0x70
 8004132:	d87b      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 8004134:	2b60      	cmp	r3, #96	; 0x60
 8004136:	d050      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x116>
 8004138:	2b60      	cmp	r3, #96	; 0x60
 800413a:	d877      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 800413c:	2b50      	cmp	r3, #80	; 0x50
 800413e:	d03c      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xf6>
 8004140:	2b50      	cmp	r3, #80	; 0x50
 8004142:	d873      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d058      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x136>
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d86f      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 800414c:	2b30      	cmp	r3, #48	; 0x30
 800414e:	d064      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x156>
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	d86b      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d060      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x156>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d867      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x168>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d05c      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x156>
 8004160:	2b10      	cmp	r3, #16
 8004162:	d05a      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004164:	e062      	b.n	800422c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6899      	ldr	r1, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f000 fbda 	bl	800492e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004188:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	609a      	str	r2, [r3, #8]
      break;
 8004192:	e04e      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f000 fbc3 	bl	800492e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b6:	609a      	str	r2, [r3, #8]
      break;
 80041b8:	e03b      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f000 fb3a 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2150      	movs	r1, #80	; 0x50
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fb91 	bl	80048fa <TIM_ITRx_SetConfig>
      break;
 80041d8:	e02b      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f000 fb58 	bl	800489c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2160      	movs	r1, #96	; 0x60
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fb81 	bl	80048fa <TIM_ITRx_SetConfig>
      break;
 80041f8:	e01b      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	461a      	mov	r2, r3
 8004208:	f000 fb1a 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fb71 	bl	80048fa <TIM_ITRx_SetConfig>
      break;
 8004218:	e00b      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f000 fb68 	bl	80048fa <TIM_ITRx_SetConfig>
        break;
 800422a:	e002      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d107      	bne.n	80042f2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f0:	e02a      	b.n	8004348 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2202      	movs	r2, #2
 8004300:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430a:	e01d      	b.n	8004348 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d107      	bne.n	8004326 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2204      	movs	r2, #4
 800431a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004324:	e010      	b.n	8004348 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d107      	bne.n	8004340 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2208      	movs	r2, #8
 8004334:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433e:	e003      	b.n	8004348 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ffb5 	bl	80042b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d10b      	bne.n	800438c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d136      	bne.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438a:	e031      	b.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d10b      	bne.n	80043ae <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2202      	movs	r2, #2
 800439a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d125      	bne.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ac:	e020      	b.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d10b      	bne.n	80043d0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d114      	bne.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ce:	e00f      	b.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d10a      	bne.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2208      	movs	r2, #8
 80043de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff ff46 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d103      	bne.n	8004424 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	771a      	strb	r2, [r3, #28]
 8004422:	e019      	b.n	8004458 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d103      	bne.n	8004436 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
 8004434:	e010      	b.n	8004458 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d103      	bne.n	8004448 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2204      	movs	r2, #4
 8004444:	771a      	strb	r2, [r3, #28]
 8004446:	e007      	b.n	8004458 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d102      	bne.n	8004458 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2208      	movs	r2, #8
 8004456:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff1b 	bl	8004294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a29      	ldr	r2, [pc, #164]	; (8004524 <TIM_Base_SetConfig+0xb8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00b      	beq.n	800449c <TIM_Base_SetConfig+0x30>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0x30>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <TIM_Base_SetConfig+0xbc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a25      	ldr	r2, [pc, #148]	; (800452c <TIM_Base_SetConfig+0xc0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <TIM_Base_SetConfig+0xb8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x62>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x62>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a19      	ldr	r2, [pc, #100]	; (8004528 <TIM_Base_SetConfig+0xbc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <TIM_Base_SetConfig+0xc0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <TIM_Base_SetConfig+0xb8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800

08004530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 0302 	bic.w	r3, r3, #2
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <TIM_OC1_SetConfig+0xc8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10c      	bne.n	80045a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0308 	bic.w	r3, r3, #8
 8004592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <TIM_OC1_SetConfig+0xc8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00

080045fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0210 	bic.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0320 	bic.w	r3, r3, #32
 8004646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <TIM_OC2_SetConfig+0xd0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10d      	bne.n	8004678 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <TIM_OC2_SetConfig+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d113      	bne.n	80046a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10d      	bne.n	800474a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00

080047a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0f      	ldr	r2, [pc, #60]	; (800483c <TIM_OC4_SetConfig+0x98>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d109      	bne.n	8004818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00

08004840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 030a 	bic.w	r3, r3, #10
 800487c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f023 0210 	bic.w	r2, r3, #16
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	031b      	lsls	r3, r3, #12
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr

080048fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	f043 0307 	orr.w	r3, r3, #7
 800491c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b087      	sub	sp, #28
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	021a      	lsls	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	431a      	orrs	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4313      	orrs	r3, r2
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	609a      	str	r2, [r3, #8]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2201      	movs	r2, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e046      	b.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10c      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a94:	b084      	sub	sp, #16
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	f107 0014 	add.w	r0, r7, #20
 8004aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	b004      	add	sp, #16
 8004ab2:	4770      	bx	lr

08004ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ac4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4013      	ands	r3, r2
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	f107 0014 	add.w	r0, r7, #20
 8004b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr

08004b6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b09b      	sub	sp, #108	; 0x6c
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	78db      	ldrb	r3, [r3, #3]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d81f      	bhi.n	8004bde <USB_ActivateEndpoint+0x72>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <USB_ActivateEndpoint+0x38>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004be7 	.word	0x08004be7
 8004bb0:	08004bc3 	.word	0x08004bc3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bc0:	e012      	b.n	8004be8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bc6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bce:	e00b      	b.n	8004be8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bdc:	e004      	b.n	8004be8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004be4:	e000      	b.n	8004be8 <USB_ActivateEndpoint+0x7c>
      break;
 8004be6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	7b1b      	ldrb	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8149 	bne.w	8004eec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8084 	beq.w	8004d6c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	011a      	lsls	r2, r3, #4
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	88db      	ldrh	r3, [r3, #6]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	81fb      	strh	r3, [r7, #14]
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <USB_ActivateEndpoint+0x17c>
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	81bb      	strh	r3, [r7, #12]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	89bb      	ldrh	r3, [r7, #12]
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	78db      	ldrb	r3, [r3, #3]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d020      	beq.n	8004d32 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d06:	813b      	strh	r3, [r7, #8]
 8004d08:	893b      	ldrh	r3, [r7, #8]
 8004d0a:	f083 0320 	eor.w	r3, r3, #32
 8004d0e:	813b      	strh	r3, [r7, #8]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	893b      	ldrh	r3, [r7, #8]
 8004d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	8013      	strh	r3, [r2, #0]
 8004d30:	e27f      	b.n	8005232 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	897b      	ldrh	r3, [r7, #10]
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]
 8004d6a:	e262      	b.n	8005232 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	4413      	add	r3, r2
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	88db      	ldrh	r3, [r3, #6]
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	4413      	add	r3, r2
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d112      	bne.n	8004df2 <USB_ActivateEndpoint+0x286>
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e02f      	b.n	8004e52 <USB_ActivateEndpoint+0x2e6>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b3e      	cmp	r3, #62	; 0x3e
 8004df8:	d813      	bhi.n	8004e22 <USB_ActivateEndpoint+0x2b6>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	663b      	str	r3, [r7, #96]	; 0x60
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <USB_ActivateEndpoint+0x2a8>
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e10:	3301      	adds	r3, #1
 8004e12:	663b      	str	r3, [r7, #96]	; 0x60
 8004e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e017      	b.n	8004e52 <USB_ActivateEndpoint+0x2e6>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <USB_ActivateEndpoint+0x2d0>
 8004e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	83fb      	strh	r3, [r7, #30]
 8004e60:	8bfb      	ldrh	r3, [r7, #30]
 8004e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01b      	beq.n	8004ea2 <USB_ActivateEndpoint+0x336>
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	83bb      	strh	r3, [r7, #28]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8bbb      	ldrh	r3, [r7, #28]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	837b      	strh	r3, [r7, #26]
 8004eba:	8b7b      	ldrh	r3, [r7, #26]
 8004ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ec0:	837b      	strh	r3, [r7, #26]
 8004ec2:	8b7b      	ldrh	r3, [r7, #26]
 8004ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ec8:	837b      	strh	r3, [r7, #26]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8b7b      	ldrh	r3, [r7, #26]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
 8004eea:	e1a2      	b.n	8005232 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f38:	4413      	add	r3, r2
 8004f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	011a      	lsls	r2, r3, #4
 8004f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	891b      	ldrh	r3, [r3, #8]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6c:	4413      	add	r3, r2
 8004f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	011a      	lsls	r2, r3, #4
 8004f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	895b      	ldrh	r3, [r3, #10]
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 8091 	bne.w	80050bc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <USB_ActivateEndpoint+0x47e>
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <USB_ActivateEndpoint+0x4ce>
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	86fb      	strh	r3, [r7, #54]	; 0x36
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005052:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005058:	86bb      	strh	r3, [r7, #52]	; 0x34
 800505a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800505c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005060:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005098:	867b      	strh	r3, [r7, #50]	; 0x32
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
 80050ba:	e0ba      	b.n	8005232 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <USB_ActivateEndpoint+0x5a8>
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01d      	beq.n	800516c <USB_ActivateEndpoint+0x600>
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	78db      	ldrb	r3, [r3, #3]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d024      	beq.n	80051be <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800518e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005192:	f083 0320 	eor.w	r3, r3, #32
 8005196:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
 80051bc:	e01d      	b.n	80051fa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005236:	4618      	mov	r0, r3
 8005238:	376c      	adds	r7, #108	; 0x6c
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005240:	b480      	push	{r7}
 8005242:	b08d      	sub	sp, #52	; 0x34
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	7b1b      	ldrb	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 808e 	bne.w	8005370 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d044      	beq.n	80052e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	81bb      	strh	r3, [r7, #12]
 800526a:	89bb      	ldrh	r3, [r7, #12]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <USB_DeactivateEndpoint+0x6c>
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	817b      	strh	r3, [r7, #10]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c2:	813b      	strh	r3, [r7, #8]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	893b      	ldrh	r3, [r7, #8]
 80052d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]
 80052e4:	e192      	b.n	800560c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	827b      	strh	r3, [r7, #18]
 80052f4:	8a7b      	ldrh	r3, [r7, #18]
 80052f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01b      	beq.n	8005336 <USB_DeactivateEndpoint+0xf6>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	823b      	strh	r3, [r7, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	8a3b      	ldrh	r3, [r7, #16]
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800532e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	81fb      	strh	r3, [r7, #14]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	441a      	add	r2, r3
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]
 800536e:	e14d      	b.n	800560c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 80a5 	bne.w	80054c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	843b      	strh	r3, [r7, #32]
 8005388:	8c3b      	ldrh	r3, [r7, #32]
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01b      	beq.n	80053ca <USB_DeactivateEndpoint+0x18a>
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	83fb      	strh	r3, [r7, #30]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	8bfb      	ldrh	r3, [r7, #30]
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	83bb      	strh	r3, [r7, #28]
 80053d8:	8bbb      	ldrh	r3, [r7, #28]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01b      	beq.n	800541a <USB_DeactivateEndpoint+0x1da>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	837b      	strh	r3, [r7, #26]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	8b7b      	ldrh	r3, [r7, #26]
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	833b      	strh	r3, [r7, #24]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8b3b      	ldrh	r3, [r7, #24]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	82fb      	strh	r3, [r7, #22]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	8afb      	ldrh	r3, [r7, #22]
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	82bb      	strh	r3, [r7, #20]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	8abb      	ldrh	r3, [r7, #20]
 80054ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054be:	b29b      	uxth	r3, r3
 80054c0:	8013      	strh	r3, [r2, #0]
 80054c2:	e0a3      	b.n	800560c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <USB_DeactivateEndpoint+0x2d4>
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005522:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <USB_DeactivateEndpoint+0x324>
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	853b      	strh	r3, [r7, #40]	; 0x28
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3734      	adds	r7, #52	; 0x34
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b0cc      	sub	sp, #304	; 0x130
 800561c:	af00      	add	r7, sp, #0
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	6018      	str	r0, [r3, #0]
 8005622:	463b      	mov	r3, r7
 8005624:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 872e 	bne.w	800648e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	463b      	mov	r3, r7
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d905      	bls.n	800564e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800564c:	e004      	b.n	8005658 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	7b1b      	ldrb	r3, [r3, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d134      	bne.n	80056cc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6959      	ldr	r1, [r3, #20]
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	88da      	ldrh	r2, [r3, #6]
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	b29b      	uxth	r3, r3
 8005674:	1d38      	adds	r0, r7, #4
 8005676:	6800      	ldr	r0, [r0, #0]
 8005678:	f001 fc03 	bl	8006e82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	1d3a      	adds	r2, r7, #4
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	4619      	mov	r1, r3
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	f107 0210 	add.w	r2, r7, #16
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	440a      	add	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	011a      	lsls	r2, r3, #4
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056b4:	f107 030c 	add.w	r3, r7, #12
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	f000 beac 	b.w	8006424 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	78db      	ldrb	r3, [r3, #3]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f040 838c 	bne.w	8005df0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f240 8330 	bls.w	8005d4a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800571a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005722:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005738:	1ad2      	subs	r2, r2, r3
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 819e 	beq.w	8005a98 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800575c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005760:	1d3a      	adds	r2, r7, #4
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d17a      	bne.n	8005866 <USB_EPStartXfer+0x24e>
 8005770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005774:	1d3a      	adds	r2, r7, #4
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005782:	b29b      	uxth	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800578a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	440a      	add	r2, r1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	011a      	lsls	r2, r3, #4
 800579c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11a      	bne.n	80057ec <USB_EPStartXfer+0x1d4>
 80057b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	e062      	b.n	80058b2 <USB_EPStartXfer+0x29a>
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	2b3e      	cmp	r3, #62	; 0x3e
 80057f2:	d819      	bhi.n	8005828 <USB_EPStartXfer+0x210>
 80057f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <USB_EPStartXfer+0x1fc>
 800580a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800580e:	3301      	adds	r3, #1
 8005810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005818:	b29b      	uxth	r3, r3
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	b29a      	uxth	r2, r3
 800581e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e044      	b.n	80058b2 <USB_EPStartXfer+0x29a>
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <USB_EPStartXfer+0x230>
 800583e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005842:	3b01      	subs	r3, #1
 8005844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005848:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800584c:	b29b      	uxth	r3, r3
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e025      	b.n	80058b2 <USB_EPStartXfer+0x29a>
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d120      	bne.n	80058b2 <USB_EPStartXfer+0x29a>
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	440a      	add	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4413      	add	r3, r2
 800589a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800589e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	895b      	ldrh	r3, [r3, #10]
 80058b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058cc:	1d38      	adds	r0, r7, #4
 80058ce:	6800      	ldr	r0, [r0, #0]
 80058d0:	f001 fad7 	bl	8006e82 <USB_WritePMA>
            ep->xfer_buff += len;
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058de:	441a      	add	r2, r3
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d909      	bls.n	800590a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	621a      	str	r2, [r3, #32]
 8005908:	e008      	b.n	800591c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2200      	movs	r2, #0
 800591a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d17a      	bne.n	8005a1c <USB_EPStartXfer+0x404>
 8005926:	f107 0318 	add.w	r3, r7, #24
 800592a:	1d3a      	adds	r2, r7, #4
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	4619      	mov	r1, r3
 800593c:	f107 0318 	add.w	r3, r7, #24
 8005940:	f107 0218 	add.w	r2, r7, #24
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	440a      	add	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	011a      	lsls	r2, r3, #4
 8005952:	f107 0318 	add.w	r3, r7, #24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4413      	add	r3, r2
 800595a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800595e:	f107 0314 	add.w	r3, r7, #20
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11a      	bne.n	80059a2 <USB_EPStartXfer+0x38a>
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597a:	b29a      	uxth	r2, r3
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005996:	b29a      	uxth	r2, r3
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e067      	b.n	8005a72 <USB_EPStartXfer+0x45a>
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	2b3e      	cmp	r3, #62	; 0x3e
 80059a8:	d819      	bhi.n	80059de <USB_EPStartXfer+0x3c6>
 80059aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d004      	beq.n	80059ca <USB_EPStartXfer+0x3b2>
 80059c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e049      	b.n	8005a72 <USB_EPStartXfer+0x45a>
 80059de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <USB_EPStartXfer+0x3e6>
 80059f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059f8:	3b01      	subs	r3, #1
 80059fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	f107 0314 	add.w	r3, r7, #20
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e02a      	b.n	8005a72 <USB_EPStartXfer+0x45a>
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d125      	bne.n	8005a72 <USB_EPStartXfer+0x45a>
 8005a26:	f107 0320 	add.w	r3, r7, #32
 8005a2a:	1d3a      	adds	r2, r7, #4
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f107 0320 	add.w	r3, r7, #32
 8005a40:	f107 0220 	add.w	r2, r7, #32
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	440a      	add	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	f107 0320 	add.w	r3, r7, #32
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a5e:	f107 031c 	add.w	r3, r7, #28
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f107 031c 	add.w	r3, r7, #28
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	891b      	ldrh	r3, [r3, #8]
 8005a78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6959      	ldr	r1, [r3, #20]
 8005a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a8c:	1d38      	adds	r0, r7, #4
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	f001 f9f7 	bl	8006e82 <USB_WritePMA>
 8005a94:	f000 bcc6 	b.w	8006424 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d164      	bne.n	8005b6c <USB_EPStartXfer+0x554>
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	4413      	add	r3, r2
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aca:	647b      	str	r3, [r7, #68]	; 0x44
 8005acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d112      	bne.n	8005afa <USB_EPStartXfer+0x4e2>
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af6:	801a      	strh	r2, [r3, #0]
 8005af8:	e057      	b.n	8005baa <USB_EPStartXfer+0x592>
 8005afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afe:	2b3e      	cmp	r3, #62	; 0x3e
 8005b00:	d817      	bhi.n	8005b32 <USB_EPStartXfer+0x51a>
 8005b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <USB_EPStartXfer+0x50a>
 8005b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	029b      	lsls	r3, r3, #10
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e03b      	b.n	8005baa <USB_EPStartXfer+0x592>
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <USB_EPStartXfer+0x53a>
 8005b48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	029b      	lsls	r3, r3, #10
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	e01e      	b.n	8005baa <USB_EPStartXfer+0x592>
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d119      	bne.n	8005baa <USB_EPStartXfer+0x592>
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7c:	1d3b      	adds	r3, r7, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	4413      	add	r3, r2
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	011a      	lsls	r2, r3, #4
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	891b      	ldrh	r3, [r3, #8]
 8005bb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6959      	ldr	r1, [r3, #20]
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bc4:	1d38      	adds	r0, r7, #4
 8005bc6:	6800      	ldr	r0, [r0, #0]
 8005bc8:	f001 f95b 	bl	8006e82 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	441a      	add	r2, r3
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d909      	bls.n	8005c02 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	621a      	str	r2, [r3, #32]
 8005c00:	e008      	b.n	8005c14 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d164      	bne.n	8005cee <USB_EPStartXfer+0x6d6>
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	4413      	add	r3, r2
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	011a      	lsls	r2, r3, #4
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d112      	bne.n	8005c7c <USB_EPStartXfer+0x664>
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	e054      	b.n	8005d26 <USB_EPStartXfer+0x70e>
 8005c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c80:	2b3e      	cmp	r3, #62	; 0x3e
 8005c82:	d817      	bhi.n	8005cb4 <USB_EPStartXfer+0x69c>
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <USB_EPStartXfer+0x68c>
 8005c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	029b      	lsls	r3, r3, #10
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e038      	b.n	8005d26 <USB_EPStartXfer+0x70e>
 8005cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <USB_EPStartXfer+0x6bc>
 8005cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e01b      	b.n	8005d26 <USB_EPStartXfer+0x70e>
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d116      	bne.n	8005d26 <USB_EPStartXfer+0x70e>
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d06:	4413      	add	r3, r2
 8005d08:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	895b      	ldrh	r3, [r3, #10]
 8005d2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6959      	ldr	r1, [r3, #20]
 8005d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d40:	1d38      	adds	r0, r7, #4
 8005d42:	6800      	ldr	r0, [r0, #0]
 8005d44:	f001 f89d 	bl	8006e82 <USB_WritePMA>
 8005d48:	e36c      	b.n	8006424 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d72:	1d3b      	adds	r3, r7, #4
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dac:	4413      	add	r3, r2
 8005dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	891b      	ldrh	r3, [r3, #8]
 8005dd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6959      	ldr	r1, [r3, #20]
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005de6:	1d38      	adds	r0, r7, #4
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f001 f84a 	bl	8006e82 <USB_WritePMA>
 8005dee:	e319      	b.n	8006424 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	463b      	mov	r3, r7
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	463b      	mov	r3, r7
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8162 	beq.w	8006126 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d164      	bne.n	8005f3e <USB_EPStartXfer+0x926>
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e7a:	1d3b      	adds	r3, r7, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e88:	4413      	add	r3, r2
 8005e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	011a      	lsls	r2, r3, #4
 8005e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e96:	4413      	add	r3, r2
 8005e98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e9c:	677b      	str	r3, [r7, #116]	; 0x74
 8005e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d112      	bne.n	8005ecc <USB_EPStartXfer+0x8b4>
 8005ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e057      	b.n	8005f7c <USB_EPStartXfer+0x964>
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed2:	d817      	bhi.n	8005f04 <USB_EPStartXfer+0x8ec>
 8005ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <USB_EPStartXfer+0x8dc>
 8005eea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ef4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e03b      	b.n	8005f7c <USB_EPStartXfer+0x964>
 8005f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USB_EPStartXfer+0x90c>
 8005f1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	029b      	lsls	r3, r3, #10
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3a:	801a      	strh	r2, [r3, #0]
 8005f3c:	e01e      	b.n	8005f7c <USB_EPStartXfer+0x964>
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d119      	bne.n	8005f7c <USB_EPStartXfer+0x964>
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f58:	4413      	add	r3, r2
 8005f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	895b      	ldrh	r3, [r3, #10]
 8005f82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6959      	ldr	r1, [r3, #20]
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f96:	1d38      	adds	r0, r7, #4
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f000 ff72 	bl	8006e82 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	441a      	add	r2, r3
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1a      	ldr	r2, [r3, #32]
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d909      	bls.n	8005fd4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	621a      	str	r2, [r3, #32]
 8005fd2:	e008      	b.n	8005fe6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 821a 	beq.w	8006424 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d164      	bne.n	80060c4 <USB_EPStartXfer+0xaac>
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006008:	b29b      	uxth	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600e:	4413      	add	r3, r2
 8006010:	66bb      	str	r3, [r7, #104]	; 0x68
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011a      	lsls	r2, r3, #4
 800601a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601c:	4413      	add	r3, r2
 800601e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006022:	667b      	str	r3, [r7, #100]	; 0x64
 8006024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d112      	bne.n	8006052 <USB_EPStartXfer+0xa3a>
 800602c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006036:	b29a      	uxth	r2, r3
 8006038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e057      	b.n	8006102 <USB_EPStartXfer+0xaea>
 8006052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006056:	2b3e      	cmp	r3, #62	; 0x3e
 8006058:	d817      	bhi.n	800608a <USB_EPStartXfer+0xa72>
 800605a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <USB_EPStartXfer+0xa62>
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006074:	3301      	adds	r3, #1
 8006076:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607e:	b29b      	uxth	r3, r3
 8006080:	029b      	lsls	r3, r3, #10
 8006082:	b29a      	uxth	r2, r3
 8006084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e03b      	b.n	8006102 <USB_EPStartXfer+0xaea>
 800608a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <USB_EPStartXfer+0xa92>
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a4:	3b01      	subs	r3, #1
 80060a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e01e      	b.n	8006102 <USB_EPStartXfer+0xaea>
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d119      	bne.n	8006102 <USB_EPStartXfer+0xaea>
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	673b      	str	r3, [r7, #112]	; 0x70
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e2:	4413      	add	r3, r2
 80060e4:	673b      	str	r3, [r7, #112]	; 0x70
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	011a      	lsls	r2, r3, #4
 80060ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006100:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	891b      	ldrh	r3, [r3, #8]
 8006108:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6959      	ldr	r1, [r3, #20]
 8006112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006116:	b29b      	uxth	r3, r3
 8006118:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800611c:	1d38      	adds	r0, r7, #4
 800611e:	6800      	ldr	r0, [r0, #0]
 8006120:	f000 feaf 	bl	8006e82 <USB_WritePMA>
 8006124:	e17e      	b.n	8006424 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d16f      	bne.n	8006210 <USB_EPStartXfer+0xbf8>
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006148:	4413      	add	r3, r2
 800614a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	011a      	lsls	r2, r3, #4
 8006156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800615a:	4413      	add	r3, r2
 800615c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <USB_EPStartXfer+0xb82>
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e05f      	b.n	800625a <USB_EPStartXfer+0xc42>
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	2b3e      	cmp	r3, #62	; 0x3e
 80061a0:	d818      	bhi.n	80061d4 <USB_EPStartXfer+0xbbc>
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <USB_EPStartXfer+0xbaa>
 80061b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061bc:	3301      	adds	r3, #1
 80061be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e042      	b.n	800625a <USB_EPStartXfer+0xc42>
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <USB_EPStartXfer+0xbdc>
 80061ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ee:	3b01      	subs	r3, #1
 80061f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e024      	b.n	800625a <USB_EPStartXfer+0xc42>
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d11f      	bne.n	800625a <USB_EPStartXfer+0xc42>
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006232:	4413      	add	r3, r2
 8006234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	011a      	lsls	r2, r3, #4
 8006240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006244:	4413      	add	r3, r2
 8006246:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800624a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006258:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	891b      	ldrh	r3, [r3, #8]
 8006260:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6959      	ldr	r1, [r3, #20]
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	b29b      	uxth	r3, r3
 8006270:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006274:	1d38      	adds	r0, r7, #4
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	f000 fe03 	bl	8006e82 <USB_WritePMA>
          ep->xfer_buff += len;
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	441a      	add	r2, r3
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d909      	bls.n	80062b2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800629e:	463b      	mov	r3, r7
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	621a      	str	r2, [r3, #32]
 80062b0:	e008      	b.n	80062c4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80ab 	beq.w	8006424 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d16f      	bne.n	80063c0 <USB_EPStartXfer+0xda8>
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800630a:	4413      	add	r3, r2
 800630c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d116      	bne.n	800634a <USB_EPStartXfer+0xd32>
 800631c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e05b      	b.n	8006402 <USB_EPStartXfer+0xdea>
 800634a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634e:	2b3e      	cmp	r3, #62	; 0x3e
 8006350:	d818      	bhi.n	8006384 <USB_EPStartXfer+0xd6c>
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <USB_EPStartXfer+0xd5a>
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	3301      	adds	r3, #1
 800636e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006376:	b29b      	uxth	r3, r3
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	e03e      	b.n	8006402 <USB_EPStartXfer+0xdea>
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800638e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <USB_EPStartXfer+0xd8c>
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639e:	3b01      	subs	r3, #1
 80063a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e020      	b.n	8006402 <USB_EPStartXfer+0xdea>
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d11b      	bne.n	8006402 <USB_EPStartXfer+0xdea>
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063da:	4413      	add	r3, r2
 80063dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	011a      	lsls	r2, r3, #4
 80063e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ec:	4413      	add	r3, r2
 80063ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006400:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006402:	463b      	mov	r3, r7
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	895b      	ldrh	r3, [r3, #10]
 8006408:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6959      	ldr	r1, [r3, #20]
 8006412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006416:	b29b      	uxth	r3, r3
 8006418:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800641c:	1d38      	adds	r0, r7, #4
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	f000 fd2f 	bl	8006e82 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f107 020a 	add.w	r2, r7, #10
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006442:	8013      	strh	r3, [r2, #0]
 8006444:	f107 030a 	add.w	r3, r7, #10
 8006448:	f107 020a 	add.w	r2, r7, #10
 800644c:	8812      	ldrh	r2, [r2, #0]
 800644e:	f082 0210 	eor.w	r2, r2, #16
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	f107 030a 	add.w	r3, r7, #10
 8006458:	f107 020a 	add.w	r2, r7, #10
 800645c:	8812      	ldrh	r2, [r2, #0]
 800645e:	f082 0220 	eor.w	r2, r2, #32
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f107 030a 	add.w	r3, r7, #10
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]
 800648c:	e3b5      	b.n	8006bfa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800648e:	463b      	mov	r3, r7
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	7b1b      	ldrb	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8090 	bne.w	80065ba <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	463b      	mov	r3, r7
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d90e      	bls.n	80064c8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	619a      	str	r2, [r3, #24]
 80064c6:	e008      	b.n	80064da <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80064c8:	463b      	mov	r3, r7
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064f2:	4413      	add	r3, r2
 80064f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	011a      	lsls	r2, r3, #4
 8006500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006504:	4413      	add	r3, r2
 8006506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800650a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800650e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <USB_EPStartXfer+0xf2c>
 8006516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006522:	b29a      	uxth	r2, r3
 8006524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	e32c      	b.n	8006b9e <USB_EPStartXfer+0x1586>
 8006544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006548:	2b3e      	cmp	r3, #62	; 0x3e
 800654a:	d818      	bhi.n	800657e <USB_EPStartXfer+0xf66>
 800654c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <USB_EPStartXfer+0xf54>
 8006562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006566:	3301      	adds	r3, #1
 8006568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800656c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006570:	b29b      	uxth	r3, r3
 8006572:	029b      	lsls	r3, r3, #10
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e30f      	b.n	8006b9e <USB_EPStartXfer+0x1586>
 800657e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <USB_EPStartXfer+0xf86>
 8006594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006598:	3b01      	subs	r3, #1
 800659a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800659e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e2f1      	b.n	8006b9e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	f040 818f 	bne.w	80068e4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d175      	bne.n	80066bc <USB_EPStartXfer+0x10a4>
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065e8:	4413      	add	r3, r2
 80065ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	011a      	lsls	r2, r3, #4
 80065f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065fa:	4413      	add	r3, r2
 80065fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006604:	463b      	mov	r3, r7
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d116      	bne.n	800663c <USB_EPStartXfer+0x1024>
 800660e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e065      	b.n	8006708 <USB_EPStartXfer+0x10f0>
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b3e      	cmp	r3, #62	; 0x3e
 8006644:	d81a      	bhi.n	800667c <USB_EPStartXfer+0x1064>
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <USB_EPStartXfer+0x1052>
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006664:	3301      	adds	r3, #1
 8006666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29a      	uxth	r2, r3
 8006674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e045      	b.n	8006708 <USB_EPStartXfer+0x10f0>
 800667c:	463b      	mov	r3, r7
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <USB_EPStartXfer+0x1088>
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	3b01      	subs	r3, #1
 800669c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e025      	b.n	8006708 <USB_EPStartXfer+0x10f0>
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d120      	bne.n	8006708 <USB_EPStartXfer+0x10f0>
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066de:	4413      	add	r3, r2
 80066e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	011a      	lsls	r2, r3, #4
 80066ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	b29a      	uxth	r2, r3
 8006702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d175      	bne.n	8006806 <USB_EPStartXfer+0x11ee>
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006732:	4413      	add	r3, r2
 8006734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006738:	463b      	mov	r3, r7
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	011a      	lsls	r2, r3, #4
 8006740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006744:	4413      	add	r3, r2
 8006746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800674a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d116      	bne.n	8006786 <USB_EPStartXfer+0x116e>
 8006758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e061      	b.n	800684a <USB_EPStartXfer+0x1232>
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d81a      	bhi.n	80067c6 <USB_EPStartXfer+0x11ae>
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <USB_EPStartXfer+0x119c>
 80067aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ae:	3301      	adds	r3, #1
 80067b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	029b      	lsls	r3, r3, #10
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e041      	b.n	800684a <USB_EPStartXfer+0x1232>
 80067c6:	463b      	mov	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d2:	463b      	mov	r3, r7
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <USB_EPStartXfer+0x11d2>
 80067e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067e4:	3b01      	subs	r3, #1
 80067e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e021      	b.n	800684a <USB_EPStartXfer+0x1232>
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d11c      	bne.n	800684a <USB_EPStartXfer+0x1232>
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006820:	4413      	add	r3, r2
 8006822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	011a      	lsls	r2, r3, #4
 800682e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006832:	4413      	add	r3, r2
 8006834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006848:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 81a4 	beq.w	8006b9e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800686a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800686e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <USB_EPStartXfer+0x126a>
 8006876:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006882:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8187 	bne.w	8006b9e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006890:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 8180 	bne.w	8006b9e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]
 80068e2:	e15c      	b.n	8006b9e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	f040 8155 	bne.w	8006b9a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d90e      	bls.n	800691e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800690a:	463b      	mov	r3, r7
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	619a      	str	r2, [r3, #24]
 800691c:	e008      	b.n	8006930 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2200      	movs	r2, #0
 800692e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d16f      	bne.n	8006a1a <USB_EPStartXfer+0x1402>
 800693a:	1d3b      	adds	r3, r7, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006952:	4413      	add	r3, r2
 8006954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	011a      	lsls	r2, r3, #4
 8006960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006964:	4413      	add	r3, r2
 8006966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800696a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800696e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d116      	bne.n	80069a4 <USB_EPStartXfer+0x138c>
 8006976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006982:	b29a      	uxth	r2, r3
 8006984:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699a:	b29a      	uxth	r2, r3
 800699c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	e05f      	b.n	8006a64 <USB_EPStartXfer+0x144c>
 80069a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a8:	2b3e      	cmp	r3, #62	; 0x3e
 80069aa:	d818      	bhi.n	80069de <USB_EPStartXfer+0x13c6>
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d004      	beq.n	80069cc <USB_EPStartXfer+0x13b4>
 80069c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c6:	3301      	adds	r3, #1
 80069c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e042      	b.n	8006a64 <USB_EPStartXfer+0x144c>
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <USB_EPStartXfer+0x13e6>
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f8:	3b01      	subs	r3, #1
 80069fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	029b      	lsls	r3, r3, #10
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e024      	b.n	8006a64 <USB_EPStartXfer+0x144c>
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d11f      	bne.n	8006a64 <USB_EPStartXfer+0x144c>
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a42:	463b      	mov	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	011a      	lsls	r2, r3, #4
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d16f      	bne.n	8006b56 <USB_EPStartXfer+0x153e>
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8e:	4413      	add	r3, r2
 8006a90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	011a      	lsls	r2, r3, #4
 8006a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d116      	bne.n	8006ae0 <USB_EPStartXfer+0x14c8>
 8006ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e05e      	b.n	8006b9e <USB_EPStartXfer+0x1586>
 8006ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae6:	d818      	bhi.n	8006b1a <USB_EPStartXfer+0x1502>
 8006ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <USB_EPStartXfer+0x14f0>
 8006afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b02:	3301      	adds	r3, #1
 8006b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	029b      	lsls	r3, r3, #10
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e041      	b.n	8006b9e <USB_EPStartXfer+0x1586>
 8006b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USB_EPStartXfer+0x1522>
 8006b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b34:	3b01      	subs	r3, #1
 8006b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e023      	b.n	8006b9e <USB_EPStartXfer+0x1586>
 8006b56:	463b      	mov	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d11e      	bne.n	8006b9e <USB_EPStartXfer+0x1586>
 8006b60:	1d3b      	adds	r3, r7, #4
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b70:	4413      	add	r3, r2
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	011a      	lsls	r2, r3, #4
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	e001      	b.n	8006b9e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e02e      	b.n	8006bfc <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bc4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bd0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bd4:	1d3b      	adds	r3, r7, #4
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	463b      	mov	r3, r7
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	81bb      	strh	r3, [r7, #12]
 8006c30:	89bb      	ldrh	r3, [r7, #12]
 8006c32:	f083 0310 	eor.w	r3, r3, #16
 8006c36:	81bb      	strh	r3, [r7, #12]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	89bb      	ldrh	r3, [r7, #12]
 8006c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]
 8006c58:	e01f      	b.n	8006c9a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	81fb      	strh	r3, [r7, #14]
 8006c72:	89fb      	ldrh	r3, [r7, #14]
 8006c74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c78:	81fb      	strh	r3, [r7, #14]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	89fb      	ldrh	r3, [r7, #14]
 8006c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f040 809d 	bne.w	8006df4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04c      	beq.n	8006d5c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	823b      	strh	r3, [r7, #16]
 8006cd0:	8a3b      	ldrh	r3, [r7, #16]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01b      	beq.n	8006d12 <USB_EPClearStall+0x6c>
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf0:	81fb      	strh	r3, [r7, #14]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	89fb      	ldrh	r3, [r7, #14]
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d06c      	beq.n	8006df4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d30:	81bb      	strh	r3, [r7, #12]
 8006d32:	89bb      	ldrh	r3, [r7, #12]
 8006d34:	f083 0320 	eor.w	r3, r3, #32
 8006d38:	81bb      	strh	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	441a      	add	r2, r3
 8006d44:	89bb      	ldrh	r3, [r7, #12]
 8006d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	8013      	strh	r3, [r2, #0]
 8006d5a:	e04b      	b.n	8006df4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	82fb      	strh	r3, [r7, #22]
 8006d6a:	8afb      	ldrh	r3, [r7, #22]
 8006d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01b      	beq.n	8006dac <USB_EPClearStall+0x106>
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	82bb      	strh	r3, [r7, #20]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	8abb      	ldrh	r3, [r7, #20]
 8006d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	827b      	strh	r3, [r7, #18]
 8006dc4:	8a7b      	ldrh	r3, [r7, #18]
 8006dc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dca:	827b      	strh	r3, [r7, #18]
 8006dcc:	8a7b      	ldrh	r3, [r7, #18]
 8006dce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dd2:	827b      	strh	r3, [r7, #18]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	8a7b      	ldrh	r3, [r7, #18]
 8006de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2280      	movs	r2, #128	; 0x80
 8006e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b08d      	sub	sp, #52	; 0x34
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	460b      	mov	r3, r1
 8006e92:	80fb      	strh	r3, [r7, #6]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e98:	88bb      	ldrh	r3, [r7, #4]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	005a      	lsls	r2, r3, #1
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eba:	e01e      	b.n	8006efa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	3302      	adds	r3, #2
 8006eec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1dd      	bne.n	8006ebc <USB_WritePMA+0x3a>
  }
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	3734      	adds	r7, #52	; 0x34
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08b      	sub	sp, #44	; 0x2c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f22:	88bb      	ldrh	r3, [r7, #4]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	005a      	lsls	r2, r3, #1
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e01b      	b.n	8006f7e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	3302      	adds	r3, #2
 8006f52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	3302      	adds	r3, #2
 8006f76:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e0      	bne.n	8006f46 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006f84:	88bb      	ldrh	r3, [r7, #4]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	701a      	strb	r2, [r3, #0]
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	372c      	adds	r7, #44	; 0x2c
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7c1b      	ldrb	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d115      	bne.n	8006fee <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	2181      	movs	r1, #129	; 0x81
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fec7 	bl	8008d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	2202      	movs	r2, #2
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 febd 	bl	8008d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006fec:	e012      	b.n	8007014 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fee:	2340      	movs	r3, #64	; 0x40
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	2181      	movs	r1, #129	; 0x81
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 feb2 	bl	8008d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	2202      	movs	r2, #2
 8007004:	2101      	movs	r1, #1
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fea9 	bl	8008d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007014:	2308      	movs	r3, #8
 8007016:	2203      	movs	r2, #3
 8007018:	2182      	movs	r1, #130	; 0x82
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe9f 	bl	8008d5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007026:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800702a:	f001 ffbf 	bl	8008fac <USBD_static_malloc>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
 8007044:	e026      	b.n	8007094 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	7c1b      	ldrb	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	2101      	movs	r1, #1
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 ff5f 	bl	8008f40 <USBD_LL_PrepareReceive>
 8007082:	e007      	b.n	8007094 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	2101      	movs	r1, #1
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 ff56 	bl	8008f40 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ae:	2181      	movs	r1, #129	; 0x81
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fe7a 	bl	8008daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070bc:	2101      	movs	r1, #1
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fe73 	bl	8008daa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070cc:	2182      	movs	r1, #130	; 0x82
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fe6b 	bl	8008daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 ff65 	bl	8008fc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007132:	2b00      	cmp	r3, #0
 8007134:	d039      	beq.n	80071aa <USBD_CDC_Setup+0x9e>
 8007136:	2b20      	cmp	r3, #32
 8007138:	d17f      	bne.n	800723a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d029      	beq.n	8007196 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	da11      	bge.n	8007170 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007158:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	88d2      	ldrh	r2, [r2, #6]
 800715e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007160:	6939      	ldr	r1, [r7, #16]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	88db      	ldrh	r3, [r3, #6]
 8007166:	461a      	mov	r2, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 fa0a 	bl	8008582 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800716e:	e06b      	b.n	8007248 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	785a      	ldrb	r2, [r3, #1]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007186:	6939      	ldr	r1, [r7, #16]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	461a      	mov	r2, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fa25 	bl	80085de <USBD_CtlPrepareRx>
      break;
 8007194:	e058      	b.n	8007248 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	7850      	ldrb	r0, [r2, #1]
 80071a2:	2200      	movs	r2, #0
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	4798      	blx	r3
      break;
 80071a8:	e04e      	b.n	8007248 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b0b      	cmp	r3, #11
 80071b0:	d02e      	beq.n	8007210 <USBD_CDC_Setup+0x104>
 80071b2:	2b0b      	cmp	r3, #11
 80071b4:	dc38      	bgt.n	8007228 <USBD_CDC_Setup+0x11c>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <USBD_CDC_Setup+0xb4>
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d014      	beq.n	80071e8 <USBD_CDC_Setup+0xdc>
 80071be:	e033      	b.n	8007228 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d107      	bne.n	80071da <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80071ca:	f107 030c 	add.w	r3, r7, #12
 80071ce:	2202      	movs	r2, #2
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 f9d5 	bl	8008582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071d8:	e02e      	b.n	8007238 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f966 	bl	80084ae <USBD_CtlError>
            ret = USBD_FAIL;
 80071e2:	2302      	movs	r3, #2
 80071e4:	75fb      	strb	r3, [r7, #23]
          break;
 80071e6:	e027      	b.n	8007238 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d107      	bne.n	8007202 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80071f2:	f107 030f 	add.w	r3, r7, #15
 80071f6:	2201      	movs	r2, #1
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f9c1 	bl	8008582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007200:	e01a      	b.n	8007238 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f952 	bl	80084ae <USBD_CtlError>
            ret = USBD_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	75fb      	strb	r3, [r7, #23]
          break;
 800720e:	e013      	b.n	8007238 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007216:	2b03      	cmp	r3, #3
 8007218:	d00d      	beq.n	8007236 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f946 	bl	80084ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007226:	e006      	b.n	8007236 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 f93f 	bl	80084ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	75fb      	strb	r3, [r7, #23]
          break;
 8007234:	e000      	b.n	8007238 <USBD_CDC_Setup+0x12c>
          break;
 8007236:	bf00      	nop
      }
      break;
 8007238:	e006      	b.n	8007248 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f936 	bl	80084ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	75fb      	strb	r3, [r7, #23]
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800726c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d03a      	beq.n	80072ee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	331c      	adds	r3, #28
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d029      	beq.n	80072e2 <USBD_CDC_DataIn+0x90>
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	331c      	adds	r3, #28
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	78f9      	ldrb	r1, [r7, #3]
 80072a2:	68b8      	ldr	r0, [r7, #8]
 80072a4:	460b      	mov	r3, r1
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4403      	add	r3, r0
 80072ae:	3338      	adds	r3, #56	; 0x38
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80072b6:	fb03 f301 	mul.w	r3, r3, r1
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d110      	bne.n	80072e2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	331c      	adds	r3, #28
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072d4:	78f9      	ldrb	r1, [r7, #3]
 80072d6:	2300      	movs	r3, #0
 80072d8:	2200      	movs	r2, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fe0d 	bl	8008efa <USBD_LL_Transmit>
 80072e0:	e003      	b.n	80072ea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fe38 	bl	8008f86 <USBD_LL_GetRxDataSize>
 8007316:	4602      	mov	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800733c:	4611      	mov	r1, r2
 800733e:	4798      	blx	r3

    return USBD_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	e000      	b.n	8007346 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007344:	2302      	movs	r3, #2
  }
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <USBD_CDC_EP0_RxReady+0x46>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800736e:	2bff      	cmp	r3, #255	; 0xff
 8007370:	d010      	beq.n	8007394 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007380:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007388:	b292      	uxth	r2, r2
 800738a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2243      	movs	r2, #67	; 0x43
 80073ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	200000b0 	.word	0x200000b0

080073c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2243      	movs	r2, #67	; 0x43
 80073cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	2000006c 	.word	0x2000006c

080073e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2243      	movs	r2, #67	; 0x43
 80073ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80073ee:	4b03      	ldr	r3, [pc, #12]	; (80073fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	200000f4 	.word	0x200000f4

08007400 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220a      	movs	r2, #10
 800740c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	20000028 	.word	0x20000028

08007420 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr

0800744c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01c      	beq.n	80074f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d115      	bne.n	80074f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2181      	movs	r1, #129	; 0x81
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fd05 	bl	8008efa <USBD_LL_Transmit>

      return USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e002      	b.n	80074fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7c1b      	ldrb	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800752a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752e:	2101      	movs	r1, #1
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fd05 	bl	8008f40 <USBD_LL_PrepareReceive>
 8007536:	e007      	b.n	8007548 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	2101      	movs	r1, #1
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fcfc 	bl	8008f40 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800756a:	2302      	movs	r3, #2
 800756c:	e01a      	b.n	80075a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f001 fb69 	bl	8008c74 <USBD_LL_Init>

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	e001      	b.n	80075d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075ce:	2302      	movs	r3, #2
 80075d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 fb9e 	bl	8008d28 <USBD_LL_Start>

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007616:	2302      	movs	r3, #2
 8007618:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	4611      	mov	r1, r2
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	4611      	mov	r1, r2
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fed8 	bl	8008436 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d016      	beq.n	80076d8 <USBD_LL_SetupStage+0x6a>
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d81c      	bhi.n	80076e8 <USBD_LL_SetupStage+0x7a>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <USBD_LL_SetupStage+0x4a>
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d008      	beq.n	80076c8 <USBD_LL_SetupStage+0x5a>
 80076b6:	e017      	b.n	80076e8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9cb 	bl	8007a5c <USBD_StdDevReq>
      break;
 80076c6:	e01a      	b.n	80076fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa2d 	bl	8007b30 <USBD_StdItfReq>
      break;
 80076d6:	e012      	b.n	80076fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa6d 	bl	8007bc0 <USBD_StdEPReq>
      break;
 80076e6:	e00a      	b.n	80076fe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fb76 	bl	8008de8 <USBD_LL_StallEP>
      break;
 80076fc:	bf00      	nop
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	460b      	mov	r3, r1
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d14b      	bne.n	80077b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007722:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800772a:	2b03      	cmp	r3, #3
 800772c:	d134      	bne.n	8007798 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	429a      	cmp	r2, r3
 8007738:	d919      	bls.n	800776e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007750:	429a      	cmp	r2, r3
 8007752:	d203      	bcs.n	800775c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007758:	b29b      	uxth	r3, r3
 800775a:	e002      	b.n	8007762 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 ff57 	bl	800861a <USBD_CtlContinueRx>
 800776c:	e038      	b.n	80077e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007780:	2b03      	cmp	r3, #3
 8007782:	d105      	bne.n	8007790 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 ff54 	bl	800863e <USBD_CtlSendStatus>
 8007796:	e023      	b.n	80077e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d11e      	bne.n	80077e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f001 fb1b 	bl	8008de8 <USBD_LL_StallEP>
 80077b2:	e015      	b.n	80077e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d108      	bne.n	80077dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	7afa      	ldrb	r2, [r7, #11]
 80077d4:	4611      	mov	r1, r2
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	4798      	blx	r3
 80077da:	e001      	b.n	80077e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077dc:	2302      	movs	r3, #2
 80077de:	e000      	b.n	80077e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	460b      	mov	r3, r1
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d17f      	bne.n	80078fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3314      	adds	r3, #20
 8007802:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800780a:	2b02      	cmp	r3, #2
 800780c:	d15c      	bne.n	80078c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	429a      	cmp	r2, r3
 8007818:	d915      	bls.n	8007846 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	b29b      	uxth	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fec1 	bl	80085ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 fb7e 	bl	8008f40 <USBD_LL_PrepareReceive>
 8007844:	e04e      	b.n	80078e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	6912      	ldr	r2, [r2, #16]
 800784e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007852:	fb02 f201 	mul.w	r2, r2, r1
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d11c      	bne.n	8007896 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007864:	429a      	cmp	r2, r3
 8007866:	d316      	bcc.n	8007896 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007872:	429a      	cmp	r2, r3
 8007874:	d20f      	bcs.n	8007896 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fe9d 	bl	80085ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007888:	2300      	movs	r3, #0
 800788a:	2200      	movs	r2, #0
 800788c:	2100      	movs	r1, #0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f001 fb56 	bl	8008f40 <USBD_LL_PrepareReceive>
 8007894:	e026      	b.n	80078e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d105      	bne.n	80078b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078b8:	2180      	movs	r1, #128	; 0x80
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f001 fa94 	bl	8008de8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fecf 	bl	8008664 <USBD_CtlReceiveStatus>
 80078c6:	e00d      	b.n	80078e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d004      	beq.n	80078dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 fa82 	bl	8008de8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d11d      	bne.n	800792a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7ff fe81 	bl	80075f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078fc:	e015      	b.n	800792a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007910:	2b03      	cmp	r3, #3
 8007912:	d108      	bne.n	8007926 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	7afa      	ldrb	r2, [r7, #11]
 800791e:	4611      	mov	r1, r2
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	4798      	blx	r3
 8007924:	e001      	b.n	800792a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007926:	2302      	movs	r3, #2
 8007928:	e000      	b.n	800792c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fa0b 	bl	8008d5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2240      	movs	r2, #64	; 0x40
 8007954:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	2200      	movs	r2, #0
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 f9fd 	bl	8008d5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2240      	movs	r2, #64	; 0x40
 800796e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6852      	ldr	r2, [r2, #4]
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	4611      	mov	r1, r2
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
  }

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2204      	movs	r2, #4
 80079ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d105      	bne.n	8007a1a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d10b      	bne.n	8007a50 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a72:	2b40      	cmp	r3, #64	; 0x40
 8007a74:	d005      	beq.n	8007a82 <USBD_StdDevReq+0x26>
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	d84f      	bhi.n	8007b1a <USBD_StdDevReq+0xbe>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <USBD_StdDevReq+0x36>
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d14b      	bne.n	8007b1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
      break;
 8007a90:	e048      	b.n	8007b24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d839      	bhi.n	8007b0e <USBD_StdDevReq+0xb2>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <USBD_StdDevReq+0x44>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007af1 	.word	0x08007af1
 8007aa4:	08007b05 	.word	0x08007b05
 8007aa8:	08007b0f 	.word	0x08007b0f
 8007aac:	08007afb 	.word	0x08007afb
 8007ab0:	08007b0f 	.word	0x08007b0f
 8007ab4:	08007ad3 	.word	0x08007ad3
 8007ab8:	08007ac9 	.word	0x08007ac9
 8007abc:	08007b0f 	.word	0x08007b0f
 8007ac0:	08007ae7 	.word	0x08007ae7
 8007ac4:	08007add 	.word	0x08007add
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f9dc 	bl	8007e88 <USBD_GetDescriptor>
          break;
 8007ad0:	e022      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb3f 	bl	8008158 <USBD_SetAddress>
          break;
 8007ada:	e01d      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb7e 	bl	80081e0 <USBD_SetConfig>
          break;
 8007ae4:	e018      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fc07 	bl	80082fc <USBD_GetConfig>
          break;
 8007aee:	e013      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fc37 	bl	8008366 <USBD_GetStatus>
          break;
 8007af8:	e00e      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc65 	bl	80083cc <USBD_SetFeature>
          break;
 8007b02:	e009      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fc74 	bl	80083f4 <USBD_ClrFeature>
          break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fccc 	bl	80084ae <USBD_CtlError>
          break;
 8007b16:	bf00      	nop
      }
      break;
 8007b18:	e004      	b.n	8007b24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fcc6 	bl	80084ae <USBD_CtlError>
      break;
 8007b22:	bf00      	nop
  }

  return ret;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop

08007b30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d005      	beq.n	8007b56 <USBD_StdItfReq+0x26>
 8007b4a:	2b40      	cmp	r3, #64	; 0x40
 8007b4c:	d82e      	bhi.n	8007bac <USBD_StdItfReq+0x7c>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <USBD_StdItfReq+0x26>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d12a      	bne.n	8007bac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d81d      	bhi.n	8007b9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	889b      	ldrh	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d813      	bhi.n	8007b94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d110      	bne.n	8007ba8 <USBD_StdItfReq+0x78>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fd56 	bl	800863e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b92:	e009      	b.n	8007ba8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fc89 	bl	80084ae <USBD_CtlError>
          break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc84 	bl	80084ae <USBD_CtlError>
          break;
 8007ba6:	e000      	b.n	8007baa <USBD_StdItfReq+0x7a>
          break;
 8007ba8:	bf00      	nop
      }
      break;
 8007baa:	e004      	b.n	8007bb6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fc7d 	bl	80084ae <USBD_CtlError>
      break;
 8007bb4:	bf00      	nop
  }

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	889b      	ldrh	r3, [r3, #4]
 8007bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d007      	beq.n	8007bf0 <USBD_StdEPReq+0x30>
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	f200 8146 	bhi.w	8007e72 <USBD_StdEPReq+0x2b2>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <USBD_StdEPReq+0x40>
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	f040 8141 	bne.w	8007e72 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
      break;
 8007bfe:	e13d      	b.n	8007e7c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d10a      	bne.n	8007c22 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	e12d      	b.n	8007e7e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d007      	beq.n	8007c3a <USBD_StdEPReq+0x7a>
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	f300 811b 	bgt.w	8007e66 <USBD_StdEPReq+0x2a6>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d072      	beq.n	8007d1a <USBD_StdEPReq+0x15a>
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d03a      	beq.n	8007cae <USBD_StdEPReq+0xee>
 8007c38:	e115      	b.n	8007e66 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d002      	beq.n	8007c4a <USBD_StdEPReq+0x8a>
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d015      	beq.n	8007c74 <USBD_StdEPReq+0xb4>
 8007c48:	e02b      	b.n	8007ca2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00c      	beq.n	8007c6a <USBD_StdEPReq+0xaa>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d009      	beq.n	8007c6a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 f8c4 	bl	8008de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c60:	2180      	movs	r1, #128	; 0x80
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 f8c0 	bl	8008de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c68:	e020      	b.n	8007cac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fc1e 	bl	80084ae <USBD_CtlError>
              break;
 8007c72:	e01b      	b.n	8007cac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	885b      	ldrh	r3, [r3, #2]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10e      	bne.n	8007c9a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <USBD_StdEPReq+0xda>
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d008      	beq.n	8007c9a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	88db      	ldrh	r3, [r3, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f8a7 	bl	8008de8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fccf 	bl	800863e <USBD_CtlSendStatus>

              break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc02 	bl	80084ae <USBD_CtlError>
              break;
 8007caa:	bf00      	nop
          }
          break;
 8007cac:	e0e0      	b.n	8007e70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d002      	beq.n	8007cbe <USBD_StdEPReq+0xfe>
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d015      	beq.n	8007ce8 <USBD_StdEPReq+0x128>
 8007cbc:	e026      	b.n	8007d0c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <USBD_StdEPReq+0x11e>
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d009      	beq.n	8007cde <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 f88a 	bl	8008de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f886 	bl	8008de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cdc:	e01c      	b.n	8007d18 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fbe4 	bl	80084ae <USBD_CtlError>
              break;
 8007ce6:	e017      	b.n	8007d18 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	885b      	ldrh	r3, [r3, #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d112      	bne.n	8007d16 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f891 	bl	8008e26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc9a 	bl	800863e <USBD_CtlSendStatus>
              }
              break;
 8007d0a:	e004      	b.n	8007d16 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fbcd 	bl	80084ae <USBD_CtlError>
              break;
 8007d14:	e000      	b.n	8007d18 <USBD_StdEPReq+0x158>
              break;
 8007d16:	bf00      	nop
          }
          break;
 8007d18:	e0aa      	b.n	8007e70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d002      	beq.n	8007d2a <USBD_StdEPReq+0x16a>
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d032      	beq.n	8007d8e <USBD_StdEPReq+0x1ce>
 8007d28:	e097      	b.n	8007e5a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <USBD_StdEPReq+0x180>
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d004      	beq.n	8007d40 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fbb8 	bl	80084ae <USBD_CtlError>
                break;
 8007d3e:	e091      	b.n	8007e64 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da0b      	bge.n	8007d60 <USBD_StdEPReq+0x1a0>
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	3310      	adds	r3, #16
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	e00b      	b.n	8007d78 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4413      	add	r3, r2
 8007d76:	3304      	adds	r3, #4
 8007d78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2202      	movs	r2, #2
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fbfb 	bl	8008582 <USBD_CtlSendData>
              break;
 8007d8c:	e06a      	b.n	8007e64 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da11      	bge.n	8007dba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	3318      	adds	r3, #24
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d117      	bne.n	8007de0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fb7b 	bl	80084ae <USBD_CtlError>
                  break;
 8007db8:	e054      	b.n	8007e64 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fb68 	bl	80084ae <USBD_CtlError>
                  break;
 8007dde:	e041      	b.n	8007e64 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	da0b      	bge.n	8007e00 <USBD_StdEPReq+0x240>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	3310      	adds	r3, #16
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	e00b      	b.n	8007e18 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	4413      	add	r3, r2
 8007e16:	3304      	adds	r3, #4
 8007e18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <USBD_StdEPReq+0x266>
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d103      	bne.n	8007e2e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e00e      	b.n	8007e4c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 f816 	bl	8008e64 <USBD_LL_IsStallEP>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2201      	movs	r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e002      	b.n	8007e4c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fb95 	bl	8008582 <USBD_CtlSendData>
              break;
 8007e58:	e004      	b.n	8007e64 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fb26 	bl	80084ae <USBD_CtlError>
              break;
 8007e62:	bf00      	nop
          }
          break;
 8007e64:	e004      	b.n	8007e70 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fb20 	bl	80084ae <USBD_CtlError>
          break;
 8007e6e:	bf00      	nop
      }
      break;
 8007e70:	e004      	b.n	8007e7c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fb1a 	bl	80084ae <USBD_CtlError>
      break;
 8007e7a:	bf00      	nop
  }

  return ret;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	885b      	ldrh	r3, [r3, #2]
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	f200 8128 	bhi.w	80080fe <USBD_GetDescriptor+0x276>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <USBD_GetDescriptor+0x2c>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ed1 	.word	0x08007ed1
 8007eb8:	08007ee9 	.word	0x08007ee9
 8007ebc:	08007f29 	.word	0x08007f29
 8007ec0:	080080ff 	.word	0x080080ff
 8007ec4:	080080ff 	.word	0x080080ff
 8007ec8:	0800809f 	.word	0x0800809f
 8007ecc:	080080cb 	.word	0x080080cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
      break;
 8007ee6:	e112      	b.n	800810e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7c1b      	ldrb	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10d      	bne.n	8007f0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	f107 0208 	add.w	r2, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3301      	adds	r3, #1
 8007f06:	2202      	movs	r2, #2
 8007f08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f0a:	e100      	b.n	800810e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	f107 0208 	add.w	r2, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	2202      	movs	r2, #2
 8007f24:	701a      	strb	r2, [r3, #0]
      break;
 8007f26:	e0f2      	b.n	800810e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	885b      	ldrh	r3, [r3, #2]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b05      	cmp	r3, #5
 8007f30:	f200 80ac 	bhi.w	800808c <USBD_GetDescriptor+0x204>
 8007f34:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <USBD_GetDescriptor+0xb4>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f55 	.word	0x08007f55
 8007f40:	08007f89 	.word	0x08007f89
 8007f44:	08007fbd 	.word	0x08007fbd
 8007f48:	08007ff1 	.word	0x08007ff1
 8007f4c:	08008025 	.word	0x08008025
 8007f50:	08008059 	.word	0x08008059
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7c12      	ldrb	r2, [r2, #16]
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f76:	e091      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa97 	bl	80084ae <USBD_CtlError>
            err++;
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	3301      	adds	r3, #1
 8007f84:	72fb      	strb	r3, [r7, #11]
          break;
 8007f86:	e089      	b.n	800809c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7c12      	ldrb	r2, [r2, #16]
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007faa:	e077      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa7d 	bl	80084ae <USBD_CtlError>
            err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fba:	e06f      	b.n	800809c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7c12      	ldrb	r2, [r2, #16]
 8007fd4:	f107 0108 	add.w	r1, r7, #8
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
 8007fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fde:	e05d      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa63 	bl	80084ae <USBD_CtlError>
            err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
          break;
 8007fee:	e055      	b.n	800809c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	7c12      	ldrb	r2, [r2, #16]
 8008008:	f107 0108 	add.w	r1, r7, #8
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008012:	e043      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa49 	bl	80084ae <USBD_CtlError>
            err++;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	3301      	adds	r3, #1
 8008020:	72fb      	strb	r3, [r7, #11]
          break;
 8008022:	e03b      	b.n	800809c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008046:	e029      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa2f 	bl	80084ae <USBD_CtlError>
            err++;
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	3301      	adds	r3, #1
 8008054:	72fb      	strb	r3, [r7, #11]
          break;
 8008056:	e021      	b.n	800809c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	7c12      	ldrb	r2, [r2, #16]
 8008070:	f107 0108 	add.w	r1, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807a:	e00f      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa15 	bl	80084ae <USBD_CtlError>
            err++;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	3301      	adds	r3, #1
 8008088:	72fb      	strb	r3, [r7, #11]
          break;
 800808a:	e007      	b.n	800809c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa0d 	bl	80084ae <USBD_CtlError>
          err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800809a:	e038      	b.n	800810e <USBD_GetDescriptor+0x286>
 800809c:	e037      	b.n	800810e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	f107 0208 	add.w	r2, r7, #8
 80080b2:	4610      	mov	r0, r2
 80080b4:	4798      	blx	r3
 80080b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080b8:	e029      	b.n	800810e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9f6 	bl	80084ae <USBD_CtlError>
        err++;
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	3301      	adds	r3, #1
 80080c6:	72fb      	strb	r3, [r7, #11]
      break;
 80080c8:	e021      	b.n	800810e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7c1b      	ldrb	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f107 0208 	add.w	r2, r7, #8
 80080de:	4610      	mov	r0, r2
 80080e0:	4798      	blx	r3
 80080e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	2207      	movs	r2, #7
 80080ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ec:	e00f      	b.n	800810e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9dc 	bl	80084ae <USBD_CtlError>
        err++;
 80080f6:	7afb      	ldrb	r3, [r7, #11]
 80080f8:	3301      	adds	r3, #1
 80080fa:	72fb      	strb	r3, [r7, #11]
      break;
 80080fc:	e007      	b.n	800810e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f9d4 	bl	80084ae <USBD_CtlError>
      err++;
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	3301      	adds	r3, #1
 800810a:	72fb      	strb	r3, [r7, #11]
      break;
 800810c:	bf00      	nop
  }

  if (err != 0U)
 800810e:	7afb      	ldrb	r3, [r7, #11]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d11c      	bne.n	800814e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008114:	893b      	ldrh	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d011      	beq.n	800813e <USBD_GetDescriptor+0x2b6>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	88db      	ldrh	r3, [r3, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00d      	beq.n	800813e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88da      	ldrh	r2, [r3, #6]
 8008126:	893b      	ldrh	r3, [r7, #8]
 8008128:	4293      	cmp	r3, r2
 800812a:	bf28      	it	cs
 800812c:	4613      	movcs	r3, r2
 800812e:	b29b      	uxth	r3, r3
 8008130:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008132:	893b      	ldrh	r3, [r7, #8]
 8008134:	461a      	mov	r2, r3
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa22 	bl	8008582 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa79 	bl	800863e <USBD_CtlSendStatus>
 800814c:	e000      	b.n	8008150 <USBD_GetDescriptor+0x2c8>
    return;
 800814e:	bf00      	nop
    }
  }
}
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop

08008158 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	889b      	ldrh	r3, [r3, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d130      	bne.n	80081cc <USBD_SetAddress+0x74>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	88db      	ldrh	r3, [r3, #6]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d12c      	bne.n	80081cc <USBD_SetAddress+0x74>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	2b7f      	cmp	r3, #127	; 0x7f
 8008178:	d828      	bhi.n	80081cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	885b      	ldrh	r3, [r3, #2]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008184:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	2b03      	cmp	r3, #3
 800818e:	d104      	bne.n	800819a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f98b 	bl	80084ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008198:	e01d      	b.n	80081d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7bfa      	ldrb	r2, [r7, #15]
 800819e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fe88 	bl	8008ebc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa46 	bl	800863e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	e009      	b.n	80081d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ca:	e004      	b.n	80081d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f96d 	bl	80084ae <USBD_CtlError>
  }
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <USBD_SetConfig+0x118>)
 80081f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081f4:	4b40      	ldr	r3, [pc, #256]	; (80082f8 <USBD_SetConfig+0x118>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d904      	bls.n	8008206 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f955 	bl	80084ae <USBD_CtlError>
 8008204:	e075      	b.n	80082f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	2b02      	cmp	r3, #2
 800820e:	d002      	beq.n	8008216 <USBD_SetConfig+0x36>
 8008210:	2b03      	cmp	r3, #3
 8008212:	d023      	beq.n	800825c <USBD_SetConfig+0x7c>
 8008214:	e062      	b.n	80082dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008216:	4b38      	ldr	r3, [pc, #224]	; (80082f8 <USBD_SetConfig+0x118>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01a      	beq.n	8008254 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800821e:	4b36      	ldr	r3, [pc, #216]	; (80082f8 <USBD_SetConfig+0x118>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2203      	movs	r2, #3
 800822c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008230:	4b31      	ldr	r3, [pc, #196]	; (80082f8 <USBD_SetConfig+0x118>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff f9e7 	bl	800760a <USBD_SetClassConfig>
 800823c:	4603      	mov	r3, r0
 800823e:	2b02      	cmp	r3, #2
 8008240:	d104      	bne.n	800824c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f932 	bl	80084ae <USBD_CtlError>
            return;
 800824a:	e052      	b.n	80082f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9f6 	bl	800863e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008252:	e04e      	b.n	80082f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9f2 	bl	800863e <USBD_CtlSendStatus>
        break;
 800825a:	e04a      	b.n	80082f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800825c:	4b26      	ldr	r3, [pc, #152]	; (80082f8 <USBD_SetConfig+0x118>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d112      	bne.n	800828a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <USBD_SetConfig+0x118>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008276:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <USBD_SetConfig+0x118>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff f9e3 	bl	8007648 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9db 	bl	800863e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008288:	e033      	b.n	80082f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <USBD_SetConfig+0x118>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d01d      	beq.n	80082d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff f9d1 	bl	8007648 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <USBD_SetConfig+0x118>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <USBD_SetConfig+0x118>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff f9a7 	bl	800760a <USBD_SetClassConfig>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d104      	bne.n	80082cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f8f2 	bl	80084ae <USBD_CtlError>
            return;
 80082ca:	e012      	b.n	80082f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f9b6 	bl	800863e <USBD_CtlSendStatus>
        break;
 80082d2:	e00e      	b.n	80082f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f9b2 	bl	800863e <USBD_CtlSendStatus>
        break;
 80082da:	e00a      	b.n	80082f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f8e5 	bl	80084ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80082e4:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <USBD_SetConfig+0x118>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff f9ac 	bl	8007648 <USBD_ClrClassConfig>
        break;
 80082f0:	bf00      	nop
    }
  }
}
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000030d 	.word	0x2000030d

080082fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	88db      	ldrh	r3, [r3, #6]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d004      	beq.n	8008318 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8cc 	bl	80084ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008316:	e022      	b.n	800835e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831e:	2b02      	cmp	r3, #2
 8008320:	dc02      	bgt.n	8008328 <USBD_GetConfig+0x2c>
 8008322:	2b00      	cmp	r3, #0
 8008324:	dc03      	bgt.n	800832e <USBD_GetConfig+0x32>
 8008326:	e015      	b.n	8008354 <USBD_GetConfig+0x58>
 8008328:	2b03      	cmp	r3, #3
 800832a:	d00b      	beq.n	8008344 <USBD_GetConfig+0x48>
 800832c:	e012      	b.n	8008354 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3308      	adds	r3, #8
 8008338:	2201      	movs	r2, #1
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f920 	bl	8008582 <USBD_CtlSendData>
        break;
 8008342:	e00c      	b.n	800835e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	2201      	movs	r2, #1
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f918 	bl	8008582 <USBD_CtlSendData>
        break;
 8008352:	e004      	b.n	800835e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8a9 	bl	80084ae <USBD_CtlError>
        break;
 800835c:	bf00      	nop
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008376:	3b01      	subs	r3, #1
 8008378:	2b02      	cmp	r3, #2
 800837a:	d81e      	bhi.n	80083ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	88db      	ldrh	r3, [r3, #6]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d004      	beq.n	800838e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f891 	bl	80084ae <USBD_CtlError>
        break;
 800838c:	e01a      	b.n	80083c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f043 0202 	orr.w	r2, r3, #2
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	330c      	adds	r3, #12
 80083ae:	2202      	movs	r2, #2
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8e5 	bl	8008582 <USBD_CtlSendData>
      break;
 80083b8:	e004      	b.n	80083c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f876 	bl	80084ae <USBD_CtlError>
      break;
 80083c2:	bf00      	nop
  }
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d106      	bne.n	80083ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f929 	bl	800863e <USBD_CtlSendStatus>
  }
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008404:	3b01      	subs	r3, #1
 8008406:	2b02      	cmp	r3, #2
 8008408:	d80b      	bhi.n	8008422 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10c      	bne.n	800842c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f90f 	bl	800863e <USBD_CtlSendStatus>
      }
      break;
 8008420:	e004      	b.n	800842c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f842 	bl	80084ae <USBD_CtlError>
      break;
 800842a:	e000      	b.n	800842e <USBD_ClrFeature+0x3a>
      break;
 800842c:	bf00      	nop
  }
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781a      	ldrb	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	785a      	ldrb	r2, [r3, #1]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	3302      	adds	r3, #2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	b29a      	uxth	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	3303      	adds	r3, #3
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	b29b      	uxth	r3, r3
 8008464:	4413      	add	r3, r2
 8008466:	b29a      	uxth	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	3304      	adds	r3, #4
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	b29a      	uxth	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	3305      	adds	r3, #5
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	b29b      	uxth	r3, r3
 8008480:	4413      	add	r3, r2
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	3306      	adds	r3, #6
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b29a      	uxth	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	3307      	adds	r3, #7
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b29b      	uxth	r3, r3
 800849c:	4413      	add	r3, r2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	80da      	strh	r2, [r3, #6]

}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc80      	pop	{r7}
 80084ac:	4770      	bx	lr

080084ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084b8:	2180      	movs	r1, #128	; 0x80
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc94 	bl	8008de8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084c0:	2100      	movs	r1, #0
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fc90 	bl	8008de8 <USBD_LL_StallEP>
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d032      	beq.n	800854c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f834 	bl	8008554 <USBD_GetLen>
 80084ec:	4603      	mov	r3, r0
 80084ee:	3301      	adds	r3, #1
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	75fa      	strb	r2, [r7, #23]
 8008500:	461a      	mov	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4413      	add	r3, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	75fa      	strb	r2, [r7, #23]
 8008512:	461a      	mov	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4413      	add	r3, r2
 8008518:	2203      	movs	r2, #3
 800851a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800851c:	e012      	b.n	8008544 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	60fa      	str	r2, [r7, #12]
 8008524:	7dfa      	ldrb	r2, [r7, #23]
 8008526:	1c51      	adds	r1, r2, #1
 8008528:	75f9      	strb	r1, [r7, #23]
 800852a:	4611      	mov	r1, r2
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	440a      	add	r2, r1
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	75fa      	strb	r2, [r7, #23]
 800853a:	461a      	mov	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4413      	add	r3, r2
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e8      	bne.n	800851e <USBD_GetString+0x4e>
    }
  }
}
 800854c:	bf00      	nop
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008560:	e005      	b.n	800856e <USBD_GetLen+0x1a>
  {
    len++;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	3301      	adds	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f5      	bne.n	8008562 <USBD_GetLen+0xe>
  }

  return len;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr

08008582 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	4613      	mov	r3, r2
 800858e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2202      	movs	r2, #2
 8008594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008598:	88fa      	ldrh	r2, [r7, #6]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	2100      	movs	r1, #0
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 fca5 	bl	8008efa <USBD_LL_Transmit>

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	4613      	mov	r3, r2
 80085c6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fc93 	bl	8008efa <USBD_LL_Transmit>

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2203      	movs	r2, #3
 80085f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80085fc:	88fa      	ldrh	r2, [r7, #6]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fc98 	bl	8008f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	4613      	mov	r3, r2
 8008626:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	2100      	movs	r1, #0
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 fc86 	bl	8008f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2204      	movs	r2, #4
 800864a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800864e:	2300      	movs	r3, #0
 8008650:	2200      	movs	r2, #0
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc50 	bl	8008efa <USBD_LL_Transmit>

  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2205      	movs	r2, #5
 8008670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008674:	2300      	movs	r3, #0
 8008676:	2200      	movs	r2, #0
 8008678:	2100      	movs	r1, #0
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc60 	bl	8008f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008690:	2200      	movs	r2, #0
 8008692:	4912      	ldr	r1, [pc, #72]	; (80086dc <MX_USB_DEVICE_Init+0x50>)
 8008694:	4812      	ldr	r0, [pc, #72]	; (80086e0 <MX_USB_DEVICE_Init+0x54>)
 8008696:	f7fe ff5e 	bl	8007556 <USBD_Init>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086a0:	f7f7 ffa8 	bl	80005f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086a4:	490f      	ldr	r1, [pc, #60]	; (80086e4 <MX_USB_DEVICE_Init+0x58>)
 80086a6:	480e      	ldr	r0, [pc, #56]	; (80086e0 <MX_USB_DEVICE_Init+0x54>)
 80086a8:	f7fe ff80 	bl	80075ac <USBD_RegisterClass>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086b2:	f7f7 ff9f 	bl	80005f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086b6:	490c      	ldr	r1, [pc, #48]	; (80086e8 <MX_USB_DEVICE_Init+0x5c>)
 80086b8:	4809      	ldr	r0, [pc, #36]	; (80086e0 <MX_USB_DEVICE_Init+0x54>)
 80086ba:	f7fe feb1 	bl	8007420 <USBD_CDC_RegisterInterface>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086c4:	f7f7 ff96 	bl	80005f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086c8:	4805      	ldr	r0, [pc, #20]	; (80086e0 <MX_USB_DEVICE_Init+0x54>)
 80086ca:	f7fe ff88 	bl	80075de <USBD_Start>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086d4:	f7f7 ff8e 	bl	80005f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086d8:	bf00      	nop
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000148 	.word	0x20000148
 80086e0:	200005d8 	.word	0x200005d8
 80086e4:	20000034 	.word	0x20000034
 80086e8:	20000138 	.word	0x20000138

080086ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086f0:	2200      	movs	r2, #0
 80086f2:	4909      	ldr	r1, [pc, #36]	; (8008718 <CDC_Init_FS+0x2c>)
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <CDC_Init_FS+0x30>)
 80086f6:	f7fe fea9 	bl	800744c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086fa:	4909      	ldr	r1, [pc, #36]	; (8008720 <CDC_Init_FS+0x34>)
 80086fc:	4807      	ldr	r0, [pc, #28]	; (800871c <CDC_Init_FS+0x30>)
 80086fe:	f7fe febe 	bl	800747e <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <CDC_Init_FS+0x30>)
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008708:	2b03      	cmp	r3, #3
 800870a:	d101      	bne.n	8008710 <CDC_Init_FS+0x24>
	  welcome();
 800870c:	f7f7 fed6 	bl	80004bc <welcome>
  }

  return (USBD_OK);
 8008710:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008712:	4618      	mov	r0, r3
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000c84 	.word	0x20000c84
 800871c:	200005d8 	.word	0x200005d8
 8008720:	2000089c 	.word	0x2000089c

08008724 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008728:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800872a:	4618      	mov	r0, r3
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr
	...

08008734 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
 8008740:	4613      	mov	r3, r2
 8008742:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b23      	cmp	r3, #35	; 0x23
 8008748:	d84a      	bhi.n	80087e0 <CDC_Control_FS+0xac>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <CDC_Control_FS+0x1c>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	080087e1 	.word	0x080087e1
 8008754:	080087e1 	.word	0x080087e1
 8008758:	080087e1 	.word	0x080087e1
 800875c:	080087e1 	.word	0x080087e1
 8008760:	080087e1 	.word	0x080087e1
 8008764:	080087e1 	.word	0x080087e1
 8008768:	080087e1 	.word	0x080087e1
 800876c:	080087e1 	.word	0x080087e1
 8008770:	080087e1 	.word	0x080087e1
 8008774:	080087e1 	.word	0x080087e1
 8008778:	080087e1 	.word	0x080087e1
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087e1 	.word	0x080087e1
 8008784:	080087e1 	.word	0x080087e1
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087e1 	.word	0x080087e1
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087e1 	.word	0x080087e1
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087e1 	.word	0x080087e1
 80087a4:	080087e1 	.word	0x080087e1
 80087a8:	080087e1 	.word	0x080087e1
 80087ac:	080087e1 	.word	0x080087e1
 80087b0:	080087e1 	.word	0x080087e1
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087e1 	.word	0x080087e1
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087e1 	.word	0x080087e1
 80087d8:	080087e1 	.word	0x080087e1
 80087dc:	080087e1 	.word	0x080087e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087e0:	bf00      	nop
  }

  return (USBD_OK);
 80087e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop

080087f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
//	for( uint32_t loop = 0; loop < *Len - start_pos; loop ++ ) {
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );
	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fc4a 	bl	8009098 <malloc>
 8008804:	4603      	mov	r3, r0
 8008806:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	e019      	b.n	8008846 <CDC_Receive_FS+0x56>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	441a      	add	r2, r3
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	1c59      	adds	r1, r3, #1
 800881c:	6179      	str	r1, [r7, #20]
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	440b      	add	r3, r1
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	4413      	add	r3, r2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b0d      	cmp	r3, #13
 8008830:	d106      	bne.n	8008840 <CDC_Receive_FS+0x50>
			out_buf[ out_buf_len++ ] = '\n';
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	617a      	str	r2, [r7, #20]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	220a      	movs	r2, #10
 800883e:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	3301      	adds	r3, #1
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	429a      	cmp	r2, r3
 800884e:	d3e0      	bcc.n	8008812 <CDC_Receive_FS+0x22>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 8008850:	6979      	ldr	r1, [r7, #20]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7f7 fe24 	bl	80004a0 <usb_transmit_fs>
	free( out_buf );
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fc25 	bl	80090a8 <free>
	if( Buf[ 0 ] == '\r' ) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b0d      	cmp	r3, #13
 8008864:	d101      	bne.n	800886a <CDC_Receive_FS+0x7a>
		send_prompt();
 8008866:	f7f7 feab 	bl	80005c0 <send_prompt>
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4805      	ldr	r0, [pc, #20]	; (8008884 <CDC_Receive_FS+0x94>)
 800886e:	f7fe fe06 	bl	800747e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008872:	4804      	ldr	r0, [pc, #16]	; (8008884 <CDC_Receive_FS+0x94>)
 8008874:	f7fe fe45 	bl	8007502 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008878:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200005d8 	.word	0x200005d8

08008888 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <CDC_Transmit_FS+0x48>)
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e00b      	b.n	80088c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088ae:	887b      	ldrh	r3, [r7, #2]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4806      	ldr	r0, [pc, #24]	; (80088d0 <CDC_Transmit_FS+0x48>)
 80088b6:	f7fe fdc9 	bl	800744c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <CDC_Transmit_FS+0x48>)
 80088bc:	f7fe fdf2 	bl	80074a4 <USBD_CDC_TransmitPacket>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200005d8 	.word	0x200005d8

080088d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2212      	movs	r2, #18
 80088e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088e6:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000164 	.word	0x20000164

080088f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2204      	movs	r2, #4
 8008908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800890a:	4b03      	ldr	r3, [pc, #12]	; (8008918 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000178 	.word	0x20000178

0800891c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	6039      	str	r1, [r7, #0]
 8008926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d105      	bne.n	800893a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	4907      	ldr	r1, [pc, #28]	; (8008950 <USBD_FS_ProductStrDescriptor+0x34>)
 8008932:	4808      	ldr	r0, [pc, #32]	; (8008954 <USBD_FS_ProductStrDescriptor+0x38>)
 8008934:	f7ff fdcc 	bl	80084d0 <USBD_GetString>
 8008938:	e004      	b.n	8008944 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4904      	ldr	r1, [pc, #16]	; (8008950 <USBD_FS_ProductStrDescriptor+0x34>)
 800893e:	4805      	ldr	r0, [pc, #20]	; (8008954 <USBD_FS_ProductStrDescriptor+0x38>)
 8008940:	f7ff fdc6 	bl	80084d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000106c 	.word	0x2000106c
 8008954:	0800a1ec 	.word	0x0800a1ec

08008958 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	4904      	ldr	r1, [pc, #16]	; (8008978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008968:	4804      	ldr	r0, [pc, #16]	; (800897c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800896a:	f7ff fdb1 	bl	80084d0 <USBD_GetString>
  return USBD_StrDesc;
 800896e:	4b02      	ldr	r3, [pc, #8]	; (8008978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	2000106c 	.word	0x2000106c
 800897c:	0800a204 	.word	0x0800a204

08008980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	221a      	movs	r2, #26
 8008990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008992:	f000 f843 	bl	8008a1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008996:	4b02      	ldr	r3, [pc, #8]	; (80089a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	2000017c 	.word	0x2000017c

080089a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d105      	bne.n	80089c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	4907      	ldr	r1, [pc, #28]	; (80089d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089ba:	4808      	ldr	r0, [pc, #32]	; (80089dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80089bc:	f7ff fd88 	bl	80084d0 <USBD_GetString>
 80089c0:	e004      	b.n	80089cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	4904      	ldr	r1, [pc, #16]	; (80089d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089c6:	4805      	ldr	r0, [pc, #20]	; (80089dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80089c8:	f7ff fd82 	bl	80084d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	2000106c 	.word	0x2000106c
 80089dc:	0800a218 	.word	0x0800a218

080089e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4907      	ldr	r1, [pc, #28]	; (8008a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089f6:	4808      	ldr	r0, [pc, #32]	; (8008a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089f8:	f7ff fd6a 	bl	80084d0 <USBD_GetString>
 80089fc:	e004      	b.n	8008a08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4904      	ldr	r1, [pc, #16]	; (8008a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a02:	4805      	ldr	r0, [pc, #20]	; (8008a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a04:	f7ff fd64 	bl	80084d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	2000106c 	.word	0x2000106c
 8008a18:	0800a224 	.word	0x0800a224

08008a1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <Get_SerialNum+0x44>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <Get_SerialNum+0x48>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <Get_SerialNum+0x4c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a42:	2208      	movs	r2, #8
 8008a44:	4909      	ldr	r1, [pc, #36]	; (8008a6c <Get_SerialNum+0x50>)
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f814 	bl	8008a74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	4908      	ldr	r1, [pc, #32]	; (8008a70 <Get_SerialNum+0x54>)
 8008a50:	68b8      	ldr	r0, [r7, #8]
 8008a52:	f000 f80f 	bl	8008a74 <IntToUnicode>
  }
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	1ffff7e8 	.word	0x1ffff7e8
 8008a64:	1ffff7ec 	.word	0x1ffff7ec
 8008a68:	1ffff7f0 	.word	0x1ffff7f0
 8008a6c:	2000017e 	.word	0x2000017e
 8008a70:	2000018e 	.word	0x2000018e

08008a74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a86:	2300      	movs	r3, #0
 8008a88:	75fb      	strb	r3, [r7, #23]
 8008a8a:	e027      	b.n	8008adc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	0f1b      	lsrs	r3, r3, #28
 8008a90:	2b09      	cmp	r3, #9
 8008a92:	d80b      	bhi.n	8008aac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	0f1b      	lsrs	r3, r3, #28
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	440b      	add	r3, r1
 8008aa4:	3230      	adds	r2, #48	; 0x30
 8008aa6:	b2d2      	uxtb	r2, r2
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	e00a      	b.n	8008ac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	0f1b      	lsrs	r3, r3, #28
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	440b      	add	r3, r1
 8008abc:	3237      	adds	r2, #55	; 0x37
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	3301      	adds	r3, #1
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
 8008adc:	7dfa      	ldrb	r2, [r7, #23]
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d3d3      	bcc.n	8008a8c <IntToUnicode+0x18>
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a0d      	ldr	r2, [pc, #52]	; (8008b34 <HAL_PCD_MspInit+0x44>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d113      	bne.n	8008b2a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <HAL_PCD_MspInit+0x48>)
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <HAL_PCD_MspInit+0x48>)
 8008b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b0c:	61d3      	str	r3, [r2, #28]
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <HAL_PCD_MspInit+0x48>)
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	2014      	movs	r0, #20
 8008b20:	f7f8 f959 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b24:	2014      	movs	r0, #20
 8008b26:	f7f8 f972 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40005c00 	.word	0x40005c00
 8008b38:	40021000 	.word	0x40021000

08008b3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe fd8b 	bl	800766e <USBD_LL_SetupStage>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	440b      	add	r3, r1
 8008b80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7fe fdbd 	bl	8007708 <USBD_LL_DataOutStage>
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	333c      	adds	r3, #60	; 0x3c
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f7fe fe14 	bl	80077ea <USBD_LL_DataInStage>
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe ff24 	bl	8007a26 <USBD_LL_SOF>
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d001      	beq.n	8008bfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bfa:	f7f7 fcfb 	bl	80005f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c04:	7bfa      	ldrb	r2, [r7, #15]
 8008c06:	4611      	mov	r1, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fe fed4 	bl	80079b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fe8d 	bl	8007934 <USBD_LL_Reset>
}
 8008c1a:	bf00      	nop
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fece 	bl	80079d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <HAL_PCD_SuspendCallback+0x30>)
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	4a03      	ldr	r2, [pc, #12]	; (8008c54 <HAL_PCD_SuspendCallback+0x30>)
 8008c46:	f043 0306 	orr.w	r3, r3, #6
 8008c4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed00 	.word	0xe000ed00

08008c58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fec8 	bl	80079fc <USBD_LL_Resume>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c7c:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <USBD_LL_Init+0xac>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a26      	ldr	r2, [pc, #152]	; (8008d20 <USBD_LL_Init+0xac>)
 8008c88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008c8c:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <USBD_LL_Init+0xac>)
 8008c8e:	4a25      	ldr	r2, [pc, #148]	; (8008d24 <USBD_LL_Init+0xb0>)
 8008c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008c92:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <USBD_LL_Init+0xac>)
 8008c94:	2208      	movs	r2, #8
 8008c96:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008c98:	4b21      	ldr	r3, [pc, #132]	; (8008d20 <USBD_LL_Init+0xac>)
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c9e:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <USBD_LL_Init+0xac>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <USBD_LL_Init+0xac>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <USBD_LL_Init+0xac>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008cb0:	481b      	ldr	r0, [pc, #108]	; (8008d20 <USBD_LL_Init+0xac>)
 8008cb2:	f7f8 fc51 	bl	8001558 <HAL_PCD_Init>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008cbc:	f7f7 fc9a 	bl	80005f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cc6:	2318      	movs	r3, #24
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f7fa f8c7 	bl	8002e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cd6:	2358      	movs	r3, #88	; 0x58
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	f7fa f8bf 	bl	8002e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ce6:	23c0      	movs	r3, #192	; 0xc0
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2181      	movs	r1, #129	; 0x81
 8008cec:	f7fa f8b7 	bl	8002e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cf6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	f7fa f8ae 	bl	8002e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2182      	movs	r1, #130	; 0x82
 8008d10:	f7fa f8a5 	bl	8002e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000126c 	.word	0x2000126c
 8008d24:	40005c00 	.word	0x40005c00

08008d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f8 fd15 	bl	800176e <HAL_PCD_Start>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f94e 	bl	8008fec <USBD_Get_USB_Status>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	4608      	mov	r0, r1
 8008d68:	4611      	mov	r1, r2
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	70fb      	strb	r3, [r7, #3]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70bb      	strb	r3, [r7, #2]
 8008d74:	4613      	mov	r3, r2
 8008d76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d86:	78bb      	ldrb	r3, [r7, #2]
 8008d88:	883a      	ldrh	r2, [r7, #0]
 8008d8a:	78f9      	ldrb	r1, [r7, #3]
 8008d8c:	f7f8 fe8f 	bl	8001aae <HAL_PCD_EP_Open>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f928 	bl	8008fec <USBD_Get_USB_Status>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7f8 fed6 	bl	8001b7a <HAL_PCD_EP_Close>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f909 	bl	8008fec <USBD_Get_USB_Status>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f8 ff96 	bl	8001d38 <HAL_PCD_EP_SetStall>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f8ea 	bl	8008fec <USBD_Get_USB_Status>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	4611      	mov	r1, r2
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f8 ffd7 	bl	8001df8 <HAL_PCD_EP_ClrStall>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f8cb 	bl	8008fec <USBD_Get_USB_Status>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	da0c      	bge.n	8008e9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	440b      	add	r3, r1
 8008e94:	3302      	adds	r3, #2
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	e00b      	b.n	8008eb2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea0:	68f9      	ldr	r1, [r7, #12]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	440b      	add	r3, r1
 8008eac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008eb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7f8 fdc2 	bl	8001a64 <HAL_PCD_SetAddress>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 f880 	bl	8008fec <USBD_Get_USB_Status>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	461a      	mov	r2, r3
 8008f06:	460b      	mov	r3, r1
 8008f08:	72fb      	strb	r3, [r7, #11]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	7af9      	ldrb	r1, [r7, #11]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	f7f8 fec6 	bl	8001cb2 <HAL_PCD_EP_Transmit>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f85d 	bl	8008fec <USBD_Get_USB_Status>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	72fb      	strb	r3, [r7, #11]
 8008f50:	4613      	mov	r3, r2
 8008f52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f62:	893b      	ldrh	r3, [r7, #8]
 8008f64:	7af9      	ldrb	r1, [r7, #11]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	f7f8 fe4f 	bl	8001c0a <HAL_PCD_EP_Receive>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f83a 	bl	8008fec <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f8 fe71 	bl	8001c84 <HAL_PCD_EP_GetRxCount>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <USBD_static_malloc+0x14>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr
 8008fc0:	20000310 	.word	0x20000310

08008fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d817      	bhi.n	8009030 <USBD_Get_USB_Status+0x44>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <USBD_Get_USB_Status+0x1c>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	08009019 	.word	0x08009019
 800900c:	0800901f 	.word	0x0800901f
 8009010:	08009025 	.word	0x08009025
 8009014:	0800902b 	.word	0x0800902b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e00b      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]
    break;
 8009022:	e008      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e005      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800902a:	2302      	movs	r3, #2
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e002      	b.n	8009036 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009030:	2302      	movs	r3, #2
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	bf00      	nop
  }
  return usb_status;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop

08009044 <__errno>:
 8009044:	4b01      	ldr	r3, [pc, #4]	; (800904c <__errno+0x8>)
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000198 	.word	0x20000198

08009050 <__libc_init_array>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	2600      	movs	r6, #0
 8009054:	4d0c      	ldr	r5, [pc, #48]	; (8009088 <__libc_init_array+0x38>)
 8009056:	4c0d      	ldr	r4, [pc, #52]	; (800908c <__libc_init_array+0x3c>)
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	42a6      	cmp	r6, r4
 800905e:	d109      	bne.n	8009074 <__libc_init_array+0x24>
 8009060:	f001 f8b0 	bl	800a1c4 <_init>
 8009064:	2600      	movs	r6, #0
 8009066:	4d0a      	ldr	r5, [pc, #40]	; (8009090 <__libc_init_array+0x40>)
 8009068:	4c0a      	ldr	r4, [pc, #40]	; (8009094 <__libc_init_array+0x44>)
 800906a:	1b64      	subs	r4, r4, r5
 800906c:	10a4      	asrs	r4, r4, #2
 800906e:	42a6      	cmp	r6, r4
 8009070:	d105      	bne.n	800907e <__libc_init_array+0x2e>
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	f855 3b04 	ldr.w	r3, [r5], #4
 8009078:	4798      	blx	r3
 800907a:	3601      	adds	r6, #1
 800907c:	e7ee      	b.n	800905c <__libc_init_array+0xc>
 800907e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009082:	4798      	blx	r3
 8009084:	3601      	adds	r6, #1
 8009086:	e7f2      	b.n	800906e <__libc_init_array+0x1e>
 8009088:	0800a490 	.word	0x0800a490
 800908c:	0800a490 	.word	0x0800a490
 8009090:	0800a490 	.word	0x0800a490
 8009094:	0800a494 	.word	0x0800a494

08009098 <malloc>:
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <malloc+0xc>)
 800909a:	4601      	mov	r1, r0
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f000 b85f 	b.w	8009160 <_malloc_r>
 80090a2:	bf00      	nop
 80090a4:	20000198 	.word	0x20000198

080090a8 <free>:
 80090a8:	4b02      	ldr	r3, [pc, #8]	; (80090b4 <free+0xc>)
 80090aa:	4601      	mov	r1, r0
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	f000 b80b 	b.w	80090c8 <_free_r>
 80090b2:	bf00      	nop
 80090b4:	20000198 	.word	0x20000198

080090b8 <memset>:
 80090b8:	4603      	mov	r3, r0
 80090ba:	4402      	add	r2, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <_free_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4605      	mov	r5, r0
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d043      	beq.n	8009158 <_free_r+0x90>
 80090d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d4:	1f0c      	subs	r4, r1, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb8      	it	lt
 80090da:	18e4      	addlt	r4, r4, r3
 80090dc:	f000 f98c 	bl	80093f8 <__malloc_lock>
 80090e0:	4a1e      	ldr	r2, [pc, #120]	; (800915c <_free_r+0x94>)
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	4610      	mov	r0, r2
 80090e6:	b933      	cbnz	r3, 80090f6 <_free_r+0x2e>
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	6014      	str	r4, [r2, #0]
 80090ec:	4628      	mov	r0, r5
 80090ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f2:	f000 b987 	b.w	8009404 <__malloc_unlock>
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	d90a      	bls.n	8009110 <_free_r+0x48>
 80090fa:	6821      	ldr	r1, [r4, #0]
 80090fc:	1862      	adds	r2, r4, r1
 80090fe:	4293      	cmp	r3, r2
 8009100:	bf01      	itttt	eq
 8009102:	681a      	ldreq	r2, [r3, #0]
 8009104:	685b      	ldreq	r3, [r3, #4]
 8009106:	1852      	addeq	r2, r2, r1
 8009108:	6022      	streq	r2, [r4, #0]
 800910a:	6063      	str	r3, [r4, #4]
 800910c:	6004      	str	r4, [r0, #0]
 800910e:	e7ed      	b.n	80090ec <_free_r+0x24>
 8009110:	461a      	mov	r2, r3
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	b10b      	cbz	r3, 800911a <_free_r+0x52>
 8009116:	42a3      	cmp	r3, r4
 8009118:	d9fa      	bls.n	8009110 <_free_r+0x48>
 800911a:	6811      	ldr	r1, [r2, #0]
 800911c:	1850      	adds	r0, r2, r1
 800911e:	42a0      	cmp	r0, r4
 8009120:	d10b      	bne.n	800913a <_free_r+0x72>
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	4401      	add	r1, r0
 8009126:	1850      	adds	r0, r2, r1
 8009128:	4283      	cmp	r3, r0
 800912a:	6011      	str	r1, [r2, #0]
 800912c:	d1de      	bne.n	80090ec <_free_r+0x24>
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	4401      	add	r1, r0
 8009134:	6011      	str	r1, [r2, #0]
 8009136:	6053      	str	r3, [r2, #4]
 8009138:	e7d8      	b.n	80090ec <_free_r+0x24>
 800913a:	d902      	bls.n	8009142 <_free_r+0x7a>
 800913c:	230c      	movs	r3, #12
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	e7d4      	b.n	80090ec <_free_r+0x24>
 8009142:	6820      	ldr	r0, [r4, #0]
 8009144:	1821      	adds	r1, r4, r0
 8009146:	428b      	cmp	r3, r1
 8009148:	bf01      	itttt	eq
 800914a:	6819      	ldreq	r1, [r3, #0]
 800914c:	685b      	ldreq	r3, [r3, #4]
 800914e:	1809      	addeq	r1, r1, r0
 8009150:	6021      	streq	r1, [r4, #0]
 8009152:	6063      	str	r3, [r4, #4]
 8009154:	6054      	str	r4, [r2, #4]
 8009156:	e7c9      	b.n	80090ec <_free_r+0x24>
 8009158:	bd38      	pop	{r3, r4, r5, pc}
 800915a:	bf00      	nop
 800915c:	20000530 	.word	0x20000530

08009160 <_malloc_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	1ccd      	adds	r5, r1, #3
 8009164:	f025 0503 	bic.w	r5, r5, #3
 8009168:	3508      	adds	r5, #8
 800916a:	2d0c      	cmp	r5, #12
 800916c:	bf38      	it	cc
 800916e:	250c      	movcc	r5, #12
 8009170:	2d00      	cmp	r5, #0
 8009172:	4606      	mov	r6, r0
 8009174:	db01      	blt.n	800917a <_malloc_r+0x1a>
 8009176:	42a9      	cmp	r1, r5
 8009178:	d903      	bls.n	8009182 <_malloc_r+0x22>
 800917a:	230c      	movs	r3, #12
 800917c:	6033      	str	r3, [r6, #0]
 800917e:	2000      	movs	r0, #0
 8009180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009182:	f000 f939 	bl	80093f8 <__malloc_lock>
 8009186:	4921      	ldr	r1, [pc, #132]	; (800920c <_malloc_r+0xac>)
 8009188:	680a      	ldr	r2, [r1, #0]
 800918a:	4614      	mov	r4, r2
 800918c:	b99c      	cbnz	r4, 80091b6 <_malloc_r+0x56>
 800918e:	4f20      	ldr	r7, [pc, #128]	; (8009210 <_malloc_r+0xb0>)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	b923      	cbnz	r3, 800919e <_malloc_r+0x3e>
 8009194:	4621      	mov	r1, r4
 8009196:	4630      	mov	r0, r6
 8009198:	f000 f8aa 	bl	80092f0 <_sbrk_r>
 800919c:	6038      	str	r0, [r7, #0]
 800919e:	4629      	mov	r1, r5
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 f8a5 	bl	80092f0 <_sbrk_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d123      	bne.n	80091f2 <_malloc_r+0x92>
 80091aa:	230c      	movs	r3, #12
 80091ac:	4630      	mov	r0, r6
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	f000 f928 	bl	8009404 <__malloc_unlock>
 80091b4:	e7e3      	b.n	800917e <_malloc_r+0x1e>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	1b5b      	subs	r3, r3, r5
 80091ba:	d417      	bmi.n	80091ec <_malloc_r+0x8c>
 80091bc:	2b0b      	cmp	r3, #11
 80091be:	d903      	bls.n	80091c8 <_malloc_r+0x68>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	441c      	add	r4, r3
 80091c4:	6025      	str	r5, [r4, #0]
 80091c6:	e004      	b.n	80091d2 <_malloc_r+0x72>
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	42a2      	cmp	r2, r4
 80091cc:	bf0c      	ite	eq
 80091ce:	600b      	streq	r3, [r1, #0]
 80091d0:	6053      	strne	r3, [r2, #4]
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 f916 	bl	8009404 <__malloc_unlock>
 80091d8:	f104 000b 	add.w	r0, r4, #11
 80091dc:	1d23      	adds	r3, r4, #4
 80091de:	f020 0007 	bic.w	r0, r0, #7
 80091e2:	1ac2      	subs	r2, r0, r3
 80091e4:	d0cc      	beq.n	8009180 <_malloc_r+0x20>
 80091e6:	1a1b      	subs	r3, r3, r0
 80091e8:	50a3      	str	r3, [r4, r2]
 80091ea:	e7c9      	b.n	8009180 <_malloc_r+0x20>
 80091ec:	4622      	mov	r2, r4
 80091ee:	6864      	ldr	r4, [r4, #4]
 80091f0:	e7cc      	b.n	800918c <_malloc_r+0x2c>
 80091f2:	1cc4      	adds	r4, r0, #3
 80091f4:	f024 0403 	bic.w	r4, r4, #3
 80091f8:	42a0      	cmp	r0, r4
 80091fa:	d0e3      	beq.n	80091c4 <_malloc_r+0x64>
 80091fc:	1a21      	subs	r1, r4, r0
 80091fe:	4630      	mov	r0, r6
 8009200:	f000 f876 	bl	80092f0 <_sbrk_r>
 8009204:	3001      	adds	r0, #1
 8009206:	d1dd      	bne.n	80091c4 <_malloc_r+0x64>
 8009208:	e7cf      	b.n	80091aa <_malloc_r+0x4a>
 800920a:	bf00      	nop
 800920c:	20000530 	.word	0x20000530
 8009210:	20000534 	.word	0x20000534

08009214 <srand>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <srand+0x44>)
 8009218:	4604      	mov	r4, r0
 800921a:	681d      	ldr	r5, [r3, #0]
 800921c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800921e:	b9b3      	cbnz	r3, 800924e <srand+0x3a>
 8009220:	2018      	movs	r0, #24
 8009222:	f7ff ff39 	bl	8009098 <malloc>
 8009226:	4602      	mov	r2, r0
 8009228:	63a8      	str	r0, [r5, #56]	; 0x38
 800922a:	b920      	cbnz	r0, 8009236 <srand+0x22>
 800922c:	2142      	movs	r1, #66	; 0x42
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <srand+0x48>)
 8009230:	480b      	ldr	r0, [pc, #44]	; (8009260 <srand+0x4c>)
 8009232:	f000 f89f 	bl	8009374 <__assert_func>
 8009236:	490b      	ldr	r1, [pc, #44]	; (8009264 <srand+0x50>)
 8009238:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <srand+0x54>)
 800923a:	e9c0 1300 	strd	r1, r3, [r0]
 800923e:	4b0b      	ldr	r3, [pc, #44]	; (800926c <srand+0x58>)
 8009240:	2100      	movs	r1, #0
 8009242:	6083      	str	r3, [r0, #8]
 8009244:	230b      	movs	r3, #11
 8009246:	8183      	strh	r3, [r0, #12]
 8009248:	2001      	movs	r0, #1
 800924a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800924e:	2200      	movs	r2, #0
 8009250:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009252:	611c      	str	r4, [r3, #16]
 8009254:	615a      	str	r2, [r3, #20]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	20000198 	.word	0x20000198
 800925c:	0800a348 	.word	0x0800a348
 8009260:	0800a35f 	.word	0x0800a35f
 8009264:	abcd330e 	.word	0xabcd330e
 8009268:	e66d1234 	.word	0xe66d1234
 800926c:	0005deec 	.word	0x0005deec

08009270 <rand>:
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <rand+0x60>)
 8009272:	b510      	push	{r4, lr}
 8009274:	681c      	ldr	r4, [r3, #0]
 8009276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009278:	b9b3      	cbnz	r3, 80092a8 <rand+0x38>
 800927a:	2018      	movs	r0, #24
 800927c:	f7ff ff0c 	bl	8009098 <malloc>
 8009280:	4602      	mov	r2, r0
 8009282:	63a0      	str	r0, [r4, #56]	; 0x38
 8009284:	b920      	cbnz	r0, 8009290 <rand+0x20>
 8009286:	214e      	movs	r1, #78	; 0x4e
 8009288:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <rand+0x64>)
 800928a:	4813      	ldr	r0, [pc, #76]	; (80092d8 <rand+0x68>)
 800928c:	f000 f872 	bl	8009374 <__assert_func>
 8009290:	4912      	ldr	r1, [pc, #72]	; (80092dc <rand+0x6c>)
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <rand+0x70>)
 8009294:	e9c0 1300 	strd	r1, r3, [r0]
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <rand+0x74>)
 800929a:	2100      	movs	r1, #0
 800929c:	6083      	str	r3, [r0, #8]
 800929e:	230b      	movs	r3, #11
 80092a0:	8183      	strh	r3, [r0, #12]
 80092a2:	2001      	movs	r0, #1
 80092a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80092a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092aa:	480f      	ldr	r0, [pc, #60]	; (80092e8 <rand+0x78>)
 80092ac:	690a      	ldr	r2, [r1, #16]
 80092ae:	694b      	ldr	r3, [r1, #20]
 80092b0:	4350      	muls	r0, r2
 80092b2:	4c0e      	ldr	r4, [pc, #56]	; (80092ec <rand+0x7c>)
 80092b4:	fb04 0003 	mla	r0, r4, r3, r0
 80092b8:	fba2 3404 	umull	r3, r4, r2, r4
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	4404      	add	r4, r0
 80092c0:	f144 0000 	adc.w	r0, r4, #0
 80092c4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80092c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	20000198 	.word	0x20000198
 80092d4:	0800a348 	.word	0x0800a348
 80092d8:	0800a35f 	.word	0x0800a35f
 80092dc:	abcd330e 	.word	0xabcd330e
 80092e0:	e66d1234 	.word	0xe66d1234
 80092e4:	0005deec 	.word	0x0005deec
 80092e8:	5851f42d 	.word	0x5851f42d
 80092ec:	4c957f2d 	.word	0x4c957f2d

080092f0 <_sbrk_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	2300      	movs	r3, #0
 80092f4:	4d05      	ldr	r5, [pc, #20]	; (800930c <_sbrk_r+0x1c>)
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7f7 fb0c 	bl	8000918 <_sbrk>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_sbrk_r+0x1a>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_sbrk_r+0x1a>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20001558 	.word	0x20001558

08009310 <strcat>:
 8009310:	4602      	mov	r2, r0
 8009312:	b510      	push	{r4, lr}
 8009314:	7814      	ldrb	r4, [r2, #0]
 8009316:	4613      	mov	r3, r2
 8009318:	3201      	adds	r2, #1
 800931a:	2c00      	cmp	r4, #0
 800931c:	d1fa      	bne.n	8009314 <strcat+0x4>
 800931e:	3b01      	subs	r3, #1
 8009320:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009324:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009328:	2a00      	cmp	r2, #0
 800932a:	d1f9      	bne.n	8009320 <strcat+0x10>
 800932c:	bd10      	pop	{r4, pc}

0800932e <strcpy>:
 800932e:	4603      	mov	r3, r0
 8009330:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009334:	f803 2b01 	strb.w	r2, [r3], #1
 8009338:	2a00      	cmp	r2, #0
 800933a:	d1f9      	bne.n	8009330 <strcpy+0x2>
 800933c:	4770      	bx	lr
	...

08009340 <time>:
 8009340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <time+0x30>)
 8009344:	4604      	mov	r4, r0
 8009346:	2200      	movs	r2, #0
 8009348:	4669      	mov	r1, sp
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	f000 f842 	bl	80093d4 <_gettimeofday_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	da05      	bge.n	8009360 <time+0x20>
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	f04f 33ff 	mov.w	r3, #4294967295
 800935c:	e9cd 2300 	strd	r2, r3, [sp]
 8009360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009364:	b10c      	cbz	r4, 800936a <time+0x2a>
 8009366:	e9c4 0100 	strd	r0, r1, [r4]
 800936a:	b004      	add	sp, #16
 800936c:	bd10      	pop	{r4, pc}
 800936e:	bf00      	nop
 8009370:	20000198 	.word	0x20000198

08009374 <__assert_func>:
 8009374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009376:	4614      	mov	r4, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <__assert_func+0x2c>)
 800937c:	4605      	mov	r5, r0
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68d8      	ldr	r0, [r3, #12]
 8009382:	b14c      	cbz	r4, 8009398 <__assert_func+0x24>
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <__assert_func+0x30>)
 8009386:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800938a:	9100      	str	r1, [sp, #0]
 800938c:	462b      	mov	r3, r5
 800938e:	4906      	ldr	r1, [pc, #24]	; (80093a8 <__assert_func+0x34>)
 8009390:	f000 f80e 	bl	80093b0 <fiprintf>
 8009394:	f000 fbea 	bl	8009b6c <abort>
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <__assert_func+0x38>)
 800939a:	461c      	mov	r4, r3
 800939c:	e7f3      	b.n	8009386 <__assert_func+0x12>
 800939e:	bf00      	nop
 80093a0:	20000198 	.word	0x20000198
 80093a4:	0800a3be 	.word	0x0800a3be
 80093a8:	0800a3cb 	.word	0x0800a3cb
 80093ac:	0800a3f9 	.word	0x0800a3f9

080093b0 <fiprintf>:
 80093b0:	b40e      	push	{r1, r2, r3}
 80093b2:	b503      	push	{r0, r1, lr}
 80093b4:	4601      	mov	r1, r0
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <fiprintf+0x20>)
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	f000 f84d 	bl	8009460 <_vfiprintf_r>
 80093c6:	b002      	add	sp, #8
 80093c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093cc:	b003      	add	sp, #12
 80093ce:	4770      	bx	lr
 80093d0:	20000198 	.word	0x20000198

080093d4 <_gettimeofday_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	2300      	movs	r3, #0
 80093d8:	4d06      	ldr	r5, [pc, #24]	; (80093f4 <_gettimeofday_r+0x20>)
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	f000 fee7 	bl	800a1b4 <_gettimeofday>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d102      	bne.n	80093f0 <_gettimeofday_r+0x1c>
 80093ea:	682b      	ldr	r3, [r5, #0]
 80093ec:	b103      	cbz	r3, 80093f0 <_gettimeofday_r+0x1c>
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	bf00      	nop
 80093f4:	20001558 	.word	0x20001558

080093f8 <__malloc_lock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_lock+0x8>)
 80093fa:	f000 bd77 	b.w	8009eec <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	20001560 	.word	0x20001560

08009404 <__malloc_unlock>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__malloc_unlock+0x8>)
 8009406:	f000 bd72 	b.w	8009eee <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	20001560 	.word	0x20001560

08009410 <__sfputc_r>:
 8009410:	6893      	ldr	r3, [r2, #8]
 8009412:	b410      	push	{r4}
 8009414:	3b01      	subs	r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	6093      	str	r3, [r2, #8]
 800941a:	da07      	bge.n	800942c <__sfputc_r+0x1c>
 800941c:	6994      	ldr	r4, [r2, #24]
 800941e:	42a3      	cmp	r3, r4
 8009420:	db01      	blt.n	8009426 <__sfputc_r+0x16>
 8009422:	290a      	cmp	r1, #10
 8009424:	d102      	bne.n	800942c <__sfputc_r+0x1c>
 8009426:	bc10      	pop	{r4}
 8009428:	f000 bae0 	b.w	80099ec <__swbuf_r>
 800942c:	6813      	ldr	r3, [r2, #0]
 800942e:	1c58      	adds	r0, r3, #1
 8009430:	6010      	str	r0, [r2, #0]
 8009432:	7019      	strb	r1, [r3, #0]
 8009434:	4608      	mov	r0, r1
 8009436:	bc10      	pop	{r4}
 8009438:	4770      	bx	lr

0800943a <__sfputs_r>:
 800943a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943c:	4606      	mov	r6, r0
 800943e:	460f      	mov	r7, r1
 8009440:	4614      	mov	r4, r2
 8009442:	18d5      	adds	r5, r2, r3
 8009444:	42ac      	cmp	r4, r5
 8009446:	d101      	bne.n	800944c <__sfputs_r+0x12>
 8009448:	2000      	movs	r0, #0
 800944a:	e007      	b.n	800945c <__sfputs_r+0x22>
 800944c:	463a      	mov	r2, r7
 800944e:	4630      	mov	r0, r6
 8009450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009454:	f7ff ffdc 	bl	8009410 <__sfputc_r>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d1f3      	bne.n	8009444 <__sfputs_r+0xa>
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009460 <_vfiprintf_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	460d      	mov	r5, r1
 8009466:	4614      	mov	r4, r2
 8009468:	4698      	mov	r8, r3
 800946a:	4606      	mov	r6, r0
 800946c:	b09d      	sub	sp, #116	; 0x74
 800946e:	b118      	cbz	r0, 8009478 <_vfiprintf_r+0x18>
 8009470:	6983      	ldr	r3, [r0, #24]
 8009472:	b90b      	cbnz	r3, 8009478 <_vfiprintf_r+0x18>
 8009474:	f000 fc9c 	bl	8009db0 <__sinit>
 8009478:	4b89      	ldr	r3, [pc, #548]	; (80096a0 <_vfiprintf_r+0x240>)
 800947a:	429d      	cmp	r5, r3
 800947c:	d11b      	bne.n	80094b6 <_vfiprintf_r+0x56>
 800947e:	6875      	ldr	r5, [r6, #4]
 8009480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d405      	bmi.n	8009492 <_vfiprintf_r+0x32>
 8009486:	89ab      	ldrh	r3, [r5, #12]
 8009488:	059a      	lsls	r2, r3, #22
 800948a:	d402      	bmi.n	8009492 <_vfiprintf_r+0x32>
 800948c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800948e:	f000 fd2d 	bl	8009eec <__retarget_lock_acquire_recursive>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	071b      	lsls	r3, r3, #28
 8009496:	d501      	bpl.n	800949c <_vfiprintf_r+0x3c>
 8009498:	692b      	ldr	r3, [r5, #16]
 800949a:	b9eb      	cbnz	r3, 80094d8 <_vfiprintf_r+0x78>
 800949c:	4629      	mov	r1, r5
 800949e:	4630      	mov	r0, r6
 80094a0:	f000 faf6 	bl	8009a90 <__swsetup_r>
 80094a4:	b1c0      	cbz	r0, 80094d8 <_vfiprintf_r+0x78>
 80094a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a8:	07dc      	lsls	r4, r3, #31
 80094aa:	d50e      	bpl.n	80094ca <_vfiprintf_r+0x6a>
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	b01d      	add	sp, #116	; 0x74
 80094b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b6:	4b7b      	ldr	r3, [pc, #492]	; (80096a4 <_vfiprintf_r+0x244>)
 80094b8:	429d      	cmp	r5, r3
 80094ba:	d101      	bne.n	80094c0 <_vfiprintf_r+0x60>
 80094bc:	68b5      	ldr	r5, [r6, #8]
 80094be:	e7df      	b.n	8009480 <_vfiprintf_r+0x20>
 80094c0:	4b79      	ldr	r3, [pc, #484]	; (80096a8 <_vfiprintf_r+0x248>)
 80094c2:	429d      	cmp	r5, r3
 80094c4:	bf08      	it	eq
 80094c6:	68f5      	ldreq	r5, [r6, #12]
 80094c8:	e7da      	b.n	8009480 <_vfiprintf_r+0x20>
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	0598      	lsls	r0, r3, #22
 80094ce:	d4ed      	bmi.n	80094ac <_vfiprintf_r+0x4c>
 80094d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d2:	f000 fd0c 	bl	8009eee <__retarget_lock_release_recursive>
 80094d6:	e7e9      	b.n	80094ac <_vfiprintf_r+0x4c>
 80094d8:	2300      	movs	r3, #0
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	2320      	movs	r3, #32
 80094de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094e2:	2330      	movs	r3, #48	; 0x30
 80094e4:	f04f 0901 	mov.w	r9, #1
 80094e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80096ac <_vfiprintf_r+0x24c>
 80094f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094f4:	4623      	mov	r3, r4
 80094f6:	469a      	mov	sl, r3
 80094f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094fc:	b10a      	cbz	r2, 8009502 <_vfiprintf_r+0xa2>
 80094fe:	2a25      	cmp	r2, #37	; 0x25
 8009500:	d1f9      	bne.n	80094f6 <_vfiprintf_r+0x96>
 8009502:	ebba 0b04 	subs.w	fp, sl, r4
 8009506:	d00b      	beq.n	8009520 <_vfiprintf_r+0xc0>
 8009508:	465b      	mov	r3, fp
 800950a:	4622      	mov	r2, r4
 800950c:	4629      	mov	r1, r5
 800950e:	4630      	mov	r0, r6
 8009510:	f7ff ff93 	bl	800943a <__sfputs_r>
 8009514:	3001      	adds	r0, #1
 8009516:	f000 80aa 	beq.w	800966e <_vfiprintf_r+0x20e>
 800951a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951c:	445a      	add	r2, fp
 800951e:	9209      	str	r2, [sp, #36]	; 0x24
 8009520:	f89a 3000 	ldrb.w	r3, [sl]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80a2 	beq.w	800966e <_vfiprintf_r+0x20e>
 800952a:	2300      	movs	r3, #0
 800952c:	f04f 32ff 	mov.w	r2, #4294967295
 8009530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009534:	f10a 0a01 	add.w	sl, sl, #1
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009540:	931a      	str	r3, [sp, #104]	; 0x68
 8009542:	4654      	mov	r4, sl
 8009544:	2205      	movs	r2, #5
 8009546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954a:	4858      	ldr	r0, [pc, #352]	; (80096ac <_vfiprintf_r+0x24c>)
 800954c:	f000 fd34 	bl	8009fb8 <memchr>
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	b9d8      	cbnz	r0, 800958c <_vfiprintf_r+0x12c>
 8009554:	06d1      	lsls	r1, r2, #27
 8009556:	bf44      	itt	mi
 8009558:	2320      	movmi	r3, #32
 800955a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955e:	0713      	lsls	r3, r2, #28
 8009560:	bf44      	itt	mi
 8009562:	232b      	movmi	r3, #43	; 0x2b
 8009564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009568:	f89a 3000 	ldrb.w	r3, [sl]
 800956c:	2b2a      	cmp	r3, #42	; 0x2a
 800956e:	d015      	beq.n	800959c <_vfiprintf_r+0x13c>
 8009570:	4654      	mov	r4, sl
 8009572:	2000      	movs	r0, #0
 8009574:	f04f 0c0a 	mov.w	ip, #10
 8009578:	9a07      	ldr	r2, [sp, #28]
 800957a:	4621      	mov	r1, r4
 800957c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009580:	3b30      	subs	r3, #48	; 0x30
 8009582:	2b09      	cmp	r3, #9
 8009584:	d94e      	bls.n	8009624 <_vfiprintf_r+0x1c4>
 8009586:	b1b0      	cbz	r0, 80095b6 <_vfiprintf_r+0x156>
 8009588:	9207      	str	r2, [sp, #28]
 800958a:	e014      	b.n	80095b6 <_vfiprintf_r+0x156>
 800958c:	eba0 0308 	sub.w	r3, r0, r8
 8009590:	fa09 f303 	lsl.w	r3, r9, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	46a2      	mov	sl, r4
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	e7d2      	b.n	8009542 <_vfiprintf_r+0xe2>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	1d19      	adds	r1, r3, #4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	9103      	str	r1, [sp, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfbb      	ittet	lt
 80095a8:	425b      	neglt	r3, r3
 80095aa:	f042 0202 	orrlt.w	r2, r2, #2
 80095ae:	9307      	strge	r3, [sp, #28]
 80095b0:	9307      	strlt	r3, [sp, #28]
 80095b2:	bfb8      	it	lt
 80095b4:	9204      	strlt	r2, [sp, #16]
 80095b6:	7823      	ldrb	r3, [r4, #0]
 80095b8:	2b2e      	cmp	r3, #46	; 0x2e
 80095ba:	d10c      	bne.n	80095d6 <_vfiprintf_r+0x176>
 80095bc:	7863      	ldrb	r3, [r4, #1]
 80095be:	2b2a      	cmp	r3, #42	; 0x2a
 80095c0:	d135      	bne.n	800962e <_vfiprintf_r+0x1ce>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	3402      	adds	r4, #2
 80095c6:	1d1a      	adds	r2, r3, #4
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	9203      	str	r2, [sp, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfb8      	it	lt
 80095d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80095d4:	9305      	str	r3, [sp, #20]
 80095d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096bc <_vfiprintf_r+0x25c>
 80095da:	2203      	movs	r2, #3
 80095dc:	4650      	mov	r0, sl
 80095de:	7821      	ldrb	r1, [r4, #0]
 80095e0:	f000 fcea 	bl	8009fb8 <memchr>
 80095e4:	b140      	cbz	r0, 80095f8 <_vfiprintf_r+0x198>
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	eba0 000a 	sub.w	r0, r0, sl
 80095ec:	fa03 f000 	lsl.w	r0, r3, r0
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	3401      	adds	r4, #1
 80095f4:	4303      	orrs	r3, r0
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fc:	2206      	movs	r2, #6
 80095fe:	482c      	ldr	r0, [pc, #176]	; (80096b0 <_vfiprintf_r+0x250>)
 8009600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009604:	f000 fcd8 	bl	8009fb8 <memchr>
 8009608:	2800      	cmp	r0, #0
 800960a:	d03f      	beq.n	800968c <_vfiprintf_r+0x22c>
 800960c:	4b29      	ldr	r3, [pc, #164]	; (80096b4 <_vfiprintf_r+0x254>)
 800960e:	bb1b      	cbnz	r3, 8009658 <_vfiprintf_r+0x1f8>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	3307      	adds	r3, #7
 8009614:	f023 0307 	bic.w	r3, r3, #7
 8009618:	3308      	adds	r3, #8
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961e:	443b      	add	r3, r7
 8009620:	9309      	str	r3, [sp, #36]	; 0x24
 8009622:	e767      	b.n	80094f4 <_vfiprintf_r+0x94>
 8009624:	460c      	mov	r4, r1
 8009626:	2001      	movs	r0, #1
 8009628:	fb0c 3202 	mla	r2, ip, r2, r3
 800962c:	e7a5      	b.n	800957a <_vfiprintf_r+0x11a>
 800962e:	2300      	movs	r3, #0
 8009630:	f04f 0c0a 	mov.w	ip, #10
 8009634:	4619      	mov	r1, r3
 8009636:	3401      	adds	r4, #1
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	4620      	mov	r0, r4
 800963c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009640:	3a30      	subs	r2, #48	; 0x30
 8009642:	2a09      	cmp	r2, #9
 8009644:	d903      	bls.n	800964e <_vfiprintf_r+0x1ee>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0c5      	beq.n	80095d6 <_vfiprintf_r+0x176>
 800964a:	9105      	str	r1, [sp, #20]
 800964c:	e7c3      	b.n	80095d6 <_vfiprintf_r+0x176>
 800964e:	4604      	mov	r4, r0
 8009650:	2301      	movs	r3, #1
 8009652:	fb0c 2101 	mla	r1, ip, r1, r2
 8009656:	e7f0      	b.n	800963a <_vfiprintf_r+0x1da>
 8009658:	ab03      	add	r3, sp, #12
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	462a      	mov	r2, r5
 800965e:	4630      	mov	r0, r6
 8009660:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <_vfiprintf_r+0x258>)
 8009662:	a904      	add	r1, sp, #16
 8009664:	f3af 8000 	nop.w
 8009668:	4607      	mov	r7, r0
 800966a:	1c78      	adds	r0, r7, #1
 800966c:	d1d6      	bne.n	800961c <_vfiprintf_r+0x1bc>
 800966e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009670:	07d9      	lsls	r1, r3, #31
 8009672:	d405      	bmi.n	8009680 <_vfiprintf_r+0x220>
 8009674:	89ab      	ldrh	r3, [r5, #12]
 8009676:	059a      	lsls	r2, r3, #22
 8009678:	d402      	bmi.n	8009680 <_vfiprintf_r+0x220>
 800967a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800967c:	f000 fc37 	bl	8009eee <__retarget_lock_release_recursive>
 8009680:	89ab      	ldrh	r3, [r5, #12]
 8009682:	065b      	lsls	r3, r3, #25
 8009684:	f53f af12 	bmi.w	80094ac <_vfiprintf_r+0x4c>
 8009688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800968a:	e711      	b.n	80094b0 <_vfiprintf_r+0x50>
 800968c:	ab03      	add	r3, sp, #12
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	462a      	mov	r2, r5
 8009692:	4630      	mov	r0, r6
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <_vfiprintf_r+0x258>)
 8009696:	a904      	add	r1, sp, #16
 8009698:	f000 f882 	bl	80097a0 <_printf_i>
 800969c:	e7e4      	b.n	8009668 <_vfiprintf_r+0x208>
 800969e:	bf00      	nop
 80096a0:	0800a450 	.word	0x0800a450
 80096a4:	0800a470 	.word	0x0800a470
 80096a8:	0800a430 	.word	0x0800a430
 80096ac:	0800a3fa 	.word	0x0800a3fa
 80096b0:	0800a404 	.word	0x0800a404
 80096b4:	00000000 	.word	0x00000000
 80096b8:	0800943b 	.word	0x0800943b
 80096bc:	0800a400 	.word	0x0800a400

080096c0 <_printf_common>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	4616      	mov	r6, r2
 80096c6:	4699      	mov	r9, r3
 80096c8:	688a      	ldr	r2, [r1, #8]
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	4607      	mov	r7, r0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfb8      	it	lt
 80096d2:	4613      	movlt	r3, r2
 80096d4:	6033      	str	r3, [r6, #0]
 80096d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096da:	460c      	mov	r4, r1
 80096dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096e0:	b10a      	cbz	r2, 80096e6 <_printf_common+0x26>
 80096e2:	3301      	adds	r3, #1
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	0699      	lsls	r1, r3, #26
 80096ea:	bf42      	ittt	mi
 80096ec:	6833      	ldrmi	r3, [r6, #0]
 80096ee:	3302      	addmi	r3, #2
 80096f0:	6033      	strmi	r3, [r6, #0]
 80096f2:	6825      	ldr	r5, [r4, #0]
 80096f4:	f015 0506 	ands.w	r5, r5, #6
 80096f8:	d106      	bne.n	8009708 <_printf_common+0x48>
 80096fa:	f104 0a19 	add.w	sl, r4, #25
 80096fe:	68e3      	ldr	r3, [r4, #12]
 8009700:	6832      	ldr	r2, [r6, #0]
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	42ab      	cmp	r3, r5
 8009706:	dc28      	bgt.n	800975a <_printf_common+0x9a>
 8009708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800970c:	1e13      	subs	r3, r2, #0
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	bf18      	it	ne
 8009712:	2301      	movne	r3, #1
 8009714:	0692      	lsls	r2, r2, #26
 8009716:	d42d      	bmi.n	8009774 <_printf_common+0xb4>
 8009718:	4649      	mov	r1, r9
 800971a:	4638      	mov	r0, r7
 800971c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009720:	47c0      	blx	r8
 8009722:	3001      	adds	r0, #1
 8009724:	d020      	beq.n	8009768 <_printf_common+0xa8>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	68e5      	ldr	r5, [r4, #12]
 800972a:	f003 0306 	and.w	r3, r3, #6
 800972e:	2b04      	cmp	r3, #4
 8009730:	bf18      	it	ne
 8009732:	2500      	movne	r5, #0
 8009734:	6832      	ldr	r2, [r6, #0]
 8009736:	f04f 0600 	mov.w	r6, #0
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	bf08      	it	eq
 800973e:	1aad      	subeq	r5, r5, r2
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	bf08      	it	eq
 8009744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009748:	4293      	cmp	r3, r2
 800974a:	bfc4      	itt	gt
 800974c:	1a9b      	subgt	r3, r3, r2
 800974e:	18ed      	addgt	r5, r5, r3
 8009750:	341a      	adds	r4, #26
 8009752:	42b5      	cmp	r5, r6
 8009754:	d11a      	bne.n	800978c <_printf_common+0xcc>
 8009756:	2000      	movs	r0, #0
 8009758:	e008      	b.n	800976c <_printf_common+0xac>
 800975a:	2301      	movs	r3, #1
 800975c:	4652      	mov	r2, sl
 800975e:	4649      	mov	r1, r9
 8009760:	4638      	mov	r0, r7
 8009762:	47c0      	blx	r8
 8009764:	3001      	adds	r0, #1
 8009766:	d103      	bne.n	8009770 <_printf_common+0xb0>
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009770:	3501      	adds	r5, #1
 8009772:	e7c4      	b.n	80096fe <_printf_common+0x3e>
 8009774:	2030      	movs	r0, #48	; 0x30
 8009776:	18e1      	adds	r1, r4, r3
 8009778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009782:	4422      	add	r2, r4
 8009784:	3302      	adds	r3, #2
 8009786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800978a:	e7c5      	b.n	8009718 <_printf_common+0x58>
 800978c:	2301      	movs	r3, #1
 800978e:	4622      	mov	r2, r4
 8009790:	4649      	mov	r1, r9
 8009792:	4638      	mov	r0, r7
 8009794:	47c0      	blx	r8
 8009796:	3001      	adds	r0, #1
 8009798:	d0e6      	beq.n	8009768 <_printf_common+0xa8>
 800979a:	3601      	adds	r6, #1
 800979c:	e7d9      	b.n	8009752 <_printf_common+0x92>
	...

080097a0 <_printf_i>:
 80097a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	7e27      	ldrb	r7, [r4, #24]
 80097a8:	4691      	mov	r9, r2
 80097aa:	2f78      	cmp	r7, #120	; 0x78
 80097ac:	4680      	mov	r8, r0
 80097ae:	469a      	mov	sl, r3
 80097b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097b6:	d807      	bhi.n	80097c8 <_printf_i+0x28>
 80097b8:	2f62      	cmp	r7, #98	; 0x62
 80097ba:	d80a      	bhi.n	80097d2 <_printf_i+0x32>
 80097bc:	2f00      	cmp	r7, #0
 80097be:	f000 80d9 	beq.w	8009974 <_printf_i+0x1d4>
 80097c2:	2f58      	cmp	r7, #88	; 0x58
 80097c4:	f000 80a4 	beq.w	8009910 <_printf_i+0x170>
 80097c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097d0:	e03a      	b.n	8009848 <_printf_i+0xa8>
 80097d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097d6:	2b15      	cmp	r3, #21
 80097d8:	d8f6      	bhi.n	80097c8 <_printf_i+0x28>
 80097da:	a001      	add	r0, pc, #4	; (adr r0, 80097e0 <_printf_i+0x40>)
 80097dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80097e0:	08009839 	.word	0x08009839
 80097e4:	0800984d 	.word	0x0800984d
 80097e8:	080097c9 	.word	0x080097c9
 80097ec:	080097c9 	.word	0x080097c9
 80097f0:	080097c9 	.word	0x080097c9
 80097f4:	080097c9 	.word	0x080097c9
 80097f8:	0800984d 	.word	0x0800984d
 80097fc:	080097c9 	.word	0x080097c9
 8009800:	080097c9 	.word	0x080097c9
 8009804:	080097c9 	.word	0x080097c9
 8009808:	080097c9 	.word	0x080097c9
 800980c:	0800995b 	.word	0x0800995b
 8009810:	0800987d 	.word	0x0800987d
 8009814:	0800993d 	.word	0x0800993d
 8009818:	080097c9 	.word	0x080097c9
 800981c:	080097c9 	.word	0x080097c9
 8009820:	0800997d 	.word	0x0800997d
 8009824:	080097c9 	.word	0x080097c9
 8009828:	0800987d 	.word	0x0800987d
 800982c:	080097c9 	.word	0x080097c9
 8009830:	080097c9 	.word	0x080097c9
 8009834:	08009945 	.word	0x08009945
 8009838:	680b      	ldr	r3, [r1, #0]
 800983a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	600a      	str	r2, [r1, #0]
 8009844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009848:	2301      	movs	r3, #1
 800984a:	e0a4      	b.n	8009996 <_printf_i+0x1f6>
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	6808      	ldr	r0, [r1, #0]
 8009850:	062e      	lsls	r6, r5, #24
 8009852:	f100 0304 	add.w	r3, r0, #4
 8009856:	d50a      	bpl.n	800986e <_printf_i+0xce>
 8009858:	6805      	ldr	r5, [r0, #0]
 800985a:	600b      	str	r3, [r1, #0]
 800985c:	2d00      	cmp	r5, #0
 800985e:	da03      	bge.n	8009868 <_printf_i+0xc8>
 8009860:	232d      	movs	r3, #45	; 0x2d
 8009862:	426d      	negs	r5, r5
 8009864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009868:	230a      	movs	r3, #10
 800986a:	485e      	ldr	r0, [pc, #376]	; (80099e4 <_printf_i+0x244>)
 800986c:	e019      	b.n	80098a2 <_printf_i+0x102>
 800986e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009872:	6805      	ldr	r5, [r0, #0]
 8009874:	600b      	str	r3, [r1, #0]
 8009876:	bf18      	it	ne
 8009878:	b22d      	sxthne	r5, r5
 800987a:	e7ef      	b.n	800985c <_printf_i+0xbc>
 800987c:	680b      	ldr	r3, [r1, #0]
 800987e:	6825      	ldr	r5, [r4, #0]
 8009880:	1d18      	adds	r0, r3, #4
 8009882:	6008      	str	r0, [r1, #0]
 8009884:	0628      	lsls	r0, r5, #24
 8009886:	d501      	bpl.n	800988c <_printf_i+0xec>
 8009888:	681d      	ldr	r5, [r3, #0]
 800988a:	e002      	b.n	8009892 <_printf_i+0xf2>
 800988c:	0669      	lsls	r1, r5, #25
 800988e:	d5fb      	bpl.n	8009888 <_printf_i+0xe8>
 8009890:	881d      	ldrh	r5, [r3, #0]
 8009892:	2f6f      	cmp	r7, #111	; 0x6f
 8009894:	bf0c      	ite	eq
 8009896:	2308      	moveq	r3, #8
 8009898:	230a      	movne	r3, #10
 800989a:	4852      	ldr	r0, [pc, #328]	; (80099e4 <_printf_i+0x244>)
 800989c:	2100      	movs	r1, #0
 800989e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098a2:	6866      	ldr	r6, [r4, #4]
 80098a4:	2e00      	cmp	r6, #0
 80098a6:	bfa8      	it	ge
 80098a8:	6821      	ldrge	r1, [r4, #0]
 80098aa:	60a6      	str	r6, [r4, #8]
 80098ac:	bfa4      	itt	ge
 80098ae:	f021 0104 	bicge.w	r1, r1, #4
 80098b2:	6021      	strge	r1, [r4, #0]
 80098b4:	b90d      	cbnz	r5, 80098ba <_printf_i+0x11a>
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	d04d      	beq.n	8009956 <_printf_i+0x1b6>
 80098ba:	4616      	mov	r6, r2
 80098bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80098c0:	fb03 5711 	mls	r7, r3, r1, r5
 80098c4:	5dc7      	ldrb	r7, [r0, r7]
 80098c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098ca:	462f      	mov	r7, r5
 80098cc:	42bb      	cmp	r3, r7
 80098ce:	460d      	mov	r5, r1
 80098d0:	d9f4      	bls.n	80098bc <_printf_i+0x11c>
 80098d2:	2b08      	cmp	r3, #8
 80098d4:	d10b      	bne.n	80098ee <_printf_i+0x14e>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	07df      	lsls	r7, r3, #31
 80098da:	d508      	bpl.n	80098ee <_printf_i+0x14e>
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	6861      	ldr	r1, [r4, #4]
 80098e0:	4299      	cmp	r1, r3
 80098e2:	bfde      	ittt	le
 80098e4:	2330      	movle	r3, #48	; 0x30
 80098e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098ee:	1b92      	subs	r2, r2, r6
 80098f0:	6122      	str	r2, [r4, #16]
 80098f2:	464b      	mov	r3, r9
 80098f4:	4621      	mov	r1, r4
 80098f6:	4640      	mov	r0, r8
 80098f8:	f8cd a000 	str.w	sl, [sp]
 80098fc:	aa03      	add	r2, sp, #12
 80098fe:	f7ff fedf 	bl	80096c0 <_printf_common>
 8009902:	3001      	adds	r0, #1
 8009904:	d14c      	bne.n	80099a0 <_printf_i+0x200>
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	b004      	add	sp, #16
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	4834      	ldr	r0, [pc, #208]	; (80099e4 <_printf_i+0x244>)
 8009912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009916:	680e      	ldr	r6, [r1, #0]
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	f856 5b04 	ldr.w	r5, [r6], #4
 800991e:	061f      	lsls	r7, r3, #24
 8009920:	600e      	str	r6, [r1, #0]
 8009922:	d514      	bpl.n	800994e <_printf_i+0x1ae>
 8009924:	07d9      	lsls	r1, r3, #31
 8009926:	bf44      	itt	mi
 8009928:	f043 0320 	orrmi.w	r3, r3, #32
 800992c:	6023      	strmi	r3, [r4, #0]
 800992e:	b91d      	cbnz	r5, 8009938 <_printf_i+0x198>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	f023 0320 	bic.w	r3, r3, #32
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	2310      	movs	r3, #16
 800993a:	e7af      	b.n	800989c <_printf_i+0xfc>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	f043 0320 	orr.w	r3, r3, #32
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	2378      	movs	r3, #120	; 0x78
 8009946:	4828      	ldr	r0, [pc, #160]	; (80099e8 <_printf_i+0x248>)
 8009948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800994c:	e7e3      	b.n	8009916 <_printf_i+0x176>
 800994e:	065e      	lsls	r6, r3, #25
 8009950:	bf48      	it	mi
 8009952:	b2ad      	uxthmi	r5, r5
 8009954:	e7e6      	b.n	8009924 <_printf_i+0x184>
 8009956:	4616      	mov	r6, r2
 8009958:	e7bb      	b.n	80098d2 <_printf_i+0x132>
 800995a:	680b      	ldr	r3, [r1, #0]
 800995c:	6826      	ldr	r6, [r4, #0]
 800995e:	1d1d      	adds	r5, r3, #4
 8009960:	6960      	ldr	r0, [r4, #20]
 8009962:	600d      	str	r5, [r1, #0]
 8009964:	0635      	lsls	r5, r6, #24
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	d501      	bpl.n	800996e <_printf_i+0x1ce>
 800996a:	6018      	str	r0, [r3, #0]
 800996c:	e002      	b.n	8009974 <_printf_i+0x1d4>
 800996e:	0671      	lsls	r1, r6, #25
 8009970:	d5fb      	bpl.n	800996a <_printf_i+0x1ca>
 8009972:	8018      	strh	r0, [r3, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	4616      	mov	r6, r2
 8009978:	6123      	str	r3, [r4, #16]
 800997a:	e7ba      	b.n	80098f2 <_printf_i+0x152>
 800997c:	680b      	ldr	r3, [r1, #0]
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	600a      	str	r2, [r1, #0]
 8009982:	681e      	ldr	r6, [r3, #0]
 8009984:	2100      	movs	r1, #0
 8009986:	4630      	mov	r0, r6
 8009988:	6862      	ldr	r2, [r4, #4]
 800998a:	f000 fb15 	bl	8009fb8 <memchr>
 800998e:	b108      	cbz	r0, 8009994 <_printf_i+0x1f4>
 8009990:	1b80      	subs	r0, r0, r6
 8009992:	6060      	str	r0, [r4, #4]
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	6123      	str	r3, [r4, #16]
 8009998:	2300      	movs	r3, #0
 800999a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800999e:	e7a8      	b.n	80098f2 <_printf_i+0x152>
 80099a0:	4632      	mov	r2, r6
 80099a2:	4649      	mov	r1, r9
 80099a4:	4640      	mov	r0, r8
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	47d0      	blx	sl
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0ab      	beq.n	8009906 <_printf_i+0x166>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	079b      	lsls	r3, r3, #30
 80099b2:	d413      	bmi.n	80099dc <_printf_i+0x23c>
 80099b4:	68e0      	ldr	r0, [r4, #12]
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	4298      	cmp	r0, r3
 80099ba:	bfb8      	it	lt
 80099bc:	4618      	movlt	r0, r3
 80099be:	e7a4      	b.n	800990a <_printf_i+0x16a>
 80099c0:	2301      	movs	r3, #1
 80099c2:	4632      	mov	r2, r6
 80099c4:	4649      	mov	r1, r9
 80099c6:	4640      	mov	r0, r8
 80099c8:	47d0      	blx	sl
 80099ca:	3001      	adds	r0, #1
 80099cc:	d09b      	beq.n	8009906 <_printf_i+0x166>
 80099ce:	3501      	adds	r5, #1
 80099d0:	68e3      	ldr	r3, [r4, #12]
 80099d2:	9903      	ldr	r1, [sp, #12]
 80099d4:	1a5b      	subs	r3, r3, r1
 80099d6:	42ab      	cmp	r3, r5
 80099d8:	dcf2      	bgt.n	80099c0 <_printf_i+0x220>
 80099da:	e7eb      	b.n	80099b4 <_printf_i+0x214>
 80099dc:	2500      	movs	r5, #0
 80099de:	f104 0619 	add.w	r6, r4, #25
 80099e2:	e7f5      	b.n	80099d0 <_printf_i+0x230>
 80099e4:	0800a40b 	.word	0x0800a40b
 80099e8:	0800a41c 	.word	0x0800a41c

080099ec <__swbuf_r>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	460e      	mov	r6, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	4605      	mov	r5, r0
 80099f4:	b118      	cbz	r0, 80099fe <__swbuf_r+0x12>
 80099f6:	6983      	ldr	r3, [r0, #24]
 80099f8:	b90b      	cbnz	r3, 80099fe <__swbuf_r+0x12>
 80099fa:	f000 f9d9 	bl	8009db0 <__sinit>
 80099fe:	4b21      	ldr	r3, [pc, #132]	; (8009a84 <__swbuf_r+0x98>)
 8009a00:	429c      	cmp	r4, r3
 8009a02:	d12b      	bne.n	8009a5c <__swbuf_r+0x70>
 8009a04:	686c      	ldr	r4, [r5, #4]
 8009a06:	69a3      	ldr	r3, [r4, #24]
 8009a08:	60a3      	str	r3, [r4, #8]
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	071a      	lsls	r2, r3, #28
 8009a0e:	d52f      	bpl.n	8009a70 <__swbuf_r+0x84>
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	b36b      	cbz	r3, 8009a70 <__swbuf_r+0x84>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	6820      	ldr	r0, [r4, #0]
 8009a18:	b2f6      	uxtb	r6, r6
 8009a1a:	1ac0      	subs	r0, r0, r3
 8009a1c:	6963      	ldr	r3, [r4, #20]
 8009a1e:	4637      	mov	r7, r6
 8009a20:	4283      	cmp	r3, r0
 8009a22:	dc04      	bgt.n	8009a2e <__swbuf_r+0x42>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 f92e 	bl	8009c88 <_fflush_r>
 8009a2c:	bb30      	cbnz	r0, 8009a7c <__swbuf_r+0x90>
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	3001      	adds	r0, #1
 8009a32:	3b01      	subs	r3, #1
 8009a34:	60a3      	str	r3, [r4, #8]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	701e      	strb	r6, [r3, #0]
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	4283      	cmp	r3, r0
 8009a42:	d004      	beq.n	8009a4e <__swbuf_r+0x62>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	07db      	lsls	r3, r3, #31
 8009a48:	d506      	bpl.n	8009a58 <__swbuf_r+0x6c>
 8009a4a:	2e0a      	cmp	r6, #10
 8009a4c:	d104      	bne.n	8009a58 <__swbuf_r+0x6c>
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 f919 	bl	8009c88 <_fflush_r>
 8009a56:	b988      	cbnz	r0, 8009a7c <__swbuf_r+0x90>
 8009a58:	4638      	mov	r0, r7
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	; (8009a88 <__swbuf_r+0x9c>)
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d101      	bne.n	8009a66 <__swbuf_r+0x7a>
 8009a62:	68ac      	ldr	r4, [r5, #8]
 8009a64:	e7cf      	b.n	8009a06 <__swbuf_r+0x1a>
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <__swbuf_r+0xa0>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	bf08      	it	eq
 8009a6c:	68ec      	ldreq	r4, [r5, #12]
 8009a6e:	e7ca      	b.n	8009a06 <__swbuf_r+0x1a>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f80c 	bl	8009a90 <__swsetup_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0cb      	beq.n	8009a14 <__swbuf_r+0x28>
 8009a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a80:	e7ea      	b.n	8009a58 <__swbuf_r+0x6c>
 8009a82:	bf00      	nop
 8009a84:	0800a450 	.word	0x0800a450
 8009a88:	0800a470 	.word	0x0800a470
 8009a8c:	0800a430 	.word	0x0800a430

08009a90 <__swsetup_r>:
 8009a90:	4b32      	ldr	r3, [pc, #200]	; (8009b5c <__swsetup_r+0xcc>)
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	681d      	ldr	r5, [r3, #0]
 8009a96:	4606      	mov	r6, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	b125      	cbz	r5, 8009aa6 <__swsetup_r+0x16>
 8009a9c:	69ab      	ldr	r3, [r5, #24]
 8009a9e:	b913      	cbnz	r3, 8009aa6 <__swsetup_r+0x16>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 f985 	bl	8009db0 <__sinit>
 8009aa6:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <__swsetup_r+0xd0>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	d10f      	bne.n	8009acc <__swsetup_r+0x3c>
 8009aac:	686c      	ldr	r4, [r5, #4]
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab4:	0719      	lsls	r1, r3, #28
 8009ab6:	d42c      	bmi.n	8009b12 <__swsetup_r+0x82>
 8009ab8:	06dd      	lsls	r5, r3, #27
 8009aba:	d411      	bmi.n	8009ae0 <__swsetup_r+0x50>
 8009abc:	2309      	movs	r3, #9
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	e03e      	b.n	8009b4a <__swsetup_r+0xba>
 8009acc:	4b25      	ldr	r3, [pc, #148]	; (8009b64 <__swsetup_r+0xd4>)
 8009ace:	429c      	cmp	r4, r3
 8009ad0:	d101      	bne.n	8009ad6 <__swsetup_r+0x46>
 8009ad2:	68ac      	ldr	r4, [r5, #8]
 8009ad4:	e7eb      	b.n	8009aae <__swsetup_r+0x1e>
 8009ad6:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <__swsetup_r+0xd8>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	bf08      	it	eq
 8009adc:	68ec      	ldreq	r4, [r5, #12]
 8009ade:	e7e6      	b.n	8009aae <__swsetup_r+0x1e>
 8009ae0:	0758      	lsls	r0, r3, #29
 8009ae2:	d512      	bpl.n	8009b0a <__swsetup_r+0x7a>
 8009ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae6:	b141      	cbz	r1, 8009afa <__swsetup_r+0x6a>
 8009ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aec:	4299      	cmp	r1, r3
 8009aee:	d002      	beq.n	8009af6 <__swsetup_r+0x66>
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7ff fae9 	bl	80090c8 <_free_r>
 8009af6:	2300      	movs	r3, #0
 8009af8:	6363      	str	r3, [r4, #52]	; 0x34
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	2300      	movs	r3, #0
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f043 0308 	orr.w	r3, r3, #8
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	b94b      	cbnz	r3, 8009b2a <__swsetup_r+0x9a>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b20:	d003      	beq.n	8009b2a <__swsetup_r+0x9a>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4630      	mov	r0, r6
 8009b26:	f000 fa07 	bl	8009f38 <__smakebuf_r>
 8009b2a:	89a0      	ldrh	r0, [r4, #12]
 8009b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b30:	f010 0301 	ands.w	r3, r0, #1
 8009b34:	d00a      	beq.n	8009b4c <__swsetup_r+0xbc>
 8009b36:	2300      	movs	r3, #0
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6963      	ldr	r3, [r4, #20]
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	61a3      	str	r3, [r4, #24]
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	b943      	cbnz	r3, 8009b56 <__swsetup_r+0xc6>
 8009b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b48:	d1ba      	bne.n	8009ac0 <__swsetup_r+0x30>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	0781      	lsls	r1, r0, #30
 8009b4e:	bf58      	it	pl
 8009b50:	6963      	ldrpl	r3, [r4, #20]
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	e7f4      	b.n	8009b40 <__swsetup_r+0xb0>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e7f7      	b.n	8009b4a <__swsetup_r+0xba>
 8009b5a:	bf00      	nop
 8009b5c:	20000198 	.word	0x20000198
 8009b60:	0800a450 	.word	0x0800a450
 8009b64:	0800a470 	.word	0x0800a470
 8009b68:	0800a430 	.word	0x0800a430

08009b6c <abort>:
 8009b6c:	2006      	movs	r0, #6
 8009b6e:	b508      	push	{r3, lr}
 8009b70:	f000 fa58 	bl	800a024 <raise>
 8009b74:	2001      	movs	r0, #1
 8009b76:	f7f6 fe5c 	bl	8000832 <_exit>
	...

08009b7c <__sflush_r>:
 8009b7c:	898a      	ldrh	r2, [r1, #12]
 8009b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b82:	4605      	mov	r5, r0
 8009b84:	0710      	lsls	r0, r2, #28
 8009b86:	460c      	mov	r4, r1
 8009b88:	d458      	bmi.n	8009c3c <__sflush_r+0xc0>
 8009b8a:	684b      	ldr	r3, [r1, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dc05      	bgt.n	8009b9c <__sflush_r+0x20>
 8009b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dc02      	bgt.n	8009b9c <__sflush_r+0x20>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b9e:	2e00      	cmp	r6, #0
 8009ba0:	d0f9      	beq.n	8009b96 <__sflush_r+0x1a>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ba8:	682f      	ldr	r7, [r5, #0]
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	d032      	beq.n	8009c14 <__sflush_r+0x98>
 8009bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	075a      	lsls	r2, r3, #29
 8009bb4:	d505      	bpl.n	8009bc2 <__sflush_r+0x46>
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	1ac0      	subs	r0, r0, r3
 8009bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bbc:	b10b      	cbz	r3, 8009bc2 <__sflush_r+0x46>
 8009bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bc0:	1ac0      	subs	r0, r0, r3
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc8:	4628      	mov	r0, r5
 8009bca:	6a21      	ldr	r1, [r4, #32]
 8009bcc:	47b0      	blx	r6
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	d106      	bne.n	8009be2 <__sflush_r+0x66>
 8009bd4:	6829      	ldr	r1, [r5, #0]
 8009bd6:	291d      	cmp	r1, #29
 8009bd8:	d82c      	bhi.n	8009c34 <__sflush_r+0xb8>
 8009bda:	4a2a      	ldr	r2, [pc, #168]	; (8009c84 <__sflush_r+0x108>)
 8009bdc:	40ca      	lsrs	r2, r1
 8009bde:	07d6      	lsls	r6, r2, #31
 8009be0:	d528      	bpl.n	8009c34 <__sflush_r+0xb8>
 8009be2:	2200      	movs	r2, #0
 8009be4:	6062      	str	r2, [r4, #4]
 8009be6:	6922      	ldr	r2, [r4, #16]
 8009be8:	04d9      	lsls	r1, r3, #19
 8009bea:	6022      	str	r2, [r4, #0]
 8009bec:	d504      	bpl.n	8009bf8 <__sflush_r+0x7c>
 8009bee:	1c42      	adds	r2, r0, #1
 8009bf0:	d101      	bne.n	8009bf6 <__sflush_r+0x7a>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b903      	cbnz	r3, 8009bf8 <__sflush_r+0x7c>
 8009bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8009bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bfa:	602f      	str	r7, [r5, #0]
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	d0ca      	beq.n	8009b96 <__sflush_r+0x1a>
 8009c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c04:	4299      	cmp	r1, r3
 8009c06:	d002      	beq.n	8009c0e <__sflush_r+0x92>
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f7ff fa5d 	bl	80090c8 <_free_r>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	6360      	str	r0, [r4, #52]	; 0x34
 8009c12:	e7c1      	b.n	8009b98 <__sflush_r+0x1c>
 8009c14:	6a21      	ldr	r1, [r4, #32]
 8009c16:	2301      	movs	r3, #1
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b0      	blx	r6
 8009c1c:	1c41      	adds	r1, r0, #1
 8009c1e:	d1c7      	bne.n	8009bb0 <__sflush_r+0x34>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0c4      	beq.n	8009bb0 <__sflush_r+0x34>
 8009c26:	2b1d      	cmp	r3, #29
 8009c28:	d001      	beq.n	8009c2e <__sflush_r+0xb2>
 8009c2a:	2b16      	cmp	r3, #22
 8009c2c:	d101      	bne.n	8009c32 <__sflush_r+0xb6>
 8009c2e:	602f      	str	r7, [r5, #0]
 8009c30:	e7b1      	b.n	8009b96 <__sflush_r+0x1a>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	e7ad      	b.n	8009b98 <__sflush_r+0x1c>
 8009c3c:	690f      	ldr	r7, [r1, #16]
 8009c3e:	2f00      	cmp	r7, #0
 8009c40:	d0a9      	beq.n	8009b96 <__sflush_r+0x1a>
 8009c42:	0793      	lsls	r3, r2, #30
 8009c44:	bf18      	it	ne
 8009c46:	2300      	movne	r3, #0
 8009c48:	680e      	ldr	r6, [r1, #0]
 8009c4a:	bf08      	it	eq
 8009c4c:	694b      	ldreq	r3, [r1, #20]
 8009c4e:	eba6 0807 	sub.w	r8, r6, r7
 8009c52:	600f      	str	r7, [r1, #0]
 8009c54:	608b      	str	r3, [r1, #8]
 8009c56:	f1b8 0f00 	cmp.w	r8, #0
 8009c5a:	dd9c      	ble.n	8009b96 <__sflush_r+0x1a>
 8009c5c:	4643      	mov	r3, r8
 8009c5e:	463a      	mov	r2, r7
 8009c60:	4628      	mov	r0, r5
 8009c62:	6a21      	ldr	r1, [r4, #32]
 8009c64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c66:	47b0      	blx	r6
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dc06      	bgt.n	8009c7a <__sflush_r+0xfe>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	e78e      	b.n	8009b98 <__sflush_r+0x1c>
 8009c7a:	4407      	add	r7, r0
 8009c7c:	eba8 0800 	sub.w	r8, r8, r0
 8009c80:	e7e9      	b.n	8009c56 <__sflush_r+0xda>
 8009c82:	bf00      	nop
 8009c84:	20400001 	.word	0x20400001

08009c88 <_fflush_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	690b      	ldr	r3, [r1, #16]
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	b913      	cbnz	r3, 8009c98 <_fflush_r+0x10>
 8009c92:	2500      	movs	r5, #0
 8009c94:	4628      	mov	r0, r5
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	b118      	cbz	r0, 8009ca2 <_fflush_r+0x1a>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <_fflush_r+0x1a>
 8009c9e:	f000 f887 	bl	8009db0 <__sinit>
 8009ca2:	4b14      	ldr	r3, [pc, #80]	; (8009cf4 <_fflush_r+0x6c>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d11b      	bne.n	8009ce0 <_fflush_r+0x58>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0ef      	beq.n	8009c92 <_fflush_r+0xa>
 8009cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cb4:	07d0      	lsls	r0, r2, #31
 8009cb6:	d404      	bmi.n	8009cc2 <_fflush_r+0x3a>
 8009cb8:	0599      	lsls	r1, r3, #22
 8009cba:	d402      	bmi.n	8009cc2 <_fflush_r+0x3a>
 8009cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cbe:	f000 f915 	bl	8009eec <__retarget_lock_acquire_recursive>
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f7ff ff59 	bl	8009b7c <__sflush_r>
 8009cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ccc:	4605      	mov	r5, r0
 8009cce:	07da      	lsls	r2, r3, #31
 8009cd0:	d4e0      	bmi.n	8009c94 <_fflush_r+0xc>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	059b      	lsls	r3, r3, #22
 8009cd6:	d4dd      	bmi.n	8009c94 <_fflush_r+0xc>
 8009cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cda:	f000 f908 	bl	8009eee <__retarget_lock_release_recursive>
 8009cde:	e7d9      	b.n	8009c94 <_fflush_r+0xc>
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <_fflush_r+0x70>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d101      	bne.n	8009cea <_fflush_r+0x62>
 8009ce6:	68ac      	ldr	r4, [r5, #8]
 8009ce8:	e7df      	b.n	8009caa <_fflush_r+0x22>
 8009cea:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <_fflush_r+0x74>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	bf08      	it	eq
 8009cf0:	68ec      	ldreq	r4, [r5, #12]
 8009cf2:	e7da      	b.n	8009caa <_fflush_r+0x22>
 8009cf4:	0800a450 	.word	0x0800a450
 8009cf8:	0800a470 	.word	0x0800a470
 8009cfc:	0800a430 	.word	0x0800a430

08009d00 <std>:
 8009d00:	2300      	movs	r3, #0
 8009d02:	b510      	push	{r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	e9c0 3300 	strd	r3, r3, [r0]
 8009d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d0e:	6083      	str	r3, [r0, #8]
 8009d10:	8181      	strh	r1, [r0, #12]
 8009d12:	6643      	str	r3, [r0, #100]	; 0x64
 8009d14:	81c2      	strh	r2, [r0, #14]
 8009d16:	6183      	str	r3, [r0, #24]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	305c      	adds	r0, #92	; 0x5c
 8009d1e:	f7ff f9cb 	bl	80090b8 <memset>
 8009d22:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <std+0x38>)
 8009d24:	6224      	str	r4, [r4, #32]
 8009d26:	6263      	str	r3, [r4, #36]	; 0x24
 8009d28:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <std+0x3c>)
 8009d2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d2c:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <std+0x40>)
 8009d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <std+0x44>)
 8009d32:	6323      	str	r3, [r4, #48]	; 0x30
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	bf00      	nop
 8009d38:	0800a05d 	.word	0x0800a05d
 8009d3c:	0800a07f 	.word	0x0800a07f
 8009d40:	0800a0b7 	.word	0x0800a0b7
 8009d44:	0800a0db 	.word	0x0800a0db

08009d48 <_cleanup_r>:
 8009d48:	4901      	ldr	r1, [pc, #4]	; (8009d50 <_cleanup_r+0x8>)
 8009d4a:	f000 b8af 	b.w	8009eac <_fwalk_reent>
 8009d4e:	bf00      	nop
 8009d50:	08009c89 	.word	0x08009c89

08009d54 <__sfmoreglue>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	2568      	movs	r5, #104	; 0x68
 8009d58:	1e4a      	subs	r2, r1, #1
 8009d5a:	4355      	muls	r5, r2
 8009d5c:	460e      	mov	r6, r1
 8009d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d62:	f7ff f9fd 	bl	8009160 <_malloc_r>
 8009d66:	4604      	mov	r4, r0
 8009d68:	b140      	cbz	r0, 8009d7c <__sfmoreglue+0x28>
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d70:	300c      	adds	r0, #12
 8009d72:	60a0      	str	r0, [r4, #8]
 8009d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d78:	f7ff f99e 	bl	80090b8 <memset>
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}

08009d80 <__sfp_lock_acquire>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__sfp_lock_acquire+0x8>)
 8009d82:	f000 b8b3 	b.w	8009eec <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	20001564 	.word	0x20001564

08009d8c <__sfp_lock_release>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__sfp_lock_release+0x8>)
 8009d8e:	f000 b8ae 	b.w	8009eee <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	20001564 	.word	0x20001564

08009d98 <__sinit_lock_acquire>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__sinit_lock_acquire+0x8>)
 8009d9a:	f000 b8a7 	b.w	8009eec <__retarget_lock_acquire_recursive>
 8009d9e:	bf00      	nop
 8009da0:	2000155f 	.word	0x2000155f

08009da4 <__sinit_lock_release>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__sinit_lock_release+0x8>)
 8009da6:	f000 b8a2 	b.w	8009eee <__retarget_lock_release_recursive>
 8009daa:	bf00      	nop
 8009dac:	2000155f 	.word	0x2000155f

08009db0 <__sinit>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	4604      	mov	r4, r0
 8009db4:	f7ff fff0 	bl	8009d98 <__sinit_lock_acquire>
 8009db8:	69a3      	ldr	r3, [r4, #24]
 8009dba:	b11b      	cbz	r3, 8009dc4 <__sinit+0x14>
 8009dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc0:	f7ff bff0 	b.w	8009da4 <__sinit_lock_release>
 8009dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <__sinit+0x68>)
 8009dcc:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <__sinit+0x6c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	bf08      	it	eq
 8009dd6:	2301      	moveq	r3, #1
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bf08      	it	eq
 8009ddc:	61a3      	streq	r3, [r4, #24]
 8009dde:	f000 f81f 	bl	8009e20 <__sfp>
 8009de2:	6060      	str	r0, [r4, #4]
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 f81b 	bl	8009e20 <__sfp>
 8009dea:	60a0      	str	r0, [r4, #8]
 8009dec:	4620      	mov	r0, r4
 8009dee:	f000 f817 	bl	8009e20 <__sfp>
 8009df2:	2200      	movs	r2, #0
 8009df4:	2104      	movs	r1, #4
 8009df6:	60e0      	str	r0, [r4, #12]
 8009df8:	6860      	ldr	r0, [r4, #4]
 8009dfa:	f7ff ff81 	bl	8009d00 <std>
 8009dfe:	2201      	movs	r2, #1
 8009e00:	2109      	movs	r1, #9
 8009e02:	68a0      	ldr	r0, [r4, #8]
 8009e04:	f7ff ff7c 	bl	8009d00 <std>
 8009e08:	2202      	movs	r2, #2
 8009e0a:	2112      	movs	r1, #18
 8009e0c:	68e0      	ldr	r0, [r4, #12]
 8009e0e:	f7ff ff77 	bl	8009d00 <std>
 8009e12:	2301      	movs	r3, #1
 8009e14:	61a3      	str	r3, [r4, #24]
 8009e16:	e7d1      	b.n	8009dbc <__sinit+0xc>
 8009e18:	0800a344 	.word	0x0800a344
 8009e1c:	08009d49 	.word	0x08009d49

08009e20 <__sfp>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	4607      	mov	r7, r0
 8009e24:	f7ff ffac 	bl	8009d80 <__sfp_lock_acquire>
 8009e28:	4b1e      	ldr	r3, [pc, #120]	; (8009ea4 <__sfp+0x84>)
 8009e2a:	681e      	ldr	r6, [r3, #0]
 8009e2c:	69b3      	ldr	r3, [r6, #24]
 8009e2e:	b913      	cbnz	r3, 8009e36 <__sfp+0x16>
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff ffbd 	bl	8009db0 <__sinit>
 8009e36:	3648      	adds	r6, #72	; 0x48
 8009e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	d503      	bpl.n	8009e48 <__sfp+0x28>
 8009e40:	6833      	ldr	r3, [r6, #0]
 8009e42:	b30b      	cbz	r3, 8009e88 <__sfp+0x68>
 8009e44:	6836      	ldr	r6, [r6, #0]
 8009e46:	e7f7      	b.n	8009e38 <__sfp+0x18>
 8009e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e4c:	b9d5      	cbnz	r5, 8009e84 <__sfp+0x64>
 8009e4e:	4b16      	ldr	r3, [pc, #88]	; (8009ea8 <__sfp+0x88>)
 8009e50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e54:	60e3      	str	r3, [r4, #12]
 8009e56:	6665      	str	r5, [r4, #100]	; 0x64
 8009e58:	f000 f847 	bl	8009eea <__retarget_lock_init_recursive>
 8009e5c:	f7ff ff96 	bl	8009d8c <__sfp_lock_release>
 8009e60:	2208      	movs	r2, #8
 8009e62:	4629      	mov	r1, r5
 8009e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e6c:	6025      	str	r5, [r4, #0]
 8009e6e:	61a5      	str	r5, [r4, #24]
 8009e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e74:	f7ff f920 	bl	80090b8 <memset>
 8009e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e80:	4620      	mov	r0, r4
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e84:	3468      	adds	r4, #104	; 0x68
 8009e86:	e7d9      	b.n	8009e3c <__sfp+0x1c>
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	f7ff ff62 	bl	8009d54 <__sfmoreglue>
 8009e90:	4604      	mov	r4, r0
 8009e92:	6030      	str	r0, [r6, #0]
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d1d5      	bne.n	8009e44 <__sfp+0x24>
 8009e98:	f7ff ff78 	bl	8009d8c <__sfp_lock_release>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	e7ee      	b.n	8009e80 <__sfp+0x60>
 8009ea2:	bf00      	nop
 8009ea4:	0800a344 	.word	0x0800a344
 8009ea8:	ffff0001 	.word	0xffff0001

08009eac <_fwalk_reent>:
 8009eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	4688      	mov	r8, r1
 8009eb4:	2700      	movs	r7, #0
 8009eb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8009ec2:	d505      	bpl.n	8009ed0 <_fwalk_reent+0x24>
 8009ec4:	6824      	ldr	r4, [r4, #0]
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	d1f7      	bne.n	8009eba <_fwalk_reent+0xe>
 8009eca:	4638      	mov	r0, r7
 8009ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed0:	89ab      	ldrh	r3, [r5, #12]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d907      	bls.n	8009ee6 <_fwalk_reent+0x3a>
 8009ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eda:	3301      	adds	r3, #1
 8009edc:	d003      	beq.n	8009ee6 <_fwalk_reent+0x3a>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	47c0      	blx	r8
 8009ee4:	4307      	orrs	r7, r0
 8009ee6:	3568      	adds	r5, #104	; 0x68
 8009ee8:	e7e9      	b.n	8009ebe <_fwalk_reent+0x12>

08009eea <__retarget_lock_init_recursive>:
 8009eea:	4770      	bx	lr

08009eec <__retarget_lock_acquire_recursive>:
 8009eec:	4770      	bx	lr

08009eee <__retarget_lock_release_recursive>:
 8009eee:	4770      	bx	lr

08009ef0 <__swhatbuf_r>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	4614      	mov	r4, r2
 8009efa:	2900      	cmp	r1, #0
 8009efc:	461d      	mov	r5, r3
 8009efe:	b096      	sub	sp, #88	; 0x58
 8009f00:	da07      	bge.n	8009f12 <__swhatbuf_r+0x22>
 8009f02:	2300      	movs	r3, #0
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	89b3      	ldrh	r3, [r6, #12]
 8009f08:	061a      	lsls	r2, r3, #24
 8009f0a:	d410      	bmi.n	8009f2e <__swhatbuf_r+0x3e>
 8009f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f10:	e00e      	b.n	8009f30 <__swhatbuf_r+0x40>
 8009f12:	466a      	mov	r2, sp
 8009f14:	f000 f908 	bl	800a128 <_fstat_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dbf2      	blt.n	8009f02 <__swhatbuf_r+0x12>
 8009f1c:	9a01      	ldr	r2, [sp, #4]
 8009f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f26:	425a      	negs	r2, r3
 8009f28:	415a      	adcs	r2, r3
 8009f2a:	602a      	str	r2, [r5, #0]
 8009f2c:	e7ee      	b.n	8009f0c <__swhatbuf_r+0x1c>
 8009f2e:	2340      	movs	r3, #64	; 0x40
 8009f30:	2000      	movs	r0, #0
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	b016      	add	sp, #88	; 0x58
 8009f36:	bd70      	pop	{r4, r5, r6, pc}

08009f38 <__smakebuf_r>:
 8009f38:	898b      	ldrh	r3, [r1, #12]
 8009f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f3c:	079d      	lsls	r5, r3, #30
 8009f3e:	4606      	mov	r6, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d507      	bpl.n	8009f54 <__smakebuf_r+0x1c>
 8009f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	6163      	str	r3, [r4, #20]
 8009f50:	b002      	add	sp, #8
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	466a      	mov	r2, sp
 8009f56:	ab01      	add	r3, sp, #4
 8009f58:	f7ff ffca 	bl	8009ef0 <__swhatbuf_r>
 8009f5c:	9900      	ldr	r1, [sp, #0]
 8009f5e:	4605      	mov	r5, r0
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff f8fd 	bl	8009160 <_malloc_r>
 8009f66:	b948      	cbnz	r0, 8009f7c <__smakebuf_r+0x44>
 8009f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6c:	059a      	lsls	r2, r3, #22
 8009f6e:	d4ef      	bmi.n	8009f50 <__smakebuf_r+0x18>
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	f043 0302 	orr.w	r3, r3, #2
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	e7e3      	b.n	8009f44 <__smakebuf_r+0xc>
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <__smakebuf_r+0x7c>)
 8009f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	6020      	str	r0, [r4, #0]
 8009f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	6120      	str	r0, [r4, #16]
 8009f8e:	6163      	str	r3, [r4, #20]
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	b15b      	cbz	r3, 8009fac <__smakebuf_r+0x74>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f9a:	f000 f8d7 	bl	800a14c <_isatty_r>
 8009f9e:	b128      	cbz	r0, 8009fac <__smakebuf_r+0x74>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	89a0      	ldrh	r0, [r4, #12]
 8009fae:	4305      	orrs	r5, r0
 8009fb0:	81a5      	strh	r5, [r4, #12]
 8009fb2:	e7cd      	b.n	8009f50 <__smakebuf_r+0x18>
 8009fb4:	08009d49 	.word	0x08009d49

08009fb8 <memchr>:
 8009fb8:	4603      	mov	r3, r0
 8009fba:	b510      	push	{r4, lr}
 8009fbc:	b2c9      	uxtb	r1, r1
 8009fbe:	4402      	add	r2, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	d101      	bne.n	8009fca <memchr+0x12>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e003      	b.n	8009fd2 <memchr+0x1a>
 8009fca:	7804      	ldrb	r4, [r0, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	428c      	cmp	r4, r1
 8009fd0:	d1f6      	bne.n	8009fc0 <memchr+0x8>
 8009fd2:	bd10      	pop	{r4, pc}

08009fd4 <_raise_r>:
 8009fd4:	291f      	cmp	r1, #31
 8009fd6:	b538      	push	{r3, r4, r5, lr}
 8009fd8:	4604      	mov	r4, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	d904      	bls.n	8009fe8 <_raise_r+0x14>
 8009fde:	2316      	movs	r3, #22
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fea:	b112      	cbz	r2, 8009ff2 <_raise_r+0x1e>
 8009fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ff0:	b94b      	cbnz	r3, 800a006 <_raise_r+0x32>
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 f830 	bl	800a058 <_getpid_r>
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a002:	f000 b817 	b.w	800a034 <_kill_r>
 800a006:	2b01      	cmp	r3, #1
 800a008:	d00a      	beq.n	800a020 <_raise_r+0x4c>
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	d103      	bne.n	800a016 <_raise_r+0x42>
 800a00e:	2316      	movs	r3, #22
 800a010:	6003      	str	r3, [r0, #0]
 800a012:	2001      	movs	r0, #1
 800a014:	e7e7      	b.n	8009fe6 <_raise_r+0x12>
 800a016:	2400      	movs	r4, #0
 800a018:	4628      	mov	r0, r5
 800a01a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a01e:	4798      	blx	r3
 800a020:	2000      	movs	r0, #0
 800a022:	e7e0      	b.n	8009fe6 <_raise_r+0x12>

0800a024 <raise>:
 800a024:	4b02      	ldr	r3, [pc, #8]	; (800a030 <raise+0xc>)
 800a026:	4601      	mov	r1, r0
 800a028:	6818      	ldr	r0, [r3, #0]
 800a02a:	f7ff bfd3 	b.w	8009fd4 <_raise_r>
 800a02e:	bf00      	nop
 800a030:	20000198 	.word	0x20000198

0800a034 <_kill_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	2300      	movs	r3, #0
 800a038:	4d06      	ldr	r5, [pc, #24]	; (800a054 <_kill_r+0x20>)
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	f7f6 fbe6 	bl	8000812 <_kill>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	d102      	bne.n	800a050 <_kill_r+0x1c>
 800a04a:	682b      	ldr	r3, [r5, #0]
 800a04c:	b103      	cbz	r3, 800a050 <_kill_r+0x1c>
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	bf00      	nop
 800a054:	20001558 	.word	0x20001558

0800a058 <_getpid_r>:
 800a058:	f7f6 bbd4 	b.w	8000804 <_getpid>

0800a05c <__sread>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	460c      	mov	r4, r1
 800a060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a064:	f000 f894 	bl	800a190 <_read_r>
 800a068:	2800      	cmp	r0, #0
 800a06a:	bfab      	itete	ge
 800a06c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a06e:	89a3      	ldrhlt	r3, [r4, #12]
 800a070:	181b      	addge	r3, r3, r0
 800a072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a076:	bfac      	ite	ge
 800a078:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07a:	81a3      	strhlt	r3, [r4, #12]
 800a07c:	bd10      	pop	{r4, pc}

0800a07e <__swrite>:
 800a07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a082:	461f      	mov	r7, r3
 800a084:	898b      	ldrh	r3, [r1, #12]
 800a086:	4605      	mov	r5, r0
 800a088:	05db      	lsls	r3, r3, #23
 800a08a:	460c      	mov	r4, r1
 800a08c:	4616      	mov	r6, r2
 800a08e:	d505      	bpl.n	800a09c <__swrite+0x1e>
 800a090:	2302      	movs	r3, #2
 800a092:	2200      	movs	r2, #0
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	f000 f868 	bl	800a16c <_lseek_r>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	4632      	mov	r2, r6
 800a0a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	f000 b817 	b.w	800a0e4 <_write_r>

0800a0b6 <__sseek>:
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0be:	f000 f855 	bl	800a16c <_lseek_r>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	bf15      	itete	ne
 800a0c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d2:	81a3      	strheq	r3, [r4, #12]
 800a0d4:	bf18      	it	ne
 800a0d6:	81a3      	strhne	r3, [r4, #12]
 800a0d8:	bd10      	pop	{r4, pc}

0800a0da <__sclose>:
 800a0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0de:	f000 b813 	b.w	800a108 <_close_r>
	...

0800a0e4 <_write_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4d05      	ldr	r5, [pc, #20]	; (800a104 <_write_r+0x20>)
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f6 fbc4 	bl	8000880 <_write>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_write_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_write_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20001558 	.word	0x20001558

0800a108 <_close_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	2300      	movs	r3, #0
 800a10c:	4d05      	ldr	r5, [pc, #20]	; (800a124 <_close_r+0x1c>)
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f6 fbd0 	bl	80008b8 <_close>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_close_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_close_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20001558 	.word	0x20001558

0800a128 <_fstat_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	2300      	movs	r3, #0
 800a12c:	4d06      	ldr	r5, [pc, #24]	; (800a148 <_fstat_r+0x20>)
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	4611      	mov	r1, r2
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	f7f6 fbca 	bl	80008ce <_fstat>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	d102      	bne.n	800a144 <_fstat_r+0x1c>
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	b103      	cbz	r3, 800a144 <_fstat_r+0x1c>
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	bd38      	pop	{r3, r4, r5, pc}
 800a146:	bf00      	nop
 800a148:	20001558 	.word	0x20001558

0800a14c <_isatty_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	2300      	movs	r3, #0
 800a150:	4d05      	ldr	r5, [pc, #20]	; (800a168 <_isatty_r+0x1c>)
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f6 fbc8 	bl	80008ec <_isatty>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_isatty_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_isatty_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20001558 	.word	0x20001558

0800a16c <_lseek_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	4611      	mov	r1, r2
 800a174:	2200      	movs	r2, #0
 800a176:	4d05      	ldr	r5, [pc, #20]	; (800a18c <_lseek_r+0x20>)
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f6 fbc0 	bl	8000900 <_lseek>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_lseek_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_lseek_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20001558 	.word	0x20001558

0800a190 <_read_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4604      	mov	r4, r0
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	2200      	movs	r2, #0
 800a19a:	4d05      	ldr	r5, [pc, #20]	; (800a1b0 <_read_r+0x20>)
 800a19c:	602a      	str	r2, [r5, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f7f6 fb51 	bl	8000846 <_read>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_read_r+0x1e>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_read_r+0x1e>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	20001558 	.word	0x20001558

0800a1b4 <_gettimeofday>:
 800a1b4:	2258      	movs	r2, #88	; 0x58
 800a1b6:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <_gettimeofday+0xc>)
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	4770      	bx	lr
 800a1c0:	20001558 	.word	0x20001558

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
