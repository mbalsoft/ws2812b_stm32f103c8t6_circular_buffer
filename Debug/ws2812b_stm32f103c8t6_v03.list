
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b094  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b618  0800b618  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b618  0800b618  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b618  0800b618  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b618  0800b618  0001b618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800b620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  200002e0  0800b900  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  0800b900  00021750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a28  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c19  00000000  00000000  00039d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015441  00000000  00000000  0005b392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eba8  00000000  00000000  000707d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  000ff3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00104980  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001049a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e0 	.word	0x200002e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b188 	.word	0x0800b188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e4 	.word	0x200002e4
 8000148:	0800b188 	.word	0x0800b188

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 feed 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f895 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f981 	bl	8000484 <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f961 	bl	8000448 <MX_DMA_Init>
  MX_TIM3_Init();
 8000186:	f000 f8e9 	bl	800035c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800018a:	f008 fcb3 	bl	8008af4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018e:	2300      	movs	r3, #0
 8000190:	75fb      	strb	r3, [r7, #23]
 8000192:	e007      	b.n	80001a4 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000194:	7dfb      	ldrb	r3, [r7, #23]
 8000196:	4a41      	ldr	r2, [pc, #260]	; (800029c <main+0x12c>)
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	3301      	adds	r3, #1
 80001a2:	75fb      	strb	r3, [r7, #23]
 80001a4:	7dfb      	ldrb	r3, [r7, #23]
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	d9f4      	bls.n	8000194 <main+0x24>
  }

  ws2812b_init();
 80001aa:	f000 fe0d 	bl	8000dc8 <ws2812b_init>

  srand( (unsigned) time( NULL ));
 80001ae:	2000      	movs	r0, #0
 80001b0:	f009 fca2 	bl	8009af8 <time>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f009 faac 	bl	8009714 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int counter = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	613b      	str	r3, [r7, #16]
  int led_loop = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60fb      	str	r3, [r7, #12]
  uint16_t volume = 128; // max 256
 80001c4:	2380      	movs	r3, #128	; 0x80
 80001c6:	80fb      	strh	r3, [r7, #6]
  uint8_t r = gamma8[ rand() % volume ];
 80001c8:	f009 fad2 	bl	8009770 <rand>
 80001cc:	4602      	mov	r2, r0
 80001ce:	88fb      	ldrh	r3, [r7, #6]
 80001d0:	fb92 f1f3 	sdiv	r1, r2, r3
 80001d4:	fb03 f301 	mul.w	r3, r3, r1
 80001d8:	1ad3      	subs	r3, r2, r3
 80001da:	4a31      	ldr	r2, [pc, #196]	; (80002a0 <main+0x130>)
 80001dc:	5cd3      	ldrb	r3, [r2, r3]
 80001de:	72fb      	strb	r3, [r7, #11]
  uint8_t g = gamma8[ rand() % volume ];
 80001e0:	f009 fac6 	bl	8009770 <rand>
 80001e4:	4602      	mov	r2, r0
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001ec:	fb03 f301 	mul.w	r3, r3, r1
 80001f0:	1ad3      	subs	r3, r2, r3
 80001f2:	4a2b      	ldr	r2, [pc, #172]	; (80002a0 <main+0x130>)
 80001f4:	5cd3      	ldrb	r3, [r2, r3]
 80001f6:	72bb      	strb	r3, [r7, #10]
  uint8_t b = gamma8[ rand() % volume ];
 80001f8:	f009 faba 	bl	8009770 <rand>
 80001fc:	4602      	mov	r2, r0
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	fb92 f1f3 	sdiv	r1, r2, r3
 8000204:	fb03 f301 	mul.w	r3, r3, r1
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4a25      	ldr	r2, [pc, #148]	; (80002a0 <main+0x130>)
 800020c:	5cd3      	ldrb	r3, [r2, r3]
 800020e:	727b      	strb	r3, [r7, #9]
//	  	  ws2812b_set_color( led, r, g, b );
//	  	  ws2812b_update();
//	  	  HAL_Delay( 100 );
//	  	}

	send_queue_via_usb();
 8000210:	f000 fb94 	bl	800093c <send_queue_via_usb>
	HAL_Delay( 1 );
 8000214:	2001      	movs	r0, #1
 8000216:	f000 feff 	bl	8001018 <HAL_Delay>

	counter++;
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	3301      	adds	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
	if( counter >= 100 && effect_on_off ) {
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	2b63      	cmp	r3, #99	; 0x63
 8000224:	ddf4      	ble.n	8000210 <main+0xa0>
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <main+0x134>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f0      	beq.n	8000210 <main+0xa0>
		counter = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
		led_loop++;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	3301      	adds	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
		if( led_loop >= LED_N ) {
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b07      	cmp	r3, #7
 800023c:	dd25      	ble.n	800028a <main+0x11a>
			led_loop = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
			r = gamma8[ rand() % volume ];
 8000242:	f009 fa95 	bl	8009770 <rand>
 8000246:	4602      	mov	r2, r0
 8000248:	88fb      	ldrh	r3, [r7, #6]
 800024a:	fb92 f1f3 	sdiv	r1, r2, r3
 800024e:	fb03 f301 	mul.w	r3, r3, r1
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <main+0x130>)
 8000256:	5cd3      	ldrb	r3, [r2, r3]
 8000258:	72fb      	strb	r3, [r7, #11]
			g = gamma8[ rand() % volume ];
 800025a:	f009 fa89 	bl	8009770 <rand>
 800025e:	4602      	mov	r2, r0
 8000260:	88fb      	ldrh	r3, [r7, #6]
 8000262:	fb92 f1f3 	sdiv	r1, r2, r3
 8000266:	fb03 f301 	mul.w	r3, r3, r1
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0x130>)
 800026e:	5cd3      	ldrb	r3, [r2, r3]
 8000270:	72bb      	strb	r3, [r7, #10]
			b = gamma8[ rand() % volume ];
 8000272:	f009 fa7d 	bl	8009770 <rand>
 8000276:	4602      	mov	r2, r0
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	fb92 f1f3 	sdiv	r1, r2, r3
 800027e:	fb03 f301 	mul.w	r3, r3, r1
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <main+0x130>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	727b      	strb	r3, [r7, #9]
		}
		ws2812b_set_color( led_loop, r, g, b );
 800028a:	68f8      	ldr	r0, [r7, #12]
 800028c:	7a7b      	ldrb	r3, [r7, #9]
 800028e:	7aba      	ldrb	r2, [r7, #10]
 8000290:	7af9      	ldrb	r1, [r7, #11]
 8000292:	f000 fe03 	bl	8000e9c <ws2812b_set_color>
		ws2812b_update();
 8000296:	f000 fdc7 	bl	8000e28 <ws2812b_update>
	send_queue_via_usb();
 800029a:	e7b9      	b.n	8000210 <main+0xa0>
 800029c:	200007ac 	.word	0x200007ac
 80002a0:	0800b250 	.word	0x0800b250
 80002a4:	200003fe 	.word	0x200003fe

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f009 f97e 	bl	80095b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f824 	bl	800334c <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800030a:	f000 fb8f 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fa8e 	bl	800384c <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000336:	f000 fb79 	bl	8000a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800033a:	2310      	movs	r3, #16
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f003 fbe9 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000350:	f000 fb6c 	bl	8000a2c <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3750      	adds	r7, #80	; 0x50
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08e      	sub	sp, #56	; 0x38
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000370:	f107 0320 	add.w	r3, r7, #32
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
 8000388:	615a      	str	r2, [r3, #20]
 800038a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800038c:	4b2c      	ldr	r3, [pc, #176]	; (8000440 <MX_TIM3_Init+0xe4>)
 800038e:	4a2d      	ldr	r2, [pc, #180]	; (8000444 <MX_TIM3_Init+0xe8>)
 8000390:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_TIM3_Init+0xe4>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000398:	4b29      	ldr	r3, [pc, #164]	; (8000440 <MX_TIM3_Init+0xe4>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003a0:	2259      	movs	r2, #89	; 0x59
 80003a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003b0:	4823      	ldr	r0, [pc, #140]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003b2:	f003 fc69 	bl	8003c88 <HAL_TIM_Base_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80003bc:	f000 fb36 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ca:	4619      	mov	r1, r3
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003ce:	f004 f8ad 	bl	800452c <HAL_TIM_ConfigClockSource>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80003d8:	f000 fb28 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003dc:	4818      	ldr	r0, [pc, #96]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003de:	f003 fced 	bl	8003dbc <HAL_TIM_PWM_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80003e8:	f000 fb20 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003f4:	f107 0320 	add.w	r3, r7, #32
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	; (8000440 <MX_TIM3_Init+0xe4>)
 80003fc:	f004 fd0e 	bl	8004e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000406:	f000 fb11 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040a:	2360      	movs	r3, #96	; 0x60
 800040c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	4807      	ldr	r0, [pc, #28]	; (8000440 <MX_TIM3_Init+0xe4>)
 8000422:	f003 ffc5 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800042c:	f000 fafe 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <MX_TIM3_Init+0xe4>)
 8000432:	f000 fb89 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000436:	bf00      	nop
 8000438:	3738      	adds	r7, #56	; 0x38
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000720 	.word	0x20000720
 8000444:	40000400 	.word	0x40000400

08000448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <MX_DMA_Init+0x38>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_DMA_Init+0x38>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2010      	movs	r0, #16
 800046c:	f000 fecf 	bl	800120e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000470:	2010      	movs	r0, #16
 8000472:	f000 fee8 	bl	8001246 <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <MX_GPIO_Init+0x90>)
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0310 	and.w	r3, r3, #16
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a17      	ldr	r2, [pc, #92]	; (8000514 <MX_GPIO_Init+0x90>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <MX_GPIO_Init+0x90>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <MX_GPIO_Init+0x94>)
 80004e8:	f001 fa3a 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_GPIO_Init+0x94>)
 8000506:	f001 f8a7 	bl	8001658 <HAL_GPIO_Init>

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40011000 	.word	0x40011000

0800051c <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	wait_for_CDC_transmit_ready();
 8000526:	f008 fc39 	bl	8008d9c <wait_for_CDC_transmit_ready>
	CDC_Transmit_FS( txBuf, buf_len );
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f008 fc0f 	bl	8008d50 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <welcome>:

void welcome(void) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <welcome+0x40>)
 8000544:	f7ff fe0c 	bl	8000160 <strlen>
 8000548:	4604      	mov	r4, r0
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <welcome+0x44>)
 800054c:	f7ff fe08 	bl	8000160 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	4423      	add	r3, r4
 8000554:	4618      	mov	r0, r3
 8000556:	f009 f81f 	bl	8009598 <malloc>
 800055a:	4603      	mov	r3, r0
 800055c:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <welcome+0x40>)
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f009 f9d3 	bl	800990c <strcpy>
	strcat( tmp_buf, prompt );
 8000566:	4906      	ldr	r1, [pc, #24]	; (8000580 <welcome+0x44>)
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f009 f9c0 	bl	80098ee <strcat>
	write_to_future_send_via_usb( tmp_buf );
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 fa20 	bl	80009b4 <write_to_future_send_via_usb>
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	20000008 	.word	0x20000008
 8000580:	20000000 	.word	0x20000000

08000584 <get_command>:

void get_command(void) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b093      	sub	sp, #76	; 0x4c
 8000588:	af00      	add	r7, sp, #0
	char *out_str;
	char *result[ 5 ];
	input_usb_buffer[ in_usb_buf_pos ] = 0;
 800058a:	4ba9      	ldr	r3, [pc, #676]	; (8000830 <get_command+0x2ac>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4ba8      	ldr	r3, [pc, #672]	; (8000834 <get_command+0x2b0>)
 8000592:	2100      	movs	r1, #0
 8000594:	5499      	strb	r1, [r3, r2]
	strcat( input_usb_buffer, " " );
 8000596:	48a7      	ldr	r0, [pc, #668]	; (8000834 <get_command+0x2b0>)
 8000598:	f7ff fde2 	bl	8000160 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4ba4      	ldr	r3, [pc, #656]	; (8000834 <get_command+0x2b0>)
 80005a2:	4413      	add	r3, r2
 80005a4:	49a4      	ldr	r1, [pc, #656]	; (8000838 <get_command+0x2b4>)
 80005a6:	461a      	mov	r2, r3
 80005a8:	460b      	mov	r3, r1
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	8013      	strh	r3, [r2, #0]
	char *token = strtok( input_usb_buffer, " " );
 80005ae:	49a2      	ldr	r1, [pc, #648]	; (8000838 <get_command+0x2b4>)
 80005b0:	48a0      	ldr	r0, [pc, #640]	; (8000834 <get_command+0x2b0>)
 80005b2:	f009 f9b3 	bl	800991c <strtok>
 80005b6:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t loop = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if( token != NULL ) {
 80005be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d02f      	beq.n	8000624 <get_command+0xa0>
		while( token != NULL && loop < 5 ) {
 80005c4:	e026      	b.n	8000614 <get_command+0x90>
			result[ loop ] = malloc( strlen( token ) * sizeof( char ));
 80005c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80005c8:	f7ff fdca 	bl	8000160 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 80005d2:	4618      	mov	r0, r3
 80005d4:	f008 ffe0 	bl	8009598 <malloc>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	00a3      	lsls	r3, r4, #2
 80005de:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80005e2:	440b      	add	r3, r1
 80005e4:	f843 2c20 	str.w	r2, [r3, #-32]
			strcpy( result[ loop ], token );
 80005e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80005f2:	4413      	add	r3, r2
 80005f4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80005f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 f986 	bl	800990c <strcpy>
			loop++;
 8000600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000604:	3301      	adds	r3, #1
 8000606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		    token = strtok( NULL, " " );
 800060a:	498b      	ldr	r1, [pc, #556]	; (8000838 <get_command+0x2b4>)
 800060c:	2000      	movs	r0, #0
 800060e:	f009 f985 	bl	800991c <strtok>
 8000612:	6478      	str	r0, [r7, #68]	; 0x44
		while( token != NULL && loop < 5 ) {
 8000614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000616:	2b00      	cmp	r3, #0
 8000618:	d017      	beq.n	800064a <get_command+0xc6>
 800061a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800061e:	2b04      	cmp	r3, #4
 8000620:	d9d1      	bls.n	80005c6 <get_command+0x42>
 8000622:	e012      	b.n	800064a <get_command+0xc6>
		}
	}
	else {
		result[ 0 ] = malloc( strlen( input_usb_buffer ) * sizeof( char ));
 8000624:	4883      	ldr	r0, [pc, #524]	; (8000834 <get_command+0x2b0>)
 8000626:	f7ff fd9b 	bl	8000160 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	4618      	mov	r0, r3
 800062e:	f008 ffb3 	bl	8009598 <malloc>
 8000632:	4603      	mov	r3, r0
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
		strcpy( result[ 0 ], input_usb_buffer );
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	497e      	ldr	r1, [pc, #504]	; (8000834 <get_command+0x2b0>)
 800063a:	4618      	mov	r0, r3
 800063c:	f009 f966 	bl	800990c <strcpy>
		loop++;
 8000640:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000644:	3301      	adds	r3, #1
 8000646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	}

    if( strcmp( result[ 0 ], "help" ) == 0 || strcmp( result[ 0 ], "?" ) == 0 ) {
 800064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064c:	497b      	ldr	r1, [pc, #492]	; (800083c <get_command+0x2b8>)
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fd7c 	bl	800014c <strcmp>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d007      	beq.n	800066a <get_command+0xe6>
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	4978      	ldr	r1, [pc, #480]	; (8000840 <get_command+0x2bc>)
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fd74 	bl	800014c <strcmp>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d110      	bne.n	800068c <get_command+0x108>
    	out_str = malloc( strlen( help ) * sizeof( char ));
 800066a:	4876      	ldr	r0, [pc, #472]	; (8000844 <get_command+0x2c0>)
 800066c:	f7ff fd78 	bl	8000160 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	4618      	mov	r0, r3
 8000674:	f008 ff90 	bl	8009598 <malloc>
 8000678:	4603      	mov	r3, r0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
    	strcpy( out_str, help );
 800067c:	4971      	ldr	r1, [pc, #452]	; (8000844 <get_command+0x2c0>)
 800067e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000680:	f009 f944 	bl	800990c <strcpy>
    	write_to_future_send_via_usb( out_str );
 8000684:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000686:	f000 f995 	bl	80009b4 <write_to_future_send_via_usb>
 800068a:	e130      	b.n	80008ee <get_command+0x36a>
    }
    else if( strcmp( result[ 0 ], "on" ) == 0 ) {
 800068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068e:	496e      	ldr	r1, [pc, #440]	; (8000848 <get_command+0x2c4>)
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd5b 	bl	800014c <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <get_command+0x126>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	486a      	ldr	r0, [pc, #424]	; (800084c <get_command+0x2c8>)
 80006a4:	f001 f95c 	bl	8001960 <HAL_GPIO_WritePin>
 80006a8:	e132      	b.n	8000910 <get_command+0x38c>
    }
    else if( strcmp( result[ 0 ], "off" ) == 0 ) {
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	4968      	ldr	r1, [pc, #416]	; (8000850 <get_command+0x2cc>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4c 	bl	800014c <strcmp>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <get_command+0x144>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4862      	ldr	r0, [pc, #392]	; (800084c <get_command+0x2c8>)
 80006c2:	f001 f94d 	bl	8001960 <HAL_GPIO_WritePin>
 80006c6:	e123      	b.n	8000910 <get_command+0x38c>
    }
    else if( strcmp( result[ 0 ], "toggle" ) == 0 ) {
 80006c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ca:	4962      	ldr	r1, [pc, #392]	; (8000854 <get_command+0x2d0>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fd3d 	bl	800014c <strcmp>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d105      	bne.n	80006e4 <get_command+0x160>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	485b      	ldr	r0, [pc, #364]	; (800084c <get_command+0x2c8>)
 80006de:	f001 f957 	bl	8001990 <HAL_GPIO_TogglePin>
 80006e2:	e115      	b.n	8000910 <get_command+0x38c>
    }
    else if( strcmp( result[ 0 ], "led" ) == 0 ) {
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e6:	495c      	ldr	r1, [pc, #368]	; (8000858 <get_command+0x2d4>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd2f 	bl	800014c <strcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f040 80ea 	bne.w	80008ca <get_command+0x346>
    	if( loop >= 3 ) {
 80006f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	f240 8108 	bls.w	8000910 <get_command+0x38c>
    		uint16_t led_no = atoi( result[ 1 ]) - 1;
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	4618      	mov	r0, r3
 8000704:	f008 ff1a 	bl	800953c <atoi>
 8000708:	4603      	mov	r3, r0
 800070a:	b29b      	uxth	r3, r3
 800070c:	3b01      	subs	r3, #1
 800070e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    		uint32_t r = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    		uint32_t g = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
    		uint32_t b = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    		if( strcmp( result[ 2 ], "off" ) == 0 ) {
 800071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000720:	494b      	ldr	r1, [pc, #300]	; (8000850 <get_command+0x2cc>)
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd12 	bl	800014c <strcmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d11a      	bne.n	8000764 <get_command+0x1e0>
    			ws2812b_set_color( led_no, r, g, b );
 800072e:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	b2d9      	uxtb	r1, r3
 8000736:	6a3b      	ldr	r3, [r7, #32]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f000 fbad 	bl	8000e9c <ws2812b_set_color>
				ws2812b_update();
 8000742:	f000 fb71 	bl	8000e28 <ws2812b_update>
				out_str = malloc( 50 * sizeof( char ));
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f008 ff26 	bl	8009598 <malloc>
 800074c:	4603      	mov	r3, r0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 8000750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000752:	4a42      	ldr	r2, [pc, #264]	; (800085c <get_command+0x2d8>)
 8000754:	8811      	ldrh	r1, [r2, #0]
 8000756:	7892      	ldrb	r2, [r2, #2]
 8000758:	8019      	strh	r1, [r3, #0]
 800075a:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 800075c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800075e:	f000 f929 	bl	80009b4 <write_to_future_send_via_usb>
 8000762:	e0d5      	b.n	8000910 <get_command+0x38c>
    		}
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b23      	cmp	r3, #35	; 0x23
 800076a:	d17d      	bne.n	8000868 <get_command+0x2e4>
 800076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fcf6 	bl	8000160 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	2b06      	cmp	r3, #6
 8000778:	d976      	bls.n	8000868 <get_command+0x2e4>
        		char r_str[] = "0x00";
 800077a:	4a39      	ldr	r2, [pc, #228]	; (8000860 <get_command+0x2dc>)
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000784:	6018      	str	r0, [r3, #0]
 8000786:	3304      	adds	r3, #4
 8000788:	7019      	strb	r1, [r3, #0]
    			r_str[ 2 ] = result[ 2 ][ 1 ];
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	75bb      	strb	r3, [r7, #22]
    			r_str[ 3 ] = result[ 2 ][ 2 ];
 8000790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	75fb      	strb	r3, [r7, #23]
    			sscanf( r_str, "%x", &r );
 8000796:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4931      	ldr	r1, [pc, #196]	; (8000864 <get_command+0x2e0>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 f835 	bl	8009810 <siscanf>
        		char g_str[] = "0x00";
 80007a6:	4a2e      	ldr	r2, [pc, #184]	; (8000860 <get_command+0x2dc>)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b0:	6018      	str	r0, [r3, #0]
 80007b2:	3304      	adds	r3, #4
 80007b4:	7019      	strb	r1, [r3, #0]
    			g_str[ 2 ] = result[ 2 ][ 3 ];
 80007b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	73bb      	strb	r3, [r7, #14]
    			g_str[ 3 ] = result[ 2 ][ 4 ];
 80007bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	73fb      	strb	r3, [r7, #15]
    			sscanf( g_str, "%x", &g );
 80007c2:	f107 0220 	add.w	r2, r7, #32
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4926      	ldr	r1, [pc, #152]	; (8000864 <get_command+0x2e0>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f009 f81f 	bl	8009810 <siscanf>
        		char b_str[] = "0x00";
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <get_command+0x2dc>)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	7019      	strb	r1, [r3, #0]
    			b_str[ 2 ] = result[ 2 ][ 5 ];
 80007e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	71bb      	strb	r3, [r7, #6]
    			b_str[ 3 ] = result[ 2 ][ 6 ];
 80007e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e8:	799b      	ldrb	r3, [r3, #6]
 80007ea:	71fb      	strb	r3, [r7, #7]
    			sscanf( b_str, "%x", &b );
 80007ec:	f107 021c 	add.w	r2, r7, #28
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	491c      	ldr	r1, [pc, #112]	; (8000864 <get_command+0x2e0>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f009 f80b 	bl	8009810 <siscanf>
    			ws2812b_set_color( led_no, r, g, b );
 80007fa:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 80007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000800:	b2d9      	uxtb	r1, r3
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f000 fb47 	bl	8000e9c <ws2812b_set_color>
			    ws2812b_update();
 800080e:	f000 fb0b 	bl	8000e28 <ws2812b_update>
			    out_str = malloc( 50 * sizeof( char ));
 8000812:	2032      	movs	r0, #50	; 0x32
 8000814:	f008 fec0 	bl	8009598 <malloc>
 8000818:	4603      	mov	r3, r0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 800081c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <get_command+0x2d8>)
 8000820:	8811      	ldrh	r1, [r2, #0]
 8000822:	7892      	ldrb	r2, [r2, #2]
 8000824:	8019      	strh	r1, [r3, #0]
 8000826:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 8000828:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800082a:	f000 f8c3 	bl	80009b4 <write_to_future_send_via_usb>
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 800082e:	e05e      	b.n	80008ee <get_command+0x36a>
 8000830:	200003fc 	.word	0x200003fc
 8000834:	200002fc 	.word	0x200002fc
 8000838:	0800b1a0 	.word	0x0800b1a0
 800083c:	0800b1a4 	.word	0x0800b1a4
 8000840:	0800b1ac 	.word	0x0800b1ac
 8000844:	2000001c 	.word	0x2000001c
 8000848:	0800b1b0 	.word	0x0800b1b0
 800084c:	40011000 	.word	0x40011000
 8000850:	0800b1b4 	.word	0x0800b1b4
 8000854:	0800b1b8 	.word	0x0800b1b8
 8000858:	0800b1c0 	.word	0x0800b1c0
 800085c:	0800b1c4 	.word	0x0800b1c4
 8000860:	0800b1d4 	.word	0x0800b1d4
 8000864:	0800b1c8 	.word	0x0800b1c8
    		}
    		else if( loop >= 5 ) {
 8000868:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800086c:	2b04      	cmp	r3, #4
 800086e:	d94f      	bls.n	8000910 <get_command+0x38c>
    			r = atoi( result[ 2 ]);
 8000870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000872:	4618      	mov	r0, r3
 8000874:	f008 fe62 	bl	800953c <atoi>
 8000878:	4603      	mov	r3, r0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    			g = atoi( result[ 3 ]);
 800087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087e:	4618      	mov	r0, r3
 8000880:	f008 fe5c 	bl	800953c <atoi>
 8000884:	4603      	mov	r3, r0
 8000886:	623b      	str	r3, [r7, #32]
    			b = atoi( result[ 4 ]);
 8000888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fe56 	bl	800953c <atoi>
 8000890:	4603      	mov	r3, r0
 8000892:	61fb      	str	r3, [r7, #28]
        		ws2812b_set_color( led_no, r, g, b );
 8000894:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	b2d9      	uxtb	r1, r3
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f000 fafa 	bl	8000e9c <ws2812b_set_color>
    			ws2812b_update();
 80008a8:	f000 fabe 	bl	8000e28 <ws2812b_update>
    			out_str = malloc( 50 * sizeof( char ));
 80008ac:	2032      	movs	r0, #50	; 0x32
 80008ae:	f008 fe73 	bl	8009598 <malloc>
 80008b2:	4603      	mov	r3, r0
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 80008b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <get_command+0x3a8>)
 80008ba:	8811      	ldrh	r1, [r2, #0]
 80008bc:	7892      	ldrb	r2, [r2, #2]
 80008be:	8019      	strh	r1, [r3, #0]
 80008c0:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 80008c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008c4:	f000 f876 	bl	80009b4 <write_to_future_send_via_usb>
 80008c8:	e022      	b.n	8000910 <get_command+0x38c>
    		}
    	}
    }
    else if( strcmp( result[ 0 ], "effect" ) == 0 ) {
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	4918      	ldr	r1, [pc, #96]	; (8000930 <get_command+0x3ac>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc3c 	bl	800014c <strcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11a      	bne.n	8000910 <get_command+0x38c>
    	effect_on_off = ! effect_on_off;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <get_command+0x3b0>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <get_command+0x3b0>)
 80008ec:	701a      	strb	r2, [r3, #0]
    }

    while( loop > 0 ) {
 80008ee:	e00f      	b.n	8000910 <get_command+0x38c>
    	loop--;
 80008f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80008f4:	3b01      	subs	r3, #1
 80008f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    	free( result[ loop ]);
 80008fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000904:	4413      	add	r3, r2
 8000906:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fe4c 	bl	80095a8 <free>
    while( loop > 0 ) {
 8000910:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1eb      	bne.n	80008f0 <get_command+0x36c>
    }
	in_usb_buf_pos = 0;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <get_command+0x3b4>)
 800091a:	2200      	movs	r2, #0
 800091c:	801a      	strh	r2, [r3, #0]
	send_prompt();
 800091e:	f000 f86b 	bl	80009f8 <send_prompt>
}
 8000922:	bf00      	nop
 8000924:	374c      	adds	r7, #76	; 0x4c
 8000926:	46bd      	mov	sp, r7
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	bf00      	nop
 800092c:	0800b1c4 	.word	0x0800b1c4
 8000930:	0800b1cc 	.word	0x0800b1cc
 8000934:	200003fe 	.word	0x200003fe
 8000938:	200003fc 	.word	0x200003fc

0800093c <send_queue_via_usb>:

void send_queue_via_usb(void) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e02b      	b.n	80009a0 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] != NULL && strlen( output_usb_buffer[ loop ]) > 0 ) {
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <send_queue_via_usb+0x74>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d022      	beq.n	800099a <send_queue_via_usb+0x5e>
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <send_queue_via_usb+0x74>)
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d01b      	beq.n	800099a <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <send_queue_via_usb+0x74>)
 8000966:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <send_queue_via_usb+0x74>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fbf4 	bl	8000160 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	4619      	mov	r1, r3
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff fdcd 	bl	800051c <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <send_queue_via_usb+0x74>)
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	4618      	mov	r0, r3
 800098c:	f008 fe0c 	bl	80095a8 <free>
			output_usb_buffer[ loop ] = NULL;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <send_queue_via_usb+0x74>)
 8000994:	2100      	movs	r1, #0
 8000996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	3301      	adds	r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d9d0      	bls.n	8000948 <send_queue_via_usb+0xc>
		}
	}
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	200007ac 	.word	0x200007ac

080009b4 <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 80009c0:	e002      	b.n	80009c8 <write_to_future_send_via_usb+0x14>
		loop++;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d805      	bhi.n	80009da <write_to_future_send_via_usb+0x26>
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <write_to_future_send_via_usb+0x40>)
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1f3      	bne.n	80009c2 <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d804      	bhi.n	80009ea <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	4904      	ldr	r1, [pc, #16]	; (80009f4 <write_to_future_send_via_usb+0x40>)
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200007ac 	.word	0x200007ac

080009f8 <send_prompt>:

void send_prompt(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( strlen( prompt ) * sizeof( char ));
 80009fe:	480a      	ldr	r0, [pc, #40]	; (8000a28 <send_prompt+0x30>)
 8000a00:	f7ff fbae 	bl	8000160 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f008 fdc6 	bl	8009598 <malloc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, prompt );
 8000a10:	4905      	ldr	r1, [pc, #20]	; (8000a28 <send_prompt+0x30>)
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f008 ff7a 	bl	800990c <strcpy>
	write_to_future_send_via_usb( tmp_buf );
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ffcb 	bl	80009b4 <write_to_future_send_via_usb>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000000 	.word	0x20000000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_MspInit+0x60>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_MspInit+0x60>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000

08000a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_TIM_Base_MspInit+0x9c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d140      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <HAL_TIM_Base_MspInit+0xa0>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <HAL_TIM_Base_MspInit+0xa0>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <HAL_TIM_Base_MspInit+0xa0>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_TIM_Base_MspInit+0xa8>)
 8000aca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ace:	2210      	movs	r2, #16
 8000ad0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000afa:	f000 fbbf 	bl	800127c <HAL_DMA_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8000b04:	f7ff ff92 	bl	8000a2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <HAL_TIM_Base_MspInit+0xa4>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	201d      	movs	r0, #29
 8000b26:	f000 fb72 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b2a:	201d      	movs	r0, #29
 8000b2c:	f000 fb8b 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	20000768 	.word	0x20000768
 8000b44:	4002006c 	.word	0x4002006c

08000b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_TIM_MspPostInit+0x58>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d117      	bne.n	8000b98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_TIM_MspPostInit+0x60>)
 8000b94:	f000 fd60 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <HardFault_Handler+0x4>

08000bbe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <MemManage_Handler+0x4>

08000bc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <BusFault_Handler+0x4>

08000bca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f9f2 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <DMA1_Channel6_IRQHandler+0x10>)
 8000c06:	f000 fbf3 	bl	80013f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000768 	.word	0x20000768

08000c14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c1a:	f001 f803 	bl	8001c24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001454 	.word	0x20001454

08000c28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM3_IRQHandler+0x10>)
 8000c2e:	f003 fab7 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000720 	.word	0x20000720

08000c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <_kill>:

int _kill(int pid, int sig)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c54:	f008 fc76 	bl	8009544 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2216      	movs	r2, #22
 8000c5c:	601a      	str	r2, [r3, #0]
	return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_exit>:

void _exit (int status)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c72:	f04f 31ff 	mov.w	r1, #4294967295
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffe7 	bl	8000c4a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c7c:	e7fe      	b.n	8000c7c <_exit+0x12>

08000c7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e00a      	b.n	8000ca6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c90:	f3af 8000 	nop.w
 8000c94:	4601      	mov	r1, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbf0      	blt.n	8000c90 <_read+0x12>
	}

return len;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e009      	b.n	8000cde <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbf1      	blt.n	8000cca <_write+0x12>
	}
	return len;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_close>:

int _close(int file)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d16:	605a      	str	r2, [r3, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <_isatty>:

int _isatty(int file)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f008 fbe0 	bl	8009544 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20005000 	.word	0x20005000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000400 	.word	0x20000400
 8000db8:	20001750 	.word	0x20001750

08000dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e007      	b.n	8000de4 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <ws2812b_init+0x58>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b2f      	cmp	r3, #47	; 0x2f
 8000de8:	ddf4      	ble.n	8000dd4 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e007      	b.n	8000e00 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3330      	adds	r3, #48	; 0x30
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <ws2812b_init+0x58>)
 8000df6:	2120      	movs	r1, #32
 8000df8:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2bbf      	cmp	r3, #191	; 0xbf
 8000e04:	ddf4      	ble.n	8000df0 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 90; //100;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <ws2812b_init+0x58>)
 8000e08:	225a      	movs	r2, #90	; 0x5a
 8000e0a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  HAL_TIM_Base_Start(&htim3);
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <ws2812b_init+0x5c>)
 8000e10:	f002 ff8a 	bl	8003d28 <HAL_TIM_Base_Start>
  ws2812b_update();
 8000e14:	f000 f808 	bl	8000e28 <ws2812b_update>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000404 	.word	0x20000404
 8000e24:	20000720 	.word	0x20000720

08000e28 <ws2812b_update>:

void ws2812b_update(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000e2c:	23f1      	movs	r3, #241	; 0xf1
 8000e2e:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <ws2812b_update+0x14>)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <ws2812b_update+0x18>)
 8000e34:	f003 f81a 	bl	8003e6c <HAL_TIM_PWM_Start_DMA>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000404 	.word	0x20000404
 8000e40:	20000720 	.word	0x20000720

08000e44 <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <set_byte+0x40>
    if (value & 0x80) {
 8000e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da06      	bge.n	8000e6c <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <set_byte+0x54>)
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	54d1      	strb	r1, [r2, r3]
 8000e6a:	e005      	b.n	8000e78 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <set_byte+0x54>)
 8000e74:	2120      	movs	r1, #32
 8000e76:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	dde5      	ble.n	8000e56 <set_byte+0x12>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000404 	.word	0x20000404

08000e9c <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	70fb      	strb	r3, [r7, #3]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70bb      	strb	r3, [r7, #2]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	d820      	bhi.n	8000efe <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	3330      	adds	r3, #48	; 0x30
 8000ec8:	78ba      	ldrb	r2, [r7, #2]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffb9 	bl	8000e44 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	3338      	adds	r3, #56	; 0x38
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffae 	bl	8000e44 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	3340      	adds	r3, #64	; 0x40
 8000ef4:	787a      	ldrb	r2, [r7, #1]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ffa3 	bl	8000e44 <set_byte>
	}
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2e:	f7ff ff45 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f008 fb0d 	bl	8009550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff f91b 	bl	8000170 <main>
  bx lr
 8000f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8000f44:	0800b620 	.word	0x0800b620
  ldr r2, =_sbss
 8000f48:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8000f4c:	20001750 	.word	0x20001750

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x28>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f947 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fd62 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f95f 	bl	8001262 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f927 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000100 	.word	0x20000100
 8000fd8:	20000108 	.word	0x20000108
 8000fdc:	20000104 	.word	0x20000104

08000fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <HAL_IncTick+0x20>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000108 	.word	0x20000108
 8001000:	200007bc 	.word	0x200007bc

08001004 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200007bc 	.word	0x200007bc

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff0 	bl	8001004 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffe0 	bl	8001004 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000108 	.word	0x20000108

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4906      	ldr	r1, [pc, #24]	; (80010f8 <__NVIC_EnableIRQ+0x34>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff90 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff2d 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff42 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff35 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e043      	b.n	800131a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_DMA_Init+0xa8>)
 800129a:	4413      	add	r3, r2
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_DMA_Init+0xac>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	009a      	lsls	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_DMA_Init+0xb0>)
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	bffdfff8 	.word	0xbffdfff8
 8001328:	cccccccd 	.word	0xcccccccd
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Start_IT+0x20>
 800134c:	2302      	movs	r3, #2
 800134e:	e04a      	b.n	80013e6 <HAL_DMA_Start_IT+0xb6>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800135e:	2b01      	cmp	r3, #1
 8001360:	d13a      	bne.n	80013d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 f938 	bl	80015fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 020e 	orr.w	r2, r2, #14
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0204 	bic.w	r2, r2, #4
 80013b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 020a 	orr.w	r2, r2, #10
 80013c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e005      	b.n	80013e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
 80013e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2204      	movs	r2, #4
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d04f      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xc8>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d04a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a66      	ldr	r2, [pc, #408]	; (80015e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d029      	beq.n	800149e <HAL_DMA_IRQHandler+0xae>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <HAL_DMA_IRQHandler+0xaa>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a63      	ldr	r2, [pc, #396]	; (80015e8 <HAL_DMA_IRQHandler+0x1f8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01a      	beq.n	8001494 <HAL_DMA_IRQHandler+0xa4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a62      	ldr	r2, [pc, #392]	; (80015ec <HAL_DMA_IRQHandler+0x1fc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d012      	beq.n	800148e <HAL_DMA_IRQHandler+0x9e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a60      	ldr	r2, [pc, #384]	; (80015f0 <HAL_DMA_IRQHandler+0x200>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x98>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <HAL_DMA_IRQHandler+0x204>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d102      	bne.n	8001482 <HAL_DMA_IRQHandler+0x92>
 800147c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001480:	e00e      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 8001482:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001486:	e00b      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 8001488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800148c:	e008      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 800148e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001492:	e005      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	e002      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	e000      	b.n	80014a0 <HAL_DMA_IRQHandler+0xb0>
 800149e:	2304      	movs	r3, #4
 80014a0:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_DMA_IRQHandler+0x208>)
 80014a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8094 	beq.w	80015d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014b6:	e08e      	b.n	80015d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2202      	movs	r2, #2
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d056      	beq.n	8001576 <HAL_DMA_IRQHandler+0x186>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d051      	beq.n	8001576 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10b      	bne.n	80014f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 020a 	bic.w	r2, r2, #10
 80014ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_DMA_IRQHandler+0x1f0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d029      	beq.n	8001556 <HAL_DMA_IRQHandler+0x166>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a37      	ldr	r2, [pc, #220]	; (80015e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d022      	beq.n	8001552 <HAL_DMA_IRQHandler+0x162>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01a      	beq.n	800154c <HAL_DMA_IRQHandler+0x15c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a34      	ldr	r2, [pc, #208]	; (80015ec <HAL_DMA_IRQHandler+0x1fc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d012      	beq.n	8001546 <HAL_DMA_IRQHandler+0x156>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_DMA_IRQHandler+0x200>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00a      	beq.n	8001540 <HAL_DMA_IRQHandler+0x150>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <HAL_DMA_IRQHandler+0x204>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d102      	bne.n	800153a <HAL_DMA_IRQHandler+0x14a>
 8001534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001538:	e00e      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 800153a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800153e:	e00b      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 8001540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001544:	e008      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	e005      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 800154c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001550:	e002      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 8001552:	2320      	movs	r3, #32
 8001554:	e000      	b.n	8001558 <HAL_DMA_IRQHandler+0x168>
 8001556:	2302      	movs	r3, #2
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_DMA_IRQHandler+0x208>)
 800155a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d034      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001574:	e02f      	b.n	80015d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2208      	movs	r2, #8
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d028      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x1e8>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020e 	bic.w	r2, r2, #14
 800159e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
    }
  }
  return;
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
}
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40020008 	.word	0x40020008
 80015e4:	4002001c 	.word	0x4002001c
 80015e8:	40020030 	.word	0x40020030
 80015ec:	40020044 	.word	0x40020044
 80015f0:	40020058 	.word	0x40020058
 80015f4:	4002006c 	.word	0x4002006c
 80015f8:	40020000 	.word	0x40020000

080015fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b10      	cmp	r3, #16
 8001628:	d108      	bne.n	800163c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800163a:	e007      	b.n	800164c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	60da      	str	r2, [r3, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b08b      	sub	sp, #44	; 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e169      	b.n	8001940 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800166c:	2201      	movs	r2, #1
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	429a      	cmp	r2, r3
 8001686:	f040 8158 	bne.w	800193a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a9a      	ldr	r2, [pc, #616]	; (80018f8 <HAL_GPIO_Init+0x2a0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d05e      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 8001694:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <HAL_GPIO_Init+0x2a0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d875      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 800169a:	4a98      	ldr	r2, [pc, #608]	; (80018fc <HAL_GPIO_Init+0x2a4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d058      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016a0:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_GPIO_Init+0x2a4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d86f      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016a6:	4a96      	ldr	r2, [pc, #600]	; (8001900 <HAL_GPIO_Init+0x2a8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d052      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016ac:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x2a8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d869      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016b2:	4a94      	ldr	r2, [pc, #592]	; (8001904 <HAL_GPIO_Init+0x2ac>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d04c      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016b8:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x2ac>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d863      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016be:	4a92      	ldr	r2, [pc, #584]	; (8001908 <HAL_GPIO_Init+0x2b0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d046      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
 80016c4:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_GPIO_Init+0x2b0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d85d      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d82a      	bhi.n	8001724 <HAL_GPIO_Init+0xcc>
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d859      	bhi.n	8001786 <HAL_GPIO_Init+0x12e>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <HAL_GPIO_Init+0x80>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	08001753 	.word	0x08001753
 80016dc:	0800172d 	.word	0x0800172d
 80016e0:	0800173f 	.word	0x0800173f
 80016e4:	08001781 	.word	0x08001781
 80016e8:	08001787 	.word	0x08001787
 80016ec:	08001787 	.word	0x08001787
 80016f0:	08001787 	.word	0x08001787
 80016f4:	08001787 	.word	0x08001787
 80016f8:	08001787 	.word	0x08001787
 80016fc:	08001787 	.word	0x08001787
 8001700:	08001787 	.word	0x08001787
 8001704:	08001787 	.word	0x08001787
 8001708:	08001787 	.word	0x08001787
 800170c:	08001787 	.word	0x08001787
 8001710:	08001787 	.word	0x08001787
 8001714:	08001787 	.word	0x08001787
 8001718:	08001787 	.word	0x08001787
 800171c:	08001735 	.word	0x08001735
 8001720:	08001749 	.word	0x08001749
 8001724:	4a79      	ldr	r2, [pc, #484]	; (800190c <HAL_GPIO_Init+0x2b4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172a:	e02c      	b.n	8001786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e029      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	3304      	adds	r3, #4
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e024      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	3308      	adds	r3, #8
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e01f      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	330c      	adds	r3, #12
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e01a      	b.n	8001788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800175a:	2304      	movs	r3, #4
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e013      	b.n	8001788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	611a      	str	r2, [r3, #16]
          break;
 8001772:	e009      	b.n	8001788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	615a      	str	r2, [r3, #20]
          break;
 800177e:	e003      	b.n	8001788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x130>
          break;
 8001786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d801      	bhi.n	8001792 <HAL_GPIO_Init+0x13a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_Init+0x13e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d802      	bhi.n	80017a4 <HAL_GPIO_Init+0x14c>
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x152>
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b08      	subs	r3, #8
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	210f      	movs	r1, #15
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80b1 	beq.w	800193a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x2b8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_GPIO_Init+0x2b8>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_GPIO_Init+0x2b8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2bc>)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a40      	ldr	r2, [pc, #256]	; (8001918 <HAL_GPIO_Init+0x2c0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_GPIO_Init+0x1ec>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3f      	ldr	r2, [pc, #252]	; (800191c <HAL_GPIO_Init+0x2c4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00d      	beq.n	8001840 <HAL_GPIO_Init+0x1e8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <HAL_GPIO_Init+0x2c8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d007      	beq.n	800183c <HAL_GPIO_Init+0x1e4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3d      	ldr	r2, [pc, #244]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_GPIO_Init+0x1e0>
 8001834:	2303      	movs	r3, #3
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1ee>
 8001838:	2304      	movs	r3, #4
 800183a:	e004      	b.n	8001846 <HAL_GPIO_Init+0x1ee>
 800183c:	2302      	movs	r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x1ee>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_GPIO_Init+0x1ee>
 8001844:	2300      	movs	r3, #0
 8001846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4093      	lsls	r3, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001856:	492f      	ldr	r1, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x2bc>)
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	492c      	ldr	r1, [pc, #176]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	4928      	ldr	r1, [pc, #160]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	491e      	ldr	r1, [pc, #120]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	4918      	ldr	r1, [pc, #96]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4914      	ldr	r1, [pc, #80]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d021      	beq.n	800192c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
 80018f4:	e021      	b.n	800193a <HAL_GPIO_Init+0x2e2>
 80018f6:	bf00      	nop
 80018f8:	10320000 	.word	0x10320000
 80018fc:	10310000 	.word	0x10310000
 8001900:	10220000 	.word	0x10220000
 8001904:	10210000 	.word	0x10210000
 8001908:	10120000 	.word	0x10120000
 800190c:	10110000 	.word	0x10110000
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	40010800 	.word	0x40010800
 800191c:	40010c00 	.word	0x40010c00
 8001920:	40011000 	.word	0x40011000
 8001924:	40011400 	.word	0x40011400
 8001928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_GPIO_Init+0x304>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	4909      	ldr	r1, [pc, #36]	; (800195c <HAL_GPIO_Init+0x304>)
 8001936:	4013      	ands	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	f47f ae8e 	bne.w	800166c <HAL_GPIO_Init+0x14>
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	372c      	adds	r7, #44	; 0x2c
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43d9      	mvns	r1, r3
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	400b      	ands	r3, r1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	611a      	str	r2, [r3, #16]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c4:	b08b      	sub	sp, #44	; 0x2c
 80019c6:	af06      	add	r7, sp, #24
 80019c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0fd      	b.n	8001bd0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f007 fafd 	bl	8008fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 faa4 	bl	8004f48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	687e      	ldr	r6, [r7, #4]
 8001a08:	466d      	mov	r5, sp
 8001a0a:	f106 0410 	add.w	r4, r6, #16
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	602b      	str	r3, [r5, #0]
 8001a16:	1d33      	adds	r3, r6, #4
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	6838      	ldr	r0, [r7, #0]
 8001a1c:	f003 fa6e 	bl	8004efc <USB_CoreInit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ce      	b.n	8001bd0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fa9f 	bl	8004f7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e04c      	b.n	8001ade <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3301      	adds	r3, #1
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	b298      	uxth	r0, r3
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3336      	adds	r3, #54	; 0x36
 8001a82:	4602      	mov	r2, r0
 8001a84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3303      	adds	r3, #3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3338      	adds	r3, #56	; 0x38
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	333c      	adds	r3, #60	; 0x3c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3340      	adds	r3, #64	; 0x40
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	3301      	adds	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3ad      	bcc.n	8001a44 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e044      	b.n	8001b78 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3b5      	bcc.n	8001aee <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	687e      	ldr	r6, [r7, #4]
 8001b8a:	466d      	mov	r5, sp
 8001b8c:	f106 0410 	add.w	r4, r6, #16
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	1d33      	adds	r3, r6, #4
 8001b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f003 f9f9 	bl	8004f94 <USB_DevInit>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e00d      	b.n	8001bd0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fb6a 	bl	80072a2 <USB_DevDisconnect>

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_PCD_Start+0x16>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e016      	b.n	8001c1c <HAL_PCD_Start+0x44>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f98e 	bl	8004f1c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c00:	2101      	movs	r1, #1
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f007 fc63 	bl	80094ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fb3e 	bl	800728e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 fb40 	bl	80072b6 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c40:	d102      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fb61 	bl	800230a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fb32 	bl	80072b6 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d112      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f007 fa31 	bl	80090de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f925 	bl	8001ece <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fb14 	bl	80072b6 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c98:	d10b      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cac:	b292      	uxth	r2, r2
 8001cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 fafd 	bl	80072b6 <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 fae6 	bl	80072b6 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf4:	d126      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0204 	bic.w	r2, r2, #4
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0208 	bic.w	r2, r2, #8
 8001d20:	b292      	uxth	r2, r2
 8001d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f007 fa12 	bl	8009150 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 fab4 	bl	80072b6 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d58:	f040 8084 	bne.w	8001e64 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
 8001d60:	e011      	b.n	8001d86 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	b292      	uxth	r2, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	f107 0120 	add.w	r1, r7, #32
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	3301      	adds	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d9ea      	bls.n	8001d62 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	b292      	uxth	r2, r2
 8001db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001dbc:	bf00      	nop
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f6      	beq.n	8001dbe <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	b292      	uxth	r2, r2
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	77fb      	strb	r3, [r7, #31]
 8001dec:	e010      	b.n	8001e10 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4611      	mov	r1, r2
 8001df6:	7ffa      	ldrb	r2, [r7, #31]
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	440a      	add	r2, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	f107 0120 	add.w	r1, r7, #32
 8001e02:	440b      	add	r3, r1
 8001e04:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e08:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e0a:	7ffb      	ldrb	r3, [r7, #31]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	77fb      	strb	r3, [r7, #31]
 8001e10:	7ffb      	ldrb	r3, [r7, #31]
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	d9eb      	bls.n	8001dee <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0208 	orr.w	r2, r2, #8
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0204 	orr.w	r2, r2, #4
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f007 f95c 	bl	800911c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f005 fa24 	bl	80072b6 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d10e      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f007 f915 	bl	80090c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fa0a 	bl	80072b6 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eac:	d10b      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_PCD_SetAddress+0x1a>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e013      	b.n	8001f10 <HAL_PCD_SetAddress+0x42>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 f9b1 	bl	8007268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	70fb      	strb	r3, [r7, #3]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	803b      	strh	r3, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da0e      	bge.n	8001f5c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	705a      	strb	r2, [r3, #1]
 8001f5a:	e00e      	b.n	8001f7a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 0207 	and.w	r2, r3, #7
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f86:	883a      	ldrh	r2, [r7, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	78ba      	ldrb	r2, [r7, #2]
 8001f90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fa4:	78bb      	ldrb	r3, [r7, #2]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_EP_Open+0xa6>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e00e      	b.n	8001fdc <HAL_PCD_EP_Open+0xc4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f801 	bl	8004fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fda:	7afb      	ldrb	r3, [r7, #11]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0e      	bge.n	8002016 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	705a      	strb	r2, [r3, #1]
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 0207 	and.w	r2, r3, #7
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_Close+0x6a>
 800204a:	2302      	movs	r3, #2
 800204c:	e00e      	b.n	800206c <HAL_PCD_EP_Close+0x88>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fb23 	bl	80056a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002084:	7afb      	ldrb	r3, [r7, #11]
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2200      	movs	r2, #0
 80020b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6979      	ldr	r1, [r7, #20]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fcd5 	bl	8005a80 <USB_EPStartXfer>
 80020d6:	e005      	b.n	80020e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fcce 	bl	8005a80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 0207 	and.w	r2, r3, #7
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002110:	681b      	ldr	r3, [r3, #0]
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	460b      	mov	r3, r1
 800212a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	b2da      	uxtb	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fc7b 	bl	8005a80 <USB_EPStartXfer>
 800218a:	e005      	b.n	8002198 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6979      	ldr	r1, [r7, #20]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fc74 	bl	8005a80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 0207 	and.w	r2, r3, #7
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d901      	bls.n	80021c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e04c      	b.n	800225a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da0e      	bge.n	80021e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
 80021e4:	e00c      	b.n	8002200 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_EP_SetStall+0x7e>
 800221c:	2302      	movs	r3, #2
 800221e:	e01c      	b.n	800225a <HAL_PCD_EP_SetStall+0xb8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 ff1d 	bl	800706e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f005 f842 	bl	80072d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d901      	bls.n	8002280 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e040      	b.n	8002302 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0e      	bge.n	80022a6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	705a      	strb	r2, [r3, #1]
 80022a4:	e00e      	b.n	80022c4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f003 0207 	and.w	r2, r3, #7
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_EP_ClrStall+0x82>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e00e      	b.n	8002302 <HAL_PCD_EP_ClrStall+0xa0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 ff0b 	bl	800710e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08e      	sub	sp, #56	; 0x38
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002312:	e2ec      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800231e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800232a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8161 	bne.w	80025f6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d152      	bne.n	80023e4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	81fb      	strh	r3, [r7, #14]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	89fb      	ldrh	r3, [r7, #14]
 8002356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800235a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3328      	adds	r3, #40	; 0x28
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002370:	b29b      	uxth	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	3302      	adds	r3, #2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	441a      	add	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023a2:	2100      	movs	r1, #0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f006 fe72 	bl	800908e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 829b 	beq.w	80028ee <PCD_EP_ISR_Handler+0x5e4>
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 8296 	bne.w	80028ee <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b292      	uxth	r2, r2
 80023d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023e2:	e284      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d034      	beq.n	8002468 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	3306      	adds	r3, #6
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800243c:	b29b      	uxth	r3, r3
 800243e:	f004 ff99 	bl	8007374 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29a      	uxth	r2, r3
 800244a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800244e:	4013      	ands	r3, r2
 8002450:	823b      	strh	r3, [r7, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	8a3a      	ldrh	r2, [r7, #16]
 8002458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245c:	b292      	uxth	r2, r2
 800245e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f006 fde7 	bl	8009034 <HAL_PCD_SetupStageCallback>
 8002466:	e242      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002468:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800246c:	2b00      	cmp	r3, #0
 800246e:	f280 823e 	bge.w	80028ee <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800247e:	4013      	ands	r3, r2
 8002480:	83bb      	strh	r3, [r7, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	8bba      	ldrh	r2, [r7, #28]
 8002488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248c:	b292      	uxth	r2, r2
 800248e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3306      	adds	r3, #6
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d019      	beq.n	80024f8 <PCD_EP_ISR_Handler+0x1ee>
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	6959      	ldr	r1, [r3, #20]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f004 ff49 	bl	8007374 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	441a      	add	r2, r3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f006 fdb0 	bl	8009058 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 81f2 	bne.w	80028ee <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d112      	bne.n	8002558 <PCD_EP_ISR_Handler+0x24e>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800253c:	b29a      	uxth	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29a      	uxth	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	e02f      	b.n	80025b8 <PCD_EP_ISR_Handler+0x2ae>
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b3e      	cmp	r3, #62	; 0x3e
 800255e:	d813      	bhi.n	8002588 <PCD_EP_ISR_Handler+0x27e>
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <PCD_EP_ISR_Handler+0x270>
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	3301      	adds	r3, #1
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	b29b      	uxth	r3, r3
 800257e:	029b      	lsls	r3, r3, #10
 8002580:	b29a      	uxth	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	e017      	b.n	80025b8 <PCD_EP_ISR_Handler+0x2ae>
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <PCD_EP_ISR_Handler+0x298>
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	3b01      	subs	r3, #1
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	827b      	strh	r3, [r7, #18]
 80025ca:	8a7b      	ldrh	r3, [r7, #18]
 80025cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025d0:	827b      	strh	r3, [r7, #18]
 80025d2:	8a7b      	ldrh	r3, [r7, #18]
 80025d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025d8:	827b      	strh	r3, [r7, #18]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	8a7b      	ldrh	r3, [r7, #18]
 80025e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8013      	strh	r3, [r2, #0]
 80025f4:	e17b      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002608:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800260c:	2b00      	cmp	r3, #0
 800260e:	f280 80ea 	bge.w	80027e6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002628:	4013      	ands	r3, r2
 800262a:	853b      	strh	r3, [r7, #40]	; 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800263c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002640:	b292      	uxth	r2, r2
 8002642:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002644:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	7b1b      	ldrb	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d122      	bne.n	80026a8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	3306      	adds	r3, #6
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800268c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	6959      	ldr	r1, [r3, #20]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	88da      	ldrh	r2, [r3, #6]
 80026a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a2:	f004 fe67 	bl	8007374 <USB_ReadPMA>
 80026a6:	e07c      	b.n	80027a2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	78db      	ldrb	r3, [r3, #3]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d108      	bne.n	80026c2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f927 	bl	800290a <HAL_PCD_EP_DB_Receive>
 80026bc:	4603      	mov	r3, r0
 80026be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026c0:	e06f      	b.n	80027a2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026fe:	b29b      	uxth	r3, r3
 8002700:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	3302      	adds	r3, #2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002744:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02a      	beq.n	80027a2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	6959      	ldr	r1, [r3, #20]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	891a      	ldrh	r2, [r3, #8]
 8002758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275a:	f004 fe0b 	bl	8007374 <USB_ReadPMA>
 800275e:	e020      	b.n	80027a2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	3306      	adds	r3, #6
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002788:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800278a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	895a      	ldrh	r2, [r3, #10]
 800279c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279e:	f004 fde9 	bl	8007374 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a8:	441a      	add	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b4:	441a      	add	r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <PCD_EP_ISR_Handler+0x4c2>
 80027c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d206      	bcs.n	80027da <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f006 fc40 	bl	8009058 <HAL_PCD_DataOutStageCallback>
 80027d8:	e005      	b.n	80027e6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 f94d 	bl	8005a80 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d07e      	beq.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80027f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	843b      	strh	r3, [r7, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	8c3b      	ldrh	r3, [r7, #32]
 8002830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d00c      	beq.n	800285e <PCD_EP_ISR_Handler+0x554>
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002850:	2b02      	cmp	r3, #2
 8002852:	d146      	bne.n	80028e2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002854:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d141      	bne.n	80028e2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	3302      	adds	r3, #2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002886:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	8bfb      	ldrh	r3, [r7, #30]
 800288e:	429a      	cmp	r2, r3
 8002890:	d906      	bls.n	80028a0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	8bfb      	ldrh	r3, [r7, #30]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e002      	b.n	80028a6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f006 fbea 	bl	800908e <HAL_PCD_DataInStageCallback>
 80028ba:	e018      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	441a      	add	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	8bfb      	ldrh	r3, [r7, #30]
 80028ce:	441a      	add	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f8d0 	bl	8005a80 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028e0:	e005      	b.n	80028ee <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e4:	461a      	mov	r2, r3
 80028e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f91b 	bl	8002b24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f6ff ad0a 	blt.w	8002314 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b088      	sub	sp, #32
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	4613      	mov	r3, r2
 8002916:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d07e      	beq.n	8002a20 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	3302      	adds	r3, #2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	8b7b      	ldrh	r3, [r7, #26]
 8002952:	429a      	cmp	r2, r3
 8002954:	d306      	bcc.n	8002964 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	8b7b      	ldrh	r3, [r7, #26]
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e002      	b.n	800296a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d123      	bne.n	80029ba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	833b      	strh	r3, [r7, #24]
 800298e:	8b3b      	ldrh	r3, [r7, #24]
 8002990:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002994:	833b      	strh	r3, [r7, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	441a      	add	r2, r3
 80029a4:	8b3b      	ldrh	r3, [r7, #24]
 80029a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01f      	beq.n	8002a04 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	82fb      	strh	r3, [r7, #22]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	8afb      	ldrh	r3, [r7, #22]
 80029f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a04:	8b7b      	ldrh	r3, [r7, #26]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8087 	beq.w	8002b1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	891a      	ldrh	r2, [r3, #8]
 8002a18:	8b7b      	ldrh	r3, [r7, #26]
 8002a1a:	f004 fcab 	bl	8007374 <USB_ReadPMA>
 8002a1e:	e07c      	b.n	8002b1a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	3306      	adds	r3, #6
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	8b7b      	ldrh	r3, [r7, #26]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d306      	bcc.n	8002a62 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	8b7b      	ldrh	r3, [r7, #26]
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	e002      	b.n	8002a68 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d123      	bne.n	8002ab8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	83fb      	strh	r3, [r7, #30]
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a92:	83fb      	strh	r3, [r7, #30]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	8bfb      	ldrh	r3, [r7, #30]
 8002aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002adc:	83bb      	strh	r3, [r7, #28]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	8bbb      	ldrh	r3, [r7, #28]
 8002aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6959      	ldr	r1, [r3, #20]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	895a      	ldrh	r2, [r3, #10]
 8002b14:	8b7b      	ldrh	r3, [r7, #26]
 8002b16:	f004 fc2d 	bl	8007374 <USB_ReadPMA>
    }
  }

  return count;
 8002b1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b0a2      	sub	sp, #136	; 0x88
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 81c7 	beq.w	8002ecc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	3302      	adds	r3, #2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d907      	bls.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	619a      	str	r2, [r3, #24]
 8002b84:	e002      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 80b9 	bne.w	8002d08 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d126      	bne.n	8002bec <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	4413      	add	r3, r2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	011a      	lsls	r2, r3, #4
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	e01a      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d116      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	4413      	add	r3, r2
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	011a      	lsls	r2, r3, #4
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	4413      	add	r3, r2
 8002c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d126      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e017      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d113      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	4413      	add	r3, r2
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2200      	movs	r2, #0
 8002cac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f006 f9ea 	bl	800908e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 82d4 	beq.w	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	827b      	strh	r3, [r7, #18]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	441a      	add	r2, r3
 8002cf0:	8a7b      	ldrh	r3, [r7, #18]
 8002cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
 8002d06:	e2b2      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d021      	beq.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 8286 	bne.w	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	441a      	add	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d309      	bcc.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	1ad2      	subs	r2, r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	621a      	str	r2, [r3, #32]
 8002d9c:	e015      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002daa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002db4:	e009      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d155      	bne.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	4413      	add	r3, r2
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	011a      	lsls	r2, r3, #4
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	4413      	add	r3, r2
 8002df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d112      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x302>
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	801a      	strh	r2, [r3, #0]
 8002e24:	e047      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e28:	2b3e      	cmp	r3, #62	; 0x3e
 8002e2a:	d811      	bhi.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3e:	3301      	adds	r3, #1
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e032      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x342>
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	3b01      	subs	r3, #1
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	029b      	lsls	r3, r3, #10
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	e01b      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d117      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9a:	4413      	add	r3, r2
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011a      	lsls	r2, r3, #4
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6959      	ldr	r1, [r3, #20]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	891a      	ldrh	r2, [r3, #8]
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f004 fa10 	bl	80072ea <USB_WritePMA>
 8002eca:	e1d0      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d307      	bcc.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	619a      	str	r2, [r3, #24]
 8002f12:	e002      	b.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80c4 	bne.w	80030ac <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d126      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x456>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	4413      	add	r3, r2
 8002f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e01a      	b.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d116      	bne.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	677b      	str	r3, [r7, #116]	; 0x74
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f96:	4413      	add	r3, r2
 8002f98:	677b      	str	r3, [r7, #116]	; 0x74
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	011a      	lsls	r2, r3, #4
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fa8:	673b      	str	r3, [r7, #112]	; 0x70
 8002faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d12f      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	011a      	lsls	r2, r3, #4
 8002fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003014:	b29a      	uxth	r2, r3
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	e017      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x52a>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d113      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003034:	4413      	add	r3, r2
 8003036:	67bb      	str	r3, [r7, #120]	; 0x78
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	011a      	lsls	r2, r3, #4
 800303e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003040:	4413      	add	r3, r2
 8003042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003048:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800304a:	2200      	movs	r2, #0
 800304c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f006 f81a 	bl	800908e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 8104 	bne.w	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003080:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
 80030aa:	e0e0      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d121      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 80b4 	bne.w	800326e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310e:	441a      	add	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800311c:	441a      	add	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	429a      	cmp	r2, r3
 800312c:	d309      	bcc.n	8003142 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	621a      	str	r2, [r3, #32]
 8003140:	e015      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d107      	bne.n	800315a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800314a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800314e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003158:	e009      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	667b      	str	r3, [r7, #100]	; 0x64
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d155      	bne.n	8003228 <HAL_PCD_EP_DB_Transmit+0x704>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003190:	4413      	add	r3, r2
 8003192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	011a      	lsls	r2, r3, #4
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	4413      	add	r3, r2
 800319e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d112      	bne.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80031aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	e044      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x736>
 80031d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d2:	2b3e      	cmp	r3, #62	; 0x3e
 80031d4:	d811      	bhi.n	80031fa <HAL_PCD_EP_DB_Transmit+0x6d6>
 80031d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
 80031dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_PCD_EP_DB_Transmit+0x6c8>
 80031e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e8:	3301      	adds	r3, #1
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
 80031ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e02f      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x736>
 80031fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800320a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320c:	3b01      	subs	r3, #1
 800320e:	657b      	str	r3, [r7, #84]	; 0x54
 8003210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003212:	b29b      	uxth	r3, r3
 8003214:	029b      	lsls	r3, r3, #10
 8003216:	b29b      	uxth	r3, r3
 8003218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003220:	b29a      	uxth	r2, r3
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e018      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x736>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d114      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x736>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800323e:	4413      	add	r3, r2
 8003240:	667b      	str	r3, [r7, #100]	; 0x64
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	011a      	lsls	r2, r3, #4
 8003248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800324a:	4413      	add	r3, r2
 800324c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003250:	663b      	str	r3, [r7, #96]	; 0x60
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	b29a      	uxth	r2, r3
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6959      	ldr	r1, [r3, #20]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	895a      	ldrh	r2, [r3, #10]
 8003266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003268:	b29b      	uxth	r3, r3
 800326a:	f004 f83e 	bl	80072ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003288:	823b      	strh	r3, [r7, #16]
 800328a:	8a3b      	ldrh	r3, [r7, #16]
 800328c:	f083 0310 	eor.w	r3, r3, #16
 8003290:	823b      	strh	r3, [r7, #16]
 8003292:	8a3b      	ldrh	r3, [r7, #16]
 8003294:	f083 0320 	eor.w	r3, r3, #32
 8003298:	823b      	strh	r3, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8a3b      	ldrh	r3, [r7, #16]
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3788      	adds	r7, #136	; 0x88
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	4613      	mov	r3, r2
 80032d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e009      	b.n	8003312 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032fe:	897a      	ldrh	r2, [r7, #10]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003312:	893b      	ldrh	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	b29a      	uxth	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	80da      	strh	r2, [r3, #6]
 8003326:	e00b      	b.n	8003340 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2201      	movs	r2, #1
 800332c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	b29a      	uxth	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	b29a      	uxth	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e26c      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8087 	beq.w	800347a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800336c:	4b92      	ldr	r3, [pc, #584]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b04      	cmp	r3, #4
 8003376:	d00c      	beq.n	8003392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003378:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d112      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
 8003384:	4b8c      	ldr	r3, [pc, #560]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d10b      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003392:	4b89      	ldr	r3, [pc, #548]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d06c      	beq.n	8003478 <HAL_RCC_OscConfig+0x12c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d168      	bne.n	8003478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e246      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x76>
 80033b4:	4b80      	ldr	r3, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7f      	ldr	r2, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e02e      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0xbc>
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6e      	ldr	r2, [pc, #440]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 8003408:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a67      	ldr	r2, [pc, #412]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd fdec 	bl	8001004 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd fde8 	bl	8001004 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1fa      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xe4>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd fdd8 	bl	8001004 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fdd4 	bl	8001004 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1e6      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x10c>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003486:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x18c>
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x176>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1ba      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4939      	ldr	r1, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x270>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd fd8d 	bl	8001004 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fd fd89 	bl	8001004 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e19b      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4927      	ldr	r1, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_RCC_OscConfig+0x270>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fd fd6c 	bl	8001004 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd fd68 	bl	8001004 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e17a      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03a      	beq.n	80035d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d019      	beq.n	8003596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fd fd4c 	bl	8001004 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fd48 	bl	8001004 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e15a      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800358e:	2001      	movs	r0, #1
 8003590:	f000 faa6 	bl	8003ae0 <RCC_Delay>
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fd fd32 	bl	8001004 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a2:	e00f      	b.n	80035c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a4:	f7fd fd2e 	bl	8001004 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d908      	bls.n	80035c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e140      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	42420000 	.word	0x42420000
 80035c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b9e      	ldr	r3, [pc, #632]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e9      	bne.n	80035a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80a6 	beq.w	800372a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b97      	ldr	r3, [pc, #604]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b94      	ldr	r3, [pc, #592]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a93      	ldr	r2, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	61d3      	str	r3, [r2, #28]
 80035fa:	4b91      	ldr	r3, [pc, #580]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b8e      	ldr	r3, [pc, #568]	; (8003844 <HAL_RCC_OscConfig+0x4f8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <HAL_RCC_OscConfig+0x4f8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a8a      	ldr	r2, [pc, #552]	; (8003844 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fd fcef 	bl	8001004 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fd fceb 	bl	8001004 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0fd      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b81      	ldr	r3, [pc, #516]	; (8003844 <HAL_RCC_OscConfig+0x4f8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x312>
 8003650:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	e02d      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x334>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	e01c      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d10c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x356>
 8003688:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a6c      	ldr	r2, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a69      	ldr	r2, [pc, #420]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a66      	ldr	r2, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fd fc9f 	bl	8001004 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd fc9b 	bl	8001004 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0ab      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b57      	ldr	r3, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCC_OscConfig+0x37e>
 80036ec:	e014      	b.n	8003718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fd fc89 	bl	8001004 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fc85 	bl	8001004 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e095      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ee      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b48      	ldr	r3, [pc, #288]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a47      	ldr	r2, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8081 	beq.w	8003836 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d061      	beq.n	8003804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d146      	bne.n	80037d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x4fc>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fd fc59 	bl	8001004 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fc55 	bl	8001004 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e067      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003768:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d108      	bne.n	8003790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	492d      	ldr	r1, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a19      	ldr	r1, [r3, #32]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	430b      	orrs	r3, r1
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x4fc>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fc29 	bl	8001004 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fd fc25 	bl	8001004 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e037      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x46a>
 80037d4:	e02f      	b.n	8003836 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_RCC_OscConfig+0x4fc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd fc12 	bl	8001004 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd fc0e 	bl	8001004 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e020      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x498>
 8003802:	e018      	b.n	8003836 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e013      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x4f4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
 8003848:	42420060 	.word	0x42420060

0800384c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0d0      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 0207 	bic.w	r2, r3, #7
 8003876:	4965      	ldr	r1, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d040      	beq.n	800396c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d115      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e073      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4936      	ldr	r1, [pc, #216]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fd fb62 	bl	8001004 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fd fb5e 	bl	8001004 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e053      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d210      	bcs.n	800399c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	4922      	ldr	r1, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1cc>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1d0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fac0 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800b240 	.word	0x0800b240
 8003a18:	20000100 	.word	0x20000100
 8003a1c:	20000104 	.word	0x20000104

08003a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b490      	push	{r4, r7}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a28:	1d3c      	adds	r4, r7, #4
 8003a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a30:	f240 2301 	movw	r3, #513	; 0x201
 8003a34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x46>
 8003a5e:	e02d      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a62:	623b      	str	r3, [r7, #32]
      break;
 8003a64:	e02d      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a72:	4413      	add	r3, r2
 8003a74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c5b      	lsrs	r3, r3, #17
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a92:	4413      	add	r3, r2
 8003a94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9e:	fb02 f203 	mul.w	r2, r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	623b      	str	r3, [r7, #32]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003abe:	623b      	str	r3, [r7, #32]
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc90      	pop	{r4, r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	0800b1dc 	.word	0x0800b1dc
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	007a1200 	.word	0x007a1200
 8003adc:	003d0900 	.word	0x003d0900

08003ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCC_Delay+0x34>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <RCC_Delay+0x38>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a5b      	lsrs	r3, r3, #9
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003afc:	bf00      	nop
  }
  while (Delay --);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1e5a      	subs	r2, r3, #1
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f9      	bne.n	8003afc <RCC_Delay+0x1c>
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	20000100 	.word	0x20000100
 8003b18:	10624dd3 	.word	0x10624dd3

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d07d      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	61d3      	str	r3, [r2, #28]
 8003b54:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d118      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a42      	ldr	r2, [pc, #264]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fa42 	bl	8001004 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fd fa3e 	bl	8001004 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e06d      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02e      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d027      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d014      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fd fa0d 	bl	8001004 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fa09 	bl	8001004 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e036      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ee      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4917      	ldr	r1, [pc, #92]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	490b      	ldr	r1, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42420440 	.word	0x42420440

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e041      	b.n	8003d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc fef4 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fe04 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e032      	b.n	8003da6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_TIM_Base_Start+0x88>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_TIM_Base_Start+0x48>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d009      	beq.n	8003d70 <HAL_TIM_Base_Start+0x48>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <HAL_TIM_Base_Start+0x8c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_TIM_Base_Start+0x48>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <HAL_TIM_Base_Start+0x90>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d111      	bne.n	8003d94 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d010      	beq.n	8003da4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	e007      	b.n	8003da4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800

08003dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f839 	bl	8003e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 fd6a 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x28>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e022      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x6e>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d109      	bne.n	8003eae <HAL_TIM_PWM_Start_DMA+0x42>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	e015      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x6e>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d109      	bne.n	8003ec8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e008      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x6e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e14e      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_TIM_PWM_Start_DMA+0x90>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e022      	b.n	8003f42 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d109      	bne.n	8003f16 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e015      	b.n	8003f42 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d109      	bne.n	8003f30 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e008      	b.n	8003f42 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start_DMA+0xea>
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e114      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	e016      	b.n	8003f94 <HAL_TIM_PWM_Start_DMA+0x128>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f74:	e00e      	b.n	8003f94 <HAL_TIM_PWM_Start_DMA+0x128>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f84:	e006      	b.n	8003f94 <HAL_TIM_PWM_Start_DMA+0x128>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f8e:	e001      	b.n	8003f94 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0f5      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	f200 80ae 	bhi.w	80040f8 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	080040f9 	.word	0x080040f9
 8003fac:	080040f9 	.word	0x080040f9
 8003fb0:	080040f9 	.word	0x080040f9
 8003fb4:	08004021 	.word	0x08004021
 8003fb8:	080040f9 	.word	0x080040f9
 8003fbc:	080040f9 	.word	0x080040f9
 8003fc0:	080040f9 	.word	0x080040f9
 8003fc4:	08004069 	.word	0x08004069
 8003fc8:	080040f9 	.word	0x080040f9
 8003fcc:	080040f9 	.word	0x080040f9
 8003fd0:	080040f9 	.word	0x080040f9
 8003fd4:	080040b1 	.word	0x080040b1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4a69      	ldr	r2, [pc, #420]	; (800418c <HAL_TIM_PWM_Start_DMA+0x320>)
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4a68      	ldr	r2, [pc, #416]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3334      	adds	r3, #52	; 0x34
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	f7fd f996 	bl	8001330 <HAL_DMA_Start_IT>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0b8      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	60da      	str	r2, [r3, #12]
      break;
 800401e:	e06c      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	4a57      	ldr	r2, [pc, #348]	; (800418c <HAL_TIM_PWM_Start_DMA+0x320>)
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	4a56      	ldr	r2, [pc, #344]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3338      	adds	r3, #56	; 0x38
 8004044:	461a      	mov	r2, r3
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	f7fd f972 	bl	8001330 <HAL_DMA_Start_IT>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e094      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004064:	60da      	str	r2, [r3, #12]
      break;
 8004066:	e048      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4a46      	ldr	r2, [pc, #280]	; (8004188 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	4a45      	ldr	r2, [pc, #276]	; (800418c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a44      	ldr	r2, [pc, #272]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x324>)
 800407e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	333c      	adds	r3, #60	; 0x3c
 800408c:	461a      	mov	r2, r3
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	f7fd f94e 	bl	8001330 <HAL_DMA_Start_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e070      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ac:	60da      	str	r2, [r3, #12]
      break;
 80040ae:	e024      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	4a34      	ldr	r2, [pc, #208]	; (8004188 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	4a33      	ldr	r2, [pc, #204]	; (800418c <HAL_TIM_PWM_Start_DMA+0x320>)
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	4a32      	ldr	r2, [pc, #200]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x324>)
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3340      	adds	r3, #64	; 0x40
 80040d4:	461a      	mov	r2, r3
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	f7fd f92a 	bl	8001330 <HAL_DMA_Start_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e04c      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040f4:	60da      	str	r2, [r3, #12]
      break;
 80040f6:	e000      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80040f8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fe66 	bl	8004dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x328>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d107      	bne.n	8004122 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x328>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIM_PWM_Start_DMA+0x2de>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d009      	beq.n	800414a <HAL_TIM_PWM_Start_DMA+0x2de>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIM_PWM_Start_DMA+0x2de>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d010      	beq.n	800417e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e007      	b.n	800417e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	080047c5 	.word	0x080047c5
 800418c:	0800486d 	.word	0x0800486d
 8004190:	08004733 	.word	0x08004733
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800

080041a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0202 	mvn.w	r2, #2
 80041cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa78 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa6b 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa7a 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0204 	mvn.w	r2, #4
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa4e 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa41 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa50 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0208 	mvn.w	r2, #8
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa24 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa17 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fa26 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0210 	mvn.w	r2, #16
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2208      	movs	r2, #8
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9fa 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9ed 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f9fc 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0201 	mvn.w	r2, #1
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9c8 	bl	80046b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fdcd 	bl	8004eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9c9 	bl	800470e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b20      	cmp	r3, #32
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0220 	mvn.w	r2, #32
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fd98 	bl	8004ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0ac      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x174>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	f200 809f 	bhi.w	8004518 <HAL_TIM_PWM_ConfigChannel+0x168>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004519 	.word	0x08004519
 80043e8:	08004519 	.word	0x08004519
 80043ec:	08004519 	.word	0x08004519
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004519 	.word	0x08004519
 80043f8:	08004519 	.word	0x08004519
 80043fc:	08004519 	.word	0x08004519
 8004400:	08004497 	.word	0x08004497
 8004404:	08004519 	.word	0x08004519
 8004408:	08004519 	.word	0x08004519
 800440c:	08004519 	.word	0x08004519
 8004410:	080044d7 	.word	0x080044d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fabc 	bl	8004998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	619a      	str	r2, [r3, #24]
      break;
 8004452:	e062      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fb02 	bl	8004a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	619a      	str	r2, [r3, #24]
      break;
 8004494:	e041      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb4b 	bl	8004b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0208 	orr.w	r2, r2, #8
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0204 	bic.w	r2, r2, #4
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	61da      	str	r2, [r3, #28]
      break;
 80044d4:	e021      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb95 	bl	8004c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	61da      	str	r2, [r3, #28]
      break;
 8004516:	e000      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIM_ConfigClockSource+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e0b3      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x180>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457c:	d03e      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0xd0>
 800457e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004582:	f200 8087 	bhi.w	8004694 <HAL_TIM_ConfigClockSource+0x168>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	f000 8085 	beq.w	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004592:	d87f      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 8004594:	2b70      	cmp	r3, #112	; 0x70
 8004596:	d01a      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0xa2>
 8004598:	2b70      	cmp	r3, #112	; 0x70
 800459a:	d87b      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 800459c:	2b60      	cmp	r3, #96	; 0x60
 800459e:	d050      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x116>
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d877      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 80045a4:	2b50      	cmp	r3, #80	; 0x50
 80045a6:	d03c      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xf6>
 80045a8:	2b50      	cmp	r3, #80	; 0x50
 80045aa:	d873      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d058      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x136>
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d86f      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 80045b4:	2b30      	cmp	r3, #48	; 0x30
 80045b6:	d064      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x156>
 80045b8:	2b30      	cmp	r3, #48	; 0x30
 80045ba:	d86b      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d060      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x156>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d867      	bhi.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d05c      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x156>
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d05a      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045cc:	e062      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f000 fbda 	bl	8004d96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
      break;
 80045fa:	e04e      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f000 fbc3 	bl	8004d96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800461e:	609a      	str	r2, [r3, #8]
      break;
 8004620:	e03b      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f000 fb3a 	bl	8004ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2150      	movs	r1, #80	; 0x50
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fb91 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004640:	e02b      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f000 fb58 	bl	8004d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2160      	movs	r1, #96	; 0x60
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fb81 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004660:	e01b      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 fb1a 	bl	8004ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2140      	movs	r1, #64	; 0x40
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb71 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004680:	e00b      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f000 fb68 	bl	8004d62 <TIM_ITRx_SetConfig>
        break;
 8004692:	e002      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004698:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d107      	bne.n	800475a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	e02a      	b.n	80047b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2202      	movs	r2, #2
 8004768:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004772:	e01d      	b.n	80047b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d107      	bne.n	800478e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2204      	movs	r2, #4
 8004782:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	e010      	b.n	80047b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2208      	movs	r2, #8
 800479c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a6:	e003      	b.n	80047b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff ffb5 	bl	8004720 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d10b      	bne.n	80047f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d136      	bne.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f2:	e031      	b.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d10b      	bne.n	8004816 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d125      	bne.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004814:	e020      	b.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d10b      	bne.n	8004838 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2204      	movs	r2, #4
 8004824:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d114      	bne.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004836:	e00f      	b.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d10a      	bne.n	8004858 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2208      	movs	r2, #8
 8004846:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff46 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d103      	bne.n	800488c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	771a      	strb	r2, [r3, #28]
 800488a:	e019      	b.n	80048c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d103      	bne.n	800489e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2202      	movs	r2, #2
 800489a:	771a      	strb	r2, [r3, #28]
 800489c:	e010      	b.n	80048c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d103      	bne.n	80048b0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2204      	movs	r2, #4
 80048ac:	771a      	strb	r2, [r3, #28]
 80048ae:	e007      	b.n	80048c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d102      	bne.n	80048c0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2208      	movs	r2, #8
 80048be:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff1b 	bl	80046fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a29      	ldr	r2, [pc, #164]	; (800498c <TIM_Base_SetConfig+0xb8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x30>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x30>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a26      	ldr	r2, [pc, #152]	; (8004990 <TIM_Base_SetConfig+0xbc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x30>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a25      	ldr	r2, [pc, #148]	; (8004994 <TIM_Base_SetConfig+0xc0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1c      	ldr	r2, [pc, #112]	; (800498c <TIM_Base_SetConfig+0xb8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_Base_SetConfig+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d007      	beq.n	8004936 <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <TIM_Base_SetConfig+0xbc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_Base_SetConfig+0x62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <TIM_Base_SetConfig+0xc0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d108      	bne.n	8004948 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <TIM_Base_SetConfig+0xb8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800

08004998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0302 	bic.w	r3, r3, #2
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <TIM_OC1_SetConfig+0xc8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10c      	bne.n	8004a0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0308 	bic.w	r3, r3, #8
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <TIM_OC1_SetConfig+0xc8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00

08004a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0210 	bic.w	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0320 	bic.w	r3, r3, #32
 8004aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <TIM_OC2_SetConfig+0xd0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <TIM_OC2_SetConfig+0xd0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d113      	bne.n	8004b10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	40012c00 	.word	0x40012c00

08004b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <TIM_OC3_SetConfig+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10d      	bne.n	8004bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC3_SetConfig+0xd0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d113      	bne.n	8004be2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00

08004c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <TIM_OC4_SetConfig+0x98>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d109      	bne.n	8004c80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	019b      	lsls	r3, r3, #6
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr
 8004ca4:	40012c00 	.word	0x40012c00

08004ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 030a 	bic.w	r3, r3, #10
 8004ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0210 	bic.w	r2, r3, #16
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	031b      	lsls	r3, r3, #12
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	621a      	str	r2, [r3, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f043 0307 	orr.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	021a      	lsls	r2, r3, #8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e046      	b.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d009      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d10c      	bne.n	8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800

08004ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004efc:	b084      	sub	sp, #16
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	f107 0014 	add.w	r0, r7, #20
 8004f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	b004      	add	sp, #16
 8004f1a:	4770      	bx	lr

08004f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4013      	ands	r3, r2
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f94:	b084      	sub	sp, #16
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	f107 0014 	add.w	r0, r7, #20
 8004fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	b004      	add	sp, #16
 8004fd2:	4770      	bx	lr

08004fd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b09b      	sub	sp, #108	; 0x6c
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d81f      	bhi.n	8005046 <USB_ActivateEndpoint+0x72>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <USB_ActivateEndpoint+0x38>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005039 	.word	0x08005039
 8005014:	0800504f 	.word	0x0800504f
 8005018:	0800502b 	.word	0x0800502b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800501c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005024:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005028:	e012      	b.n	8005050 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800502a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800502e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005032:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005036:	e00b      	b.n	8005050 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005038:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800503c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005040:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005044:	e004      	b.n	8005050 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800504c:	e000      	b.n	8005050 <USB_ActivateEndpoint+0x7c>
      break;
 800504e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	b29a      	uxth	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	7b1b      	ldrb	r3, [r3, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 8149 	bne.w	8005354 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8084 	beq.w	80051d4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	011a      	lsls	r2, r3, #4
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	88db      	ldrh	r3, [r3, #6]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	81fb      	strh	r3, [r7, #14]
 800510e:	89fb      	ldrh	r3, [r7, #14]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <USB_ActivateEndpoint+0x17c>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	81bb      	strh	r3, [r7, #12]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	78db      	ldrb	r3, [r3, #3]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d020      	beq.n	800519a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516e:	813b      	strh	r3, [r7, #8]
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	f083 0320 	eor.w	r3, r3, #32
 8005176:	813b      	strh	r3, [r7, #8]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	893b      	ldrh	r3, [r7, #8]
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
 8005198:	e27f      	b.n	800569a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	897b      	ldrh	r3, [r7, #10]
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
 80051d2:	e262      	b.n	800569a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	4413      	add	r3, r2
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	011a      	lsls	r2, r3, #4
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	88db      	ldrh	r3, [r3, #6]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	b29b      	uxth	r3, r3
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005212:	b29b      	uxth	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	4413      	add	r3, r2
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	011a      	lsls	r2, r3, #4
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	4413      	add	r3, r2
 8005226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d112      	bne.n	800525a <USB_ActivateEndpoint+0x286>
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800523e:	b29a      	uxth	r2, r3
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005252:	b29a      	uxth	r2, r3
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e02f      	b.n	80052ba <USB_ActivateEndpoint+0x2e6>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b3e      	cmp	r3, #62	; 0x3e
 8005260:	d813      	bhi.n	800528a <USB_ActivateEndpoint+0x2b6>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	663b      	str	r3, [r7, #96]	; 0x60
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <USB_ActivateEndpoint+0x2a8>
 8005276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005278:	3301      	adds	r3, #1
 800527a:	663b      	str	r3, [r7, #96]	; 0x60
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	b29b      	uxth	r3, r3
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	b29a      	uxth	r2, r3
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e017      	b.n	80052ba <USB_ActivateEndpoint+0x2e6>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	663b      	str	r3, [r7, #96]	; 0x60
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <USB_ActivateEndpoint+0x2d0>
 800529e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a0:	3b01      	subs	r3, #1
 80052a2:	663b      	str	r3, [r7, #96]	; 0x60
 80052a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	83fb      	strh	r3, [r7, #30]
 80052c8:	8bfb      	ldrh	r3, [r7, #30]
 80052ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01b      	beq.n	800530a <USB_ActivateEndpoint+0x336>
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	83bb      	strh	r3, [r7, #28]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	8bbb      	ldrh	r3, [r7, #28]
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	837b      	strh	r3, [r7, #26]
 8005322:	8b7b      	ldrh	r3, [r7, #26]
 8005324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005328:	837b      	strh	r3, [r7, #26]
 800532a:	8b7b      	ldrh	r3, [r7, #26]
 800532c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005330:	837b      	strh	r3, [r7, #26]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8b7b      	ldrh	r3, [r7, #26]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
 8005352:	e1a2      	b.n	800569a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	65bb      	str	r3, [r7, #88]	; 0x58
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a0:	4413      	add	r3, r2
 80053a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	011a      	lsls	r2, r3, #4
 80053aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	657b      	str	r3, [r7, #84]	; 0x54
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	891b      	ldrh	r3, [r3, #8]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	4413      	add	r3, r2
 80053d6:	653b      	str	r3, [r7, #80]	; 0x50
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	011a      	lsls	r2, r3, #4
 80053de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	895b      	ldrh	r3, [r3, #10]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f040 8091 	bne.w	8005524 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005410:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01b      	beq.n	8005452 <USB_ActivateEndpoint+0x47e>
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <USB_ActivateEndpoint+0x4ce>
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80054ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80054c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	867b      	strh	r3, [r7, #50]	; 0x32
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
 8005522:	e0ba      	b.n	800569a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01d      	beq.n	800557c <USB_ActivateEndpoint+0x5a8>
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800558c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01d      	beq.n	80055d4 <USB_ActivateEndpoint+0x600>
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d024      	beq.n	8005626 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055fa:	f083 0320 	eor.w	r3, r3, #32
 80055fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]
 8005624:	e01d      	b.n	8005662 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800569a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800569e:	4618      	mov	r0, r3
 80056a0:	376c      	adds	r7, #108	; 0x6c
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b08d      	sub	sp, #52	; 0x34
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	7b1b      	ldrb	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 808e 	bne.w	80057d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d044      	beq.n	800574e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	81bb      	strh	r3, [r7, #12]
 80056d2:	89bb      	ldrh	r3, [r7, #12]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <USB_DeactivateEndpoint+0x6c>
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	817b      	strh	r3, [r7, #10]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	897b      	ldrh	r3, [r7, #10]
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572a:	813b      	strh	r3, [r7, #8]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e192      	b.n	8005a74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	827b      	strh	r3, [r7, #18]
 800575c:	8a7b      	ldrh	r3, [r7, #18]
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01b      	beq.n	800579e <USB_DeactivateEndpoint+0xf6>
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577c:	823b      	strh	r3, [r7, #16]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	8a3b      	ldrh	r3, [r7, #16]
 800578a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b4:	81fb      	strh	r3, [r7, #14]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
 80057d6:	e14d      	b.n	8005a74 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 80a5 	bne.w	800592c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	843b      	strh	r3, [r7, #32]
 80057f0:	8c3b      	ldrh	r3, [r7, #32]
 80057f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01b      	beq.n	8005832 <USB_DeactivateEndpoint+0x18a>
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	83fb      	strh	r3, [r7, #30]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	8bfb      	ldrh	r3, [r7, #30]
 800581e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800582a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582e:	b29b      	uxth	r3, r3
 8005830:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	83bb      	strh	r3, [r7, #28]
 8005840:	8bbb      	ldrh	r3, [r7, #28]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01b      	beq.n	8005882 <USB_DeactivateEndpoint+0x1da>
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005860:	837b      	strh	r3, [r7, #26]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	8b7b      	ldrh	r3, [r7, #26]
 800586e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800587e:	b29b      	uxth	r3, r3
 8005880:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005898:	833b      	strh	r3, [r7, #24]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	441a      	add	r2, r3
 80058a4:	8b3b      	ldrh	r3, [r7, #24]
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d0:	82fb      	strh	r3, [r7, #22]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	82bb      	strh	r3, [r7, #20]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8abb      	ldrh	r3, [r7, #20]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
 800592a:	e0a3      	b.n	8005a74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800593a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800593c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01b      	beq.n	800597c <USB_DeactivateEndpoint+0x2d4>
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	857b      	strh	r3, [r7, #42]	; 0x2a
 800598a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <USB_DeactivateEndpoint+0x324>
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3734      	adds	r7, #52	; 0x34
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0cc      	sub	sp, #304	; 0x130
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	f040 872e 	bne.w	80068f6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d905      	bls.n	8005ab6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ab4:	e004      	b.n	8005ac0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	7b1b      	ldrb	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d134      	bne.n	8005b34 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6959      	ldr	r1, [r3, #20]
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	88da      	ldrh	r2, [r3, #6]
 8005ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	1d38      	adds	r0, r7, #4
 8005ade:	6800      	ldr	r0, [r0, #0]
 8005ae0:	f001 fc03 	bl	80072ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	1d3a      	adds	r2, r7, #4
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	f107 0310 	add.w	r3, r7, #16
 8005afe:	f107 0210 	add.w	r2, r7, #16
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	440a      	add	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	011a      	lsls	r2, r3, #4
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	f000 beac 	b.w	800688c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	78db      	ldrb	r3, [r3, #3]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f040 838c 	bne.w	8006258 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	463b      	mov	r3, r7
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	f240 8330 	bls.w	80061b2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba0:	1ad2      	subs	r2, r2, r3
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 819e 	beq.w	8005f00 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bc8:	1d3a      	adds	r2, r7, #4
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d17a      	bne.n	8005cce <USB_EPStartXfer+0x24e>
 8005bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bdc:	1d3a      	adds	r2, r7, #4
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	011a      	lsls	r2, r3, #4
 8005c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11a      	bne.n	8005c54 <USB_EPStartXfer+0x1d4>
 8005c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e062      	b.n	8005d1a <USB_EPStartXfer+0x29a>
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5a:	d819      	bhi.n	8005c90 <USB_EPStartXfer+0x210>
 8005c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <USB_EPStartXfer+0x1fc>
 8005c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c76:	3301      	adds	r3, #1
 8005c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	029b      	lsls	r3, r3, #10
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e044      	b.n	8005d1a <USB_EPStartXfer+0x29a>
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <USB_EPStartXfer+0x230>
 8005ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005caa:	3b01      	subs	r3, #1
 8005cac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e025      	b.n	8005d1a <USB_EPStartXfer+0x29a>
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d120      	bne.n	8005d1a <USB_EPStartXfer+0x29a>
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ce8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	440a      	add	r2, r1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	011a      	lsls	r2, r3, #4
 8005cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	895b      	ldrh	r3, [r3, #10]
 8005d20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6959      	ldr	r1, [r3, #20]
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d34:	1d38      	adds	r0, r7, #4
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	f001 fad7 	bl	80072ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	441a      	add	r2, r3
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d909      	bls.n	8005d72 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	1ad2      	subs	r2, r2, r3
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	621a      	str	r2, [r3, #32]
 8005d70:	e008      	b.n	8005d84 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d17a      	bne.n	8005e84 <USB_EPStartXfer+0x404>
 8005d8e:	f107 0318 	add.w	r3, r7, #24
 8005d92:	1d3a      	adds	r2, r7, #4
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4619      	mov	r1, r3
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	f107 0218 	add.w	r2, r7, #24
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	440a      	add	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	f107 0318 	add.w	r3, r7, #24
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005dc6:	f107 0314 	add.w	r3, r7, #20
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11a      	bne.n	8005e0a <USB_EPStartXfer+0x38a>
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f107 0314 	add.w	r3, r7, #20
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	f107 0314 	add.w	r3, r7, #20
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e067      	b.n	8005eda <USB_EPStartXfer+0x45a>
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e10:	d819      	bhi.n	8005e46 <USB_EPStartXfer+0x3c6>
 8005e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <USB_EPStartXfer+0x3b2>
 8005e28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f107 0314 	add.w	r3, r7, #20
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e049      	b.n	8005eda <USB_EPStartXfer+0x45a>
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <USB_EPStartXfer+0x3e6>
 8005e5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e60:	3b01      	subs	r3, #1
 8005e62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	f107 0314 	add.w	r3, r7, #20
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e02a      	b.n	8005eda <USB_EPStartXfer+0x45a>
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d125      	bne.n	8005eda <USB_EPStartXfer+0x45a>
 8005e8e:	f107 0320 	add.w	r3, r7, #32
 8005e92:	1d3a      	adds	r2, r7, #4
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f107 0320 	add.w	r3, r7, #32
 8005ea8:	f107 0220 	add.w	r2, r7, #32
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	440a      	add	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	f107 0320 	add.w	r3, r7, #32
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ec6:	f107 031c 	add.w	r3, r7, #28
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f107 031c 	add.w	r3, r7, #28
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eda:	463b      	mov	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	891b      	ldrh	r3, [r3, #8]
 8005ee0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6959      	ldr	r1, [r3, #20]
 8005eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ef4:	1d38      	adds	r0, r7, #4
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f001 f9f7 	bl	80072ea <USB_WritePMA>
 8005efc:	f000 bcc6 	b.w	800688c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d164      	bne.n	8005fd4 <USB_EPStartXfer+0x554>
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1e:	4413      	add	r3, r2
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	011a      	lsls	r2, r3, #4
 8005f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d112      	bne.n	8005f62 <USB_EPStartXfer+0x4e2>
 8005f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e057      	b.n	8006012 <USB_EPStartXfer+0x592>
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	2b3e      	cmp	r3, #62	; 0x3e
 8005f68:	d817      	bhi.n	8005f9a <USB_EPStartXfer+0x51a>
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <USB_EPStartXfer+0x50a>
 8005f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f84:	3301      	adds	r3, #1
 8005f86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	029b      	lsls	r3, r3, #10
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e03b      	b.n	8006012 <USB_EPStartXfer+0x592>
 8005f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <USB_EPStartXfer+0x53a>
 8005fb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e01e      	b.n	8006012 <USB_EPStartXfer+0x592>
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d119      	bne.n	8006012 <USB_EPStartXfer+0x592>
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe4:	1d3b      	adds	r3, r7, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff2:	4413      	add	r3, r2
 8005ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	011a      	lsls	r2, r3, #4
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006000:	4413      	add	r3, r2
 8006002:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600c:	b29a      	uxth	r2, r3
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	891b      	ldrh	r3, [r3, #8]
 8006018:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800601c:	463b      	mov	r3, r7
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6959      	ldr	r1, [r3, #20]
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	b29b      	uxth	r3, r3
 8006028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800602c:	1d38      	adds	r0, r7, #4
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	f001 f95b 	bl	80072ea <USB_WritePMA>
            ep->xfer_buff += len;
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603e:	441a      	add	r2, r3
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	429a      	cmp	r2, r3
 8006054:	d909      	bls.n	800606a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006056:	463b      	mov	r3, r7
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	621a      	str	r2, [r3, #32]
 8006068:	e008      	b.n	800607c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800607c:	1d3b      	adds	r3, r7, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	643b      	str	r3, [r7, #64]	; 0x40
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d164      	bne.n	8006156 <USB_EPStartXfer+0x6d6>
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	4413      	add	r3, r2
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	011a      	lsls	r2, r3, #4
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	4413      	add	r3, r2
 80060b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d112      	bne.n	80060e4 <USB_EPStartXfer+0x664>
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e054      	b.n	800618e <USB_EPStartXfer+0x70e>
 80060e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ea:	d817      	bhi.n	800611c <USB_EPStartXfer+0x69c>
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <USB_EPStartXfer+0x68c>
 8006102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006106:	3301      	adds	r3, #1
 8006108:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800610c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29a      	uxth	r2, r3
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e038      	b.n	800618e <USB_EPStartXfer+0x70e>
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <USB_EPStartXfer+0x6bc>
 8006132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006136:	3b01      	subs	r3, #1
 8006138:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800613c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614e:	b29a      	uxth	r2, r3
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e01b      	b.n	800618e <USB_EPStartXfer+0x70e>
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d116      	bne.n	800618e <USB_EPStartXfer+0x70e>
 8006160:	1d3b      	adds	r3, r7, #4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	4413      	add	r3, r2
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617c:	4413      	add	r3, r2
 800617e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	b29a      	uxth	r2, r3
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	895b      	ldrh	r3, [r3, #10]
 8006194:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6959      	ldr	r1, [r3, #20]
 800619e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061a8:	1d38      	adds	r0, r7, #4
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	f001 f89d 	bl	80072ea <USB_WritePMA>
 80061b0:	e36c      	b.n	800688c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061b2:	463b      	mov	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	463b      	mov	r3, r7
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006214:	4413      	add	r3, r2
 8006216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	011a      	lsls	r2, r3, #4
 8006220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006222:	4413      	add	r3, r2
 8006224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006228:	65bb      	str	r3, [r7, #88]	; 0x58
 800622a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622e:	b29a      	uxth	r2, r3
 8006230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006232:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	891b      	ldrh	r3, [r3, #8]
 800623a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6959      	ldr	r1, [r3, #20]
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	b29b      	uxth	r3, r3
 800624a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800624e:	1d38      	adds	r0, r7, #4
 8006250:	6800      	ldr	r0, [r0, #0]
 8006252:	f001 f84a 	bl	80072ea <USB_WritePMA>
 8006256:	e319      	b.n	800688c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006290:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	b29b      	uxth	r3, r3
 800629a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8162 	beq.w	800658e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d164      	bne.n	80063a6 <USB_EPStartXfer+0x926>
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f0:	4413      	add	r3, r2
 80062f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fe:	4413      	add	r3, r2
 8006300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006304:	677b      	str	r3, [r7, #116]	; 0x74
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d112      	bne.n	8006334 <USB_EPStartXfer+0x8b4>
 800630e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006318:	b29a      	uxth	r2, r3
 800631a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29a      	uxth	r2, r3
 800632e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e057      	b.n	80063e4 <USB_EPStartXfer+0x964>
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	2b3e      	cmp	r3, #62	; 0x3e
 800633a:	d817      	bhi.n	800636c <USB_EPStartXfer+0x8ec>
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <USB_EPStartXfer+0x8dc>
 8006352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006356:	3301      	adds	r3, #1
 8006358:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800635c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006360:	b29b      	uxth	r3, r3
 8006362:	029b      	lsls	r3, r3, #10
 8006364:	b29a      	uxth	r2, r3
 8006366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	e03b      	b.n	80063e4 <USB_EPStartXfer+0x964>
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <USB_EPStartXfer+0x90c>
 8006382:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006386:	3b01      	subs	r3, #1
 8006388:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800638c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29a      	uxth	r2, r3
 80063a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e01e      	b.n	80063e4 <USB_EPStartXfer+0x964>
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d119      	bne.n	80063e4 <USB_EPStartXfer+0x964>
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c0:	4413      	add	r3, r2
 80063c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	895b      	ldrh	r3, [r3, #10]
 80063ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6959      	ldr	r1, [r3, #20]
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063fe:	1d38      	adds	r0, r7, #4
 8006400:	6800      	ldr	r0, [r0, #0]
 8006402:	f000 ff72 	bl	80072ea <USB_WritePMA>
          ep->xfer_buff += len;
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006410:	441a      	add	r2, r3
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	429a      	cmp	r2, r3
 8006426:	d909      	bls.n	800643c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1a      	ldr	r2, [r3, #32]
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	463b      	mov	r3, r7
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	621a      	str	r2, [r3, #32]
 800643a:	e008      	b.n	800644e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 821a 	beq.w	800688c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d164      	bne.n	800652c <USB_EPStartXfer+0xaac>
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	66bb      	str	r3, [r7, #104]	; 0x68
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006476:	4413      	add	r3, r2
 8006478:	66bb      	str	r3, [r7, #104]	; 0x68
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006484:	4413      	add	r3, r2
 8006486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800648a:	667b      	str	r3, [r7, #100]	; 0x64
 800648c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d112      	bne.n	80064ba <USB_EPStartXfer+0xa3a>
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649e:	b29a      	uxth	r2, r3
 80064a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e057      	b.n	800656a <USB_EPStartXfer+0xaea>
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	2b3e      	cmp	r3, #62	; 0x3e
 80064c0:	d817      	bhi.n	80064f2 <USB_EPStartXfer+0xa72>
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80064cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <USB_EPStartXfer+0xa62>
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064dc:	3301      	adds	r3, #1
 80064de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e03b      	b.n	800656a <USB_EPStartXfer+0xaea>
 80064f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80064fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <USB_EPStartXfer+0xa92>
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	3b01      	subs	r3, #1
 800650e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006516:	b29b      	uxth	r3, r3
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e01e      	b.n	800656a <USB_EPStartXfer+0xaea>
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d119      	bne.n	800656a <USB_EPStartXfer+0xaea>
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800654a:	4413      	add	r3, r2
 800654c:	673b      	str	r3, [r7, #112]	; 0x70
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006558:	4413      	add	r3, r2
 800655a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006564:	b29a      	uxth	r2, r3
 8006566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	891b      	ldrh	r3, [r3, #8]
 8006570:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6959      	ldr	r1, [r3, #20]
 800657a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657e:	b29b      	uxth	r3, r3
 8006580:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006584:	1d38      	adds	r0, r7, #4
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	f000 feaf 	bl	80072ea <USB_WritePMA>
 800658c:	e17e      	b.n	800688c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d16f      	bne.n	8006678 <USB_EPStartXfer+0xbf8>
 8006598:	1d3b      	adds	r3, r7, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065b0:	4413      	add	r3, r2
 80065b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	011a      	lsls	r2, r3, #4
 80065be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065c2:	4413      	add	r3, r2
 80065c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d116      	bne.n	8006602 <USB_EPStartXfer+0xb82>
 80065d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e05f      	b.n	80066c2 <USB_EPStartXfer+0xc42>
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	2b3e      	cmp	r3, #62	; 0x3e
 8006608:	d818      	bhi.n	800663c <USB_EPStartXfer+0xbbc>
 800660a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <USB_EPStartXfer+0xbaa>
 8006620:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006624:	3301      	adds	r3, #1
 8006626:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800662a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800662e:	b29b      	uxth	r3, r3
 8006630:	029b      	lsls	r3, r3, #10
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e042      	b.n	80066c2 <USB_EPStartXfer+0xc42>
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <USB_EPStartXfer+0xbdc>
 8006652:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006656:	3b01      	subs	r3, #1
 8006658:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800665c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006660:	b29b      	uxth	r3, r3
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e024      	b.n	80066c2 <USB_EPStartXfer+0xc42>
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d11f      	bne.n	80066c2 <USB_EPStartXfer+0xc42>
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800669a:	4413      	add	r3, r2
 800669c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	011a      	lsls	r2, r3, #4
 80066a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	891b      	ldrh	r3, [r3, #8]
 80066c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066dc:	1d38      	adds	r0, r7, #4
 80066de:	6800      	ldr	r0, [r0, #0]
 80066e0:	f000 fe03 	bl	80072ea <USB_WritePMA>
          ep->xfer_buff += len;
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ee:	441a      	add	r2, r3
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6a1a      	ldr	r2, [r3, #32]
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	429a      	cmp	r2, r3
 8006704:	d909      	bls.n	800671a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	463b      	mov	r3, r7
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	621a      	str	r2, [r3, #32]
 8006718:	e008      	b.n	800672c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2200      	movs	r2, #0
 800672a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80ab 	beq.w	800688c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800673e:	463b      	mov	r3, r7
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d16f      	bne.n	8006828 <USB_EPStartXfer+0xda8>
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	4413      	add	r3, r2
 8006762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	011a      	lsls	r2, r3, #4
 800676e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006772:	4413      	add	r3, r2
 8006774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d116      	bne.n	80067b2 <USB_EPStartXfer+0xd32>
 8006784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006790:	b29a      	uxth	r2, r3
 8006792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e05b      	b.n	800686a <USB_EPStartXfer+0xdea>
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	2b3e      	cmp	r3, #62	; 0x3e
 80067b8:	d818      	bhi.n	80067ec <USB_EPStartXfer+0xd6c>
 80067ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <USB_EPStartXfer+0xd5a>
 80067d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d4:	3301      	adds	r3, #1
 80067d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067de:	b29b      	uxth	r3, r3
 80067e0:	029b      	lsls	r3, r3, #10
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e03e      	b.n	800686a <USB_EPStartXfer+0xdea>
 80067ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <USB_EPStartXfer+0xd8c>
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006806:	3b01      	subs	r3, #1
 8006808:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800680c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e020      	b.n	800686a <USB_EPStartXfer+0xdea>
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d11b      	bne.n	800686a <USB_EPStartXfer+0xdea>
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006842:	4413      	add	r3, r2
 8006844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	011a      	lsls	r2, r3, #4
 8006850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006854:	4413      	add	r3, r2
 8006856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800685a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800685e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	895b      	ldrh	r3, [r3, #10]
 8006870:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6959      	ldr	r1, [r3, #20]
 800687a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687e:	b29b      	uxth	r3, r3
 8006880:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006884:	1d38      	adds	r0, r7, #4
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	f000 fd2f 	bl	80072ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800688c:	1d3b      	adds	r3, r7, #4
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f107 020a 	add.w	r2, r7, #10
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	8013      	strh	r3, [r2, #0]
 80068ac:	f107 030a 	add.w	r3, r7, #10
 80068b0:	f107 020a 	add.w	r2, r7, #10
 80068b4:	8812      	ldrh	r2, [r2, #0]
 80068b6:	f082 0210 	eor.w	r2, r2, #16
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	f107 030a 	add.w	r3, r7, #10
 80068c0:	f107 020a 	add.w	r2, r7, #10
 80068c4:	8812      	ldrh	r2, [r2, #0]
 80068c6:	f082 0220 	eor.w	r2, r2, #32
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	1d3b      	adds	r3, r7, #4
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	f107 030a 	add.w	r3, r7, #10
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
 80068f4:	e3b5      	b.n	8007062 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	7b1b      	ldrb	r3, [r3, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8090 	bne.w	8006a22 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90e      	bls.n	8006930 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006912:	463b      	mov	r3, r7
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	619a      	str	r2, [r3, #24]
 800692e:	e008      	b.n	8006942 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006952:	b29b      	uxth	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800695a:	4413      	add	r3, r2
 800695c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	011a      	lsls	r2, r3, #4
 8006968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800696c:	4413      	add	r3, r2
 800696e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d116      	bne.n	80069ac <USB_EPStartXfer+0xf2c>
 800697e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e32c      	b.n	8007006 <USB_EPStartXfer+0x1586>
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	2b3e      	cmp	r3, #62	; 0x3e
 80069b2:	d818      	bhi.n	80069e6 <USB_EPStartXfer+0xf66>
 80069b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <USB_EPStartXfer+0xf54>
 80069ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ce:	3301      	adds	r3, #1
 80069d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069d8:	b29b      	uxth	r3, r3
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e30f      	b.n	8007006 <USB_EPStartXfer+0x1586>
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <USB_EPStartXfer+0xf86>
 80069fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a00:	3b01      	subs	r3, #1
 8006a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e2f1      	b.n	8007006 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f040 818f 	bne.w	8006d4c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d175      	bne.n	8006b24 <USB_EPStartXfer+0x10a4>
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a50:	4413      	add	r3, r2
 8006a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d116      	bne.n	8006aa4 <USB_EPStartXfer+0x1024>
 8006a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	e065      	b.n	8006b70 <USB_EPStartXfer+0x10f0>
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8006aac:	d81a      	bhi.n	8006ae4 <USB_EPStartXfer+0x1064>
 8006aae:	463b      	mov	r3, r7
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <USB_EPStartXfer+0x1052>
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	029b      	lsls	r3, r3, #10
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e045      	b.n	8006b70 <USB_EPStartXfer+0x10f0>
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006af0:	463b      	mov	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <USB_EPStartXfer+0x1088>
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	3b01      	subs	r3, #1
 8006b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	029b      	lsls	r3, r3, #10
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	e025      	b.n	8006b70 <USB_EPStartXfer+0x10f0>
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d120      	bne.n	8006b70 <USB_EPStartXfer+0x10f0>
 8006b2e:	1d3b      	adds	r3, r7, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b46:	4413      	add	r3, r2
 8006b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	011a      	lsls	r2, r3, #4
 8006b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b58:	4413      	add	r3, r2
 8006b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d175      	bne.n	8006c6e <USB_EPStartXfer+0x11ee>
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	011a      	lsls	r2, r3, #4
 8006ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <USB_EPStartXfer+0x116e>
 8006bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e061      	b.n	8006cb2 <USB_EPStartXfer+0x1232>
 8006bee:	463b      	mov	r3, r7
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf6:	d81a      	bhi.n	8006c2e <USB_EPStartXfer+0x11ae>
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USB_EPStartXfer+0x119c>
 8006c12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e041      	b.n	8006cb2 <USB_EPStartXfer+0x1232>
 8006c2e:	463b      	mov	r3, r7
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USB_EPStartXfer+0x11d2>
 8006c48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e021      	b.n	8006cb2 <USB_EPStartXfer+0x1232>
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d11c      	bne.n	8006cb2 <USB_EPStartXfer+0x1232>
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c88:	4413      	add	r3, r2
 8006c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c8e:	463b      	mov	r3, r7
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 81a4 	beq.w	8007006 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <USB_EPStartXfer+0x126a>
 8006cde:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 8187 	bne.w	8007006 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cf8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 8180 	bne.w	8007006 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d20:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
 8006d4a:	e15c      	b.n	8007006 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	78db      	ldrb	r3, [r3, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	f040 8155 	bne.w	8007002 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d90e      	bls.n	8006d86 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006d72:	463b      	mov	r3, r7
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	463b      	mov	r3, r7
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	619a      	str	r2, [r3, #24]
 8006d84:	e008      	b.n	8006d98 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2200      	movs	r2, #0
 8006d96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d16f      	bne.n	8006e82 <USB_EPStartXfer+0x1402>
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	011a      	lsls	r2, r3, #4
 8006dc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d116      	bne.n	8006e0c <USB_EPStartXfer+0x138c>
 8006dde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e05f      	b.n	8006ecc <USB_EPStartXfer+0x144c>
 8006e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e10:	2b3e      	cmp	r3, #62	; 0x3e
 8006e12:	d818      	bhi.n	8006e46 <USB_EPStartXfer+0x13c6>
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <USB_EPStartXfer+0x13b4>
 8006e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e042      	b.n	8006ecc <USB_EPStartXfer+0x144c>
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <USB_EPStartXfer+0x13e6>
 8006e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e60:	3b01      	subs	r3, #1
 8006e62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e024      	b.n	8006ecc <USB_EPStartXfer+0x144c>
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11f      	bne.n	8006ecc <USB_EPStartXfer+0x144c>
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e94:	1d3b      	adds	r3, r7, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eaa:	463b      	mov	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	011a      	lsls	r2, r3, #4
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ebc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d16f      	bne.n	8006fbe <USB_EPStartXfer+0x153e>
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	011a      	lsls	r2, r3, #4
 8006f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d116      	bne.n	8006f48 <USB_EPStartXfer+0x14c8>
 8006f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e05e      	b.n	8007006 <USB_EPStartXfer+0x1586>
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4e:	d818      	bhi.n	8006f82 <USB_EPStartXfer+0x1502>
 8006f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <USB_EPStartXfer+0x14f0>
 8006f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	029b      	lsls	r3, r3, #10
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e041      	b.n	8007006 <USB_EPStartXfer+0x1586>
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <USB_EPStartXfer+0x1522>
 8006f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	029b      	lsls	r3, r3, #10
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e023      	b.n	8007006 <USB_EPStartXfer+0x1586>
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d11e      	bne.n	8007006 <USB_EPStartXfer+0x1586>
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	011a      	lsls	r2, r3, #4
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e001      	b.n	8007006 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e02e      	b.n	8007064 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800701c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007020:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007024:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007028:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800702c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007030:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007038:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800704e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705e:	b29b      	uxth	r3, r3
 8007060:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	81bb      	strh	r3, [r7, #12]
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	f083 0310 	eor.w	r3, r3, #16
 800709e:	81bb      	strh	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	89bb      	ldrh	r3, [r7, #12]
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
 80070c0:	e01f      	b.n	8007102 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	89fb      	ldrh	r3, [r7, #14]
 80070dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070e0:	81fb      	strh	r3, [r7, #14]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	7b1b      	ldrb	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 809d 	bne.w	800725c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	785b      	ldrb	r3, [r3, #1]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04c      	beq.n	80071c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	823b      	strh	r3, [r7, #16]
 8007138:	8a3b      	ldrh	r3, [r7, #16]
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01b      	beq.n	800717a <USB_EPClearStall+0x6c>
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007158:	81fb      	strh	r3, [r7, #14]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	89fb      	ldrh	r3, [r7, #14]
 8007166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	78db      	ldrb	r3, [r3, #3]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d06c      	beq.n	800725c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007198:	81bb      	strh	r3, [r7, #12]
 800719a:	89bb      	ldrh	r3, [r7, #12]
 800719c:	f083 0320 	eor.w	r3, r3, #32
 80071a0:	81bb      	strh	r3, [r7, #12]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	89bb      	ldrh	r3, [r7, #12]
 80071ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071be:	b29b      	uxth	r3, r3
 80071c0:	8013      	strh	r3, [r2, #0]
 80071c2:	e04b      	b.n	800725c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	82fb      	strh	r3, [r7, #22]
 80071d2:	8afb      	ldrh	r3, [r7, #22]
 80071d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01b      	beq.n	8007214 <USB_EPClearStall+0x106>
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	82bb      	strh	r3, [r7, #20]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	8abb      	ldrh	r3, [r7, #20]
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	827b      	strh	r3, [r7, #18]
 800722c:	8a7b      	ldrh	r3, [r7, #18]
 800722e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007232:	827b      	strh	r3, [r7, #18]
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800723a:	827b      	strh	r3, [r7, #18]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	8a7b      	ldrh	r3, [r7, #18]
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2280      	movs	r2, #128	; 0x80
 800727e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr

080072a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr

080072b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b08d      	sub	sp, #52	; 0x34
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4611      	mov	r1, r2
 80072f6:	461a      	mov	r2, r3
 80072f8:	460b      	mov	r3, r1
 80072fa:	80fb      	strh	r3, [r7, #6]
 80072fc:	4613      	mov	r3, r2
 80072fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007300:	88bb      	ldrh	r3, [r7, #4]
 8007302:	3301      	adds	r3, #1
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	005a      	lsls	r2, r3, #1
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007322:	e01e      	b.n	8007362 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	3301      	adds	r3, #1
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	b29a      	uxth	r2, r3
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	3302      	adds	r3, #2
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	3302      	adds	r3, #2
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	3b01      	subs	r3, #1
 8007360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1dd      	bne.n	8007324 <USB_WritePMA+0x3a>
  }
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	3734      	adds	r7, #52	; 0x34
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007374:	b480      	push	{r7}
 8007376:	b08b      	sub	sp, #44	; 0x2c
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	460b      	mov	r3, r1
 8007384:	80fb      	strh	r3, [r7, #6]
 8007386:	4613      	mov	r3, r2
 8007388:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800738a:	88bb      	ldrh	r3, [r7, #4]
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	005a      	lsls	r2, r3, #1
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
 80073ac:	e01b      	b.n	80073e6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	3302      	adds	r3, #2
 80073ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	3302      	adds	r3, #2
 80073de:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	3b01      	subs	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e0      	bne.n	80073ae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80073ec:	88bb      	ldrh	r3, [r7, #4]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	701a      	strb	r2, [r3, #0]
  }
}
 8007408:	bf00      	nop
 800740a:	372c      	adds	r7, #44	; 0x2c
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr

08007412 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c1b      	ldrb	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d115      	bne.n	8007456 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800742a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742e:	2202      	movs	r2, #2
 8007430:	2181      	movs	r1, #129	; 0x81
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 ff0f 	bl	8009256 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800743e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007442:	2202      	movs	r2, #2
 8007444:	2101      	movs	r1, #1
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 ff05 	bl	8009256 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007454:	e012      	b.n	800747c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2202      	movs	r2, #2
 800745a:	2181      	movs	r1, #129	; 0x81
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fefa 	bl	8009256 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	2202      	movs	r2, #2
 800746c:	2101      	movs	r1, #1
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fef1 	bl	8009256 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800747c:	2308      	movs	r3, #8
 800747e:	2203      	movs	r2, #3
 8007480:	2182      	movs	r1, #130	; 0x82
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fee7 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800748e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007492:	f002 f807 	bl	80094a4 <USBD_static_malloc>
 8007496:	4602      	mov	r2, r0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	e026      	b.n	80074fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7c1b      	ldrb	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e2:	2101      	movs	r1, #1
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 ffa7 	bl	8009438 <USBD_LL_PrepareReceive>
 80074ea:	e007      	b.n	80074fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f2:	2340      	movs	r3, #64	; 0x40
 80074f4:	2101      	movs	r1, #1
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 ff9e 	bl	8009438 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007516:	2181      	movs	r1, #129	; 0x81
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fec2 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007524:	2101      	movs	r1, #1
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 febb 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007534:	2182      	movs	r1, #130	; 0x82
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 feb3 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	4618      	mov	r0, r3
 800755e:	f001 ffad 	bl	80094bc <USBD_static_free>
    pdev->pClassData = NULL;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759a:	2b00      	cmp	r3, #0
 800759c:	d039      	beq.n	8007612 <USBD_CDC_Setup+0x9e>
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d17f      	bne.n	80076a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d029      	beq.n	80075fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b25b      	sxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da11      	bge.n	80075d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80075c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	88d2      	ldrh	r2, [r2, #6]
 80075c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075c8:	6939      	ldr	r1, [r7, #16]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fa0a 	bl	80089ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80075d6:	e06b      	b.n	80076b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	785a      	ldrb	r2, [r3, #1]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	88db      	ldrh	r3, [r3, #6]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075ee:	6939      	ldr	r1, [r7, #16]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	88db      	ldrh	r3, [r3, #6]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f001 fa25 	bl	8008a46 <USBD_CtlPrepareRx>
      break;
 80075fc:	e058      	b.n	80076b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	7850      	ldrb	r0, [r2, #1]
 800760a:	2200      	movs	r2, #0
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	4798      	blx	r3
      break;
 8007610:	e04e      	b.n	80076b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b0b      	cmp	r3, #11
 8007618:	d02e      	beq.n	8007678 <USBD_CDC_Setup+0x104>
 800761a:	2b0b      	cmp	r3, #11
 800761c:	dc38      	bgt.n	8007690 <USBD_CDC_Setup+0x11c>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <USBD_CDC_Setup+0xb4>
 8007622:	2b0a      	cmp	r3, #10
 8007624:	d014      	beq.n	8007650 <USBD_CDC_Setup+0xdc>
 8007626:	e033      	b.n	8007690 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762e:	2b03      	cmp	r3, #3
 8007630:	d107      	bne.n	8007642 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007632:	f107 030c 	add.w	r3, r7, #12
 8007636:	2202      	movs	r2, #2
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f9d5 	bl	80089ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007640:	e02e      	b.n	80076a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f966 	bl	8008916 <USBD_CtlError>
            ret = USBD_FAIL;
 800764a:	2302      	movs	r3, #2
 800764c:	75fb      	strb	r3, [r7, #23]
          break;
 800764e:	e027      	b.n	80076a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	2b03      	cmp	r3, #3
 8007658:	d107      	bne.n	800766a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800765a:	f107 030f 	add.w	r3, r7, #15
 800765e:	2201      	movs	r2, #1
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 f9c1 	bl	80089ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007668:	e01a      	b.n	80076a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f952 	bl	8008916 <USBD_CtlError>
            ret = USBD_FAIL;
 8007672:	2302      	movs	r3, #2
 8007674:	75fb      	strb	r3, [r7, #23]
          break;
 8007676:	e013      	b.n	80076a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767e:	2b03      	cmp	r3, #3
 8007680:	d00d      	beq.n	800769e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f946 	bl	8008916 <USBD_CtlError>
            ret = USBD_FAIL;
 800768a:	2302      	movs	r3, #2
 800768c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800768e:	e006      	b.n	800769e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 f93f 	bl	8008916 <USBD_CtlError>
          ret = USBD_FAIL;
 8007698:	2302      	movs	r3, #2
 800769a:	75fb      	strb	r3, [r7, #23]
          break;
 800769c:	e000      	b.n	80076a0 <USBD_CDC_Setup+0x12c>
          break;
 800769e:	bf00      	nop
      }
      break;
 80076a0:	e006      	b.n	80076b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f936 	bl	8008916 <USBD_CtlError>
      ret = USBD_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	75fb      	strb	r3, [r7, #23]
      break;
 80076ae:	bf00      	nop
  }

  return ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d03a      	beq.n	8007756 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	331c      	adds	r3, #28
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d029      	beq.n	800774a <USBD_CDC_DataIn+0x90>
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	331c      	adds	r3, #28
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	78f9      	ldrb	r1, [r7, #3]
 800770a:	68b8      	ldr	r0, [r7, #8]
 800770c:	460b      	mov	r3, r1
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4403      	add	r3, r0
 8007716:	3338      	adds	r3, #56	; 0x38
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	fbb2 f1f3 	udiv	r1, r2, r3
 800771e:	fb03 f301 	mul.w	r3, r3, r1
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d110      	bne.n	800774a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	331c      	adds	r3, #28
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800773c:	78f9      	ldrb	r1, [r7, #3]
 800773e:	2300      	movs	r3, #0
 8007740:	2200      	movs	r2, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fe55 	bl	80093f2 <USBD_LL_Transmit>
 8007748:	e003      	b.n	8007752 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fe80 	bl	800947e <USBD_LL_GetRxDataSize>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077a4:	4611      	mov	r1, r2
 80077a6:	4798      	blx	r3

    return USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e000      	b.n	80077ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d015      	beq.n	80077fc <USBD_CDC_EP0_RxReady+0x46>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077d6:	2bff      	cmp	r3, #255	; 0xff
 80077d8:	d010      	beq.n	80077fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077f0:	b292      	uxth	r2, r2
 80077f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	22ff      	movs	r2, #255	; 0xff
 80077f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2243      	movs	r2, #67	; 0x43
 8007814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000194 	.word	0x20000194

08007828 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2243      	movs	r2, #67	; 0x43
 8007834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007836:	4b03      	ldr	r3, [pc, #12]	; (8007844 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000150 	.word	0x20000150

08007848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2243      	movs	r2, #67	; 0x43
 8007854:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007856:	4b03      	ldr	r3, [pc, #12]	; (8007864 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	200001d8 	.word	0x200001d8

08007868 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	220a      	movs	r2, #10
 8007874:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007876:	4b03      	ldr	r3, [pc, #12]	; (8007884 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000010c 	.word	0x2000010c

08007888 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007892:	2302      	movs	r3, #2
 8007894:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d01c      	beq.n	8007960 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800792c:	2b00      	cmp	r3, #0
 800792e:	d115      	bne.n	800795c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800794e:	b29b      	uxth	r3, r3
 8007950:	2181      	movs	r1, #129	; 0x81
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fd4d 	bl	80093f2 <USBD_LL_Transmit>

      return USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e002      	b.n	8007962 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7c1b      	ldrb	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d109      	bne.n	80079a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007996:	2101      	movs	r1, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fd4d 	bl	8009438 <USBD_LL_PrepareReceive>
 800799e:	e007      	b.n	80079b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a6:	2340      	movs	r3, #64	; 0x40
 80079a8:	2101      	movs	r1, #1
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fd44 	bl	8009438 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e000      	b.n	80079b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80079b4:	2302      	movs	r3, #2
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4613      	mov	r3, r2
 80079ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e01a      	b.n	8007a0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	79fa      	ldrb	r2, [r7, #7]
 8007a02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f001 fbb1 	bl	800916c <USBD_LL_Init>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d006      	beq.n	8007a36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
 8007a34:	e001      	b.n	8007a3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a36:	2302      	movs	r3, #2
 8007a38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fbe6 	bl	8009220 <USBD_LL_Start>

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr

08007a72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00c      	beq.n	8007aa6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	4611      	mov	r1, r2
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fed8 	bl	800889e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007afc:	461a      	mov	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d016      	beq.n	8007b40 <USBD_LL_SetupStage+0x6a>
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d81c      	bhi.n	8007b50 <USBD_LL_SetupStage+0x7a>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <USBD_LL_SetupStage+0x4a>
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d008      	beq.n	8007b30 <USBD_LL_SetupStage+0x5a>
 8007b1e:	e017      	b.n	8007b50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9cb 	bl	8007ec4 <USBD_StdDevReq>
      break;
 8007b2e:	e01a      	b.n	8007b66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa2d 	bl	8007f98 <USBD_StdItfReq>
      break;
 8007b3e:	e012      	b.n	8007b66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa6d 	bl	8008028 <USBD_StdEPReq>
      break;
 8007b4e:	e00a      	b.n	8007b66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fbbe 	bl	80092e0 <USBD_LL_StallEP>
      break;
 8007b64:	bf00      	nop
  }

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d14b      	bne.n	8007c1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d134      	bne.n	8007c00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d919      	bls.n	8007bd6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	1ad2      	subs	r2, r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d203      	bcs.n	8007bc4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	e002      	b.n	8007bca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 ff57 	bl	8008a82 <USBD_CtlContinueRx>
 8007bd4:	e038      	b.n	8007c48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d105      	bne.n	8007bf8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 ff54 	bl	8008aa6 <USBD_CtlSendStatus>
 8007bfe:	e023      	b.n	8007c48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d11e      	bne.n	8007c48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c12:	2100      	movs	r1, #0
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f001 fb63 	bl	80092e0 <USBD_LL_StallEP>
 8007c1a:	e015      	b.n	8007c48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d108      	bne.n	8007c44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	7afa      	ldrb	r2, [r7, #11]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	4798      	blx	r3
 8007c42:	e001      	b.n	8007c48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c44:	2302      	movs	r3, #2
 8007c46:	e000      	b.n	8007c4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d17f      	bne.n	8007d66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d15c      	bne.n	8007d30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d915      	bls.n	8007cae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fec1 	bl	8008a22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f001 fbc6 	bl	8009438 <USBD_LL_PrepareReceive>
 8007cac:	e04e      	b.n	8007d4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	6912      	ldr	r2, [r2, #16]
 8007cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cba:	fb02 f201 	mul.w	r2, r2, r1
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11c      	bne.n	8007cfe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d316      	bcc.n	8007cfe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d20f      	bcs.n	8007cfe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fe9d 	bl	8008a22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f001 fb9e 	bl	8009438 <USBD_LL_PrepareReceive>
 8007cfc:	e026      	b.n	8007d4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d105      	bne.n	8007d20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f001 fadc 	bl	80092e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fecf 	bl	8008acc <USBD_CtlReceiveStatus>
 8007d2e:	e00d      	b.n	8007d4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d004      	beq.n	8007d44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d44:	2180      	movs	r1, #128	; 0x80
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f001 faca 	bl	80092e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d11d      	bne.n	8007d92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fe81 	bl	8007a5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d64:	e015      	b.n	8007d92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00d      	beq.n	8007d8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d108      	bne.n	8007d8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	7afa      	ldrb	r2, [r7, #11]
 8007d86:	4611      	mov	r1, r2
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	4798      	blx	r3
 8007d8c:	e001      	b.n	8007d92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e000      	b.n	8007d94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fa53 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dc0:	2340      	movs	r3, #64	; 0x40
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2180      	movs	r1, #128	; 0x80
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fa45 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2240      	movs	r2, #64	; 0x40
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6852      	ldr	r2, [r2, #4]
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	4611      	mov	r1, r2
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
  }

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2204      	movs	r2, #4
 8007e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d105      	bne.n	8007e82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d10b      	bne.n	8007eb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d005      	beq.n	8007eea <USBD_StdDevReq+0x26>
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d84f      	bhi.n	8007f82 <USBD_StdDevReq+0xbe>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USBD_StdDevReq+0x36>
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d14b      	bne.n	8007f82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
      break;
 8007ef8:	e048      	b.n	8007f8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	785b      	ldrb	r3, [r3, #1]
 8007efe:	2b09      	cmp	r3, #9
 8007f00:	d839      	bhi.n	8007f76 <USBD_StdDevReq+0xb2>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <USBD_StdDevReq+0x44>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f59 	.word	0x08007f59
 8007f0c:	08007f6d 	.word	0x08007f6d
 8007f10:	08007f77 	.word	0x08007f77
 8007f14:	08007f63 	.word	0x08007f63
 8007f18:	08007f77 	.word	0x08007f77
 8007f1c:	08007f3b 	.word	0x08007f3b
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f77 	.word	0x08007f77
 8007f28:	08007f4f 	.word	0x08007f4f
 8007f2c:	08007f45 	.word	0x08007f45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9dc 	bl	80082f0 <USBD_GetDescriptor>
          break;
 8007f38:	e022      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb3f 	bl	80085c0 <USBD_SetAddress>
          break;
 8007f42:	e01d      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fb7e 	bl	8008648 <USBD_SetConfig>
          break;
 8007f4c:	e018      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fc07 	bl	8008764 <USBD_GetConfig>
          break;
 8007f56:	e013      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fc37 	bl	80087ce <USBD_GetStatus>
          break;
 8007f60:	e00e      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fc65 	bl	8008834 <USBD_SetFeature>
          break;
 8007f6a:	e009      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fc74 	bl	800885c <USBD_ClrFeature>
          break;
 8007f74:	e004      	b.n	8007f80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fccc 	bl	8008916 <USBD_CtlError>
          break;
 8007f7e:	bf00      	nop
      }
      break;
 8007f80:	e004      	b.n	8007f8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fcc6 	bl	8008916 <USBD_CtlError>
      break;
 8007f8a:	bf00      	nop
  }

  return ret;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop

08007f98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d005      	beq.n	8007fbe <USBD_StdItfReq+0x26>
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d82e      	bhi.n	8008014 <USBD_StdItfReq+0x7c>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <USBD_StdItfReq+0x26>
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d12a      	bne.n	8008014 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d81d      	bhi.n	8008006 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d813      	bhi.n	8007ffc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d110      	bne.n	8008010 <USBD_StdItfReq+0x78>
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10d      	bne.n	8008010 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fd56 	bl	8008aa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ffa:	e009      	b.n	8008010 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fc89 	bl	8008916 <USBD_CtlError>
          break;
 8008004:	e004      	b.n	8008010 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc84 	bl	8008916 <USBD_CtlError>
          break;
 800800e:	e000      	b.n	8008012 <USBD_StdItfReq+0x7a>
          break;
 8008010:	bf00      	nop
      }
      break;
 8008012:	e004      	b.n	800801e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc7d 	bl	8008916 <USBD_CtlError>
      break;
 800801c:	bf00      	nop
  }

  return USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	889b      	ldrh	r3, [r3, #4]
 800803a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008044:	2b40      	cmp	r3, #64	; 0x40
 8008046:	d007      	beq.n	8008058 <USBD_StdEPReq+0x30>
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	f200 8146 	bhi.w	80082da <USBD_StdEPReq+0x2b2>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <USBD_StdEPReq+0x40>
 8008052:	2b20      	cmp	r3, #32
 8008054:	f040 8141 	bne.w	80082da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
      break;
 8008066:	e13d      	b.n	80082e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008070:	2b20      	cmp	r3, #32
 8008072:	d10a      	bne.n	800808a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	e12d      	b.n	80082e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d007      	beq.n	80080a2 <USBD_StdEPReq+0x7a>
 8008092:	2b03      	cmp	r3, #3
 8008094:	f300 811b 	bgt.w	80082ce <USBD_StdEPReq+0x2a6>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d072      	beq.n	8008182 <USBD_StdEPReq+0x15a>
 800809c:	2b01      	cmp	r3, #1
 800809e:	d03a      	beq.n	8008116 <USBD_StdEPReq+0xee>
 80080a0:	e115      	b.n	80082ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <USBD_StdEPReq+0x8a>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d015      	beq.n	80080dc <USBD_StdEPReq+0xb4>
 80080b0:	e02b      	b.n	800810a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <USBD_StdEPReq+0xaa>
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b80      	cmp	r3, #128	; 0x80
 80080bc:	d009      	beq.n	80080d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f90c 	bl	80092e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f908 	bl	80092e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080d0:	e020      	b.n	8008114 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc1e 	bl	8008916 <USBD_CtlError>
              break;
 80080da:	e01b      	b.n	8008114 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10e      	bne.n	8008102 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00b      	beq.n	8008102 <USBD_StdEPReq+0xda>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b80      	cmp	r3, #128	; 0x80
 80080ee:	d008      	beq.n	8008102 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	88db      	ldrh	r3, [r3, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f8ef 	bl	80092e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fccf 	bl	8008aa6 <USBD_CtlSendStatus>

              break;
 8008108:	e004      	b.n	8008114 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc02 	bl	8008916 <USBD_CtlError>
              break;
 8008112:	bf00      	nop
          }
          break;
 8008114:	e0e0      	b.n	80082d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811c:	2b02      	cmp	r3, #2
 800811e:	d002      	beq.n	8008126 <USBD_StdEPReq+0xfe>
 8008120:	2b03      	cmp	r3, #3
 8008122:	d015      	beq.n	8008150 <USBD_StdEPReq+0x128>
 8008124:	e026      	b.n	8008174 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00c      	beq.n	8008146 <USBD_StdEPReq+0x11e>
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b80      	cmp	r3, #128	; 0x80
 8008130:	d009      	beq.n	8008146 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 f8d2 	bl	80092e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800813c:	2180      	movs	r1, #128	; 0x80
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f8ce 	bl	80092e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008144:	e01c      	b.n	8008180 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fbe4 	bl	8008916 <USBD_CtlError>
              break;
 800814e:	e017      	b.n	8008180 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d112      	bne.n	800817e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f8d9 	bl	800931e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc9a 	bl	8008aa6 <USBD_CtlSendStatus>
              }
              break;
 8008172:	e004      	b.n	800817e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbcd 	bl	8008916 <USBD_CtlError>
              break;
 800817c:	e000      	b.n	8008180 <USBD_StdEPReq+0x158>
              break;
 800817e:	bf00      	nop
          }
          break;
 8008180:	e0aa      	b.n	80082d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	2b02      	cmp	r3, #2
 800818a:	d002      	beq.n	8008192 <USBD_StdEPReq+0x16a>
 800818c:	2b03      	cmp	r3, #3
 800818e:	d032      	beq.n	80081f6 <USBD_StdEPReq+0x1ce>
 8008190:	e097      	b.n	80082c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <USBD_StdEPReq+0x180>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b80      	cmp	r3, #128	; 0x80
 800819c:	d004      	beq.n	80081a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fbb8 	bl	8008916 <USBD_CtlError>
                break;
 80081a6:	e091      	b.n	80082cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da0b      	bge.n	80081c8 <USBD_StdEPReq+0x1a0>
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	3310      	adds	r3, #16
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	e00b      	b.n	80081e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	3304      	adds	r3, #4
 80081e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2202      	movs	r2, #2
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fbfb 	bl	80089ea <USBD_CtlSendData>
              break;
 80081f4:	e06a      	b.n	80082cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da11      	bge.n	8008222 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3318      	adds	r3, #24
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d117      	bne.n	8008248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb7b 	bl	8008916 <USBD_CtlError>
                  break;
 8008220:	e054      	b.n	80082cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fb68 	bl	8008916 <USBD_CtlError>
                  break;
 8008246:	e041      	b.n	80082cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	da0b      	bge.n	8008268 <USBD_StdEPReq+0x240>
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	3310      	adds	r3, #16
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	3304      	adds	r3, #4
 8008266:	e00b      	b.n	8008280 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	3304      	adds	r3, #4
 8008280:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <USBD_StdEPReq+0x266>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d103      	bne.n	8008296 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e00e      	b.n	80082b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f85e 	bl	800935c <USBD_LL_IsStallEP>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e002      	b.n	80082b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2202      	movs	r2, #2
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb95 	bl	80089ea <USBD_CtlSendData>
              break;
 80082c0:	e004      	b.n	80082cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fb26 	bl	8008916 <USBD_CtlError>
              break;
 80082ca:	bf00      	nop
          }
          break;
 80082cc:	e004      	b.n	80082d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fb20 	bl	8008916 <USBD_CtlError>
          break;
 80082d6:	bf00      	nop
      }
      break;
 80082d8:	e004      	b.n	80082e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb1a 	bl	8008916 <USBD_CtlError>
      break;
 80082e2:	bf00      	nop
  }

  return ret;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	0a1b      	lsrs	r3, r3, #8
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	2b06      	cmp	r3, #6
 8008312:	f200 8128 	bhi.w	8008566 <USBD_GetDescriptor+0x276>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <USBD_GetDescriptor+0x2c>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008339 	.word	0x08008339
 8008320:	08008351 	.word	0x08008351
 8008324:	08008391 	.word	0x08008391
 8008328:	08008567 	.word	0x08008567
 800832c:	08008567 	.word	0x08008567
 8008330:	08008507 	.word	0x08008507
 8008334:	08008533 	.word	0x08008533
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      break;
 800834e:	e112      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7c1b      	ldrb	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10d      	bne.n	8008374 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f107 0208 	add.w	r2, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008372:	e100      	b.n	8008576 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	f107 0208 	add.w	r2, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	2202      	movs	r2, #2
 800838c:	701a      	strb	r2, [r3, #0]
      break;
 800838e:	e0f2      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b05      	cmp	r3, #5
 8008398:	f200 80ac 	bhi.w	80084f4 <USBD_GetDescriptor+0x204>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <USBD_GetDescriptor+0xb4>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083f1 	.word	0x080083f1
 80083ac:	08008425 	.word	0x08008425
 80083b0:	08008459 	.word	0x08008459
 80083b4:	0800848d 	.word	0x0800848d
 80083b8:	080084c1 	.word	0x080084c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7c12      	ldrb	r2, [r2, #16]
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083de:	e091      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa97 	bl	8008916 <USBD_CtlError>
            err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
          break;
 80083ee:	e089      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	7c12      	ldrb	r2, [r2, #16]
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008412:	e077      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa7d 	bl	8008916 <USBD_CtlError>
            err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
          break;
 8008422:	e06f      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008446:	e05d      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa63 	bl	8008916 <USBD_CtlError>
            err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
          break;
 8008456:	e055      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	7c12      	ldrb	r2, [r2, #16]
 8008470:	f107 0108 	add.w	r1, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847a:	e043      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa49 	bl	8008916 <USBD_CtlError>
            err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
          break;
 800848a:	e03b      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	7c12      	ldrb	r2, [r2, #16]
 80084a4:	f107 0108 	add.w	r1, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ae:	e029      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa2f 	bl	8008916 <USBD_CtlError>
            err++;
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	3301      	adds	r3, #1
 80084bc:	72fb      	strb	r3, [r7, #11]
          break;
 80084be:	e021      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e2:	e00f      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa15 	bl	8008916 <USBD_CtlError>
            err++;
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	3301      	adds	r3, #1
 80084f0:	72fb      	strb	r3, [r7, #11]
          break;
 80084f2:	e007      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa0d 	bl	8008916 <USBD_CtlError>
          err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008502:	e038      	b.n	8008576 <USBD_GetDescriptor+0x286>
 8008504:	e037      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7c1b      	ldrb	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008516:	f107 0208 	add.w	r2, r7, #8
 800851a:	4610      	mov	r0, r2
 800851c:	4798      	blx	r3
 800851e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008520:	e029      	b.n	8008576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9f6 	bl	8008916 <USBD_CtlError>
        err++;
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	3301      	adds	r3, #1
 800852e:	72fb      	strb	r3, [r7, #11]
      break;
 8008530:	e021      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7c1b      	ldrb	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f107 0208 	add.w	r2, r7, #8
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
 800854a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3301      	adds	r3, #1
 8008550:	2207      	movs	r2, #7
 8008552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008554:	e00f      	b.n	8008576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9dc 	bl	8008916 <USBD_CtlError>
        err++;
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	3301      	adds	r3, #1
 8008562:	72fb      	strb	r3, [r7, #11]
      break;
 8008564:	e007      	b.n	8008576 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9d4 	bl	8008916 <USBD_CtlError>
      err++;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	3301      	adds	r3, #1
 8008572:	72fb      	strb	r3, [r7, #11]
      break;
 8008574:	bf00      	nop
  }

  if (err != 0U)
 8008576:	7afb      	ldrb	r3, [r7, #11]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11c      	bne.n	80085b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800857c:	893b      	ldrh	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <USBD_GetDescriptor+0x2b6>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	88db      	ldrh	r3, [r3, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	88da      	ldrh	r2, [r3, #6]
 800858e:	893b      	ldrh	r3, [r7, #8]
 8008590:	4293      	cmp	r3, r2
 8008592:	bf28      	it	cs
 8008594:	4613      	movcs	r3, r2
 8008596:	b29b      	uxth	r3, r3
 8008598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800859a:	893b      	ldrh	r3, [r7, #8]
 800859c:	461a      	mov	r2, r3
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa22 	bl	80089ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa79 	bl	8008aa6 <USBD_CtlSendStatus>
 80085b4:	e000      	b.n	80085b8 <USBD_GetDescriptor+0x2c8>
    return;
 80085b6:	bf00      	nop
    }
  }
}
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d130      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d12c      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	2b7f      	cmp	r3, #127	; 0x7f
 80085e0:	d828      	bhi.n	8008634 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d104      	bne.n	8008602 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f98b 	bl	8008916 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008600:	e01d      	b.n	800863e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7bfa      	ldrb	r2, [r7, #15]
 8008606:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fed0 	bl	80093b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa46 	bl	8008aa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008628:	e009      	b.n	800863e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008632:	e004      	b.n	800863e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f96d 	bl	8008916 <USBD_CtlError>
  }
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	885b      	ldrh	r3, [r3, #2]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b41      	ldr	r3, [pc, #260]	; (8008760 <USBD_SetConfig+0x118>)
 800865a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800865c:	4b40      	ldr	r3, [pc, #256]	; (8008760 <USBD_SetConfig+0x118>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d904      	bls.n	800866e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f955 	bl	8008916 <USBD_CtlError>
 800866c:	e075      	b.n	800875a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008674:	2b02      	cmp	r3, #2
 8008676:	d002      	beq.n	800867e <USBD_SetConfig+0x36>
 8008678:	2b03      	cmp	r3, #3
 800867a:	d023      	beq.n	80086c4 <USBD_SetConfig+0x7c>
 800867c:	e062      	b.n	8008744 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800867e:	4b38      	ldr	r3, [pc, #224]	; (8008760 <USBD_SetConfig+0x118>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01a      	beq.n	80086bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <USBD_SetConfig+0x118>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2203      	movs	r2, #3
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008698:	4b31      	ldr	r3, [pc, #196]	; (8008760 <USBD_SetConfig+0x118>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff f9e7 	bl	8007a72 <USBD_SetClassConfig>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d104      	bne.n	80086b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f932 	bl	8008916 <USBD_CtlError>
            return;
 80086b2:	e052      	b.n	800875a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9f6 	bl	8008aa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086ba:	e04e      	b.n	800875a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f9f2 	bl	8008aa6 <USBD_CtlSendStatus>
        break;
 80086c2:	e04a      	b.n	800875a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80086c4:	4b26      	ldr	r3, [pc, #152]	; (8008760 <USBD_SetConfig+0x118>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d112      	bne.n	80086f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <USBD_SetConfig+0x118>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <USBD_SetConfig+0x118>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff f9e3 	bl	8007ab0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9db 	bl	8008aa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086f0:	e033      	b.n	800875a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086f2:	4b1b      	ldr	r3, [pc, #108]	; (8008760 <USBD_SetConfig+0x118>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d01d      	beq.n	800873c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff f9d1 	bl	8007ab0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <USBD_SetConfig+0x118>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <USBD_SetConfig+0x118>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff f9a7 	bl	8007a72 <USBD_SetClassConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	2b02      	cmp	r3, #2
 8008728:	d104      	bne.n	8008734 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8f2 	bl	8008916 <USBD_CtlError>
            return;
 8008732:	e012      	b.n	800875a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9b6 	bl	8008aa6 <USBD_CtlSendStatus>
        break;
 800873a:	e00e      	b.n	800875a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9b2 	bl	8008aa6 <USBD_CtlSendStatus>
        break;
 8008742:	e00a      	b.n	800875a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8e5 	bl	8008916 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800874c:	4b04      	ldr	r3, [pc, #16]	; (8008760 <USBD_SetConfig+0x118>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff f9ac 	bl	8007ab0 <USBD_ClrClassConfig>
        break;
 8008758:	bf00      	nop
    }
  }
}
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	200004f5 	.word	0x200004f5

08008764 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	88db      	ldrh	r3, [r3, #6]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d004      	beq.n	8008780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f8cc 	bl	8008916 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800877e:	e022      	b.n	80087c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008786:	2b02      	cmp	r3, #2
 8008788:	dc02      	bgt.n	8008790 <USBD_GetConfig+0x2c>
 800878a:	2b00      	cmp	r3, #0
 800878c:	dc03      	bgt.n	8008796 <USBD_GetConfig+0x32>
 800878e:	e015      	b.n	80087bc <USBD_GetConfig+0x58>
 8008790:	2b03      	cmp	r3, #3
 8008792:	d00b      	beq.n	80087ac <USBD_GetConfig+0x48>
 8008794:	e012      	b.n	80087bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3308      	adds	r3, #8
 80087a0:	2201      	movs	r2, #1
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f920 	bl	80089ea <USBD_CtlSendData>
        break;
 80087aa:	e00c      	b.n	80087c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3304      	adds	r3, #4
 80087b0:	2201      	movs	r2, #1
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f918 	bl	80089ea <USBD_CtlSendData>
        break;
 80087ba:	e004      	b.n	80087c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f8a9 	bl	8008916 <USBD_CtlError>
        break;
 80087c4:	bf00      	nop
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087de:	3b01      	subs	r3, #1
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d81e      	bhi.n	8008822 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d004      	beq.n	80087f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f891 	bl	8008916 <USBD_CtlError>
        break;
 80087f4:	e01a      	b.n	800882c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f043 0202 	orr.w	r2, r3, #2
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	330c      	adds	r3, #12
 8008816:	2202      	movs	r2, #2
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8e5 	bl	80089ea <USBD_CtlSendData>
      break;
 8008820:	e004      	b.n	800882c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f876 	bl	8008916 <USBD_CtlError>
      break;
 800882a:	bf00      	nop
  }
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d106      	bne.n	8008854 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f929 	bl	8008aa6 <USBD_CtlSendStatus>
  }
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886c:	3b01      	subs	r3, #1
 800886e:	2b02      	cmp	r3, #2
 8008870:	d80b      	bhi.n	800888a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d10c      	bne.n	8008894 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f90f 	bl	8008aa6 <USBD_CtlSendStatus>
      }
      break;
 8008888:	e004      	b.n	8008894 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f842 	bl	8008916 <USBD_CtlError>
      break;
 8008892:	e000      	b.n	8008896 <USBD_ClrFeature+0x3a>
      break;
 8008894:	bf00      	nop
  }
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785a      	ldrb	r2, [r3, #1]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3302      	adds	r3, #2
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b29a      	uxth	r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	3303      	adds	r3, #3
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4413      	add	r3, r2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	3304      	adds	r3, #4
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	3305      	adds	r3, #5
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4413      	add	r3, r2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	3306      	adds	r3, #6
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	3307      	adds	r3, #7
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	b29b      	uxth	r3, r3
 8008904:	4413      	add	r3, r2
 8008906:	b29a      	uxth	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	80da      	strh	r2, [r3, #6]

}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr

08008916 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008920:	2180      	movs	r1, #128	; 0x80
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcdc 	bl	80092e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008928:	2100      	movs	r1, #0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fcd8 	bl	80092e0 <USBD_LL_StallEP>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d032      	beq.n	80089b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 f834 	bl	80089bc <USBD_GetLen>
 8008954:	4603      	mov	r3, r0
 8008956:	3301      	adds	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	75fa      	strb	r2, [r7, #23]
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	7812      	ldrb	r2, [r2, #0]
 8008972:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	75fa      	strb	r2, [r7, #23]
 800897a:	461a      	mov	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4413      	add	r3, r2
 8008980:	2203      	movs	r2, #3
 8008982:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008984:	e012      	b.n	80089ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	60fa      	str	r2, [r7, #12]
 800898c:	7dfa      	ldrb	r2, [r7, #23]
 800898e:	1c51      	adds	r1, r2, #1
 8008990:	75f9      	strb	r1, [r7, #23]
 8008992:	4611      	mov	r1, r2
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	440a      	add	r2, r1
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	75fa      	strb	r2, [r7, #23]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4413      	add	r3, r2
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e8      	bne.n	8008986 <USBD_GetString+0x4e>
    }
  }
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80089c8:	e005      	b.n	80089d6 <USBD_GetLen+0x1a>
  {
    len++;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	3301      	adds	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3301      	adds	r3, #1
 80089d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1f5      	bne.n	80089ca <USBD_GetLen+0xe>
  }

  return len;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr

080089ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	4613      	mov	r3, r2
 80089f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a00:	88fa      	ldrh	r2, [r7, #6]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a06:	88fa      	ldrh	r2, [r7, #6]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fced 	bl	80093f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fcdb 	bl	80093f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	4613      	mov	r3, r2
 8008a52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2203      	movs	r2, #3
 8008a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	2100      	movs	r1, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fce0 	bl	8009438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	2100      	movs	r1, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fcce 	bl	8009438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2204      	movs	r2, #4
 8008ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2100      	movs	r1, #0
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc98 	bl	80093f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2205      	movs	r2, #5
 8008ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008adc:	2300      	movs	r3, #0
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fca8 	bl	8009438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008af8:	2200      	movs	r2, #0
 8008afa:	4912      	ldr	r1, [pc, #72]	; (8008b44 <MX_USB_DEVICE_Init+0x50>)
 8008afc:	4812      	ldr	r0, [pc, #72]	; (8008b48 <MX_USB_DEVICE_Init+0x54>)
 8008afe:	f7fe ff5e 	bl	80079be <USBD_Init>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b08:	f7f7 ff90 	bl	8000a2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b0c:	490f      	ldr	r1, [pc, #60]	; (8008b4c <MX_USB_DEVICE_Init+0x58>)
 8008b0e:	480e      	ldr	r0, [pc, #56]	; (8008b48 <MX_USB_DEVICE_Init+0x54>)
 8008b10:	f7fe ff80 	bl	8007a14 <USBD_RegisterClass>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b1a:	f7f7 ff87 	bl	8000a2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b1e:	490c      	ldr	r1, [pc, #48]	; (8008b50 <MX_USB_DEVICE_Init+0x5c>)
 8008b20:	4809      	ldr	r0, [pc, #36]	; (8008b48 <MX_USB_DEVICE_Init+0x54>)
 8008b22:	f7fe feb1 	bl	8007888 <USBD_CDC_RegisterInterface>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b2c:	f7f7 ff7e 	bl	8000a2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b30:	4805      	ldr	r0, [pc, #20]	; (8008b48 <MX_USB_DEVICE_Init+0x54>)
 8008b32:	f7fe ff88 	bl	8007a46 <USBD_Start>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b3c:	f7f7 ff76 	bl	8000a2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b40:	bf00      	nop
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	2000022c 	.word	0x2000022c
 8008b48:	200007c0 	.word	0x200007c0
 8008b4c:	20000118 	.word	0x20000118
 8008b50:	2000021c 	.word	0x2000021c

08008b54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4909      	ldr	r1, [pc, #36]	; (8008b80 <CDC_Init_FS+0x2c>)
 8008b5c:	4809      	ldr	r0, [pc, #36]	; (8008b84 <CDC_Init_FS+0x30>)
 8008b5e:	f7fe fea9 	bl	80078b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b62:	4909      	ldr	r1, [pc, #36]	; (8008b88 <CDC_Init_FS+0x34>)
 8008b64:	4807      	ldr	r0, [pc, #28]	; (8008b84 <CDC_Init_FS+0x30>)
 8008b66:	f7fe febe 	bl	80078e6 <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <CDC_Init_FS+0x30>)
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d101      	bne.n	8008b78 <CDC_Init_FS+0x24>
	  welcome();
 8008b74:	f7f7 fce2 	bl	800053c <welcome>
  }

  return (USBD_OK);
 8008b78:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000e6c 	.word	0x20000e6c
 8008b84:	200007c0 	.word	0x200007c0
 8008b88:	20000a84 	.word	0x20000a84

08008b8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr
	...

08008b9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b23      	cmp	r3, #35	; 0x23
 8008bb0:	d84a      	bhi.n	8008c48 <CDC_Control_FS+0xac>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <CDC_Control_FS+0x1c>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008c49 	.word	0x08008c49
 8008bbc:	08008c49 	.word	0x08008c49
 8008bc0:	08008c49 	.word	0x08008c49
 8008bc4:	08008c49 	.word	0x08008c49
 8008bc8:	08008c49 	.word	0x08008c49
 8008bcc:	08008c49 	.word	0x08008c49
 8008bd0:	08008c49 	.word	0x08008c49
 8008bd4:	08008c49 	.word	0x08008c49
 8008bd8:	08008c49 	.word	0x08008c49
 8008bdc:	08008c49 	.word	0x08008c49
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	08008c49 	.word	0x08008c49
 8008be8:	08008c49 	.word	0x08008c49
 8008bec:	08008c49 	.word	0x08008c49
 8008bf0:	08008c49 	.word	0x08008c49
 8008bf4:	08008c49 	.word	0x08008c49
 8008bf8:	08008c49 	.word	0x08008c49
 8008bfc:	08008c49 	.word	0x08008c49
 8008c00:	08008c49 	.word	0x08008c49
 8008c04:	08008c49 	.word	0x08008c49
 8008c08:	08008c49 	.word	0x08008c49
 8008c0c:	08008c49 	.word	0x08008c49
 8008c10:	08008c49 	.word	0x08008c49
 8008c14:	08008c49 	.word	0x08008c49
 8008c18:	08008c49 	.word	0x08008c49
 8008c1c:	08008c49 	.word	0x08008c49
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c49 	.word	0x08008c49
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c49 	.word	0x08008c49
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c49 	.word	0x08008c49
 8008c40:	08008c49 	.word	0x08008c49
 8008c44:	08008c49 	.word	0x08008c49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c48:	bf00      	nop
  }

  return (USBD_OK);
 8008c4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//	uint32_t start_pos = 0;
	uint8_t  enter = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008c66:	2300      	movs	r3, #0
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	e022      	b.n	8008cb2 <CDC_Receive_FS+0x5a>
		if( in_usb_buf_pos < USB_BUFFER_LENGTH ) {
 8008c6c:	4b35      	ldr	r3, [pc, #212]	; (8008d44 <CDC_Receive_FS+0xec>)
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	2bff      	cmp	r3, #255	; 0xff
 8008c72:	d80c      	bhi.n	8008c8e <CDC_Receive_FS+0x36>
			input_usb_buffer[ in_usb_buf_pos++ ] = Buf[ loop ];
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	441a      	add	r2, r3
 8008c7a:	4b32      	ldr	r3, [pc, #200]	; (8008d44 <CDC_Receive_FS+0xec>)
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	1c59      	adds	r1, r3, #1
 8008c80:	b288      	uxth	r0, r1
 8008c82:	4930      	ldr	r1, [pc, #192]	; (8008d44 <CDC_Receive_FS+0xec>)
 8008c84:	8008      	strh	r0, [r1, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	4b2f      	ldr	r3, [pc, #188]	; (8008d48 <CDC_Receive_FS+0xf0>)
 8008c8c:	545a      	strb	r2, [r3, r1]
		}
		if( Buf[ loop ] == 13 ) {
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	4413      	add	r3, r2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b0d      	cmp	r3, #13
 8008c98:	d108      	bne.n	8008cac <CDC_Receive_FS+0x54>
			input_usb_buffer[ in_usb_buf_pos - 1 ] = ' ';
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <CDC_Receive_FS+0xec>)
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <CDC_Receive_FS+0xf0>)
 8008ca2:	2120      	movs	r1, #32
 8008ca4:	54d1      	strb	r1, [r2, r3]
			enter = 1;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	77fb      	strb	r3, [r7, #31]
			break;
 8008caa:	e007      	b.n	8008cbc <CDC_Receive_FS+0x64>
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d3d7      	bcc.n	8008c6c <CDC_Receive_FS+0x14>
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );

	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fc69 	bl	8009598 <malloc>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	e019      	b.n	8008d08 <CDC_Receive_FS+0xb0>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	441a      	add	r2, r3
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	1c59      	adds	r1, r3, #1
 8008cde:	6179      	str	r1, [r7, #20]
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	440b      	add	r3, r1
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	4413      	add	r3, r2
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b0d      	cmp	r3, #13
 8008cf2:	d106      	bne.n	8008d02 <CDC_Receive_FS+0xaa>
			out_buf[ out_buf_len++ ] = '\n';
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	617a      	str	r2, [r7, #20]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	220a      	movs	r2, #10
 8008d00:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3301      	adds	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3e0      	bcc.n	8008cd4 <CDC_Receive_FS+0x7c>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 8008d12:	6979      	ldr	r1, [r7, #20]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7f7 fc01 	bl	800051c <usb_transmit_fs>
	free( out_buf );
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fc44 	bl	80095a8 <free>
	if( enter > 0 ) {
 8008d20:	7ffb      	ldrb	r3, [r7, #31]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <CDC_Receive_FS+0xd2>
		get_command();
 8008d26:	f7f7 fc2d 	bl	8000584 <get_command>
	}
//	if( Buf[ 0 ] == '\r' ) {
//		send_prompt();
//	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4807      	ldr	r0, [pc, #28]	; (8008d4c <CDC_Receive_FS+0xf4>)
 8008d2e:	f7fe fdda 	bl	80078e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d32:	4806      	ldr	r0, [pc, #24]	; (8008d4c <CDC_Receive_FS+0xf4>)
 8008d34:	f7fe fe19 	bl	800796a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3720      	adds	r7, #32
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200003fc 	.word	0x200003fc
 8008d48:	200002fc 	.word	0x200002fc
 8008d4c:	200007c0 	.word	0x200007c0

08008d50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d60:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <CDC_Transmit_FS+0x48>)
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e00b      	b.n	8008d8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d76:	887b      	ldrh	r3, [r7, #2]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4806      	ldr	r0, [pc, #24]	; (8008d98 <CDC_Transmit_FS+0x48>)
 8008d7e:	f7fe fd99 	bl	80078b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <CDC_Transmit_FS+0x48>)
 8008d84:	f7fe fdc2 	bl	800790c <USBD_CDC_TransmitPacket>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200007c0 	.word	0x200007c0

08008d9c <wait_for_CDC_transmit_ready>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void wait_for_CDC_transmit_ready(void) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <wait_for_CDC_transmit_ready+0x2c>)
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	607b      	str	r3, [r7, #4]
	while( hcdc->TxState != 0 ){
 8008daa:	e002      	b.n	8008db2 <wait_for_CDC_transmit_ready+0x16>
		HAL_Delay( 1 );
 8008dac:	2001      	movs	r0, #1
 8008dae:	f7f8 f933 	bl	8001018 <HAL_Delay>
	while( hcdc->TxState != 0 ){
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f7      	bne.n	8008dac <wait_for_CDC_transmit_ready+0x10>
	}
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200007c0 	.word	0x200007c0

08008dcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2212      	movs	r2, #18
 8008ddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dde:	4b03      	ldr	r3, [pc, #12]	; (8008dec <USBD_FS_DeviceDescriptor+0x20>)
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000248 	.word	0x20000248

08008df0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2204      	movs	r2, #4
 8008e00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e02:	4b03      	ldr	r3, [pc, #12]	; (8008e10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	2000025c 	.word	0x2000025c

08008e14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d105      	bne.n	8008e32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4907      	ldr	r1, [pc, #28]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e2a:	4808      	ldr	r0, [pc, #32]	; (8008e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e2c:	f7ff fd84 	bl	8008938 <USBD_GetString>
 8008e30:	e004      	b.n	8008e3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	4904      	ldr	r1, [pc, #16]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e38:	f7ff fd7e 	bl	8008938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20001254 	.word	0x20001254
 8008e4c:	0800b1ec 	.word	0x0800b1ec

08008e50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	4904      	ldr	r1, [pc, #16]	; (8008e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e60:	4804      	ldr	r0, [pc, #16]	; (8008e74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e62:	f7ff fd69 	bl	8008938 <USBD_GetString>
  return USBD_StrDesc;
 8008e66:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20001254 	.word	0x20001254
 8008e74:	0800b204 	.word	0x0800b204

08008e78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	221a      	movs	r2, #26
 8008e88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e8a:	f000 f843 	bl	8008f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e8e:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20000260 	.word	0x20000260

08008e9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eb4:	f7ff fd40 	bl	8008938 <USBD_GetString>
 8008eb8:	e004      	b.n	8008ec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ec0:	f7ff fd3a 	bl	8008938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001254 	.word	0x20001254
 8008ed4:	0800b218 	.word	0x0800b218

08008ed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4907      	ldr	r1, [pc, #28]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eee:	4808      	ldr	r0, [pc, #32]	; (8008f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ef0:	f7ff fd22 	bl	8008938 <USBD_GetString>
 8008ef4:	e004      	b.n	8008f00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	4904      	ldr	r1, [pc, #16]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008efa:	4805      	ldr	r0, [pc, #20]	; (8008f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008efc:	f7ff fd1c 	bl	8008938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20001254 	.word	0x20001254
 8008f10:	0800b224 	.word	0x0800b224

08008f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <Get_SerialNum+0x44>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <Get_SerialNum+0x48>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <Get_SerialNum+0x4c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	4909      	ldr	r1, [pc, #36]	; (8008f64 <Get_SerialNum+0x50>)
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f814 	bl	8008f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f44:	2204      	movs	r2, #4
 8008f46:	4908      	ldr	r1, [pc, #32]	; (8008f68 <Get_SerialNum+0x54>)
 8008f48:	68b8      	ldr	r0, [r7, #8]
 8008f4a:	f000 f80f 	bl	8008f6c <IntToUnicode>
  }
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	1ffff7e8 	.word	0x1ffff7e8
 8008f5c:	1ffff7ec 	.word	0x1ffff7ec
 8008f60:	1ffff7f0 	.word	0x1ffff7f0
 8008f64:	20000262 	.word	0x20000262
 8008f68:	20000272 	.word	0x20000272

08008f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
 8008f82:	e027      	b.n	8008fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	0f1b      	lsrs	r3, r3, #28
 8008f88:	2b09      	cmp	r3, #9
 8008f8a:	d80b      	bhi.n	8008fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	0f1b      	lsrs	r3, r3, #28
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4619      	mov	r1, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	440b      	add	r3, r1
 8008f9c:	3230      	adds	r2, #48	; 0x30
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e00a      	b.n	8008fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	0f1b      	lsrs	r3, r3, #28
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3237      	adds	r2, #55	; 0x37
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	75fb      	strb	r3, [r7, #23]
 8008fd4:	7dfa      	ldrb	r2, [r7, #23]
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3d3      	bcc.n	8008f84 <IntToUnicode+0x18>
  }
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a0d      	ldr	r2, [pc, #52]	; (800902c <HAL_PCD_MspInit+0x44>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d113      	bne.n	8009022 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <HAL_PCD_MspInit+0x48>)
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <HAL_PCD_MspInit+0x48>)
 8009000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009004:	61d3      	str	r3, [r2, #28]
 8009006:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <HAL_PCD_MspInit+0x48>)
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	2014      	movs	r0, #20
 8009018:	f7f8 f8f9 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800901c:	2014      	movs	r0, #20
 800901e:	f7f8 f912 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40005c00 	.word	0x40005c00
 8009030:	40021000 	.word	0x40021000

08009034 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f7fe fd43 	bl	8007ad6 <USBD_LL_SetupStage>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	440b      	add	r3, r1
 8009078:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	4619      	mov	r1, r3
 8009082:	f7fe fd75 	bl	8007b70 <USBD_LL_DataOutStage>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	440b      	add	r3, r1
 80090ae:	333c      	adds	r3, #60	; 0x3c
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	4619      	mov	r1, r3
 80090b6:	f7fe fdcc 	bl	8007c52 <USBD_LL_DataInStage>
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b082      	sub	sp, #8
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fedc 	bl	8007e8e <USBD_LL_SOF>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d001      	beq.n	80090f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090f2:	f7f7 fc9b 	bl	8000a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090fc:	7bfa      	ldrb	r2, [r7, #15]
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fe8c 	bl	8007e1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fe45 	bl	8007d9c <USBD_LL_Reset>
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fe86 	bl	8007e3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <HAL_PCD_SuspendCallback+0x30>)
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	4a03      	ldr	r2, [pc, #12]	; (800914c <HAL_PCD_SuspendCallback+0x30>)
 800913e:	f043 0306 	orr.w	r3, r3, #6
 8009142:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	e000ed00 	.word	0xe000ed00

08009150 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fe80 	bl	8007e64 <USBD_LL_Resume>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009174:	4a28      	ldr	r2, [pc, #160]	; (8009218 <USBD_LL_Init+0xac>)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a26      	ldr	r2, [pc, #152]	; (8009218 <USBD_LL_Init+0xac>)
 8009180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009184:	4b24      	ldr	r3, [pc, #144]	; (8009218 <USBD_LL_Init+0xac>)
 8009186:	4a25      	ldr	r2, [pc, #148]	; (800921c <USBD_LL_Init+0xb0>)
 8009188:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800918a:	4b23      	ldr	r3, [pc, #140]	; (8009218 <USBD_LL_Init+0xac>)
 800918c:	2208      	movs	r2, #8
 800918e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009190:	4b21      	ldr	r3, [pc, #132]	; (8009218 <USBD_LL_Init+0xac>)
 8009192:	2202      	movs	r2, #2
 8009194:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <USBD_LL_Init+0xac>)
 8009198:	2200      	movs	r2, #0
 800919a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800919c:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <USBD_LL_Init+0xac>)
 800919e:	2200      	movs	r2, #0
 80091a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091a2:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <USBD_LL_Init+0xac>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091a8:	481b      	ldr	r0, [pc, #108]	; (8009218 <USBD_LL_Init+0xac>)
 80091aa:	f7f8 fc0a 	bl	80019c2 <HAL_PCD_Init>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091b4:	f7f7 fc3a 	bl	8000a2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091be:	2318      	movs	r3, #24
 80091c0:	2200      	movs	r2, #0
 80091c2:	2100      	movs	r1, #0
 80091c4:	f7fa f880 	bl	80032c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ce:	2358      	movs	r3, #88	; 0x58
 80091d0:	2200      	movs	r2, #0
 80091d2:	2180      	movs	r1, #128	; 0x80
 80091d4:	f7fa f878 	bl	80032c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091de:	23c0      	movs	r3, #192	; 0xc0
 80091e0:	2200      	movs	r2, #0
 80091e2:	2181      	movs	r1, #129	; 0x81
 80091e4:	f7fa f870 	bl	80032c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091f2:	2200      	movs	r2, #0
 80091f4:	2101      	movs	r1, #1
 80091f6:	f7fa f867 	bl	80032c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009204:	2200      	movs	r2, #0
 8009206:	2182      	movs	r1, #130	; 0x82
 8009208:	f7fa f85e 	bl	80032c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001454 	.word	0x20001454
 800921c:	40005c00 	.word	0x40005c00

08009220 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009236:	4618      	mov	r0, r3
 8009238:	f7f8 fcce 	bl	8001bd8 <HAL_PCD_Start>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f94e 	bl	80094e4 <USBD_Get_USB_Status>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924c:	7bbb      	ldrb	r3, [r7, #14]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	4603      	mov	r3, r0
 8009266:	70fb      	strb	r3, [r7, #3]
 8009268:	460b      	mov	r3, r1
 800926a:	70bb      	strb	r3, [r7, #2]
 800926c:	4613      	mov	r3, r2
 800926e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800927e:	78bb      	ldrb	r3, [r7, #2]
 8009280:	883a      	ldrh	r2, [r7, #0]
 8009282:	78f9      	ldrb	r1, [r7, #3]
 8009284:	f7f8 fe48 	bl	8001f18 <HAL_PCD_EP_Open>
 8009288:	4603      	mov	r3, r0
 800928a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f928 	bl	80094e4 <USBD_Get_USB_Status>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009298:	7bbb      	ldrb	r3, [r7, #14]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7f8 fe8f 	bl	8001fe4 <HAL_PCD_EP_Close>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f909 	bl	80094e4 <USBD_Get_USB_Status>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f8 ff4f 	bl	80021a2 <HAL_PCD_EP_SetStall>
 8009304:	4603      	mov	r3, r0
 8009306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f8ea 	bl	80094e4 <USBD_Get_USB_Status>
 8009310:	4603      	mov	r3, r0
 8009312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009314:	7bbb      	ldrb	r3, [r7, #14]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f7f8 ff90 	bl	8002262 <HAL_PCD_EP_ClrStall>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 f8cb 	bl	80094e4 <USBD_Get_USB_Status>
 800934e:	4603      	mov	r3, r0
 8009350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009352:	7bbb      	ldrb	r3, [r7, #14]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800936e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009374:	2b00      	cmp	r3, #0
 8009376:	da0c      	bge.n	8009392 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	440b      	add	r3, r1
 800938c:	3302      	adds	r3, #2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	e00b      	b.n	80093aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009398:	68f9      	ldr	r1, [r7, #12]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	440b      	add	r3, r1
 80093a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr

080093b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f8 fd7b 	bl	8001ece <HAL_PCD_SetAddress>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f880 	bl	80094e4 <USBD_Get_USB_Status>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	461a      	mov	r2, r3
 80093fe:	460b      	mov	r3, r1
 8009400:	72fb      	strb	r3, [r7, #11]
 8009402:	4613      	mov	r3, r2
 8009404:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	7af9      	ldrb	r1, [r7, #11]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	f7f8 fe7f 	bl	800211c <HAL_PCD_EP_Transmit>
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	4618      	mov	r0, r3
 8009426:	f000 f85d 	bl	80094e4 <USBD_Get_USB_Status>
 800942a:	4603      	mov	r3, r0
 800942c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800942e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	460b      	mov	r3, r1
 8009446:	72fb      	strb	r3, [r7, #11]
 8009448:	4613      	mov	r3, r2
 800944a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	7af9      	ldrb	r1, [r7, #11]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	f7f8 fe08 	bl	8002074 <HAL_PCD_EP_Receive>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f83a 	bl	80094e4 <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009474:	7dbb      	ldrb	r3, [r7, #22]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7f8 fe2a 	bl	80020ee <HAL_PCD_EP_GetRxCount>
 800949a:	4603      	mov	r3, r0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <USBD_static_malloc+0x14>)
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr
 80094b8:	200004f8 	.word	0x200004f8

080094bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	bc80      	pop	{r7}
 80094e2:	4770      	bx	lr

080094e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d817      	bhi.n	8009528 <USBD_Get_USB_Status+0x44>
 80094f8:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <USBD_Get_USB_Status+0x1c>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	08009511 	.word	0x08009511
 8009504:	08009517 	.word	0x08009517
 8009508:	0800951d 	.word	0x0800951d
 800950c:	08009523 	.word	0x08009523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	e00b      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009516:	2302      	movs	r3, #2
 8009518:	73fb      	strb	r3, [r7, #15]
    break;
 800951a:	e008      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
    break;
 8009520:	e005      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009522:	2302      	movs	r3, #2
 8009524:	73fb      	strb	r3, [r7, #15]
    break;
 8009526:	e002      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009528:	2302      	movs	r3, #2
 800952a:	73fb      	strb	r3, [r7, #15]
    break;
 800952c:	bf00      	nop
  }
  return usb_status;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <atoi>:
 800953c:	220a      	movs	r2, #10
 800953e:	2100      	movs	r1, #0
 8009540:	f000 bad0 	b.w	8009ae4 <strtol>

08009544 <__errno>:
 8009544:	4b01      	ldr	r3, [pc, #4]	; (800954c <__errno+0x8>)
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	2000027c 	.word	0x2000027c

08009550 <__libc_init_array>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	2600      	movs	r6, #0
 8009554:	4d0c      	ldr	r5, [pc, #48]	; (8009588 <__libc_init_array+0x38>)
 8009556:	4c0d      	ldr	r4, [pc, #52]	; (800958c <__libc_init_array+0x3c>)
 8009558:	1b64      	subs	r4, r4, r5
 800955a:	10a4      	asrs	r4, r4, #2
 800955c:	42a6      	cmp	r6, r4
 800955e:	d109      	bne.n	8009574 <__libc_init_array+0x24>
 8009560:	f001 fe12 	bl	800b188 <_init>
 8009564:	2600      	movs	r6, #0
 8009566:	4d0a      	ldr	r5, [pc, #40]	; (8009590 <__libc_init_array+0x40>)
 8009568:	4c0a      	ldr	r4, [pc, #40]	; (8009594 <__libc_init_array+0x44>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	42a6      	cmp	r6, r4
 8009570:	d105      	bne.n	800957e <__libc_init_array+0x2e>
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	f855 3b04 	ldr.w	r3, [r5], #4
 8009578:	4798      	blx	r3
 800957a:	3601      	adds	r6, #1
 800957c:	e7ee      	b.n	800955c <__libc_init_array+0xc>
 800957e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009582:	4798      	blx	r3
 8009584:	3601      	adds	r6, #1
 8009586:	e7f2      	b.n	800956e <__libc_init_array+0x1e>
 8009588:	0800b618 	.word	0x0800b618
 800958c:	0800b618 	.word	0x0800b618
 8009590:	0800b618 	.word	0x0800b618
 8009594:	0800b61c 	.word	0x0800b61c

08009598 <malloc>:
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <malloc+0xc>)
 800959a:	4601      	mov	r1, r0
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	f000 b85f 	b.w	8009660 <_malloc_r>
 80095a2:	bf00      	nop
 80095a4:	2000027c 	.word	0x2000027c

080095a8 <free>:
 80095a8:	4b02      	ldr	r3, [pc, #8]	; (80095b4 <free+0xc>)
 80095aa:	4601      	mov	r1, r0
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f000 b80b 	b.w	80095c8 <_free_r>
 80095b2:	bf00      	nop
 80095b4:	2000027c 	.word	0x2000027c

080095b8 <memset>:
 80095b8:	4603      	mov	r3, r0
 80095ba:	4402      	add	r2, r0
 80095bc:	4293      	cmp	r3, r2
 80095be:	d100      	bne.n	80095c2 <memset+0xa>
 80095c0:	4770      	bx	lr
 80095c2:	f803 1b01 	strb.w	r1, [r3], #1
 80095c6:	e7f9      	b.n	80095bc <memset+0x4>

080095c8 <_free_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4605      	mov	r5, r0
 80095cc:	2900      	cmp	r1, #0
 80095ce:	d043      	beq.n	8009658 <_free_r+0x90>
 80095d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d4:	1f0c      	subs	r4, r1, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfb8      	it	lt
 80095da:	18e4      	addlt	r4, r4, r3
 80095dc:	f000 fb1c 	bl	8009c18 <__malloc_lock>
 80095e0:	4a1e      	ldr	r2, [pc, #120]	; (800965c <_free_r+0x94>)
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	4610      	mov	r0, r2
 80095e6:	b933      	cbnz	r3, 80095f6 <_free_r+0x2e>
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	6014      	str	r4, [r2, #0]
 80095ec:	4628      	mov	r0, r5
 80095ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095f2:	f000 bb17 	b.w	8009c24 <__malloc_unlock>
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	d90a      	bls.n	8009610 <_free_r+0x48>
 80095fa:	6821      	ldr	r1, [r4, #0]
 80095fc:	1862      	adds	r2, r4, r1
 80095fe:	4293      	cmp	r3, r2
 8009600:	bf01      	itttt	eq
 8009602:	681a      	ldreq	r2, [r3, #0]
 8009604:	685b      	ldreq	r3, [r3, #4]
 8009606:	1852      	addeq	r2, r2, r1
 8009608:	6022      	streq	r2, [r4, #0]
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	6004      	str	r4, [r0, #0]
 800960e:	e7ed      	b.n	80095ec <_free_r+0x24>
 8009610:	461a      	mov	r2, r3
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	b10b      	cbz	r3, 800961a <_free_r+0x52>
 8009616:	42a3      	cmp	r3, r4
 8009618:	d9fa      	bls.n	8009610 <_free_r+0x48>
 800961a:	6811      	ldr	r1, [r2, #0]
 800961c:	1850      	adds	r0, r2, r1
 800961e:	42a0      	cmp	r0, r4
 8009620:	d10b      	bne.n	800963a <_free_r+0x72>
 8009622:	6820      	ldr	r0, [r4, #0]
 8009624:	4401      	add	r1, r0
 8009626:	1850      	adds	r0, r2, r1
 8009628:	4283      	cmp	r3, r0
 800962a:	6011      	str	r1, [r2, #0]
 800962c:	d1de      	bne.n	80095ec <_free_r+0x24>
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	4401      	add	r1, r0
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	6053      	str	r3, [r2, #4]
 8009638:	e7d8      	b.n	80095ec <_free_r+0x24>
 800963a:	d902      	bls.n	8009642 <_free_r+0x7a>
 800963c:	230c      	movs	r3, #12
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	e7d4      	b.n	80095ec <_free_r+0x24>
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	1821      	adds	r1, r4, r0
 8009646:	428b      	cmp	r3, r1
 8009648:	bf01      	itttt	eq
 800964a:	6819      	ldreq	r1, [r3, #0]
 800964c:	685b      	ldreq	r3, [r3, #4]
 800964e:	1809      	addeq	r1, r1, r0
 8009650:	6021      	streq	r1, [r4, #0]
 8009652:	6063      	str	r3, [r4, #4]
 8009654:	6054      	str	r4, [r2, #4]
 8009656:	e7c9      	b.n	80095ec <_free_r+0x24>
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	bf00      	nop
 800965c:	20000718 	.word	0x20000718

08009660 <_malloc_r>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	1ccd      	adds	r5, r1, #3
 8009664:	f025 0503 	bic.w	r5, r5, #3
 8009668:	3508      	adds	r5, #8
 800966a:	2d0c      	cmp	r5, #12
 800966c:	bf38      	it	cc
 800966e:	250c      	movcc	r5, #12
 8009670:	2d00      	cmp	r5, #0
 8009672:	4606      	mov	r6, r0
 8009674:	db01      	blt.n	800967a <_malloc_r+0x1a>
 8009676:	42a9      	cmp	r1, r5
 8009678:	d903      	bls.n	8009682 <_malloc_r+0x22>
 800967a:	230c      	movs	r3, #12
 800967c:	6033      	str	r3, [r6, #0]
 800967e:	2000      	movs	r0, #0
 8009680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009682:	f000 fac9 	bl	8009c18 <__malloc_lock>
 8009686:	4921      	ldr	r1, [pc, #132]	; (800970c <_malloc_r+0xac>)
 8009688:	680a      	ldr	r2, [r1, #0]
 800968a:	4614      	mov	r4, r2
 800968c:	b99c      	cbnz	r4, 80096b6 <_malloc_r+0x56>
 800968e:	4f20      	ldr	r7, [pc, #128]	; (8009710 <_malloc_r+0xb0>)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	b923      	cbnz	r3, 800969e <_malloc_r+0x3e>
 8009694:	4621      	mov	r1, r4
 8009696:	4630      	mov	r0, r6
 8009698:	f000 f8aa 	bl	80097f0 <_sbrk_r>
 800969c:	6038      	str	r0, [r7, #0]
 800969e:	4629      	mov	r1, r5
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f8a5 	bl	80097f0 <_sbrk_r>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	d123      	bne.n	80096f2 <_malloc_r+0x92>
 80096aa:	230c      	movs	r3, #12
 80096ac:	4630      	mov	r0, r6
 80096ae:	6033      	str	r3, [r6, #0]
 80096b0:	f000 fab8 	bl	8009c24 <__malloc_unlock>
 80096b4:	e7e3      	b.n	800967e <_malloc_r+0x1e>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	1b5b      	subs	r3, r3, r5
 80096ba:	d417      	bmi.n	80096ec <_malloc_r+0x8c>
 80096bc:	2b0b      	cmp	r3, #11
 80096be:	d903      	bls.n	80096c8 <_malloc_r+0x68>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	441c      	add	r4, r3
 80096c4:	6025      	str	r5, [r4, #0]
 80096c6:	e004      	b.n	80096d2 <_malloc_r+0x72>
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	42a2      	cmp	r2, r4
 80096cc:	bf0c      	ite	eq
 80096ce:	600b      	streq	r3, [r1, #0]
 80096d0:	6053      	strne	r3, [r2, #4]
 80096d2:	4630      	mov	r0, r6
 80096d4:	f000 faa6 	bl	8009c24 <__malloc_unlock>
 80096d8:	f104 000b 	add.w	r0, r4, #11
 80096dc:	1d23      	adds	r3, r4, #4
 80096de:	f020 0007 	bic.w	r0, r0, #7
 80096e2:	1ac2      	subs	r2, r0, r3
 80096e4:	d0cc      	beq.n	8009680 <_malloc_r+0x20>
 80096e6:	1a1b      	subs	r3, r3, r0
 80096e8:	50a3      	str	r3, [r4, r2]
 80096ea:	e7c9      	b.n	8009680 <_malloc_r+0x20>
 80096ec:	4622      	mov	r2, r4
 80096ee:	6864      	ldr	r4, [r4, #4]
 80096f0:	e7cc      	b.n	800968c <_malloc_r+0x2c>
 80096f2:	1cc4      	adds	r4, r0, #3
 80096f4:	f024 0403 	bic.w	r4, r4, #3
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d0e3      	beq.n	80096c4 <_malloc_r+0x64>
 80096fc:	1a21      	subs	r1, r4, r0
 80096fe:	4630      	mov	r0, r6
 8009700:	f000 f876 	bl	80097f0 <_sbrk_r>
 8009704:	3001      	adds	r0, #1
 8009706:	d1dd      	bne.n	80096c4 <_malloc_r+0x64>
 8009708:	e7cf      	b.n	80096aa <_malloc_r+0x4a>
 800970a:	bf00      	nop
 800970c:	20000718 	.word	0x20000718
 8009710:	2000071c 	.word	0x2000071c

08009714 <srand>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <srand+0x44>)
 8009718:	4604      	mov	r4, r0
 800971a:	681d      	ldr	r5, [r3, #0]
 800971c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800971e:	b9b3      	cbnz	r3, 800974e <srand+0x3a>
 8009720:	2018      	movs	r0, #24
 8009722:	f7ff ff39 	bl	8009598 <malloc>
 8009726:	4602      	mov	r2, r0
 8009728:	63a8      	str	r0, [r5, #56]	; 0x38
 800972a:	b920      	cbnz	r0, 8009736 <srand+0x22>
 800972c:	2142      	movs	r1, #66	; 0x42
 800972e:	4b0b      	ldr	r3, [pc, #44]	; (800975c <srand+0x48>)
 8009730:	480b      	ldr	r0, [pc, #44]	; (8009760 <srand+0x4c>)
 8009732:	f000 fa0d 	bl	8009b50 <__assert_func>
 8009736:	490b      	ldr	r1, [pc, #44]	; (8009764 <srand+0x50>)
 8009738:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <srand+0x54>)
 800973a:	e9c0 1300 	strd	r1, r3, [r0]
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <srand+0x58>)
 8009740:	2100      	movs	r1, #0
 8009742:	6083      	str	r3, [r0, #8]
 8009744:	230b      	movs	r3, #11
 8009746:	8183      	strh	r3, [r0, #12]
 8009748:	2001      	movs	r0, #1
 800974a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800974e:	2200      	movs	r2, #0
 8009750:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009752:	611c      	str	r4, [r3, #16]
 8009754:	615a      	str	r2, [r3, #20]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	2000027c 	.word	0x2000027c
 800975c:	0800b354 	.word	0x0800b354
 8009760:	0800b36b 	.word	0x0800b36b
 8009764:	abcd330e 	.word	0xabcd330e
 8009768:	e66d1234 	.word	0xe66d1234
 800976c:	0005deec 	.word	0x0005deec

08009770 <rand>:
 8009770:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <rand+0x60>)
 8009772:	b510      	push	{r4, lr}
 8009774:	681c      	ldr	r4, [r3, #0]
 8009776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009778:	b9b3      	cbnz	r3, 80097a8 <rand+0x38>
 800977a:	2018      	movs	r0, #24
 800977c:	f7ff ff0c 	bl	8009598 <malloc>
 8009780:	4602      	mov	r2, r0
 8009782:	63a0      	str	r0, [r4, #56]	; 0x38
 8009784:	b920      	cbnz	r0, 8009790 <rand+0x20>
 8009786:	214e      	movs	r1, #78	; 0x4e
 8009788:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <rand+0x64>)
 800978a:	4813      	ldr	r0, [pc, #76]	; (80097d8 <rand+0x68>)
 800978c:	f000 f9e0 	bl	8009b50 <__assert_func>
 8009790:	4912      	ldr	r1, [pc, #72]	; (80097dc <rand+0x6c>)
 8009792:	4b13      	ldr	r3, [pc, #76]	; (80097e0 <rand+0x70>)
 8009794:	e9c0 1300 	strd	r1, r3, [r0]
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <rand+0x74>)
 800979a:	2100      	movs	r1, #0
 800979c:	6083      	str	r3, [r0, #8]
 800979e:	230b      	movs	r3, #11
 80097a0:	8183      	strh	r3, [r0, #12]
 80097a2:	2001      	movs	r0, #1
 80097a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80097a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80097aa:	480f      	ldr	r0, [pc, #60]	; (80097e8 <rand+0x78>)
 80097ac:	690a      	ldr	r2, [r1, #16]
 80097ae:	694b      	ldr	r3, [r1, #20]
 80097b0:	4350      	muls	r0, r2
 80097b2:	4c0e      	ldr	r4, [pc, #56]	; (80097ec <rand+0x7c>)
 80097b4:	fb04 0003 	mla	r0, r4, r3, r0
 80097b8:	fba2 3404 	umull	r3, r4, r2, r4
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	4404      	add	r4, r0
 80097c0:	f144 0000 	adc.w	r0, r4, #0
 80097c4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80097c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	bf00      	nop
 80097d0:	2000027c 	.word	0x2000027c
 80097d4:	0800b354 	.word	0x0800b354
 80097d8:	0800b36b 	.word	0x0800b36b
 80097dc:	abcd330e 	.word	0xabcd330e
 80097e0:	e66d1234 	.word	0xe66d1234
 80097e4:	0005deec 	.word	0x0005deec
 80097e8:	5851f42d 	.word	0x5851f42d
 80097ec:	4c957f2d 	.word	0x4c957f2d

080097f0 <_sbrk_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	2300      	movs	r3, #0
 80097f4:	4d05      	ldr	r5, [pc, #20]	; (800980c <_sbrk_r+0x1c>)
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f7 faa8 	bl	8000d50 <_sbrk>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_sbrk_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_sbrk_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20001740 	.word	0x20001740

08009810 <siscanf>:
 8009810:	b40e      	push	{r1, r2, r3}
 8009812:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009816:	b530      	push	{r4, r5, lr}
 8009818:	b09c      	sub	sp, #112	; 0x70
 800981a:	ac1f      	add	r4, sp, #124	; 0x7c
 800981c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009820:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009824:	9002      	str	r0, [sp, #8]
 8009826:	9006      	str	r0, [sp, #24]
 8009828:	f7f6 fc9a 	bl	8000160 <strlen>
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <siscanf+0x4c>)
 800982e:	9003      	str	r0, [sp, #12]
 8009830:	930b      	str	r3, [sp, #44]	; 0x2c
 8009832:	2300      	movs	r3, #0
 8009834:	930f      	str	r3, [sp, #60]	; 0x3c
 8009836:	9314      	str	r3, [sp, #80]	; 0x50
 8009838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800983c:	9007      	str	r0, [sp, #28]
 800983e:	4808      	ldr	r0, [pc, #32]	; (8009860 <siscanf+0x50>)
 8009840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009844:	462a      	mov	r2, r5
 8009846:	4623      	mov	r3, r4
 8009848:	a902      	add	r1, sp, #8
 800984a:	6800      	ldr	r0, [r0, #0]
 800984c:	9401      	str	r4, [sp, #4]
 800984e:	f000 fa49 	bl	8009ce4 <__ssvfiscanf_r>
 8009852:	b01c      	add	sp, #112	; 0x70
 8009854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009858:	b003      	add	sp, #12
 800985a:	4770      	bx	lr
 800985c:	08009887 	.word	0x08009887
 8009860:	2000027c 	.word	0x2000027c

08009864 <__sread>:
 8009864:	b510      	push	{r4, lr}
 8009866:	460c      	mov	r4, r1
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	f000 ffec 	bl	800a848 <_read_r>
 8009870:	2800      	cmp	r0, #0
 8009872:	bfab      	itete	ge
 8009874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009876:	89a3      	ldrhlt	r3, [r4, #12]
 8009878:	181b      	addge	r3, r3, r0
 800987a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800987e:	bfac      	ite	ge
 8009880:	6563      	strge	r3, [r4, #84]	; 0x54
 8009882:	81a3      	strhlt	r3, [r4, #12]
 8009884:	bd10      	pop	{r4, pc}

08009886 <__seofread>:
 8009886:	2000      	movs	r0, #0
 8009888:	4770      	bx	lr

0800988a <__swrite>:
 800988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988e:	461f      	mov	r7, r3
 8009890:	898b      	ldrh	r3, [r1, #12]
 8009892:	4605      	mov	r5, r0
 8009894:	05db      	lsls	r3, r3, #23
 8009896:	460c      	mov	r4, r1
 8009898:	4616      	mov	r6, r2
 800989a:	d505      	bpl.n	80098a8 <__swrite+0x1e>
 800989c:	2302      	movs	r3, #2
 800989e:	2200      	movs	r2, #0
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	f000 f9a6 	bl	8009bf4 <_lseek_r>
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	4632      	mov	r2, r6
 80098ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	4628      	mov	r0, r5
 80098b4:	463b      	mov	r3, r7
 80098b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098be:	f000 b935 	b.w	8009b2c <_write_r>

080098c2 <__sseek>:
 80098c2:	b510      	push	{r4, lr}
 80098c4:	460c      	mov	r4, r1
 80098c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ca:	f000 f993 	bl	8009bf4 <_lseek_r>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	bf15      	itete	ne
 80098d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098de:	81a3      	strheq	r3, [r4, #12]
 80098e0:	bf18      	it	ne
 80098e2:	81a3      	strhne	r3, [r4, #12]
 80098e4:	bd10      	pop	{r4, pc}

080098e6 <__sclose>:
 80098e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ea:	f000 b94f 	b.w	8009b8c <_close_r>

080098ee <strcat>:
 80098ee:	4602      	mov	r2, r0
 80098f0:	b510      	push	{r4, lr}
 80098f2:	7814      	ldrb	r4, [r2, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	3201      	adds	r2, #1
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	d1fa      	bne.n	80098f2 <strcat+0x4>
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009906:	2a00      	cmp	r2, #0
 8009908:	d1f9      	bne.n	80098fe <strcat+0x10>
 800990a:	bd10      	pop	{r4, pc}

0800990c <strcpy>:
 800990c:	4603      	mov	r3, r0
 800990e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009912:	f803 2b01 	strb.w	r2, [r3], #1
 8009916:	2a00      	cmp	r2, #0
 8009918:	d1f9      	bne.n	800990e <strcpy+0x2>
 800991a:	4770      	bx	lr

0800991c <strtok>:
 800991c:	4b16      	ldr	r3, [pc, #88]	; (8009978 <strtok+0x5c>)
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	681f      	ldr	r7, [r3, #0]
 8009924:	4605      	mov	r5, r0
 8009926:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009928:	460e      	mov	r6, r1
 800992a:	b9ec      	cbnz	r4, 8009968 <strtok+0x4c>
 800992c:	2050      	movs	r0, #80	; 0x50
 800992e:	f7ff fe33 	bl	8009598 <malloc>
 8009932:	4602      	mov	r2, r0
 8009934:	65b8      	str	r0, [r7, #88]	; 0x58
 8009936:	b920      	cbnz	r0, 8009942 <strtok+0x26>
 8009938:	2157      	movs	r1, #87	; 0x57
 800993a:	4b10      	ldr	r3, [pc, #64]	; (800997c <strtok+0x60>)
 800993c:	4810      	ldr	r0, [pc, #64]	; (8009980 <strtok+0x64>)
 800993e:	f000 f907 	bl	8009b50 <__assert_func>
 8009942:	e9c0 4400 	strd	r4, r4, [r0]
 8009946:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800994a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800994e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009952:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009956:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800995a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800995e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009962:	6184      	str	r4, [r0, #24]
 8009964:	7704      	strb	r4, [r0, #28]
 8009966:	6244      	str	r4, [r0, #36]	; 0x24
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800996e:	2301      	movs	r3, #1
 8009970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009974:	f000 b806 	b.w	8009984 <__strtok_r>
 8009978:	2000027c 	.word	0x2000027c
 800997c:	0800b354 	.word	0x0800b354
 8009980:	0800b3ca 	.word	0x0800b3ca

08009984 <__strtok_r>:
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	b908      	cbnz	r0, 800998c <__strtok_r+0x8>
 8009988:	6810      	ldr	r0, [r2, #0]
 800998a:	b188      	cbz	r0, 80099b0 <__strtok_r+0x2c>
 800998c:	4604      	mov	r4, r0
 800998e:	460f      	mov	r7, r1
 8009990:	4620      	mov	r0, r4
 8009992:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009996:	f817 6b01 	ldrb.w	r6, [r7], #1
 800999a:	b91e      	cbnz	r6, 80099a4 <__strtok_r+0x20>
 800999c:	b965      	cbnz	r5, 80099b8 <__strtok_r+0x34>
 800999e:	4628      	mov	r0, r5
 80099a0:	6015      	str	r5, [r2, #0]
 80099a2:	e005      	b.n	80099b0 <__strtok_r+0x2c>
 80099a4:	42b5      	cmp	r5, r6
 80099a6:	d1f6      	bne.n	8009996 <__strtok_r+0x12>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f0      	bne.n	800998e <__strtok_r+0xa>
 80099ac:	6014      	str	r4, [r2, #0]
 80099ae:	7003      	strb	r3, [r0, #0]
 80099b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b2:	461c      	mov	r4, r3
 80099b4:	e00c      	b.n	80099d0 <__strtok_r+0x4c>
 80099b6:	b915      	cbnz	r5, 80099be <__strtok_r+0x3a>
 80099b8:	460e      	mov	r6, r1
 80099ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80099c2:	42ab      	cmp	r3, r5
 80099c4:	d1f7      	bne.n	80099b6 <__strtok_r+0x32>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0f3      	beq.n	80099b2 <__strtok_r+0x2e>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80099d0:	6014      	str	r4, [r2, #0]
 80099d2:	e7ed      	b.n	80099b0 <__strtok_r+0x2c>

080099d4 <_strtol_l.isra.0>:
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099da:	4686      	mov	lr, r0
 80099dc:	d001      	beq.n	80099e2 <_strtol_l.isra.0+0xe>
 80099de:	2b24      	cmp	r3, #36	; 0x24
 80099e0:	d906      	bls.n	80099f0 <_strtol_l.isra.0+0x1c>
 80099e2:	f7ff fdaf 	bl	8009544 <__errno>
 80099e6:	2316      	movs	r3, #22
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	2000      	movs	r0, #0
 80099ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f0:	468c      	mov	ip, r1
 80099f2:	4e3a      	ldr	r6, [pc, #232]	; (8009adc <_strtol_l.isra.0+0x108>)
 80099f4:	4660      	mov	r0, ip
 80099f6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80099fa:	5da5      	ldrb	r5, [r4, r6]
 80099fc:	f015 0508 	ands.w	r5, r5, #8
 8009a00:	d1f8      	bne.n	80099f4 <_strtol_l.isra.0+0x20>
 8009a02:	2c2d      	cmp	r4, #45	; 0x2d
 8009a04:	d133      	bne.n	8009a6e <_strtol_l.isra.0+0x9a>
 8009a06:	f04f 0801 	mov.w	r8, #1
 8009a0a:	f89c 4000 	ldrb.w	r4, [ip]
 8009a0e:	f100 0c02 	add.w	ip, r0, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d05d      	beq.n	8009ad2 <_strtol_l.isra.0+0xfe>
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d10c      	bne.n	8009a34 <_strtol_l.isra.0+0x60>
 8009a1a:	2c30      	cmp	r4, #48	; 0x30
 8009a1c:	d10a      	bne.n	8009a34 <_strtol_l.isra.0+0x60>
 8009a1e:	f89c 0000 	ldrb.w	r0, [ip]
 8009a22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009a26:	2858      	cmp	r0, #88	; 0x58
 8009a28:	d14e      	bne.n	8009ac8 <_strtol_l.isra.0+0xf4>
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009a30:	f10c 0c02 	add.w	ip, ip, #2
 8009a34:	2500      	movs	r5, #0
 8009a36:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009a3a:	3f01      	subs	r7, #1
 8009a3c:	fbb7 f9f3 	udiv	r9, r7, r3
 8009a40:	4628      	mov	r0, r5
 8009a42:	fb03 7a19 	mls	sl, r3, r9, r7
 8009a46:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009a4a:	2e09      	cmp	r6, #9
 8009a4c:	d818      	bhi.n	8009a80 <_strtol_l.isra.0+0xac>
 8009a4e:	4634      	mov	r4, r6
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	dd24      	ble.n	8009a9e <_strtol_l.isra.0+0xca>
 8009a54:	2d00      	cmp	r5, #0
 8009a56:	db1f      	blt.n	8009a98 <_strtol_l.isra.0+0xc4>
 8009a58:	4581      	cmp	r9, r0
 8009a5a:	d31d      	bcc.n	8009a98 <_strtol_l.isra.0+0xc4>
 8009a5c:	d101      	bne.n	8009a62 <_strtol_l.isra.0+0x8e>
 8009a5e:	45a2      	cmp	sl, r4
 8009a60:	db1a      	blt.n	8009a98 <_strtol_l.isra.0+0xc4>
 8009a62:	2501      	movs	r5, #1
 8009a64:	fb00 4003 	mla	r0, r0, r3, r4
 8009a68:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009a6c:	e7eb      	b.n	8009a46 <_strtol_l.isra.0+0x72>
 8009a6e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a70:	bf08      	it	eq
 8009a72:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009a76:	46a8      	mov	r8, r5
 8009a78:	bf08      	it	eq
 8009a7a:	f100 0c02 	addeq.w	ip, r0, #2
 8009a7e:	e7c8      	b.n	8009a12 <_strtol_l.isra.0+0x3e>
 8009a80:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009a84:	2e19      	cmp	r6, #25
 8009a86:	d801      	bhi.n	8009a8c <_strtol_l.isra.0+0xb8>
 8009a88:	3c37      	subs	r4, #55	; 0x37
 8009a8a:	e7e1      	b.n	8009a50 <_strtol_l.isra.0+0x7c>
 8009a8c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009a90:	2e19      	cmp	r6, #25
 8009a92:	d804      	bhi.n	8009a9e <_strtol_l.isra.0+0xca>
 8009a94:	3c57      	subs	r4, #87	; 0x57
 8009a96:	e7db      	b.n	8009a50 <_strtol_l.isra.0+0x7c>
 8009a98:	f04f 35ff 	mov.w	r5, #4294967295
 8009a9c:	e7e4      	b.n	8009a68 <_strtol_l.isra.0+0x94>
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	da08      	bge.n	8009ab4 <_strtol_l.isra.0+0xe0>
 8009aa2:	2322      	movs	r3, #34	; 0x22
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f8ce 3000 	str.w	r3, [lr]
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	d09e      	beq.n	80099ec <_strtol_l.isra.0+0x18>
 8009aae:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009ab2:	e007      	b.n	8009ac4 <_strtol_l.isra.0+0xf0>
 8009ab4:	f1b8 0f00 	cmp.w	r8, #0
 8009ab8:	d000      	beq.n	8009abc <_strtol_l.isra.0+0xe8>
 8009aba:	4240      	negs	r0, r0
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	d095      	beq.n	80099ec <_strtol_l.isra.0+0x18>
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	d1f4      	bne.n	8009aae <_strtol_l.isra.0+0xda>
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	e791      	b.n	80099ec <_strtol_l.isra.0+0x18>
 8009ac8:	2430      	movs	r4, #48	; 0x30
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1b2      	bne.n	8009a34 <_strtol_l.isra.0+0x60>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	e7b0      	b.n	8009a34 <_strtol_l.isra.0+0x60>
 8009ad2:	2c30      	cmp	r4, #48	; 0x30
 8009ad4:	d0a3      	beq.n	8009a1e <_strtol_l.isra.0+0x4a>
 8009ad6:	230a      	movs	r3, #10
 8009ad8:	e7ac      	b.n	8009a34 <_strtol_l.isra.0+0x60>
 8009ada:	bf00      	nop
 8009adc:	0800b468 	.word	0x0800b468

08009ae0 <_strtol_r>:
 8009ae0:	f7ff bf78 	b.w	80099d4 <_strtol_l.isra.0>

08009ae4 <strtol>:
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	4601      	mov	r1, r0
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <strtol+0x10>)
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f7ff bf71 	b.w	80099d4 <_strtol_l.isra.0>
 8009af2:	bf00      	nop
 8009af4:	2000027c 	.word	0x2000027c

08009af8 <time>:
 8009af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <time+0x30>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	2200      	movs	r2, #0
 8009b00:	4669      	mov	r1, sp
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	f000 f864 	bl	8009bd0 <_gettimeofday_r>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	da05      	bge.n	8009b18 <time+0x20>
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295
 8009b14:	e9cd 2300 	strd	r2, r3, [sp]
 8009b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b1c:	b10c      	cbz	r4, 8009b22 <time+0x2a>
 8009b1e:	e9c4 0100 	strd	r0, r1, [r4]
 8009b22:	b004      	add	sp, #16
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	bf00      	nop
 8009b28:	2000027c 	.word	0x2000027c

08009b2c <_write_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	2200      	movs	r2, #0
 8009b36:	4d05      	ldr	r5, [pc, #20]	; (8009b4c <_write_r+0x20>)
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f7 f8bc 	bl	8000cb8 <_write>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_write_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_write_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20001740 	.word	0x20001740

08009b50 <__assert_func>:
 8009b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b52:	4614      	mov	r4, r2
 8009b54:	461a      	mov	r2, r3
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <__assert_func+0x2c>)
 8009b58:	4605      	mov	r5, r0
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68d8      	ldr	r0, [r3, #12]
 8009b5e:	b14c      	cbz	r4, 8009b74 <__assert_func+0x24>
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <__assert_func+0x30>)
 8009b62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b66:	9100      	str	r1, [sp, #0]
 8009b68:	462b      	mov	r3, r5
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <__assert_func+0x34>)
 8009b6c:	f000 f81e 	bl	8009bac <fiprintf>
 8009b70:	f001 f82c 	bl	800abcc <abort>
 8009b74:	4b04      	ldr	r3, [pc, #16]	; (8009b88 <__assert_func+0x38>)
 8009b76:	461c      	mov	r4, r3
 8009b78:	e7f3      	b.n	8009b62 <__assert_func+0x12>
 8009b7a:	bf00      	nop
 8009b7c:	2000027c 	.word	0x2000027c
 8009b80:	0800b42b 	.word	0x0800b42b
 8009b84:	0800b438 	.word	0x0800b438
 8009b88:	0800b466 	.word	0x0800b466

08009b8c <_close_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4d05      	ldr	r5, [pc, #20]	; (8009ba8 <_close_r+0x1c>)
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7f7 f8aa 	bl	8000cf0 <_close>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_close_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_close_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20001740 	.word	0x20001740

08009bac <fiprintf>:
 8009bac:	b40e      	push	{r1, r2, r3}
 8009bae:	b503      	push	{r0, r1, lr}
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	4805      	ldr	r0, [pc, #20]	; (8009bcc <fiprintf+0x20>)
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	f000 fa33 	bl	800a028 <_vfiprintf_r>
 8009bc2:	b002      	add	sp, #8
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b003      	add	sp, #12
 8009bca:	4770      	bx	lr
 8009bcc:	2000027c 	.word	0x2000027c

08009bd0 <_gettimeofday_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_gettimeofday_r+0x20>)
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	4611      	mov	r1, r2
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	f001 facb 	bl	800b178 <_gettimeofday>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d102      	bne.n	8009bec <_gettimeofday_r+0x1c>
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	b103      	cbz	r3, 8009bec <_gettimeofday_r+0x1c>
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	bd38      	pop	{r3, r4, r5, pc}
 8009bee:	bf00      	nop
 8009bf0:	20001740 	.word	0x20001740

08009bf4 <_lseek_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4d05      	ldr	r5, [pc, #20]	; (8009c14 <_lseek_r+0x20>)
 8009c00:	602a      	str	r2, [r5, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f7f7 f898 	bl	8000d38 <_lseek>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_lseek_r+0x1e>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_lseek_r+0x1e>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	20001740 	.word	0x20001740

08009c18 <__malloc_lock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__malloc_lock+0x8>)
 8009c1a:	f001 b997 	b.w	800af4c <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20001748 	.word	0x20001748

08009c24 <__malloc_unlock>:
 8009c24:	4801      	ldr	r0, [pc, #4]	; (8009c2c <__malloc_unlock+0x8>)
 8009c26:	f001 b992 	b.w	800af4e <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20001748 	.word	0x20001748

08009c30 <_sungetc_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	1c4b      	adds	r3, r1, #1
 8009c34:	4614      	mov	r4, r2
 8009c36:	d103      	bne.n	8009c40 <_sungetc_r+0x10>
 8009c38:	f04f 35ff 	mov.w	r5, #4294967295
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	8993      	ldrh	r3, [r2, #12]
 8009c42:	b2cd      	uxtb	r5, r1
 8009c44:	f023 0320 	bic.w	r3, r3, #32
 8009c48:	8193      	strh	r3, [r2, #12]
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	6852      	ldr	r2, [r2, #4]
 8009c4e:	b18b      	cbz	r3, 8009c74 <_sungetc_r+0x44>
 8009c50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c52:	4293      	cmp	r3, r2
 8009c54:	dd08      	ble.n	8009c68 <_sungetc_r+0x38>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	3301      	adds	r3, #1
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	e7e9      	b.n	8009c3c <_sungetc_r+0xc>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f000 feb7 	bl	800a9dc <__submore>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d0f1      	beq.n	8009c56 <_sungetc_r+0x26>
 8009c72:	e7e1      	b.n	8009c38 <_sungetc_r+0x8>
 8009c74:	6921      	ldr	r1, [r4, #16]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	b151      	cbz	r1, 8009c90 <_sungetc_r+0x60>
 8009c7a:	4299      	cmp	r1, r3
 8009c7c:	d208      	bcs.n	8009c90 <_sungetc_r+0x60>
 8009c7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009c82:	42a9      	cmp	r1, r5
 8009c84:	d104      	bne.n	8009c90 <_sungetc_r+0x60>
 8009c86:	3b01      	subs	r3, #1
 8009c88:	3201      	adds	r2, #1
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	6062      	str	r2, [r4, #4]
 8009c8e:	e7d5      	b.n	8009c3c <_sungetc_r+0xc>
 8009c90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c98:	6363      	str	r3, [r4, #52]	; 0x34
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7dc      	b.n	8009c64 <_sungetc_r+0x34>

08009caa <__ssrefill_r>:
 8009caa:	b510      	push	{r4, lr}
 8009cac:	460c      	mov	r4, r1
 8009cae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009cb0:	b169      	cbz	r1, 8009cce <__ssrefill_r+0x24>
 8009cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	d001      	beq.n	8009cbe <__ssrefill_r+0x14>
 8009cba:	f7ff fc85 	bl	80095c8 <_free_r>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	b113      	cbz	r3, 8009cce <__ssrefill_r+0x24>
 8009cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6063      	str	r3, [r4, #4]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	e7f3      	b.n	8009ccc <__ssrefill_r+0x22>

08009ce4 <__ssvfiscanf_r>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	2100      	movs	r1, #0
 8009cec:	4606      	mov	r6, r0
 8009cee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009cf2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009cf6:	49b3      	ldr	r1, [pc, #716]	; (8009fc4 <__ssvfiscanf_r+0x2e0>)
 8009cf8:	f10d 0804 	add.w	r8, sp, #4
 8009cfc:	91a0      	str	r1, [sp, #640]	; 0x280
 8009cfe:	49b2      	ldr	r1, [pc, #712]	; (8009fc8 <__ssvfiscanf_r+0x2e4>)
 8009d00:	4fb2      	ldr	r7, [pc, #712]	; (8009fcc <__ssvfiscanf_r+0x2e8>)
 8009d02:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009fd0 <__ssvfiscanf_r+0x2ec>
 8009d06:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009d0a:	91a1      	str	r1, [sp, #644]	; 0x284
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	f892 a000 	ldrb.w	sl, [r2]
 8009d12:	f1ba 0f00 	cmp.w	sl, #0
 8009d16:	f000 8153 	beq.w	8009fc0 <__ssvfiscanf_r+0x2dc>
 8009d1a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009d1e:	1c55      	adds	r5, r2, #1
 8009d20:	f013 0308 	ands.w	r3, r3, #8
 8009d24:	d019      	beq.n	8009d5a <__ssvfiscanf_r+0x76>
 8009d26:	6863      	ldr	r3, [r4, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dd0f      	ble.n	8009d4c <__ssvfiscanf_r+0x68>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	5cba      	ldrb	r2, [r7, r2]
 8009d32:	0712      	lsls	r2, r2, #28
 8009d34:	d401      	bmi.n	8009d3a <__ssvfiscanf_r+0x56>
 8009d36:	462a      	mov	r2, r5
 8009d38:	e7e9      	b.n	8009d0e <__ssvfiscanf_r+0x2a>
 8009d3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	3201      	adds	r2, #1
 8009d40:	9245      	str	r2, [sp, #276]	; 0x114
 8009d42:	6862      	ldr	r2, [r4, #4]
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	3a01      	subs	r2, #1
 8009d48:	6062      	str	r2, [r4, #4]
 8009d4a:	e7ec      	b.n	8009d26 <__ssvfiscanf_r+0x42>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4630      	mov	r0, r6
 8009d50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d52:	4798      	blx	r3
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d0e9      	beq.n	8009d2c <__ssvfiscanf_r+0x48>
 8009d58:	e7ed      	b.n	8009d36 <__ssvfiscanf_r+0x52>
 8009d5a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009d5e:	f040 8086 	bne.w	8009e6e <__ssvfiscanf_r+0x18a>
 8009d62:	9341      	str	r3, [sp, #260]	; 0x104
 8009d64:	9343      	str	r3, [sp, #268]	; 0x10c
 8009d66:	7853      	ldrb	r3, [r2, #1]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	bf04      	itt	eq
 8009d6c:	2310      	moveq	r3, #16
 8009d6e:	1c95      	addeq	r5, r2, #2
 8009d70:	f04f 020a 	mov.w	r2, #10
 8009d74:	bf08      	it	eq
 8009d76:	9341      	streq	r3, [sp, #260]	; 0x104
 8009d78:	46ab      	mov	fp, r5
 8009d7a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009d7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d82:	2b09      	cmp	r3, #9
 8009d84:	d91d      	bls.n	8009dc2 <__ssvfiscanf_r+0xde>
 8009d86:	2203      	movs	r2, #3
 8009d88:	4891      	ldr	r0, [pc, #580]	; (8009fd0 <__ssvfiscanf_r+0x2ec>)
 8009d8a:	f001 f945 	bl	800b018 <memchr>
 8009d8e:	b140      	cbz	r0, 8009da2 <__ssvfiscanf_r+0xbe>
 8009d90:	2301      	movs	r3, #1
 8009d92:	465d      	mov	r5, fp
 8009d94:	eba0 0009 	sub.w	r0, r0, r9
 8009d98:	fa03 f000 	lsl.w	r0, r3, r0
 8009d9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d9e:	4318      	orrs	r0, r3
 8009da0:	9041      	str	r0, [sp, #260]	; 0x104
 8009da2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009da6:	2b78      	cmp	r3, #120	; 0x78
 8009da8:	d806      	bhi.n	8009db8 <__ssvfiscanf_r+0xd4>
 8009daa:	2b57      	cmp	r3, #87	; 0x57
 8009dac:	d810      	bhi.n	8009dd0 <__ssvfiscanf_r+0xec>
 8009dae:	2b25      	cmp	r3, #37	; 0x25
 8009db0:	d05d      	beq.n	8009e6e <__ssvfiscanf_r+0x18a>
 8009db2:	d857      	bhi.n	8009e64 <__ssvfiscanf_r+0x180>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d075      	beq.n	8009ea4 <__ssvfiscanf_r+0x1c0>
 8009db8:	2303      	movs	r3, #3
 8009dba:	9347      	str	r3, [sp, #284]	; 0x11c
 8009dbc:	230a      	movs	r3, #10
 8009dbe:	9342      	str	r3, [sp, #264]	; 0x108
 8009dc0:	e082      	b.n	8009ec8 <__ssvfiscanf_r+0x1e4>
 8009dc2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009dc4:	465d      	mov	r5, fp
 8009dc6:	fb02 1303 	mla	r3, r2, r3, r1
 8009dca:	3b30      	subs	r3, #48	; 0x30
 8009dcc:	9343      	str	r3, [sp, #268]	; 0x10c
 8009dce:	e7d3      	b.n	8009d78 <__ssvfiscanf_r+0x94>
 8009dd0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009dd4:	2a20      	cmp	r2, #32
 8009dd6:	d8ef      	bhi.n	8009db8 <__ssvfiscanf_r+0xd4>
 8009dd8:	a101      	add	r1, pc, #4	; (adr r1, 8009de0 <__ssvfiscanf_r+0xfc>)
 8009dda:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009dde:	bf00      	nop
 8009de0:	08009eb3 	.word	0x08009eb3
 8009de4:	08009db9 	.word	0x08009db9
 8009de8:	08009db9 	.word	0x08009db9
 8009dec:	08009f11 	.word	0x08009f11
 8009df0:	08009db9 	.word	0x08009db9
 8009df4:	08009db9 	.word	0x08009db9
 8009df8:	08009db9 	.word	0x08009db9
 8009dfc:	08009db9 	.word	0x08009db9
 8009e00:	08009db9 	.word	0x08009db9
 8009e04:	08009db9 	.word	0x08009db9
 8009e08:	08009db9 	.word	0x08009db9
 8009e0c:	08009f27 	.word	0x08009f27
 8009e10:	08009efd 	.word	0x08009efd
 8009e14:	08009e6b 	.word	0x08009e6b
 8009e18:	08009e6b 	.word	0x08009e6b
 8009e1c:	08009e6b 	.word	0x08009e6b
 8009e20:	08009db9 	.word	0x08009db9
 8009e24:	08009f01 	.word	0x08009f01
 8009e28:	08009db9 	.word	0x08009db9
 8009e2c:	08009db9 	.word	0x08009db9
 8009e30:	08009db9 	.word	0x08009db9
 8009e34:	08009db9 	.word	0x08009db9
 8009e38:	08009f37 	.word	0x08009f37
 8009e3c:	08009f09 	.word	0x08009f09
 8009e40:	08009eab 	.word	0x08009eab
 8009e44:	08009db9 	.word	0x08009db9
 8009e48:	08009db9 	.word	0x08009db9
 8009e4c:	08009f33 	.word	0x08009f33
 8009e50:	08009db9 	.word	0x08009db9
 8009e54:	08009efd 	.word	0x08009efd
 8009e58:	08009db9 	.word	0x08009db9
 8009e5c:	08009db9 	.word	0x08009db9
 8009e60:	08009eb3 	.word	0x08009eb3
 8009e64:	3b45      	subs	r3, #69	; 0x45
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d8a6      	bhi.n	8009db8 <__ssvfiscanf_r+0xd4>
 8009e6a:	2305      	movs	r3, #5
 8009e6c:	e02b      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009e6e:	6863      	ldr	r3, [r4, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dd0d      	ble.n	8009e90 <__ssvfiscanf_r+0x1ac>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	4552      	cmp	r2, sl
 8009e7a:	f040 80a1 	bne.w	8009fc0 <__ssvfiscanf_r+0x2dc>
 8009e7e:	3301      	adds	r3, #1
 8009e80:	6862      	ldr	r2, [r4, #4]
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009e86:	3a01      	subs	r2, #1
 8009e88:	3301      	adds	r3, #1
 8009e8a:	6062      	str	r2, [r4, #4]
 8009e8c:	9345      	str	r3, [sp, #276]	; 0x114
 8009e8e:	e752      	b.n	8009d36 <__ssvfiscanf_r+0x52>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4630      	mov	r0, r6
 8009e94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e96:	4798      	blx	r3
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0eb      	beq.n	8009e74 <__ssvfiscanf_r+0x190>
 8009e9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f040 8084 	bne.w	8009fac <__ssvfiscanf_r+0x2c8>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e086      	b.n	8009fb8 <__ssvfiscanf_r+0x2d4>
 8009eaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009eac:	f042 0220 	orr.w	r2, r2, #32
 8009eb0:	9241      	str	r2, [sp, #260]	; 0x104
 8009eb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb8:	9241      	str	r2, [sp, #260]	; 0x104
 8009eba:	2210      	movs	r2, #16
 8009ebc:	2b6f      	cmp	r3, #111	; 0x6f
 8009ebe:	bf34      	ite	cc
 8009ec0:	2303      	movcc	r3, #3
 8009ec2:	2304      	movcs	r3, #4
 8009ec4:	9242      	str	r2, [sp, #264]	; 0x108
 8009ec6:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dd41      	ble.n	8009f52 <__ssvfiscanf_r+0x26e>
 8009ece:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ed0:	0659      	lsls	r1, r3, #25
 8009ed2:	d404      	bmi.n	8009ede <__ssvfiscanf_r+0x1fa>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	5cba      	ldrb	r2, [r7, r2]
 8009eda:	0712      	lsls	r2, r2, #28
 8009edc:	d440      	bmi.n	8009f60 <__ssvfiscanf_r+0x27c>
 8009ede:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	dc4f      	bgt.n	8009f84 <__ssvfiscanf_r+0x2a0>
 8009ee4:	466b      	mov	r3, sp
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4630      	mov	r0, r6
 8009eea:	a941      	add	r1, sp, #260	; 0x104
 8009eec:	f000 fb62 	bl	800a5b4 <_scanf_chars>
 8009ef0:	2801      	cmp	r0, #1
 8009ef2:	d065      	beq.n	8009fc0 <__ssvfiscanf_r+0x2dc>
 8009ef4:	2802      	cmp	r0, #2
 8009ef6:	f47f af1e 	bne.w	8009d36 <__ssvfiscanf_r+0x52>
 8009efa:	e7cf      	b.n	8009e9c <__ssvfiscanf_r+0x1b8>
 8009efc:	220a      	movs	r2, #10
 8009efe:	e7dd      	b.n	8009ebc <__ssvfiscanf_r+0x1d8>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9342      	str	r3, [sp, #264]	; 0x108
 8009f04:	2303      	movs	r3, #3
 8009f06:	e7de      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	9342      	str	r3, [sp, #264]	; 0x108
 8009f0c:	2304      	movs	r3, #4
 8009f0e:	e7da      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009f10:	4629      	mov	r1, r5
 8009f12:	4640      	mov	r0, r8
 8009f14:	f000 fcaa 	bl	800a86c <__sccl>
 8009f18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f20:	9341      	str	r3, [sp, #260]	; 0x104
 8009f22:	2301      	movs	r3, #1
 8009f24:	e7cf      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009f26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f2c:	9341      	str	r3, [sp, #260]	; 0x104
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e7c9      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009f32:	2302      	movs	r3, #2
 8009f34:	e7c7      	b.n	8009ec6 <__ssvfiscanf_r+0x1e2>
 8009f36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009f38:	06c3      	lsls	r3, r0, #27
 8009f3a:	f53f aefc 	bmi.w	8009d36 <__ssvfiscanf_r+0x52>
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	9100      	str	r1, [sp, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	07c0      	lsls	r0, r0, #31
 8009f4a:	bf4c      	ite	mi
 8009f4c:	801a      	strhmi	r2, [r3, #0]
 8009f4e:	601a      	strpl	r2, [r3, #0]
 8009f50:	e6f1      	b.n	8009d36 <__ssvfiscanf_r+0x52>
 8009f52:	4621      	mov	r1, r4
 8009f54:	4630      	mov	r0, r6
 8009f56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f58:	4798      	blx	r3
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d0b7      	beq.n	8009ece <__ssvfiscanf_r+0x1ea>
 8009f5e:	e79d      	b.n	8009e9c <__ssvfiscanf_r+0x1b8>
 8009f60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f62:	3201      	adds	r2, #1
 8009f64:	9245      	str	r2, [sp, #276]	; 0x114
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	6062      	str	r2, [r4, #4]
 8009f6e:	dd02      	ble.n	8009f76 <__ssvfiscanf_r+0x292>
 8009f70:	3301      	adds	r3, #1
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	e7ae      	b.n	8009ed4 <__ssvfiscanf_r+0x1f0>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4630      	mov	r0, r6
 8009f7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f7c:	4798      	blx	r3
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0a8      	beq.n	8009ed4 <__ssvfiscanf_r+0x1f0>
 8009f82:	e78b      	b.n	8009e9c <__ssvfiscanf_r+0x1b8>
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	dc06      	bgt.n	8009f96 <__ssvfiscanf_r+0x2b2>
 8009f88:	466b      	mov	r3, sp
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	a941      	add	r1, sp, #260	; 0x104
 8009f90:	f000 fb68 	bl	800a664 <_scanf_i>
 8009f94:	e7ac      	b.n	8009ef0 <__ssvfiscanf_r+0x20c>
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <__ssvfiscanf_r+0x2f0>)
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f43f aecc 	beq.w	8009d36 <__ssvfiscanf_r+0x52>
 8009f9e:	466b      	mov	r3, sp
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	a941      	add	r1, sp, #260	; 0x104
 8009fa6:	f3af 8000 	nop.w
 8009faa:	e7a1      	b.n	8009ef0 <__ssvfiscanf_r+0x20c>
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009fb2:	bf18      	it	ne
 8009fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8009fb8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009fc2:	e7f9      	b.n	8009fb8 <__ssvfiscanf_r+0x2d4>
 8009fc4:	08009c31 	.word	0x08009c31
 8009fc8:	08009cab 	.word	0x08009cab
 8009fcc:	0800b468 	.word	0x0800b468
 8009fd0:	0800b568 	.word	0x0800b568
 8009fd4:	00000000 	.word	0x00000000

08009fd8 <__sfputc_r>:
 8009fd8:	6893      	ldr	r3, [r2, #8]
 8009fda:	b410      	push	{r4}
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	6093      	str	r3, [r2, #8]
 8009fe2:	da07      	bge.n	8009ff4 <__sfputc_r+0x1c>
 8009fe4:	6994      	ldr	r4, [r2, #24]
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	db01      	blt.n	8009fee <__sfputc_r+0x16>
 8009fea:	290a      	cmp	r1, #10
 8009fec:	d102      	bne.n	8009ff4 <__sfputc_r+0x1c>
 8009fee:	bc10      	pop	{r4}
 8009ff0:	f000 bd2c 	b.w	800aa4c <__swbuf_r>
 8009ff4:	6813      	ldr	r3, [r2, #0]
 8009ff6:	1c58      	adds	r0, r3, #1
 8009ff8:	6010      	str	r0, [r2, #0]
 8009ffa:	7019      	strb	r1, [r3, #0]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	bc10      	pop	{r4}
 800a000:	4770      	bx	lr

0800a002 <__sfputs_r>:
 800a002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	4614      	mov	r4, r2
 800a00a:	18d5      	adds	r5, r2, r3
 800a00c:	42ac      	cmp	r4, r5
 800a00e:	d101      	bne.n	800a014 <__sfputs_r+0x12>
 800a010:	2000      	movs	r0, #0
 800a012:	e007      	b.n	800a024 <__sfputs_r+0x22>
 800a014:	463a      	mov	r2, r7
 800a016:	4630      	mov	r0, r6
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	f7ff ffdc 	bl	8009fd8 <__sfputc_r>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d1f3      	bne.n	800a00c <__sfputs_r+0xa>
 800a024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a028 <_vfiprintf_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	460d      	mov	r5, r1
 800a02e:	4614      	mov	r4, r2
 800a030:	4698      	mov	r8, r3
 800a032:	4606      	mov	r6, r0
 800a034:	b09d      	sub	sp, #116	; 0x74
 800a036:	b118      	cbz	r0, 800a040 <_vfiprintf_r+0x18>
 800a038:	6983      	ldr	r3, [r0, #24]
 800a03a:	b90b      	cbnz	r3, 800a040 <_vfiprintf_r+0x18>
 800a03c:	f000 fee8 	bl	800ae10 <__sinit>
 800a040:	4b89      	ldr	r3, [pc, #548]	; (800a268 <_vfiprintf_r+0x240>)
 800a042:	429d      	cmp	r5, r3
 800a044:	d11b      	bne.n	800a07e <_vfiprintf_r+0x56>
 800a046:	6875      	ldr	r5, [r6, #4]
 800a048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a04a:	07d9      	lsls	r1, r3, #31
 800a04c:	d405      	bmi.n	800a05a <_vfiprintf_r+0x32>
 800a04e:	89ab      	ldrh	r3, [r5, #12]
 800a050:	059a      	lsls	r2, r3, #22
 800a052:	d402      	bmi.n	800a05a <_vfiprintf_r+0x32>
 800a054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a056:	f000 ff79 	bl	800af4c <__retarget_lock_acquire_recursive>
 800a05a:	89ab      	ldrh	r3, [r5, #12]
 800a05c:	071b      	lsls	r3, r3, #28
 800a05e:	d501      	bpl.n	800a064 <_vfiprintf_r+0x3c>
 800a060:	692b      	ldr	r3, [r5, #16]
 800a062:	b9eb      	cbnz	r3, 800a0a0 <_vfiprintf_r+0x78>
 800a064:	4629      	mov	r1, r5
 800a066:	4630      	mov	r0, r6
 800a068:	f000 fd42 	bl	800aaf0 <__swsetup_r>
 800a06c:	b1c0      	cbz	r0, 800a0a0 <_vfiprintf_r+0x78>
 800a06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a070:	07dc      	lsls	r4, r3, #31
 800a072:	d50e      	bpl.n	800a092 <_vfiprintf_r+0x6a>
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	b01d      	add	sp, #116	; 0x74
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	4b7b      	ldr	r3, [pc, #492]	; (800a26c <_vfiprintf_r+0x244>)
 800a080:	429d      	cmp	r5, r3
 800a082:	d101      	bne.n	800a088 <_vfiprintf_r+0x60>
 800a084:	68b5      	ldr	r5, [r6, #8]
 800a086:	e7df      	b.n	800a048 <_vfiprintf_r+0x20>
 800a088:	4b79      	ldr	r3, [pc, #484]	; (800a270 <_vfiprintf_r+0x248>)
 800a08a:	429d      	cmp	r5, r3
 800a08c:	bf08      	it	eq
 800a08e:	68f5      	ldreq	r5, [r6, #12]
 800a090:	e7da      	b.n	800a048 <_vfiprintf_r+0x20>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	0598      	lsls	r0, r3, #22
 800a096:	d4ed      	bmi.n	800a074 <_vfiprintf_r+0x4c>
 800a098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a09a:	f000 ff58 	bl	800af4e <__retarget_lock_release_recursive>
 800a09e:	e7e9      	b.n	800a074 <_vfiprintf_r+0x4c>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0aa:	2330      	movs	r3, #48	; 0x30
 800a0ac:	f04f 0901 	mov.w	r9, #1
 800a0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a274 <_vfiprintf_r+0x24c>
 800a0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0bc:	4623      	mov	r3, r4
 800a0be:	469a      	mov	sl, r3
 800a0c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_vfiprintf_r+0xa2>
 800a0c6:	2a25      	cmp	r2, #37	; 0x25
 800a0c8:	d1f9      	bne.n	800a0be <_vfiprintf_r+0x96>
 800a0ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ce:	d00b      	beq.n	800a0e8 <_vfiprintf_r+0xc0>
 800a0d0:	465b      	mov	r3, fp
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7ff ff93 	bl	800a002 <__sfputs_r>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f000 80aa 	beq.w	800a236 <_vfiprintf_r+0x20e>
 800a0e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e4:	445a      	add	r2, fp
 800a0e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80a2 	beq.w	800a236 <_vfiprintf_r+0x20e>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0fc:	f10a 0a01 	add.w	sl, sl, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	9307      	str	r3, [sp, #28]
 800a104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a108:	931a      	str	r3, [sp, #104]	; 0x68
 800a10a:	4654      	mov	r4, sl
 800a10c:	2205      	movs	r2, #5
 800a10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a112:	4858      	ldr	r0, [pc, #352]	; (800a274 <_vfiprintf_r+0x24c>)
 800a114:	f000 ff80 	bl	800b018 <memchr>
 800a118:	9a04      	ldr	r2, [sp, #16]
 800a11a:	b9d8      	cbnz	r0, 800a154 <_vfiprintf_r+0x12c>
 800a11c:	06d1      	lsls	r1, r2, #27
 800a11e:	bf44      	itt	mi
 800a120:	2320      	movmi	r3, #32
 800a122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a126:	0713      	lsls	r3, r2, #28
 800a128:	bf44      	itt	mi
 800a12a:	232b      	movmi	r3, #43	; 0x2b
 800a12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a130:	f89a 3000 	ldrb.w	r3, [sl]
 800a134:	2b2a      	cmp	r3, #42	; 0x2a
 800a136:	d015      	beq.n	800a164 <_vfiprintf_r+0x13c>
 800a138:	4654      	mov	r4, sl
 800a13a:	2000      	movs	r0, #0
 800a13c:	f04f 0c0a 	mov.w	ip, #10
 800a140:	9a07      	ldr	r2, [sp, #28]
 800a142:	4621      	mov	r1, r4
 800a144:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a148:	3b30      	subs	r3, #48	; 0x30
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d94e      	bls.n	800a1ec <_vfiprintf_r+0x1c4>
 800a14e:	b1b0      	cbz	r0, 800a17e <_vfiprintf_r+0x156>
 800a150:	9207      	str	r2, [sp, #28]
 800a152:	e014      	b.n	800a17e <_vfiprintf_r+0x156>
 800a154:	eba0 0308 	sub.w	r3, r0, r8
 800a158:	fa09 f303 	lsl.w	r3, r9, r3
 800a15c:	4313      	orrs	r3, r2
 800a15e:	46a2      	mov	sl, r4
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	e7d2      	b.n	800a10a <_vfiprintf_r+0xe2>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1d19      	adds	r1, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	9103      	str	r1, [sp, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfbb      	ittet	lt
 800a170:	425b      	neglt	r3, r3
 800a172:	f042 0202 	orrlt.w	r2, r2, #2
 800a176:	9307      	strge	r3, [sp, #28]
 800a178:	9307      	strlt	r3, [sp, #28]
 800a17a:	bfb8      	it	lt
 800a17c:	9204      	strlt	r2, [sp, #16]
 800a17e:	7823      	ldrb	r3, [r4, #0]
 800a180:	2b2e      	cmp	r3, #46	; 0x2e
 800a182:	d10c      	bne.n	800a19e <_vfiprintf_r+0x176>
 800a184:	7863      	ldrb	r3, [r4, #1]
 800a186:	2b2a      	cmp	r3, #42	; 0x2a
 800a188:	d135      	bne.n	800a1f6 <_vfiprintf_r+0x1ce>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	3402      	adds	r4, #2
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	9203      	str	r2, [sp, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfb8      	it	lt
 800a198:	f04f 33ff 	movlt.w	r3, #4294967295
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a284 <_vfiprintf_r+0x25c>
 800a1a2:	2203      	movs	r2, #3
 800a1a4:	4650      	mov	r0, sl
 800a1a6:	7821      	ldrb	r1, [r4, #0]
 800a1a8:	f000 ff36 	bl	800b018 <memchr>
 800a1ac:	b140      	cbz	r0, 800a1c0 <_vfiprintf_r+0x198>
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	eba0 000a 	sub.w	r0, r0, sl
 800a1b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a1b8:	9b04      	ldr	r3, [sp, #16]
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	4303      	orrs	r3, r0
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c4:	2206      	movs	r2, #6
 800a1c6:	482c      	ldr	r0, [pc, #176]	; (800a278 <_vfiprintf_r+0x250>)
 800a1c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1cc:	f000 ff24 	bl	800b018 <memchr>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d03f      	beq.n	800a254 <_vfiprintf_r+0x22c>
 800a1d4:	4b29      	ldr	r3, [pc, #164]	; (800a27c <_vfiprintf_r+0x254>)
 800a1d6:	bb1b      	cbnz	r3, 800a220 <_vfiprintf_r+0x1f8>
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	3307      	adds	r3, #7
 800a1dc:	f023 0307 	bic.w	r3, r3, #7
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	9303      	str	r3, [sp, #12]
 800a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e6:	443b      	add	r3, r7
 800a1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ea:	e767      	b.n	800a0bc <_vfiprintf_r+0x94>
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1f4:	e7a5      	b.n	800a142 <_vfiprintf_r+0x11a>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f04f 0c0a 	mov.w	ip, #10
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	3401      	adds	r4, #1
 800a200:	9305      	str	r3, [sp, #20]
 800a202:	4620      	mov	r0, r4
 800a204:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a208:	3a30      	subs	r2, #48	; 0x30
 800a20a:	2a09      	cmp	r2, #9
 800a20c:	d903      	bls.n	800a216 <_vfiprintf_r+0x1ee>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0c5      	beq.n	800a19e <_vfiprintf_r+0x176>
 800a212:	9105      	str	r1, [sp, #20]
 800a214:	e7c3      	b.n	800a19e <_vfiprintf_r+0x176>
 800a216:	4604      	mov	r4, r0
 800a218:	2301      	movs	r3, #1
 800a21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a21e:	e7f0      	b.n	800a202 <_vfiprintf_r+0x1da>
 800a220:	ab03      	add	r3, sp, #12
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	462a      	mov	r2, r5
 800a226:	4630      	mov	r0, r6
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <_vfiprintf_r+0x258>)
 800a22a:	a904      	add	r1, sp, #16
 800a22c:	f3af 8000 	nop.w
 800a230:	4607      	mov	r7, r0
 800a232:	1c78      	adds	r0, r7, #1
 800a234:	d1d6      	bne.n	800a1e4 <_vfiprintf_r+0x1bc>
 800a236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a238:	07d9      	lsls	r1, r3, #31
 800a23a:	d405      	bmi.n	800a248 <_vfiprintf_r+0x220>
 800a23c:	89ab      	ldrh	r3, [r5, #12]
 800a23e:	059a      	lsls	r2, r3, #22
 800a240:	d402      	bmi.n	800a248 <_vfiprintf_r+0x220>
 800a242:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a244:	f000 fe83 	bl	800af4e <__retarget_lock_release_recursive>
 800a248:	89ab      	ldrh	r3, [r5, #12]
 800a24a:	065b      	lsls	r3, r3, #25
 800a24c:	f53f af12 	bmi.w	800a074 <_vfiprintf_r+0x4c>
 800a250:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a252:	e711      	b.n	800a078 <_vfiprintf_r+0x50>
 800a254:	ab03      	add	r3, sp, #12
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	462a      	mov	r2, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	4b08      	ldr	r3, [pc, #32]	; (800a280 <_vfiprintf_r+0x258>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	f000 f882 	bl	800a368 <_printf_i>
 800a264:	e7e4      	b.n	800a230 <_vfiprintf_r+0x208>
 800a266:	bf00      	nop
 800a268:	0800b5d8 	.word	0x0800b5d8
 800a26c:	0800b5f8 	.word	0x0800b5f8
 800a270:	0800b5b8 	.word	0x0800b5b8
 800a274:	0800b56c 	.word	0x0800b56c
 800a278:	0800b572 	.word	0x0800b572
 800a27c:	00000000 	.word	0x00000000
 800a280:	0800a003 	.word	0x0800a003
 800a284:	0800b568 	.word	0x0800b568

0800a288 <_printf_common>:
 800a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a28c:	4616      	mov	r6, r2
 800a28e:	4699      	mov	r9, r3
 800a290:	688a      	ldr	r2, [r1, #8]
 800a292:	690b      	ldr	r3, [r1, #16]
 800a294:	4607      	mov	r7, r0
 800a296:	4293      	cmp	r3, r2
 800a298:	bfb8      	it	lt
 800a29a:	4613      	movlt	r3, r2
 800a29c:	6033      	str	r3, [r6, #0]
 800a29e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2a8:	b10a      	cbz	r2, 800a2ae <_printf_common+0x26>
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	6033      	str	r3, [r6, #0]
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	0699      	lsls	r1, r3, #26
 800a2b2:	bf42      	ittt	mi
 800a2b4:	6833      	ldrmi	r3, [r6, #0]
 800a2b6:	3302      	addmi	r3, #2
 800a2b8:	6033      	strmi	r3, [r6, #0]
 800a2ba:	6825      	ldr	r5, [r4, #0]
 800a2bc:	f015 0506 	ands.w	r5, r5, #6
 800a2c0:	d106      	bne.n	800a2d0 <_printf_common+0x48>
 800a2c2:	f104 0a19 	add.w	sl, r4, #25
 800a2c6:	68e3      	ldr	r3, [r4, #12]
 800a2c8:	6832      	ldr	r2, [r6, #0]
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	42ab      	cmp	r3, r5
 800a2ce:	dc28      	bgt.n	800a322 <_printf_common+0x9a>
 800a2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2d4:	1e13      	subs	r3, r2, #0
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	bf18      	it	ne
 800a2da:	2301      	movne	r3, #1
 800a2dc:	0692      	lsls	r2, r2, #26
 800a2de:	d42d      	bmi.n	800a33c <_printf_common+0xb4>
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2e8:	47c0      	blx	r8
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d020      	beq.n	800a330 <_printf_common+0xa8>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	68e5      	ldr	r5, [r4, #12]
 800a2f2:	f003 0306 	and.w	r3, r3, #6
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	bf18      	it	ne
 800a2fa:	2500      	movne	r5, #0
 800a2fc:	6832      	ldr	r2, [r6, #0]
 800a2fe:	f04f 0600 	mov.w	r6, #0
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	bf08      	it	eq
 800a306:	1aad      	subeq	r5, r5, r2
 800a308:	6922      	ldr	r2, [r4, #16]
 800a30a:	bf08      	it	eq
 800a30c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a310:	4293      	cmp	r3, r2
 800a312:	bfc4      	itt	gt
 800a314:	1a9b      	subgt	r3, r3, r2
 800a316:	18ed      	addgt	r5, r5, r3
 800a318:	341a      	adds	r4, #26
 800a31a:	42b5      	cmp	r5, r6
 800a31c:	d11a      	bne.n	800a354 <_printf_common+0xcc>
 800a31e:	2000      	movs	r0, #0
 800a320:	e008      	b.n	800a334 <_printf_common+0xac>
 800a322:	2301      	movs	r3, #1
 800a324:	4652      	mov	r2, sl
 800a326:	4649      	mov	r1, r9
 800a328:	4638      	mov	r0, r7
 800a32a:	47c0      	blx	r8
 800a32c:	3001      	adds	r0, #1
 800a32e:	d103      	bne.n	800a338 <_printf_common+0xb0>
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a338:	3501      	adds	r5, #1
 800a33a:	e7c4      	b.n	800a2c6 <_printf_common+0x3e>
 800a33c:	2030      	movs	r0, #48	; 0x30
 800a33e:	18e1      	adds	r1, r4, r3
 800a340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a34a:	4422      	add	r2, r4
 800a34c:	3302      	adds	r3, #2
 800a34e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a352:	e7c5      	b.n	800a2e0 <_printf_common+0x58>
 800a354:	2301      	movs	r3, #1
 800a356:	4622      	mov	r2, r4
 800a358:	4649      	mov	r1, r9
 800a35a:	4638      	mov	r0, r7
 800a35c:	47c0      	blx	r8
 800a35e:	3001      	adds	r0, #1
 800a360:	d0e6      	beq.n	800a330 <_printf_common+0xa8>
 800a362:	3601      	adds	r6, #1
 800a364:	e7d9      	b.n	800a31a <_printf_common+0x92>
	...

0800a368 <_printf_i>:
 800a368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	7e27      	ldrb	r7, [r4, #24]
 800a370:	4691      	mov	r9, r2
 800a372:	2f78      	cmp	r7, #120	; 0x78
 800a374:	4680      	mov	r8, r0
 800a376:	469a      	mov	sl, r3
 800a378:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a37a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a37e:	d807      	bhi.n	800a390 <_printf_i+0x28>
 800a380:	2f62      	cmp	r7, #98	; 0x62
 800a382:	d80a      	bhi.n	800a39a <_printf_i+0x32>
 800a384:	2f00      	cmp	r7, #0
 800a386:	f000 80d9 	beq.w	800a53c <_printf_i+0x1d4>
 800a38a:	2f58      	cmp	r7, #88	; 0x58
 800a38c:	f000 80a4 	beq.w	800a4d8 <_printf_i+0x170>
 800a390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a398:	e03a      	b.n	800a410 <_printf_i+0xa8>
 800a39a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a39e:	2b15      	cmp	r3, #21
 800a3a0:	d8f6      	bhi.n	800a390 <_printf_i+0x28>
 800a3a2:	a001      	add	r0, pc, #4	; (adr r0, 800a3a8 <_printf_i+0x40>)
 800a3a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a3a8:	0800a401 	.word	0x0800a401
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a391 	.word	0x0800a391
 800a3b4:	0800a391 	.word	0x0800a391
 800a3b8:	0800a391 	.word	0x0800a391
 800a3bc:	0800a391 	.word	0x0800a391
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a391 	.word	0x0800a391
 800a3c8:	0800a391 	.word	0x0800a391
 800a3cc:	0800a391 	.word	0x0800a391
 800a3d0:	0800a391 	.word	0x0800a391
 800a3d4:	0800a523 	.word	0x0800a523
 800a3d8:	0800a445 	.word	0x0800a445
 800a3dc:	0800a505 	.word	0x0800a505
 800a3e0:	0800a391 	.word	0x0800a391
 800a3e4:	0800a391 	.word	0x0800a391
 800a3e8:	0800a545 	.word	0x0800a545
 800a3ec:	0800a391 	.word	0x0800a391
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a391 	.word	0x0800a391
 800a3f8:	0800a391 	.word	0x0800a391
 800a3fc:	0800a50d 	.word	0x0800a50d
 800a400:	680b      	ldr	r3, [r1, #0]
 800a402:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a406:	1d1a      	adds	r2, r3, #4
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	600a      	str	r2, [r1, #0]
 800a40c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a410:	2301      	movs	r3, #1
 800a412:	e0a4      	b.n	800a55e <_printf_i+0x1f6>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	6808      	ldr	r0, [r1, #0]
 800a418:	062e      	lsls	r6, r5, #24
 800a41a:	f100 0304 	add.w	r3, r0, #4
 800a41e:	d50a      	bpl.n	800a436 <_printf_i+0xce>
 800a420:	6805      	ldr	r5, [r0, #0]
 800a422:	600b      	str	r3, [r1, #0]
 800a424:	2d00      	cmp	r5, #0
 800a426:	da03      	bge.n	800a430 <_printf_i+0xc8>
 800a428:	232d      	movs	r3, #45	; 0x2d
 800a42a:	426d      	negs	r5, r5
 800a42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a430:	230a      	movs	r3, #10
 800a432:	485e      	ldr	r0, [pc, #376]	; (800a5ac <_printf_i+0x244>)
 800a434:	e019      	b.n	800a46a <_printf_i+0x102>
 800a436:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a43a:	6805      	ldr	r5, [r0, #0]
 800a43c:	600b      	str	r3, [r1, #0]
 800a43e:	bf18      	it	ne
 800a440:	b22d      	sxthne	r5, r5
 800a442:	e7ef      	b.n	800a424 <_printf_i+0xbc>
 800a444:	680b      	ldr	r3, [r1, #0]
 800a446:	6825      	ldr	r5, [r4, #0]
 800a448:	1d18      	adds	r0, r3, #4
 800a44a:	6008      	str	r0, [r1, #0]
 800a44c:	0628      	lsls	r0, r5, #24
 800a44e:	d501      	bpl.n	800a454 <_printf_i+0xec>
 800a450:	681d      	ldr	r5, [r3, #0]
 800a452:	e002      	b.n	800a45a <_printf_i+0xf2>
 800a454:	0669      	lsls	r1, r5, #25
 800a456:	d5fb      	bpl.n	800a450 <_printf_i+0xe8>
 800a458:	881d      	ldrh	r5, [r3, #0]
 800a45a:	2f6f      	cmp	r7, #111	; 0x6f
 800a45c:	bf0c      	ite	eq
 800a45e:	2308      	moveq	r3, #8
 800a460:	230a      	movne	r3, #10
 800a462:	4852      	ldr	r0, [pc, #328]	; (800a5ac <_printf_i+0x244>)
 800a464:	2100      	movs	r1, #0
 800a466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a46a:	6866      	ldr	r6, [r4, #4]
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	bfa8      	it	ge
 800a470:	6821      	ldrge	r1, [r4, #0]
 800a472:	60a6      	str	r6, [r4, #8]
 800a474:	bfa4      	itt	ge
 800a476:	f021 0104 	bicge.w	r1, r1, #4
 800a47a:	6021      	strge	r1, [r4, #0]
 800a47c:	b90d      	cbnz	r5, 800a482 <_printf_i+0x11a>
 800a47e:	2e00      	cmp	r6, #0
 800a480:	d04d      	beq.n	800a51e <_printf_i+0x1b6>
 800a482:	4616      	mov	r6, r2
 800a484:	fbb5 f1f3 	udiv	r1, r5, r3
 800a488:	fb03 5711 	mls	r7, r3, r1, r5
 800a48c:	5dc7      	ldrb	r7, [r0, r7]
 800a48e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a492:	462f      	mov	r7, r5
 800a494:	42bb      	cmp	r3, r7
 800a496:	460d      	mov	r5, r1
 800a498:	d9f4      	bls.n	800a484 <_printf_i+0x11c>
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d10b      	bne.n	800a4b6 <_printf_i+0x14e>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	07df      	lsls	r7, r3, #31
 800a4a2:	d508      	bpl.n	800a4b6 <_printf_i+0x14e>
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	6861      	ldr	r1, [r4, #4]
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	bfde      	ittt	le
 800a4ac:	2330      	movle	r3, #48	; 0x30
 800a4ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4b6:	1b92      	subs	r2, r2, r6
 800a4b8:	6122      	str	r2, [r4, #16]
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4640      	mov	r0, r8
 800a4c0:	f8cd a000 	str.w	sl, [sp]
 800a4c4:	aa03      	add	r2, sp, #12
 800a4c6:	f7ff fedf 	bl	800a288 <_printf_common>
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	d14c      	bne.n	800a568 <_printf_i+0x200>
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	b004      	add	sp, #16
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	4834      	ldr	r0, [pc, #208]	; (800a5ac <_printf_i+0x244>)
 800a4da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4de:	680e      	ldr	r6, [r1, #0]
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4e6:	061f      	lsls	r7, r3, #24
 800a4e8:	600e      	str	r6, [r1, #0]
 800a4ea:	d514      	bpl.n	800a516 <_printf_i+0x1ae>
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	bf44      	itt	mi
 800a4f0:	f043 0320 	orrmi.w	r3, r3, #32
 800a4f4:	6023      	strmi	r3, [r4, #0]
 800a4f6:	b91d      	cbnz	r5, 800a500 <_printf_i+0x198>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	f023 0320 	bic.w	r3, r3, #32
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	2310      	movs	r3, #16
 800a502:	e7af      	b.n	800a464 <_printf_i+0xfc>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	f043 0320 	orr.w	r3, r3, #32
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	2378      	movs	r3, #120	; 0x78
 800a50e:	4828      	ldr	r0, [pc, #160]	; (800a5b0 <_printf_i+0x248>)
 800a510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a514:	e7e3      	b.n	800a4de <_printf_i+0x176>
 800a516:	065e      	lsls	r6, r3, #25
 800a518:	bf48      	it	mi
 800a51a:	b2ad      	uxthmi	r5, r5
 800a51c:	e7e6      	b.n	800a4ec <_printf_i+0x184>
 800a51e:	4616      	mov	r6, r2
 800a520:	e7bb      	b.n	800a49a <_printf_i+0x132>
 800a522:	680b      	ldr	r3, [r1, #0]
 800a524:	6826      	ldr	r6, [r4, #0]
 800a526:	1d1d      	adds	r5, r3, #4
 800a528:	6960      	ldr	r0, [r4, #20]
 800a52a:	600d      	str	r5, [r1, #0]
 800a52c:	0635      	lsls	r5, r6, #24
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	d501      	bpl.n	800a536 <_printf_i+0x1ce>
 800a532:	6018      	str	r0, [r3, #0]
 800a534:	e002      	b.n	800a53c <_printf_i+0x1d4>
 800a536:	0671      	lsls	r1, r6, #25
 800a538:	d5fb      	bpl.n	800a532 <_printf_i+0x1ca>
 800a53a:	8018      	strh	r0, [r3, #0]
 800a53c:	2300      	movs	r3, #0
 800a53e:	4616      	mov	r6, r2
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	e7ba      	b.n	800a4ba <_printf_i+0x152>
 800a544:	680b      	ldr	r3, [r1, #0]
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	600a      	str	r2, [r1, #0]
 800a54a:	681e      	ldr	r6, [r3, #0]
 800a54c:	2100      	movs	r1, #0
 800a54e:	4630      	mov	r0, r6
 800a550:	6862      	ldr	r2, [r4, #4]
 800a552:	f000 fd61 	bl	800b018 <memchr>
 800a556:	b108      	cbz	r0, 800a55c <_printf_i+0x1f4>
 800a558:	1b80      	subs	r0, r0, r6
 800a55a:	6060      	str	r0, [r4, #4]
 800a55c:	6863      	ldr	r3, [r4, #4]
 800a55e:	6123      	str	r3, [r4, #16]
 800a560:	2300      	movs	r3, #0
 800a562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a566:	e7a8      	b.n	800a4ba <_printf_i+0x152>
 800a568:	4632      	mov	r2, r6
 800a56a:	4649      	mov	r1, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	47d0      	blx	sl
 800a572:	3001      	adds	r0, #1
 800a574:	d0ab      	beq.n	800a4ce <_printf_i+0x166>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	079b      	lsls	r3, r3, #30
 800a57a:	d413      	bmi.n	800a5a4 <_printf_i+0x23c>
 800a57c:	68e0      	ldr	r0, [r4, #12]
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	4298      	cmp	r0, r3
 800a582:	bfb8      	it	lt
 800a584:	4618      	movlt	r0, r3
 800a586:	e7a4      	b.n	800a4d2 <_printf_i+0x16a>
 800a588:	2301      	movs	r3, #1
 800a58a:	4632      	mov	r2, r6
 800a58c:	4649      	mov	r1, r9
 800a58e:	4640      	mov	r0, r8
 800a590:	47d0      	blx	sl
 800a592:	3001      	adds	r0, #1
 800a594:	d09b      	beq.n	800a4ce <_printf_i+0x166>
 800a596:	3501      	adds	r5, #1
 800a598:	68e3      	ldr	r3, [r4, #12]
 800a59a:	9903      	ldr	r1, [sp, #12]
 800a59c:	1a5b      	subs	r3, r3, r1
 800a59e:	42ab      	cmp	r3, r5
 800a5a0:	dcf2      	bgt.n	800a588 <_printf_i+0x220>
 800a5a2:	e7eb      	b.n	800a57c <_printf_i+0x214>
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	f104 0619 	add.w	r6, r4, #25
 800a5aa:	e7f5      	b.n	800a598 <_printf_i+0x230>
 800a5ac:	0800b579 	.word	0x0800b579
 800a5b0:	0800b58a 	.word	0x0800b58a

0800a5b4 <_scanf_chars>:
 800a5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b8:	4615      	mov	r5, r2
 800a5ba:	688a      	ldr	r2, [r1, #8]
 800a5bc:	4680      	mov	r8, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b932      	cbnz	r2, 800a5d0 <_scanf_chars+0x1c>
 800a5c2:	698a      	ldr	r2, [r1, #24]
 800a5c4:	2a00      	cmp	r2, #0
 800a5c6:	bf0c      	ite	eq
 800a5c8:	2201      	moveq	r2, #1
 800a5ca:	f04f 32ff 	movne.w	r2, #4294967295
 800a5ce:	608a      	str	r2, [r1, #8]
 800a5d0:	2700      	movs	r7, #0
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a660 <_scanf_chars+0xac>
 800a5d8:	06d1      	lsls	r1, r2, #27
 800a5da:	bf5f      	itttt	pl
 800a5dc:	681a      	ldrpl	r2, [r3, #0]
 800a5de:	1d11      	addpl	r1, r2, #4
 800a5e0:	6019      	strpl	r1, [r3, #0]
 800a5e2:	6816      	ldrpl	r6, [r2, #0]
 800a5e4:	69a0      	ldr	r0, [r4, #24]
 800a5e6:	b188      	cbz	r0, 800a60c <_scanf_chars+0x58>
 800a5e8:	2801      	cmp	r0, #1
 800a5ea:	d107      	bne.n	800a5fc <_scanf_chars+0x48>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	6963      	ldr	r3, [r4, #20]
 800a5f2:	5c9b      	ldrb	r3, [r3, r2]
 800a5f4:	b953      	cbnz	r3, 800a60c <_scanf_chars+0x58>
 800a5f6:	bb27      	cbnz	r7, 800a642 <_scanf_chars+0x8e>
 800a5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fc:	2802      	cmp	r0, #2
 800a5fe:	d120      	bne.n	800a642 <_scanf_chars+0x8e>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a608:	071b      	lsls	r3, r3, #28
 800a60a:	d41a      	bmi.n	800a642 <_scanf_chars+0x8e>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	3701      	adds	r7, #1
 800a610:	06da      	lsls	r2, r3, #27
 800a612:	bf5e      	ittt	pl
 800a614:	682b      	ldrpl	r3, [r5, #0]
 800a616:	781b      	ldrbpl	r3, [r3, #0]
 800a618:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a61c:	682a      	ldr	r2, [r5, #0]
 800a61e:	686b      	ldr	r3, [r5, #4]
 800a620:	3201      	adds	r2, #1
 800a622:	602a      	str	r2, [r5, #0]
 800a624:	68a2      	ldr	r2, [r4, #8]
 800a626:	3b01      	subs	r3, #1
 800a628:	3a01      	subs	r2, #1
 800a62a:	606b      	str	r3, [r5, #4]
 800a62c:	60a2      	str	r2, [r4, #8]
 800a62e:	b142      	cbz	r2, 800a642 <_scanf_chars+0x8e>
 800a630:	2b00      	cmp	r3, #0
 800a632:	dcd7      	bgt.n	800a5e4 <_scanf_chars+0x30>
 800a634:	4629      	mov	r1, r5
 800a636:	4640      	mov	r0, r8
 800a638:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a63c:	4798      	blx	r3
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0d0      	beq.n	800a5e4 <_scanf_chars+0x30>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	f013 0310 	ands.w	r3, r3, #16
 800a648:	d105      	bne.n	800a656 <_scanf_chars+0xa2>
 800a64a:	68e2      	ldr	r2, [r4, #12]
 800a64c:	3201      	adds	r2, #1
 800a64e:	60e2      	str	r2, [r4, #12]
 800a650:	69a2      	ldr	r2, [r4, #24]
 800a652:	b102      	cbz	r2, 800a656 <_scanf_chars+0xa2>
 800a654:	7033      	strb	r3, [r6, #0]
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	2000      	movs	r0, #0
 800a65a:	441f      	add	r7, r3
 800a65c:	6127      	str	r7, [r4, #16]
 800a65e:	e7cb      	b.n	800a5f8 <_scanf_chars+0x44>
 800a660:	0800b468 	.word	0x0800b468

0800a664 <_scanf_i>:
 800a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	460c      	mov	r4, r1
 800a66a:	4698      	mov	r8, r3
 800a66c:	4b72      	ldr	r3, [pc, #456]	; (800a838 <_scanf_i+0x1d4>)
 800a66e:	b087      	sub	sp, #28
 800a670:	4682      	mov	sl, r0
 800a672:	4616      	mov	r6, r2
 800a674:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a678:	ab03      	add	r3, sp, #12
 800a67a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a67e:	4b6f      	ldr	r3, [pc, #444]	; (800a83c <_scanf_i+0x1d8>)
 800a680:	69a1      	ldr	r1, [r4, #24]
 800a682:	4a6f      	ldr	r2, [pc, #444]	; (800a840 <_scanf_i+0x1dc>)
 800a684:	4627      	mov	r7, r4
 800a686:	2903      	cmp	r1, #3
 800a688:	bf18      	it	ne
 800a68a:	461a      	movne	r2, r3
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	9201      	str	r2, [sp, #4]
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a696:	bf81      	itttt	hi
 800a698:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a69c:	eb03 0905 	addhi.w	r9, r3, r5
 800a6a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6a4:	60a3      	strhi	r3, [r4, #8]
 800a6a6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a6aa:	bf98      	it	ls
 800a6ac:	f04f 0900 	movls.w	r9, #0
 800a6b0:	463d      	mov	r5, r7
 800a6b2:	f04f 0b00 	mov.w	fp, #0
 800a6b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	6831      	ldr	r1, [r6, #0]
 800a6be:	ab03      	add	r3, sp, #12
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	7809      	ldrb	r1, [r1, #0]
 800a6c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a6c8:	f000 fca6 	bl	800b018 <memchr>
 800a6cc:	b328      	cbz	r0, 800a71a <_scanf_i+0xb6>
 800a6ce:	f1bb 0f01 	cmp.w	fp, #1
 800a6d2:	d159      	bne.n	800a788 <_scanf_i+0x124>
 800a6d4:	6862      	ldr	r2, [r4, #4]
 800a6d6:	b92a      	cbnz	r2, 800a6e4 <_scanf_i+0x80>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	6822      	ldr	r2, [r4, #0]
 800a6dc:	6063      	str	r3, [r4, #4]
 800a6de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	68a2      	ldr	r2, [r4, #8]
 800a6ee:	1e51      	subs	r1, r2, #1
 800a6f0:	60a1      	str	r1, [r4, #8]
 800a6f2:	b192      	cbz	r2, 800a71a <_scanf_i+0xb6>
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	1c51      	adds	r1, r2, #1
 800a6f8:	6031      	str	r1, [r6, #0]
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	f805 2b01 	strb.w	r2, [r5], #1
 800a700:	6872      	ldr	r2, [r6, #4]
 800a702:	3a01      	subs	r2, #1
 800a704:	2a00      	cmp	r2, #0
 800a706:	6072      	str	r2, [r6, #4]
 800a708:	dc07      	bgt.n	800a71a <_scanf_i+0xb6>
 800a70a:	4631      	mov	r1, r6
 800a70c:	4650      	mov	r0, sl
 800a70e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a712:	4790      	blx	r2
 800a714:	2800      	cmp	r0, #0
 800a716:	f040 8085 	bne.w	800a824 <_scanf_i+0x1c0>
 800a71a:	f10b 0b01 	add.w	fp, fp, #1
 800a71e:	f1bb 0f03 	cmp.w	fp, #3
 800a722:	d1cb      	bne.n	800a6bc <_scanf_i+0x58>
 800a724:	6863      	ldr	r3, [r4, #4]
 800a726:	b90b      	cbnz	r3, 800a72c <_scanf_i+0xc8>
 800a728:	230a      	movs	r3, #10
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	4945      	ldr	r1, [pc, #276]	; (800a844 <_scanf_i+0x1e0>)
 800a730:	6960      	ldr	r0, [r4, #20]
 800a732:	1ac9      	subs	r1, r1, r3
 800a734:	f000 f89a 	bl	800a86c <__sccl>
 800a738:	f04f 0b00 	mov.w	fp, #0
 800a73c:	68a3      	ldr	r3, [r4, #8]
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d03d      	beq.n	800a7c0 <_scanf_i+0x15c>
 800a744:	6831      	ldr	r1, [r6, #0]
 800a746:	6960      	ldr	r0, [r4, #20]
 800a748:	f891 c000 	ldrb.w	ip, [r1]
 800a74c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a750:	2800      	cmp	r0, #0
 800a752:	d035      	beq.n	800a7c0 <_scanf_i+0x15c>
 800a754:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a758:	d124      	bne.n	800a7a4 <_scanf_i+0x140>
 800a75a:	0510      	lsls	r0, r2, #20
 800a75c:	d522      	bpl.n	800a7a4 <_scanf_i+0x140>
 800a75e:	f10b 0b01 	add.w	fp, fp, #1
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d003      	beq.n	800a770 <_scanf_i+0x10c>
 800a768:	3301      	adds	r3, #1
 800a76a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a76e:	60a3      	str	r3, [r4, #8]
 800a770:	6873      	ldr	r3, [r6, #4]
 800a772:	3b01      	subs	r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	6073      	str	r3, [r6, #4]
 800a778:	dd1b      	ble.n	800a7b2 <_scanf_i+0x14e>
 800a77a:	6833      	ldr	r3, [r6, #0]
 800a77c:	3301      	adds	r3, #1
 800a77e:	6033      	str	r3, [r6, #0]
 800a780:	68a3      	ldr	r3, [r4, #8]
 800a782:	3b01      	subs	r3, #1
 800a784:	60a3      	str	r3, [r4, #8]
 800a786:	e7d9      	b.n	800a73c <_scanf_i+0xd8>
 800a788:	f1bb 0f02 	cmp.w	fp, #2
 800a78c:	d1ae      	bne.n	800a6ec <_scanf_i+0x88>
 800a78e:	6822      	ldr	r2, [r4, #0]
 800a790:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a794:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a798:	d1bf      	bne.n	800a71a <_scanf_i+0xb6>
 800a79a:	2310      	movs	r3, #16
 800a79c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7a0:	6063      	str	r3, [r4, #4]
 800a7a2:	e7a2      	b.n	800a6ea <_scanf_i+0x86>
 800a7a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a7a8:	6022      	str	r2, [r4, #0]
 800a7aa:	780b      	ldrb	r3, [r1, #0]
 800a7ac:	f805 3b01 	strb.w	r3, [r5], #1
 800a7b0:	e7de      	b.n	800a770 <_scanf_i+0x10c>
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a7ba:	4798      	blx	r3
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0df      	beq.n	800a780 <_scanf_i+0x11c>
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	05d9      	lsls	r1, r3, #23
 800a7c4:	d50d      	bpl.n	800a7e2 <_scanf_i+0x17e>
 800a7c6:	42bd      	cmp	r5, r7
 800a7c8:	d909      	bls.n	800a7de <_scanf_i+0x17a>
 800a7ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a7da:	4798      	blx	r3
 800a7dc:	464d      	mov	r5, r9
 800a7de:	42bd      	cmp	r5, r7
 800a7e0:	d028      	beq.n	800a834 <_scanf_i+0x1d0>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	f012 0210 	ands.w	r2, r2, #16
 800a7e8:	d113      	bne.n	800a812 <_scanf_i+0x1ae>
 800a7ea:	702a      	strb	r2, [r5, #0]
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	6863      	ldr	r3, [r4, #4]
 800a7f0:	4650      	mov	r0, sl
 800a7f2:	9e01      	ldr	r6, [sp, #4]
 800a7f4:	47b0      	blx	r6
 800a7f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7fa:	6821      	ldr	r1, [r4, #0]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	f8c8 2000 	str.w	r2, [r8]
 800a802:	f011 0f20 	tst.w	r1, #32
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	d00f      	beq.n	800a82a <_scanf_i+0x1c6>
 800a80a:	6018      	str	r0, [r3, #0]
 800a80c:	68e3      	ldr	r3, [r4, #12]
 800a80e:	3301      	adds	r3, #1
 800a810:	60e3      	str	r3, [r4, #12]
 800a812:	2000      	movs	r0, #0
 800a814:	1bed      	subs	r5, r5, r7
 800a816:	44ab      	add	fp, r5
 800a818:	6925      	ldr	r5, [r4, #16]
 800a81a:	445d      	add	r5, fp
 800a81c:	6125      	str	r5, [r4, #16]
 800a81e:	b007      	add	sp, #28
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	f04f 0b00 	mov.w	fp, #0
 800a828:	e7ca      	b.n	800a7c0 <_scanf_i+0x15c>
 800a82a:	07ca      	lsls	r2, r1, #31
 800a82c:	bf4c      	ite	mi
 800a82e:	8018      	strhmi	r0, [r3, #0]
 800a830:	6018      	strpl	r0, [r3, #0]
 800a832:	e7eb      	b.n	800a80c <_scanf_i+0x1a8>
 800a834:	2001      	movs	r0, #1
 800a836:	e7f2      	b.n	800a81e <_scanf_i+0x1ba>
 800a838:	0800b234 	.word	0x0800b234
 800a83c:	0800a9d9 	.word	0x0800a9d9
 800a840:	08009ae1 	.word	0x08009ae1
 800a844:	0800b5b4 	.word	0x0800b5b4

0800a848 <_read_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	4611      	mov	r1, r2
 800a850:	2200      	movs	r2, #0
 800a852:	4d05      	ldr	r5, [pc, #20]	; (800a868 <_read_r+0x20>)
 800a854:	602a      	str	r2, [r5, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	f7f6 fa11 	bl	8000c7e <_read>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_read_r+0x1e>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_read_r+0x1e>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20001740 	.word	0x20001740

0800a86c <__sccl>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	780b      	ldrb	r3, [r1, #0]
 800a870:	4604      	mov	r4, r0
 800a872:	2b5e      	cmp	r3, #94	; 0x5e
 800a874:	bf13      	iteet	ne
 800a876:	2200      	movne	r2, #0
 800a878:	2201      	moveq	r2, #1
 800a87a:	784b      	ldrbeq	r3, [r1, #1]
 800a87c:	1c48      	addne	r0, r1, #1
 800a87e:	bf08      	it	eq
 800a880:	1c88      	addeq	r0, r1, #2
 800a882:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a886:	1e61      	subs	r1, r4, #1
 800a888:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a88c:	42a9      	cmp	r1, r5
 800a88e:	d1fb      	bne.n	800a888 <__sccl+0x1c>
 800a890:	b90b      	cbnz	r3, 800a896 <__sccl+0x2a>
 800a892:	3801      	subs	r0, #1
 800a894:	bd70      	pop	{r4, r5, r6, pc}
 800a896:	f082 0101 	eor.w	r1, r2, #1
 800a89a:	54e1      	strb	r1, [r4, r3]
 800a89c:	1c42      	adds	r2, r0, #1
 800a89e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	2d2d      	cmp	r5, #45	; 0x2d
 800a8a6:	f102 36ff 	add.w	r6, r2, #4294967295
 800a8aa:	d006      	beq.n	800a8ba <__sccl+0x4e>
 800a8ac:	2d5d      	cmp	r5, #93	; 0x5d
 800a8ae:	d0f1      	beq.n	800a894 <__sccl+0x28>
 800a8b0:	b90d      	cbnz	r5, 800a8b6 <__sccl+0x4a>
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	e7ee      	b.n	800a894 <__sccl+0x28>
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	e7ef      	b.n	800a89a <__sccl+0x2e>
 800a8ba:	7816      	ldrb	r6, [r2, #0]
 800a8bc:	2e5d      	cmp	r6, #93	; 0x5d
 800a8be:	d0fa      	beq.n	800a8b6 <__sccl+0x4a>
 800a8c0:	42b3      	cmp	r3, r6
 800a8c2:	dcf8      	bgt.n	800a8b6 <__sccl+0x4a>
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	4286      	cmp	r6, r0
 800a8ca:	5421      	strb	r1, [r4, r0]
 800a8cc:	dcfb      	bgt.n	800a8c6 <__sccl+0x5a>
 800a8ce:	43d8      	mvns	r0, r3
 800a8d0:	4430      	add	r0, r6
 800a8d2:	42b3      	cmp	r3, r6
 800a8d4:	bfa8      	it	ge
 800a8d6:	2000      	movge	r0, #0
 800a8d8:	1c5d      	adds	r5, r3, #1
 800a8da:	182b      	adds	r3, r5, r0
 800a8dc:	3202      	adds	r2, #2
 800a8de:	e7de      	b.n	800a89e <__sccl+0x32>

0800a8e0 <_strtoul_l.isra.0>:
 800a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	468c      	mov	ip, r1
 800a8e6:	4686      	mov	lr, r0
 800a8e8:	4e3a      	ldr	r6, [pc, #232]	; (800a9d4 <_strtoul_l.isra.0+0xf4>)
 800a8ea:	4660      	mov	r0, ip
 800a8ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a8f0:	5da5      	ldrb	r5, [r4, r6]
 800a8f2:	f015 0508 	ands.w	r5, r5, #8
 800a8f6:	d1f8      	bne.n	800a8ea <_strtoul_l.isra.0+0xa>
 800a8f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a8fa:	d134      	bne.n	800a966 <_strtoul_l.isra.0+0x86>
 800a8fc:	f04f 0801 	mov.w	r8, #1
 800a900:	f89c 4000 	ldrb.w	r4, [ip]
 800a904:	f100 0c02 	add.w	ip, r0, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d05e      	beq.n	800a9ca <_strtoul_l.isra.0+0xea>
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d10c      	bne.n	800a92a <_strtoul_l.isra.0+0x4a>
 800a910:	2c30      	cmp	r4, #48	; 0x30
 800a912:	d10a      	bne.n	800a92a <_strtoul_l.isra.0+0x4a>
 800a914:	f89c 0000 	ldrb.w	r0, [ip]
 800a918:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a91c:	2858      	cmp	r0, #88	; 0x58
 800a91e:	d14f      	bne.n	800a9c0 <_strtoul_l.isra.0+0xe0>
 800a920:	2310      	movs	r3, #16
 800a922:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a926:	f10c 0c02 	add.w	ip, ip, #2
 800a92a:	f04f 37ff 	mov.w	r7, #4294967295
 800a92e:	fbb7 f7f3 	udiv	r7, r7, r3
 800a932:	2500      	movs	r5, #0
 800a934:	fb03 f907 	mul.w	r9, r3, r7
 800a938:	4628      	mov	r0, r5
 800a93a:	ea6f 0909 	mvn.w	r9, r9
 800a93e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a942:	2e09      	cmp	r6, #9
 800a944:	d818      	bhi.n	800a978 <_strtoul_l.isra.0+0x98>
 800a946:	4634      	mov	r4, r6
 800a948:	42a3      	cmp	r3, r4
 800a94a:	dd24      	ble.n	800a996 <_strtoul_l.isra.0+0xb6>
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	db1f      	blt.n	800a990 <_strtoul_l.isra.0+0xb0>
 800a950:	4287      	cmp	r7, r0
 800a952:	d31d      	bcc.n	800a990 <_strtoul_l.isra.0+0xb0>
 800a954:	d101      	bne.n	800a95a <_strtoul_l.isra.0+0x7a>
 800a956:	45a1      	cmp	r9, r4
 800a958:	db1a      	blt.n	800a990 <_strtoul_l.isra.0+0xb0>
 800a95a:	2501      	movs	r5, #1
 800a95c:	fb00 4003 	mla	r0, r0, r3, r4
 800a960:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a964:	e7eb      	b.n	800a93e <_strtoul_l.isra.0+0x5e>
 800a966:	2c2b      	cmp	r4, #43	; 0x2b
 800a968:	bf08      	it	eq
 800a96a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a96e:	46a8      	mov	r8, r5
 800a970:	bf08      	it	eq
 800a972:	f100 0c02 	addeq.w	ip, r0, #2
 800a976:	e7c7      	b.n	800a908 <_strtoul_l.isra.0+0x28>
 800a978:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a97c:	2e19      	cmp	r6, #25
 800a97e:	d801      	bhi.n	800a984 <_strtoul_l.isra.0+0xa4>
 800a980:	3c37      	subs	r4, #55	; 0x37
 800a982:	e7e1      	b.n	800a948 <_strtoul_l.isra.0+0x68>
 800a984:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a988:	2e19      	cmp	r6, #25
 800a98a:	d804      	bhi.n	800a996 <_strtoul_l.isra.0+0xb6>
 800a98c:	3c57      	subs	r4, #87	; 0x57
 800a98e:	e7db      	b.n	800a948 <_strtoul_l.isra.0+0x68>
 800a990:	f04f 35ff 	mov.w	r5, #4294967295
 800a994:	e7e4      	b.n	800a960 <_strtoul_l.isra.0+0x80>
 800a996:	2d00      	cmp	r5, #0
 800a998:	da07      	bge.n	800a9aa <_strtoul_l.isra.0+0xca>
 800a99a:	2322      	movs	r3, #34	; 0x22
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	f8ce 3000 	str.w	r3, [lr]
 800a9a4:	b942      	cbnz	r2, 800a9b8 <_strtoul_l.isra.0+0xd8>
 800a9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	f1b8 0f00 	cmp.w	r8, #0
 800a9ae:	d000      	beq.n	800a9b2 <_strtoul_l.isra.0+0xd2>
 800a9b0:	4240      	negs	r0, r0
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	d0f7      	beq.n	800a9a6 <_strtoul_l.isra.0+0xc6>
 800a9b6:	b10d      	cbz	r5, 800a9bc <_strtoul_l.isra.0+0xdc>
 800a9b8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a9bc:	6011      	str	r1, [r2, #0]
 800a9be:	e7f2      	b.n	800a9a6 <_strtoul_l.isra.0+0xc6>
 800a9c0:	2430      	movs	r4, #48	; 0x30
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1b1      	bne.n	800a92a <_strtoul_l.isra.0+0x4a>
 800a9c6:	2308      	movs	r3, #8
 800a9c8:	e7af      	b.n	800a92a <_strtoul_l.isra.0+0x4a>
 800a9ca:	2c30      	cmp	r4, #48	; 0x30
 800a9cc:	d0a2      	beq.n	800a914 <_strtoul_l.isra.0+0x34>
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	e7ab      	b.n	800a92a <_strtoul_l.isra.0+0x4a>
 800a9d2:	bf00      	nop
 800a9d4:	0800b468 	.word	0x0800b468

0800a9d8 <_strtoul_r>:
 800a9d8:	f7ff bf82 	b.w	800a8e0 <_strtoul_l.isra.0>

0800a9dc <__submore>:
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9e8:	4299      	cmp	r1, r3
 800a9ea:	d11b      	bne.n	800aa24 <__submore+0x48>
 800a9ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9f0:	f7fe fe36 	bl	8009660 <_malloc_r>
 800a9f4:	b918      	cbnz	r0, 800a9fe <__submore+0x22>
 800a9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa02:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aa08:	6360      	str	r0, [r4, #52]	; 0x34
 800aa0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aa0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aa12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa16:	7043      	strb	r3, [r0, #1]
 800aa18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aa1c:	7003      	strb	r3, [r0, #0]
 800aa1e:	6020      	str	r0, [r4, #0]
 800aa20:	2000      	movs	r0, #0
 800aa22:	e7ea      	b.n	800a9fa <__submore+0x1e>
 800aa24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa26:	0077      	lsls	r7, r6, #1
 800aa28:	463a      	mov	r2, r7
 800aa2a:	f000 fb11 	bl	800b050 <_realloc_r>
 800aa2e:	4605      	mov	r5, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d0e0      	beq.n	800a9f6 <__submore+0x1a>
 800aa34:	eb00 0806 	add.w	r8, r0, r6
 800aa38:	4601      	mov	r1, r0
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	f000 faf9 	bl	800b034 <memcpy>
 800aa42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aa46:	f8c4 8000 	str.w	r8, [r4]
 800aa4a:	e7e9      	b.n	800aa20 <__submore+0x44>

0800aa4c <__swbuf_r>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	460e      	mov	r6, r1
 800aa50:	4614      	mov	r4, r2
 800aa52:	4605      	mov	r5, r0
 800aa54:	b118      	cbz	r0, 800aa5e <__swbuf_r+0x12>
 800aa56:	6983      	ldr	r3, [r0, #24]
 800aa58:	b90b      	cbnz	r3, 800aa5e <__swbuf_r+0x12>
 800aa5a:	f000 f9d9 	bl	800ae10 <__sinit>
 800aa5e:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <__swbuf_r+0x98>)
 800aa60:	429c      	cmp	r4, r3
 800aa62:	d12b      	bne.n	800aabc <__swbuf_r+0x70>
 800aa64:	686c      	ldr	r4, [r5, #4]
 800aa66:	69a3      	ldr	r3, [r4, #24]
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	071a      	lsls	r2, r3, #28
 800aa6e:	d52f      	bpl.n	800aad0 <__swbuf_r+0x84>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	b36b      	cbz	r3, 800aad0 <__swbuf_r+0x84>
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	b2f6      	uxtb	r6, r6
 800aa7a:	1ac0      	subs	r0, r0, r3
 800aa7c:	6963      	ldr	r3, [r4, #20]
 800aa7e:	4637      	mov	r7, r6
 800aa80:	4283      	cmp	r3, r0
 800aa82:	dc04      	bgt.n	800aa8e <__swbuf_r+0x42>
 800aa84:	4621      	mov	r1, r4
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 f92e 	bl	800ace8 <_fflush_r>
 800aa8c:	bb30      	cbnz	r0, 800aadc <__swbuf_r+0x90>
 800aa8e:	68a3      	ldr	r3, [r4, #8]
 800aa90:	3001      	adds	r0, #1
 800aa92:	3b01      	subs	r3, #1
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	6022      	str	r2, [r4, #0]
 800aa9c:	701e      	strb	r6, [r3, #0]
 800aa9e:	6963      	ldr	r3, [r4, #20]
 800aaa0:	4283      	cmp	r3, r0
 800aaa2:	d004      	beq.n	800aaae <__swbuf_r+0x62>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	d506      	bpl.n	800aab8 <__swbuf_r+0x6c>
 800aaaa:	2e0a      	cmp	r6, #10
 800aaac:	d104      	bne.n	800aab8 <__swbuf_r+0x6c>
 800aaae:	4621      	mov	r1, r4
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 f919 	bl	800ace8 <_fflush_r>
 800aab6:	b988      	cbnz	r0, 800aadc <__swbuf_r+0x90>
 800aab8:	4638      	mov	r0, r7
 800aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <__swbuf_r+0x9c>)
 800aabe:	429c      	cmp	r4, r3
 800aac0:	d101      	bne.n	800aac6 <__swbuf_r+0x7a>
 800aac2:	68ac      	ldr	r4, [r5, #8]
 800aac4:	e7cf      	b.n	800aa66 <__swbuf_r+0x1a>
 800aac6:	4b09      	ldr	r3, [pc, #36]	; (800aaec <__swbuf_r+0xa0>)
 800aac8:	429c      	cmp	r4, r3
 800aaca:	bf08      	it	eq
 800aacc:	68ec      	ldreq	r4, [r5, #12]
 800aace:	e7ca      	b.n	800aa66 <__swbuf_r+0x1a>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 f80c 	bl	800aaf0 <__swsetup_r>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d0cb      	beq.n	800aa74 <__swbuf_r+0x28>
 800aadc:	f04f 37ff 	mov.w	r7, #4294967295
 800aae0:	e7ea      	b.n	800aab8 <__swbuf_r+0x6c>
 800aae2:	bf00      	nop
 800aae4:	0800b5d8 	.word	0x0800b5d8
 800aae8:	0800b5f8 	.word	0x0800b5f8
 800aaec:	0800b5b8 	.word	0x0800b5b8

0800aaf0 <__swsetup_r>:
 800aaf0:	4b32      	ldr	r3, [pc, #200]	; (800abbc <__swsetup_r+0xcc>)
 800aaf2:	b570      	push	{r4, r5, r6, lr}
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	b125      	cbz	r5, 800ab06 <__swsetup_r+0x16>
 800aafc:	69ab      	ldr	r3, [r5, #24]
 800aafe:	b913      	cbnz	r3, 800ab06 <__swsetup_r+0x16>
 800ab00:	4628      	mov	r0, r5
 800ab02:	f000 f985 	bl	800ae10 <__sinit>
 800ab06:	4b2e      	ldr	r3, [pc, #184]	; (800abc0 <__swsetup_r+0xd0>)
 800ab08:	429c      	cmp	r4, r3
 800ab0a:	d10f      	bne.n	800ab2c <__swsetup_r+0x3c>
 800ab0c:	686c      	ldr	r4, [r5, #4]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab14:	0719      	lsls	r1, r3, #28
 800ab16:	d42c      	bmi.n	800ab72 <__swsetup_r+0x82>
 800ab18:	06dd      	lsls	r5, r3, #27
 800ab1a:	d411      	bmi.n	800ab40 <__swsetup_r+0x50>
 800ab1c:	2309      	movs	r3, #9
 800ab1e:	6033      	str	r3, [r6, #0]
 800ab20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	e03e      	b.n	800abaa <__swsetup_r+0xba>
 800ab2c:	4b25      	ldr	r3, [pc, #148]	; (800abc4 <__swsetup_r+0xd4>)
 800ab2e:	429c      	cmp	r4, r3
 800ab30:	d101      	bne.n	800ab36 <__swsetup_r+0x46>
 800ab32:	68ac      	ldr	r4, [r5, #8]
 800ab34:	e7eb      	b.n	800ab0e <__swsetup_r+0x1e>
 800ab36:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <__swsetup_r+0xd8>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	bf08      	it	eq
 800ab3c:	68ec      	ldreq	r4, [r5, #12]
 800ab3e:	e7e6      	b.n	800ab0e <__swsetup_r+0x1e>
 800ab40:	0758      	lsls	r0, r3, #29
 800ab42:	d512      	bpl.n	800ab6a <__swsetup_r+0x7a>
 800ab44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab46:	b141      	cbz	r1, 800ab5a <__swsetup_r+0x6a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__swsetup_r+0x66>
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7fe fd39 	bl	80095c8 <_free_r>
 800ab56:	2300      	movs	r3, #0
 800ab58:	6363      	str	r3, [r4, #52]	; 0x34
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	2300      	movs	r3, #0
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f043 0308 	orr.w	r3, r3, #8
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	b94b      	cbnz	r3, 800ab8a <__swsetup_r+0x9a>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab80:	d003      	beq.n	800ab8a <__swsetup_r+0x9a>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	f000 fa07 	bl	800af98 <__smakebuf_r>
 800ab8a:	89a0      	ldrh	r0, [r4, #12]
 800ab8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab90:	f010 0301 	ands.w	r3, r0, #1
 800ab94:	d00a      	beq.n	800abac <__swsetup_r+0xbc>
 800ab96:	2300      	movs	r3, #0
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	6963      	ldr	r3, [r4, #20]
 800ab9c:	425b      	negs	r3, r3
 800ab9e:	61a3      	str	r3, [r4, #24]
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	b943      	cbnz	r3, 800abb6 <__swsetup_r+0xc6>
 800aba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aba8:	d1ba      	bne.n	800ab20 <__swsetup_r+0x30>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	0781      	lsls	r1, r0, #30
 800abae:	bf58      	it	pl
 800abb0:	6963      	ldrpl	r3, [r4, #20]
 800abb2:	60a3      	str	r3, [r4, #8]
 800abb4:	e7f4      	b.n	800aba0 <__swsetup_r+0xb0>
 800abb6:	2000      	movs	r0, #0
 800abb8:	e7f7      	b.n	800abaa <__swsetup_r+0xba>
 800abba:	bf00      	nop
 800abbc:	2000027c 	.word	0x2000027c
 800abc0:	0800b5d8 	.word	0x0800b5d8
 800abc4:	0800b5f8 	.word	0x0800b5f8
 800abc8:	0800b5b8 	.word	0x0800b5b8

0800abcc <abort>:
 800abcc:	2006      	movs	r0, #6
 800abce:	b508      	push	{r3, lr}
 800abd0:	f000 fa8c 	bl	800b0ec <raise>
 800abd4:	2001      	movs	r0, #1
 800abd6:	f7f6 f848 	bl	8000c6a <_exit>
	...

0800abdc <__sflush_r>:
 800abdc:	898a      	ldrh	r2, [r1, #12]
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	4605      	mov	r5, r0
 800abe4:	0710      	lsls	r0, r2, #28
 800abe6:	460c      	mov	r4, r1
 800abe8:	d458      	bmi.n	800ac9c <__sflush_r+0xc0>
 800abea:	684b      	ldr	r3, [r1, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	dc05      	bgt.n	800abfc <__sflush_r+0x20>
 800abf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dc02      	bgt.n	800abfc <__sflush_r+0x20>
 800abf6:	2000      	movs	r0, #0
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d0f9      	beq.n	800abf6 <__sflush_r+0x1a>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac08:	682f      	ldr	r7, [r5, #0]
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	d032      	beq.n	800ac74 <__sflush_r+0x98>
 800ac0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	075a      	lsls	r2, r3, #29
 800ac14:	d505      	bpl.n	800ac22 <__sflush_r+0x46>
 800ac16:	6863      	ldr	r3, [r4, #4]
 800ac18:	1ac0      	subs	r0, r0, r3
 800ac1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac1c:	b10b      	cbz	r3, 800ac22 <__sflush_r+0x46>
 800ac1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac20:	1ac0      	subs	r0, r0, r3
 800ac22:	2300      	movs	r3, #0
 800ac24:	4602      	mov	r2, r0
 800ac26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac28:	4628      	mov	r0, r5
 800ac2a:	6a21      	ldr	r1, [r4, #32]
 800ac2c:	47b0      	blx	r6
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	d106      	bne.n	800ac42 <__sflush_r+0x66>
 800ac34:	6829      	ldr	r1, [r5, #0]
 800ac36:	291d      	cmp	r1, #29
 800ac38:	d82c      	bhi.n	800ac94 <__sflush_r+0xb8>
 800ac3a:	4a2a      	ldr	r2, [pc, #168]	; (800ace4 <__sflush_r+0x108>)
 800ac3c:	40ca      	lsrs	r2, r1
 800ac3e:	07d6      	lsls	r6, r2, #31
 800ac40:	d528      	bpl.n	800ac94 <__sflush_r+0xb8>
 800ac42:	2200      	movs	r2, #0
 800ac44:	6062      	str	r2, [r4, #4]
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	04d9      	lsls	r1, r3, #19
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	d504      	bpl.n	800ac58 <__sflush_r+0x7c>
 800ac4e:	1c42      	adds	r2, r0, #1
 800ac50:	d101      	bne.n	800ac56 <__sflush_r+0x7a>
 800ac52:	682b      	ldr	r3, [r5, #0]
 800ac54:	b903      	cbnz	r3, 800ac58 <__sflush_r+0x7c>
 800ac56:	6560      	str	r0, [r4, #84]	; 0x54
 800ac58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac5a:	602f      	str	r7, [r5, #0]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	d0ca      	beq.n	800abf6 <__sflush_r+0x1a>
 800ac60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d002      	beq.n	800ac6e <__sflush_r+0x92>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f7fe fcad 	bl	80095c8 <_free_r>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	6360      	str	r0, [r4, #52]	; 0x34
 800ac72:	e7c1      	b.n	800abf8 <__sflush_r+0x1c>
 800ac74:	6a21      	ldr	r1, [r4, #32]
 800ac76:	2301      	movs	r3, #1
 800ac78:	4628      	mov	r0, r5
 800ac7a:	47b0      	blx	r6
 800ac7c:	1c41      	adds	r1, r0, #1
 800ac7e:	d1c7      	bne.n	800ac10 <__sflush_r+0x34>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0c4      	beq.n	800ac10 <__sflush_r+0x34>
 800ac86:	2b1d      	cmp	r3, #29
 800ac88:	d001      	beq.n	800ac8e <__sflush_r+0xb2>
 800ac8a:	2b16      	cmp	r3, #22
 800ac8c:	d101      	bne.n	800ac92 <__sflush_r+0xb6>
 800ac8e:	602f      	str	r7, [r5, #0]
 800ac90:	e7b1      	b.n	800abf6 <__sflush_r+0x1a>
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac98:	81a3      	strh	r3, [r4, #12]
 800ac9a:	e7ad      	b.n	800abf8 <__sflush_r+0x1c>
 800ac9c:	690f      	ldr	r7, [r1, #16]
 800ac9e:	2f00      	cmp	r7, #0
 800aca0:	d0a9      	beq.n	800abf6 <__sflush_r+0x1a>
 800aca2:	0793      	lsls	r3, r2, #30
 800aca4:	bf18      	it	ne
 800aca6:	2300      	movne	r3, #0
 800aca8:	680e      	ldr	r6, [r1, #0]
 800acaa:	bf08      	it	eq
 800acac:	694b      	ldreq	r3, [r1, #20]
 800acae:	eba6 0807 	sub.w	r8, r6, r7
 800acb2:	600f      	str	r7, [r1, #0]
 800acb4:	608b      	str	r3, [r1, #8]
 800acb6:	f1b8 0f00 	cmp.w	r8, #0
 800acba:	dd9c      	ble.n	800abf6 <__sflush_r+0x1a>
 800acbc:	4643      	mov	r3, r8
 800acbe:	463a      	mov	r2, r7
 800acc0:	4628      	mov	r0, r5
 800acc2:	6a21      	ldr	r1, [r4, #32]
 800acc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acc6:	47b0      	blx	r6
 800acc8:	2800      	cmp	r0, #0
 800acca:	dc06      	bgt.n	800acda <__sflush_r+0xfe>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	e78e      	b.n	800abf8 <__sflush_r+0x1c>
 800acda:	4407      	add	r7, r0
 800acdc:	eba8 0800 	sub.w	r8, r8, r0
 800ace0:	e7e9      	b.n	800acb6 <__sflush_r+0xda>
 800ace2:	bf00      	nop
 800ace4:	20400001 	.word	0x20400001

0800ace8 <_fflush_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	690b      	ldr	r3, [r1, #16]
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	b913      	cbnz	r3, 800acf8 <_fflush_r+0x10>
 800acf2:	2500      	movs	r5, #0
 800acf4:	4628      	mov	r0, r5
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	b118      	cbz	r0, 800ad02 <_fflush_r+0x1a>
 800acfa:	6983      	ldr	r3, [r0, #24]
 800acfc:	b90b      	cbnz	r3, 800ad02 <_fflush_r+0x1a>
 800acfe:	f000 f887 	bl	800ae10 <__sinit>
 800ad02:	4b14      	ldr	r3, [pc, #80]	; (800ad54 <_fflush_r+0x6c>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	d11b      	bne.n	800ad40 <_fflush_r+0x58>
 800ad08:	686c      	ldr	r4, [r5, #4]
 800ad0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0ef      	beq.n	800acf2 <_fflush_r+0xa>
 800ad12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad14:	07d0      	lsls	r0, r2, #31
 800ad16:	d404      	bmi.n	800ad22 <_fflush_r+0x3a>
 800ad18:	0599      	lsls	r1, r3, #22
 800ad1a:	d402      	bmi.n	800ad22 <_fflush_r+0x3a>
 800ad1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad1e:	f000 f915 	bl	800af4c <__retarget_lock_acquire_recursive>
 800ad22:	4628      	mov	r0, r5
 800ad24:	4621      	mov	r1, r4
 800ad26:	f7ff ff59 	bl	800abdc <__sflush_r>
 800ad2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	07da      	lsls	r2, r3, #31
 800ad30:	d4e0      	bmi.n	800acf4 <_fflush_r+0xc>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	059b      	lsls	r3, r3, #22
 800ad36:	d4dd      	bmi.n	800acf4 <_fflush_r+0xc>
 800ad38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad3a:	f000 f908 	bl	800af4e <__retarget_lock_release_recursive>
 800ad3e:	e7d9      	b.n	800acf4 <_fflush_r+0xc>
 800ad40:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <_fflush_r+0x70>)
 800ad42:	429c      	cmp	r4, r3
 800ad44:	d101      	bne.n	800ad4a <_fflush_r+0x62>
 800ad46:	68ac      	ldr	r4, [r5, #8]
 800ad48:	e7df      	b.n	800ad0a <_fflush_r+0x22>
 800ad4a:	4b04      	ldr	r3, [pc, #16]	; (800ad5c <_fflush_r+0x74>)
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	bf08      	it	eq
 800ad50:	68ec      	ldreq	r4, [r5, #12]
 800ad52:	e7da      	b.n	800ad0a <_fflush_r+0x22>
 800ad54:	0800b5d8 	.word	0x0800b5d8
 800ad58:	0800b5f8 	.word	0x0800b5f8
 800ad5c:	0800b5b8 	.word	0x0800b5b8

0800ad60 <std>:
 800ad60:	2300      	movs	r3, #0
 800ad62:	b510      	push	{r4, lr}
 800ad64:	4604      	mov	r4, r0
 800ad66:	e9c0 3300 	strd	r3, r3, [r0]
 800ad6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad6e:	6083      	str	r3, [r0, #8]
 800ad70:	8181      	strh	r1, [r0, #12]
 800ad72:	6643      	str	r3, [r0, #100]	; 0x64
 800ad74:	81c2      	strh	r2, [r0, #14]
 800ad76:	6183      	str	r3, [r0, #24]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	305c      	adds	r0, #92	; 0x5c
 800ad7e:	f7fe fc1b 	bl	80095b8 <memset>
 800ad82:	4b05      	ldr	r3, [pc, #20]	; (800ad98 <std+0x38>)
 800ad84:	6224      	str	r4, [r4, #32]
 800ad86:	6263      	str	r3, [r4, #36]	; 0x24
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <std+0x3c>)
 800ad8a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad8c:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <std+0x40>)
 800ad8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <std+0x44>)
 800ad92:	6323      	str	r3, [r4, #48]	; 0x30
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	bf00      	nop
 800ad98:	08009865 	.word	0x08009865
 800ad9c:	0800988b 	.word	0x0800988b
 800ada0:	080098c3 	.word	0x080098c3
 800ada4:	080098e7 	.word	0x080098e7

0800ada8 <_cleanup_r>:
 800ada8:	4901      	ldr	r1, [pc, #4]	; (800adb0 <_cleanup_r+0x8>)
 800adaa:	f000 b8af 	b.w	800af0c <_fwalk_reent>
 800adae:	bf00      	nop
 800adb0:	0800ace9 	.word	0x0800ace9

0800adb4 <__sfmoreglue>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	2568      	movs	r5, #104	; 0x68
 800adb8:	1e4a      	subs	r2, r1, #1
 800adba:	4355      	muls	r5, r2
 800adbc:	460e      	mov	r6, r1
 800adbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adc2:	f7fe fc4d 	bl	8009660 <_malloc_r>
 800adc6:	4604      	mov	r4, r0
 800adc8:	b140      	cbz	r0, 800addc <__sfmoreglue+0x28>
 800adca:	2100      	movs	r1, #0
 800adcc:	e9c0 1600 	strd	r1, r6, [r0]
 800add0:	300c      	adds	r0, #12
 800add2:	60a0      	str	r0, [r4, #8]
 800add4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800add8:	f7fe fbee 	bl	80095b8 <memset>
 800addc:	4620      	mov	r0, r4
 800adde:	bd70      	pop	{r4, r5, r6, pc}

0800ade0 <__sfp_lock_acquire>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__sfp_lock_acquire+0x8>)
 800ade2:	f000 b8b3 	b.w	800af4c <__retarget_lock_acquire_recursive>
 800ade6:	bf00      	nop
 800ade8:	2000174c 	.word	0x2000174c

0800adec <__sfp_lock_release>:
 800adec:	4801      	ldr	r0, [pc, #4]	; (800adf4 <__sfp_lock_release+0x8>)
 800adee:	f000 b8ae 	b.w	800af4e <__retarget_lock_release_recursive>
 800adf2:	bf00      	nop
 800adf4:	2000174c 	.word	0x2000174c

0800adf8 <__sinit_lock_acquire>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__sinit_lock_acquire+0x8>)
 800adfa:	f000 b8a7 	b.w	800af4c <__retarget_lock_acquire_recursive>
 800adfe:	bf00      	nop
 800ae00:	20001747 	.word	0x20001747

0800ae04 <__sinit_lock_release>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sinit_lock_release+0x8>)
 800ae06:	f000 b8a2 	b.w	800af4e <__retarget_lock_release_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20001747 	.word	0x20001747

0800ae10 <__sinit>:
 800ae10:	b510      	push	{r4, lr}
 800ae12:	4604      	mov	r4, r0
 800ae14:	f7ff fff0 	bl	800adf8 <__sinit_lock_acquire>
 800ae18:	69a3      	ldr	r3, [r4, #24]
 800ae1a:	b11b      	cbz	r3, 800ae24 <__sinit+0x14>
 800ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae20:	f7ff bff0 	b.w	800ae04 <__sinit_lock_release>
 800ae24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae28:	6523      	str	r3, [r4, #80]	; 0x50
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <__sinit+0x68>)
 800ae2c:	4a13      	ldr	r2, [pc, #76]	; (800ae7c <__sinit+0x6c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae32:	42a3      	cmp	r3, r4
 800ae34:	bf08      	it	eq
 800ae36:	2301      	moveq	r3, #1
 800ae38:	4620      	mov	r0, r4
 800ae3a:	bf08      	it	eq
 800ae3c:	61a3      	streq	r3, [r4, #24]
 800ae3e:	f000 f81f 	bl	800ae80 <__sfp>
 800ae42:	6060      	str	r0, [r4, #4]
 800ae44:	4620      	mov	r0, r4
 800ae46:	f000 f81b 	bl	800ae80 <__sfp>
 800ae4a:	60a0      	str	r0, [r4, #8]
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f000 f817 	bl	800ae80 <__sfp>
 800ae52:	2200      	movs	r2, #0
 800ae54:	2104      	movs	r1, #4
 800ae56:	60e0      	str	r0, [r4, #12]
 800ae58:	6860      	ldr	r0, [r4, #4]
 800ae5a:	f7ff ff81 	bl	800ad60 <std>
 800ae5e:	2201      	movs	r2, #1
 800ae60:	2109      	movs	r1, #9
 800ae62:	68a0      	ldr	r0, [r4, #8]
 800ae64:	f7ff ff7c 	bl	800ad60 <std>
 800ae68:	2202      	movs	r2, #2
 800ae6a:	2112      	movs	r1, #18
 800ae6c:	68e0      	ldr	r0, [r4, #12]
 800ae6e:	f7ff ff77 	bl	800ad60 <std>
 800ae72:	2301      	movs	r3, #1
 800ae74:	61a3      	str	r3, [r4, #24]
 800ae76:	e7d1      	b.n	800ae1c <__sinit+0xc>
 800ae78:	0800b350 	.word	0x0800b350
 800ae7c:	0800ada9 	.word	0x0800ada9

0800ae80 <__sfp>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	4607      	mov	r7, r0
 800ae84:	f7ff ffac 	bl	800ade0 <__sfp_lock_acquire>
 800ae88:	4b1e      	ldr	r3, [pc, #120]	; (800af04 <__sfp+0x84>)
 800ae8a:	681e      	ldr	r6, [r3, #0]
 800ae8c:	69b3      	ldr	r3, [r6, #24]
 800ae8e:	b913      	cbnz	r3, 800ae96 <__sfp+0x16>
 800ae90:	4630      	mov	r0, r6
 800ae92:	f7ff ffbd 	bl	800ae10 <__sinit>
 800ae96:	3648      	adds	r6, #72	; 0x48
 800ae98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	d503      	bpl.n	800aea8 <__sfp+0x28>
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	b30b      	cbz	r3, 800aee8 <__sfp+0x68>
 800aea4:	6836      	ldr	r6, [r6, #0]
 800aea6:	e7f7      	b.n	800ae98 <__sfp+0x18>
 800aea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeac:	b9d5      	cbnz	r5, 800aee4 <__sfp+0x64>
 800aeae:	4b16      	ldr	r3, [pc, #88]	; (800af08 <__sfp+0x88>)
 800aeb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeb4:	60e3      	str	r3, [r4, #12]
 800aeb6:	6665      	str	r5, [r4, #100]	; 0x64
 800aeb8:	f000 f847 	bl	800af4a <__retarget_lock_init_recursive>
 800aebc:	f7ff ff96 	bl	800adec <__sfp_lock_release>
 800aec0:	2208      	movs	r2, #8
 800aec2:	4629      	mov	r1, r5
 800aec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aecc:	6025      	str	r5, [r4, #0]
 800aece:	61a5      	str	r5, [r4, #24]
 800aed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aed4:	f7fe fb70 	bl	80095b8 <memset>
 800aed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aedc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aee0:	4620      	mov	r0, r4
 800aee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee4:	3468      	adds	r4, #104	; 0x68
 800aee6:	e7d9      	b.n	800ae9c <__sfp+0x1c>
 800aee8:	2104      	movs	r1, #4
 800aeea:	4638      	mov	r0, r7
 800aeec:	f7ff ff62 	bl	800adb4 <__sfmoreglue>
 800aef0:	4604      	mov	r4, r0
 800aef2:	6030      	str	r0, [r6, #0]
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d1d5      	bne.n	800aea4 <__sfp+0x24>
 800aef8:	f7ff ff78 	bl	800adec <__sfp_lock_release>
 800aefc:	230c      	movs	r3, #12
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	e7ee      	b.n	800aee0 <__sfp+0x60>
 800af02:	bf00      	nop
 800af04:	0800b350 	.word	0x0800b350
 800af08:	ffff0001 	.word	0xffff0001

0800af0c <_fwalk_reent>:
 800af0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af10:	4606      	mov	r6, r0
 800af12:	4688      	mov	r8, r1
 800af14:	2700      	movs	r7, #0
 800af16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af1e:	f1b9 0901 	subs.w	r9, r9, #1
 800af22:	d505      	bpl.n	800af30 <_fwalk_reent+0x24>
 800af24:	6824      	ldr	r4, [r4, #0]
 800af26:	2c00      	cmp	r4, #0
 800af28:	d1f7      	bne.n	800af1a <_fwalk_reent+0xe>
 800af2a:	4638      	mov	r0, r7
 800af2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af30:	89ab      	ldrh	r3, [r5, #12]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d907      	bls.n	800af46 <_fwalk_reent+0x3a>
 800af36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af3a:	3301      	adds	r3, #1
 800af3c:	d003      	beq.n	800af46 <_fwalk_reent+0x3a>
 800af3e:	4629      	mov	r1, r5
 800af40:	4630      	mov	r0, r6
 800af42:	47c0      	blx	r8
 800af44:	4307      	orrs	r7, r0
 800af46:	3568      	adds	r5, #104	; 0x68
 800af48:	e7e9      	b.n	800af1e <_fwalk_reent+0x12>

0800af4a <__retarget_lock_init_recursive>:
 800af4a:	4770      	bx	lr

0800af4c <__retarget_lock_acquire_recursive>:
 800af4c:	4770      	bx	lr

0800af4e <__retarget_lock_release_recursive>:
 800af4e:	4770      	bx	lr

0800af50 <__swhatbuf_r>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	460e      	mov	r6, r1
 800af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af58:	4614      	mov	r4, r2
 800af5a:	2900      	cmp	r1, #0
 800af5c:	461d      	mov	r5, r3
 800af5e:	b096      	sub	sp, #88	; 0x58
 800af60:	da07      	bge.n	800af72 <__swhatbuf_r+0x22>
 800af62:	2300      	movs	r3, #0
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	89b3      	ldrh	r3, [r6, #12]
 800af68:	061a      	lsls	r2, r3, #24
 800af6a:	d410      	bmi.n	800af8e <__swhatbuf_r+0x3e>
 800af6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af70:	e00e      	b.n	800af90 <__swhatbuf_r+0x40>
 800af72:	466a      	mov	r2, sp
 800af74:	f000 f8d6 	bl	800b124 <_fstat_r>
 800af78:	2800      	cmp	r0, #0
 800af7a:	dbf2      	blt.n	800af62 <__swhatbuf_r+0x12>
 800af7c:	9a01      	ldr	r2, [sp, #4]
 800af7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af86:	425a      	negs	r2, r3
 800af88:	415a      	adcs	r2, r3
 800af8a:	602a      	str	r2, [r5, #0]
 800af8c:	e7ee      	b.n	800af6c <__swhatbuf_r+0x1c>
 800af8e:	2340      	movs	r3, #64	; 0x40
 800af90:	2000      	movs	r0, #0
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	b016      	add	sp, #88	; 0x58
 800af96:	bd70      	pop	{r4, r5, r6, pc}

0800af98 <__smakebuf_r>:
 800af98:	898b      	ldrh	r3, [r1, #12]
 800af9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af9c:	079d      	lsls	r5, r3, #30
 800af9e:	4606      	mov	r6, r0
 800afa0:	460c      	mov	r4, r1
 800afa2:	d507      	bpl.n	800afb4 <__smakebuf_r+0x1c>
 800afa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	6123      	str	r3, [r4, #16]
 800afac:	2301      	movs	r3, #1
 800afae:	6163      	str	r3, [r4, #20]
 800afb0:	b002      	add	sp, #8
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	466a      	mov	r2, sp
 800afb6:	ab01      	add	r3, sp, #4
 800afb8:	f7ff ffca 	bl	800af50 <__swhatbuf_r>
 800afbc:	9900      	ldr	r1, [sp, #0]
 800afbe:	4605      	mov	r5, r0
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7fe fb4d 	bl	8009660 <_malloc_r>
 800afc6:	b948      	cbnz	r0, 800afdc <__smakebuf_r+0x44>
 800afc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afcc:	059a      	lsls	r2, r3, #22
 800afce:	d4ef      	bmi.n	800afb0 <__smakebuf_r+0x18>
 800afd0:	f023 0303 	bic.w	r3, r3, #3
 800afd4:	f043 0302 	orr.w	r3, r3, #2
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	e7e3      	b.n	800afa4 <__smakebuf_r+0xc>
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <__smakebuf_r+0x7c>)
 800afde:	62b3      	str	r3, [r6, #40]	; 0x28
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	6020      	str	r0, [r4, #0]
 800afe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	6120      	str	r0, [r4, #16]
 800afee:	6163      	str	r3, [r4, #20]
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	b15b      	cbz	r3, 800b00c <__smakebuf_r+0x74>
 800aff4:	4630      	mov	r0, r6
 800aff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800affa:	f000 f8a5 	bl	800b148 <_isatty_r>
 800affe:	b128      	cbz	r0, 800b00c <__smakebuf_r+0x74>
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	f043 0301 	orr.w	r3, r3, #1
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	89a0      	ldrh	r0, [r4, #12]
 800b00e:	4305      	orrs	r5, r0
 800b010:	81a5      	strh	r5, [r4, #12]
 800b012:	e7cd      	b.n	800afb0 <__smakebuf_r+0x18>
 800b014:	0800ada9 	.word	0x0800ada9

0800b018 <memchr>:
 800b018:	4603      	mov	r3, r0
 800b01a:	b510      	push	{r4, lr}
 800b01c:	b2c9      	uxtb	r1, r1
 800b01e:	4402      	add	r2, r0
 800b020:	4293      	cmp	r3, r2
 800b022:	4618      	mov	r0, r3
 800b024:	d101      	bne.n	800b02a <memchr+0x12>
 800b026:	2000      	movs	r0, #0
 800b028:	e003      	b.n	800b032 <memchr+0x1a>
 800b02a:	7804      	ldrb	r4, [r0, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	428c      	cmp	r4, r1
 800b030:	d1f6      	bne.n	800b020 <memchr+0x8>
 800b032:	bd10      	pop	{r4, pc}

0800b034 <memcpy>:
 800b034:	440a      	add	r2, r1
 800b036:	4291      	cmp	r1, r2
 800b038:	f100 33ff 	add.w	r3, r0, #4294967295
 800b03c:	d100      	bne.n	800b040 <memcpy+0xc>
 800b03e:	4770      	bx	lr
 800b040:	b510      	push	{r4, lr}
 800b042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b046:	4291      	cmp	r1, r2
 800b048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b04c:	d1f9      	bne.n	800b042 <memcpy+0xe>
 800b04e:	bd10      	pop	{r4, pc}

0800b050 <_realloc_r>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	4607      	mov	r7, r0
 800b054:	4614      	mov	r4, r2
 800b056:	460e      	mov	r6, r1
 800b058:	b921      	cbnz	r1, 800b064 <_realloc_r+0x14>
 800b05a:	4611      	mov	r1, r2
 800b05c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b060:	f7fe bafe 	b.w	8009660 <_malloc_r>
 800b064:	b922      	cbnz	r2, 800b070 <_realloc_r+0x20>
 800b066:	f7fe faaf 	bl	80095c8 <_free_r>
 800b06a:	4625      	mov	r5, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b070:	f000 f87a 	bl	800b168 <_malloc_usable_size_r>
 800b074:	42a0      	cmp	r0, r4
 800b076:	d20f      	bcs.n	800b098 <_realloc_r+0x48>
 800b078:	4621      	mov	r1, r4
 800b07a:	4638      	mov	r0, r7
 800b07c:	f7fe faf0 	bl	8009660 <_malloc_r>
 800b080:	4605      	mov	r5, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d0f2      	beq.n	800b06c <_realloc_r+0x1c>
 800b086:	4631      	mov	r1, r6
 800b088:	4622      	mov	r2, r4
 800b08a:	f7ff ffd3 	bl	800b034 <memcpy>
 800b08e:	4631      	mov	r1, r6
 800b090:	4638      	mov	r0, r7
 800b092:	f7fe fa99 	bl	80095c8 <_free_r>
 800b096:	e7e9      	b.n	800b06c <_realloc_r+0x1c>
 800b098:	4635      	mov	r5, r6
 800b09a:	e7e7      	b.n	800b06c <_realloc_r+0x1c>

0800b09c <_raise_r>:
 800b09c:	291f      	cmp	r1, #31
 800b09e:	b538      	push	{r3, r4, r5, lr}
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	d904      	bls.n	800b0b0 <_raise_r+0x14>
 800b0a6:	2316      	movs	r3, #22
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0b2:	b112      	cbz	r2, 800b0ba <_raise_r+0x1e>
 800b0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0b8:	b94b      	cbnz	r3, 800b0ce <_raise_r+0x32>
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 f830 	bl	800b120 <_getpid_r>
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ca:	f000 b817 	b.w	800b0fc <_kill_r>
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d00a      	beq.n	800b0e8 <_raise_r+0x4c>
 800b0d2:	1c59      	adds	r1, r3, #1
 800b0d4:	d103      	bne.n	800b0de <_raise_r+0x42>
 800b0d6:	2316      	movs	r3, #22
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	2001      	movs	r0, #1
 800b0dc:	e7e7      	b.n	800b0ae <_raise_r+0x12>
 800b0de:	2400      	movs	r4, #0
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0e6:	4798      	blx	r3
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	e7e0      	b.n	800b0ae <_raise_r+0x12>

0800b0ec <raise>:
 800b0ec:	4b02      	ldr	r3, [pc, #8]	; (800b0f8 <raise+0xc>)
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	6818      	ldr	r0, [r3, #0]
 800b0f2:	f7ff bfd3 	b.w	800b09c <_raise_r>
 800b0f6:	bf00      	nop
 800b0f8:	2000027c 	.word	0x2000027c

0800b0fc <_kill_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	2300      	movs	r3, #0
 800b100:	4d06      	ldr	r5, [pc, #24]	; (800b11c <_kill_r+0x20>)
 800b102:	4604      	mov	r4, r0
 800b104:	4608      	mov	r0, r1
 800b106:	4611      	mov	r1, r2
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	f7f5 fd9e 	bl	8000c4a <_kill>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	d102      	bne.n	800b118 <_kill_r+0x1c>
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	b103      	cbz	r3, 800b118 <_kill_r+0x1c>
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	bd38      	pop	{r3, r4, r5, pc}
 800b11a:	bf00      	nop
 800b11c:	20001740 	.word	0x20001740

0800b120 <_getpid_r>:
 800b120:	f7f5 bd8c 	b.w	8000c3c <_getpid>

0800b124 <_fstat_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	2300      	movs	r3, #0
 800b128:	4d06      	ldr	r5, [pc, #24]	; (800b144 <_fstat_r+0x20>)
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f7f5 fde8 	bl	8000d06 <_fstat>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d102      	bne.n	800b140 <_fstat_r+0x1c>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b103      	cbz	r3, 800b140 <_fstat_r+0x1c>
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	bd38      	pop	{r3, r4, r5, pc}
 800b142:	bf00      	nop
 800b144:	20001740 	.word	0x20001740

0800b148 <_isatty_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	2300      	movs	r3, #0
 800b14c:	4d05      	ldr	r5, [pc, #20]	; (800b164 <_isatty_r+0x1c>)
 800b14e:	4604      	mov	r4, r0
 800b150:	4608      	mov	r0, r1
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f5 fde6 	bl	8000d24 <_isatty>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_isatty_r+0x1a>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_isatty_r+0x1a>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	20001740 	.word	0x20001740

0800b168 <_malloc_usable_size_r>:
 800b168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b16c:	1f18      	subs	r0, r3, #4
 800b16e:	2b00      	cmp	r3, #0
 800b170:	bfbc      	itt	lt
 800b172:	580b      	ldrlt	r3, [r1, r0]
 800b174:	18c0      	addlt	r0, r0, r3
 800b176:	4770      	bx	lr

0800b178 <_gettimeofday>:
 800b178:	2258      	movs	r2, #88	; 0x58
 800b17a:	4b02      	ldr	r3, [pc, #8]	; (800b184 <_gettimeofday+0xc>)
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	4770      	bx	lr
 800b184:	20001740 	.word	0x20001740

0800b188 <_init>:
 800b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18a:	bf00      	nop
 800b18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b18e:	bc08      	pop	{r3}
 800b190:	469e      	mov	lr, r3
 800b192:	4770      	bx	lr

0800b194 <_fini>:
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	bf00      	nop
 800b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19a:	bc08      	pop	{r3}
 800b19c:	469e      	mov	lr, r3
 800b19e:	4770      	bx	lr
