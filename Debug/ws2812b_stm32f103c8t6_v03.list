
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a234  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a65c  0800a65c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a65c  0800a65c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a65c  0800a65c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a660  0800a660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  200001fc  0800a860  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800a860  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001995a  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c06  00000000  00000000  00039b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152d1  00000000  00000000  0005b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb6d  00000000  00000000  0007049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  000ff05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00104288  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001042ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a328 	.word	0x0800a328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	0800a328 	.word	0x0800a328

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd09 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f861 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f94d 	bl	8000408 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f92d 	bl	80003cc <MX_DMA_Init>
  MX_TIM3_Init();
 8000172:	f000 f8b5 	bl	80002e0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000176:	f008 fab7 	bl	80086e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
 800017e:	e007      	b.n	8000190 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000180:	7bfb      	ldrb	r3, [r7, #15]
 8000182:	4a28      	ldr	r2, [pc, #160]	; (8000224 <main+0xc8>)
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	3301      	adds	r3, #1
 800018e:	73fb      	strb	r3, [r7, #15]
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	2b03      	cmp	r3, #3
 8000194:	d9f4      	bls.n	8000180 <main+0x24>
  }

  ws2812b_init();
 8000196:	f000 fc29 	bl	80009ec <ws2812b_init>

  srand( (unsigned) time( NULL ));
 800019a:	2000      	movs	r0, #0
 800019c:	f009 f982 	bl	80094a4 <time>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f009 f88c 	bl	80092c0 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint16_t volume = 128; // max 256
 80001a8:	2380      	movs	r3, #128	; 0x80
 80001aa:	80fb      	strh	r3, [r7, #6]
	uint8_t r = gamma8[ rand() % volume ];
 80001ac:	f009 f8b6 	bl	800931c <rand>
 80001b0:	4602      	mov	r2, r0
 80001b2:	88fb      	ldrh	r3, [r7, #6]
 80001b4:	fb92 f1f3 	sdiv	r1, r2, r3
 80001b8:	fb03 f301 	mul.w	r3, r3, r1
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <main+0xcc>)
 80001c0:	5cd3      	ldrb	r3, [r2, r3]
 80001c2:	717b      	strb	r3, [r7, #5]
	uint8_t g = gamma8[ rand() % volume ];
 80001c4:	f009 f8aa 	bl	800931c <rand>
 80001c8:	4602      	mov	r2, r0
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80001d0:	fb03 f301 	mul.w	r3, r3, r1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	4a14      	ldr	r2, [pc, #80]	; (8000228 <main+0xcc>)
 80001d8:	5cd3      	ldrb	r3, [r2, r3]
 80001da:	713b      	strb	r3, [r7, #4]
	uint8_t b = gamma8[ rand() % volume ];
 80001dc:	f009 f89e 	bl	800931c <rand>
 80001e0:	4602      	mov	r2, r0
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	fb92 f1f3 	sdiv	r1, r2, r3
 80001e8:	fb03 f301 	mul.w	r3, r3, r1
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <main+0xcc>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	70fb      	strb	r3, [r7, #3]

	for( int led = 0; led < LED_N; led++ ) {
 80001f4:	2300      	movs	r3, #0
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	e00f      	b.n	800021a <main+0xbe>
	  ws2812b_set_color( led, r, g, b );
 80001fa:	68b8      	ldr	r0, [r7, #8]
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	793a      	ldrb	r2, [r7, #4]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	f000 fc5d 	bl	8000ac0 <ws2812b_set_color>
	  ws2812b_update();
 8000206:	f000 fc21 	bl	8000a4c <ws2812b_update>
	  send_queue_via_usb();
 800020a:	f000 f9c3 	bl	8000594 <send_queue_via_usb>
	  HAL_Delay( 100 );
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 fd14 	bl	8000c3c <HAL_Delay>
	for( int led = 0; led < LED_N; led++ ) {
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	3301      	adds	r3, #1
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	2b07      	cmp	r3, #7
 800021e:	ddec      	ble.n	80001fa <main+0x9e>
  {
 8000220:	e7c2      	b.n	80001a8 <main+0x4c>
 8000222:	bf00      	nop
 8000224:	200006c8 	.word	0x200006c8
 8000228:	0800a3b0 	.word	0x0800a3b0

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b094      	sub	sp, #80	; 0x50
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f008 ff92 	bl	8009164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000278:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fe5c 	bl	8002f40 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028e:	f000 f9df 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 f8c6 	bl	8003440 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ba:	f000 f9c9 	bl	8000650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002be:	2310      	movs	r3, #16
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fa21 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d4:	f000 f9bc 	bl	8000650 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3750      	adds	r7, #80	; 0x50
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08e      	sub	sp, #56	; 0x38
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]
 800030e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000310:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000312:	4a2d      	ldr	r2, [pc, #180]	; (80003c8 <MX_TIM3_Init+0xe8>)
 8000314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <MX_TIM3_Init+0xe4>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000324:	2259      	movs	r2, #89	; 0x59
 8000326:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM3_Init+0xe4>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000336:	f003 faa1 	bl	800387c <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000340:	f000 f986 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000352:	f003 fee5 	bl	8004120 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800035c:	f000 f978 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000362:	f003 fb25 	bl	80039b0 <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 f970 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM3_Init+0xe4>)
 8000380:	f004 fb46 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800038a:	f000 f961 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM3_Init+0xe4>)
 80003a6:	f003 fdfd 	bl	8003fa4 <HAL_TIM_PWM_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80003b0:	f000 f94e 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM3_Init+0xe4>)
 80003b6:	f000 f9d9 	bl	800076c <HAL_TIM_MspPostInit>

}
 80003ba:	bf00      	nop
 80003bc:	3738      	adds	r7, #56	; 0x38
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000063c 	.word	0x2000063c
 80003c8:	40000400 	.word	0x40000400

080003cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_DMA_Init+0x38>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <MX_DMA_Init+0x38>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2010      	movs	r0, #16
 80003f0:	f000 fd1f 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003f4:	2010      	movs	r0, #16
 80003f6:	f000 fd38 	bl	8000e6a <HAL_NVIC_EnableIRQ>

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MX_GPIO_Init+0x90>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MX_GPIO_Init+0x90>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MX_GPIO_Init+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x94>)
 800046c:	f001 f88a 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x94>)
 800048a:	f000 fef7 	bl	800127c <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40011000 	.word	0x40011000

080004a0 <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	void wait_for_CDC_transmit_ready();
	CDC_Transmit_FS( txBuf, buf_len );
 80004aa:	6839      	ldr	r1, [r7, #0]
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f008 fa41 	bl	8008934 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <welcome>:

void welcome(void) {
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 80004c2:	480e      	ldr	r0, [pc, #56]	; (80004fc <welcome+0x40>)
 80004c4:	f7ff fe42 	bl	800014c <strlen>
 80004c8:	4604      	mov	r4, r0
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <welcome+0x44>)
 80004cc:	f7ff fe3e 	bl	800014c <strlen>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4423      	add	r3, r4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f008 fe35 	bl	8009144 <malloc>
 80004da:	4603      	mov	r3, r0
 80004dc:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 80004de:	4907      	ldr	r1, [pc, #28]	; (80004fc <welcome+0x40>)
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f008 ff7a 	bl	80093da <strcpy>
	strcat( tmp_buf, prompt );
 80004e6:	4906      	ldr	r1, [pc, #24]	; (8000500 <welcome+0x44>)
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f008 ff67 	bl	80093bc <strcat>
	write_to_future_send_via_usb( tmp_buf );
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f88c 	bl	800060c <write_to_future_send_via_usb>
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000

08000504 <get_command>:

void get_command(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	char *result = malloc( 256 * sizeof( char ));
 800050a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800050e:	f008 fe19 	bl	8009144 <malloc>
 8000512:	4603      	mov	r3, r0
 8000514:	603b      	str	r3, [r7, #0]
	strcpy( result, "" );
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	input_usb_buffer[ in_usb_buf_pos ] = 0;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <get_command+0x7c>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <get_command+0x80>)
 8000524:	2100      	movs	r1, #0
 8000526:	5499      	strb	r1, [r3, r2]
	char * token = strtok( input_usb_buffer, " " );
 8000528:	4917      	ldr	r1, [pc, #92]	; (8000588 <get_command+0x84>)
 800052a:	4816      	ldr	r0, [pc, #88]	; (8000584 <get_command+0x80>)
 800052c:	f008 ff5e 	bl	80093ec <strtok>
 8000530:	6078      	str	r0, [r7, #4]
    // loop through the string to extract all other tokens
    while( token != NULL ) {
 8000532:	e014      	b.n	800055e <get_command+0x5a>
	   strcat( result, token );
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	6838      	ldr	r0, [r7, #0]
 8000538:	f008 ff40 	bl	80093bc <strcat>
	   strcat( result, "\r\n" );
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	f7ff fe05 	bl	800014c <strlen>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <get_command+0x88>)
 800054c:	8811      	ldrh	r1, [r2, #0]
 800054e:	7892      	ldrb	r2, [r2, #2]
 8000550:	8019      	strh	r1, [r3, #0]
 8000552:	709a      	strb	r2, [r3, #2]
	   token = strtok( NULL, " " );
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <get_command+0x84>)
 8000556:	2000      	movs	r0, #0
 8000558:	f008 ff48 	bl	80093ec <strtok>
 800055c:	6078      	str	r0, [r7, #4]
    while( token != NULL ) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1e7      	bne.n	8000534 <get_command+0x30>
    }
	in_usb_buf_pos = 0;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <get_command+0x7c>)
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
	strcat( result, prompt );
 800056a:	4909      	ldr	r1, [pc, #36]	; (8000590 <get_command+0x8c>)
 800056c:	6838      	ldr	r0, [r7, #0]
 800056e:	f008 ff25 	bl	80093bc <strcat>
	write_to_future_send_via_usb( result );
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f000 f84a 	bl	800060c <write_to_future_send_via_usb>
//	send_prompt();
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000318 	.word	0x20000318
 8000584:	20000218 	.word	0x20000218
 8000588:	0800a340 	.word	0x0800a340
 800058c:	0800a344 	.word	0x0800a344
 8000590:	20000000 	.word	0x20000000

08000594 <send_queue_via_usb>:

void send_queue_via_usb(void) {
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	e02b      	b.n	80005f8 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] != NULL && strlen( output_usb_buffer[ loop ]) > 0 ) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4a19      	ldr	r2, [pc, #100]	; (8000608 <send_queue_via_usb+0x74>)
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d022      	beq.n	80005f2 <send_queue_via_usb+0x5e>
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <send_queue_via_usb+0x74>)
 80005b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d01b      	beq.n	80005f2 <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <send_queue_via_usb+0x74>)
 80005be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <send_queue_via_usb+0x74>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fdbe 	bl	800014c <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4620      	mov	r0, r4
 80005d6:	f7ff ff63 	bl	80004a0 <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <send_queue_via_usb+0x74>)
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 fdb6 	bl	8009154 <free>
			output_usb_buffer[ loop ] = NULL;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <send_queue_via_usb+0x74>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d9d0      	bls.n	80005a0 <send_queue_via_usb+0xc>
		}
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	200006c8 	.word	0x200006c8

0800060c <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000618:	e002      	b.n	8000620 <write_to_future_send_via_usb+0x14>
		loop++;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	3301      	adds	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d805      	bhi.n	8000632 <write_to_future_send_via_usb+0x26>
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <write_to_future_send_via_usb+0x40>)
 800062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f3      	bne.n	800061a <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b03      	cmp	r3, #3
 8000636:	d804      	bhi.n	8000642 <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4904      	ldr	r1, [pc, #16]	; (800064c <write_to_future_send_via_usb+0x40>)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	200006c8 	.word	0x200006c8

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a23      	ldr	r2, [pc, #140]	; (800075c <HAL_TIM_Base_MspInit+0x9c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d140      	bne.n	8000754 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <HAL_TIM_Base_MspInit+0xa0>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <HAL_TIM_Base_MspInit+0xa0>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <HAL_TIM_Base_MspInit+0xa0>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_TIM_Base_MspInit+0xa8>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000708:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 800071e:	f000 fbbf 	bl	8000ea0 <HAL_DMA_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8000728:	f7ff ff92 	bl	8000650 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_TIM_Base_MspInit+0xa4>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	201d      	movs	r0, #29
 800074a:	f000 fb72 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800074e:	201d      	movs	r0, #29
 8000750:	f000 fb8b 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40000400 	.word	0x40000400
 8000760:	40021000 	.word	0x40021000
 8000764:	20000684 	.word	0x20000684
 8000768:	4002006c 	.word	0x4002006c

0800076c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_TIM_MspPostInit+0x58>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d117      	bne.n	80007bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 80007b8:	f000 fd60 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40000400 	.word	0x40000400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <HardFault_Handler+0x4>

080007e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <BusFault_Handler+0x4>

080007ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <UsageFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f9f2 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel6_IRQHandler+0x10>)
 800082a:	f000 fbf3 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000684 	.word	0x20000684

08000838 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800083e:	f000 ffea 	bl	8001816 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20001370 	.word	0x20001370

0800084c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <TIM3_IRQHandler+0x10>)
 8000852:	f003 fa9f 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000063c 	.word	0x2000063c

08000860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	return 1;
 8000864:	2301      	movs	r3, #1
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <_kill>:

int _kill(int pid, int sig)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000878:	f008 fc3a 	bl	80090f0 <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	2216      	movs	r2, #22
 8000880:	601a      	str	r2, [r3, #0]
	return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_exit>:

void _exit (int status)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000896:	f04f 31ff 	mov.w	r1, #4294967295
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffe7 	bl	800086e <_kill>
	while (1) {}		/* Make sure we hang here */
 80008a0:	e7fe      	b.n	80008a0 <_exit+0x12>

080008a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e00a      	b.n	80008ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b4:	f3af 8000 	nop.w
 80008b8:	4601      	mov	r1, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	60ba      	str	r2, [r7, #8]
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbf0      	blt.n	80008b4 <_read+0x12>
	}

return len;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e009      	b.n	8000902 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbf1      	blt.n	80008ee <_write+0x12>
	}
	return len;
 800090a:	687b      	ldr	r3, [r7, #4]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_close>:

int _close(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	return -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093a:	605a      	str	r2, [r3, #4]
	return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <_isatty>:

int _isatty(int file)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f008 fba4 	bl	80090f0 <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20005000 	.word	0x20005000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	2000031c 	.word	0x2000031c
 80009dc:	20001670 	.word	0x20001670

080009e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e007      	b.n	8000a08 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <ws2812b_init+0x58>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3301      	adds	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000a0c:	ddf4      	ble.n	80009f8 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	e007      	b.n	8000a24 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <ws2812b_init+0x58>)
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3301      	adds	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2bbf      	cmp	r3, #191	; 0xbf
 8000a28:	ddf4      	ble.n	8000a14 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 90; //100;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <ws2812b_init+0x58>)
 8000a2c:	225a      	movs	r2, #90	; 0x5a
 8000a2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  HAL_TIM_Base_Start(&htim3);
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <ws2812b_init+0x5c>)
 8000a34:	f002 ff72 	bl	800391c <HAL_TIM_Base_Start>
  ws2812b_update();
 8000a38:	f000 f808 	bl	8000a4c <ws2812b_update>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000320 	.word	0x20000320
 8000a48:	2000063c 	.word	0x2000063c

08000a4c <ws2812b_update>:

void ws2812b_update(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000a50:	23f1      	movs	r3, #241	; 0xf1
 8000a52:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <ws2812b_update+0x14>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <ws2812b_update+0x18>)
 8000a58:	f003 f802 	bl	8003a60 <HAL_TIM_PWM_Start_DMA>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000320 	.word	0x20000320
 8000a64:	2000063c 	.word	0x2000063c

08000a68 <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e016      	b.n	8000aa8 <set_byte+0x40>
    if (value & 0x80) {
 8000a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da06      	bge.n	8000a90 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <set_byte+0x54>)
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	54d1      	strb	r1, [r2, r3]
 8000a8e:	e005      	b.n	8000a9c <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <set_byte+0x54>)
 8000a98:	2120      	movs	r1, #32
 8000a9a:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	dde5      	ble.n	8000a7a <set_byte+0x12>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000320 	.word	0x20000320

08000ac0 <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	70fb      	strb	r3, [r7, #3]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70bb      	strb	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	d820      	bhi.n	8000b22 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	3330      	adds	r3, #48	; 0x30
 8000aec:	78ba      	ldrb	r2, [r7, #2]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffb9 	bl	8000a68 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	3338      	adds	r3, #56	; 0x38
 8000b02:	78fa      	ldrb	r2, [r7, #3]
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffae 	bl	8000a68 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	3340      	adds	r3, #64	; 0x40
 8000b18:	787a      	ldrb	r2, [r7, #1]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ffa3 	bl	8000a68 <set_byte>
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ff45 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f008 fad1 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff faff 	bl	800015c <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000b68:	0800a664 	.word	0x0800a664
  ldr r2, =_sbss
 8000b6c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000b70:	2000166c 	.word	0x2000166c

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f947 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fd62 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f95f 	bl	8000e86 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f927 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000001c 	.word	0x2000001c
 8000bfc:	20000024 	.word	0x20000024
 8000c00:	20000020 	.word	0x20000020

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_IncTick+0x20>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000024 	.word	0x20000024
 8000c24:	200006d8 	.word	0x200006d8

08000c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	200006d8 	.word	0x200006d8

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000024 	.word	0x20000024

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff2d 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff42 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff35 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e043      	b.n	8000f3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_DMA_Init+0xa8>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Init+0xac>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	009a      	lsls	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_DMA_Init+0xb0>)
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	bffdfff8 	.word	0xbffdfff8
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_DMA_Start_IT+0x20>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e04a      	b.n	800100a <HAL_DMA_Start_IT+0xb6>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d13a      	bne.n	8000ffc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2200      	movs	r2, #0
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f000 f938 	bl	8001220 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 020e 	orr.w	r2, r2, #14
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e00f      	b.n	8000fea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0204 	bic.w	r2, r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 020a 	orr.w	r2, r2, #10
 8000fe8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e005      	b.n	8001008 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001004:	2302      	movs	r3, #2
 8001006:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001008:	7dfb      	ldrb	r3, [r7, #23]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2204      	movs	r2, #4
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d04f      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d029      	beq.n	80010c2 <HAL_DMA_IRQHandler+0xae>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d022      	beq.n	80010be <HAL_DMA_IRQHandler+0xaa>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a63      	ldr	r2, [pc, #396]	; (800120c <HAL_DMA_IRQHandler+0x1f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01a      	beq.n	80010b8 <HAL_DMA_IRQHandler+0xa4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a62      	ldr	r2, [pc, #392]	; (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d012      	beq.n	80010b2 <HAL_DMA_IRQHandler+0x9e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a60      	ldr	r2, [pc, #384]	; (8001214 <HAL_DMA_IRQHandler+0x200>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x98>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_DMA_IRQHandler+0x204>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d102      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x92>
 80010a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a4:	e00e      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010aa:	e00b      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010b0:	e008      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b6:	e005      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010bc:	e002      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	e000      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010c2:	2304      	movs	r3, #4
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_DMA_IRQHandler+0x208>)
 80010c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8094 	beq.w	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010da:	e08e      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	2202      	movs	r2, #2
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d056      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d051      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a38      	ldr	r2, [pc, #224]	; (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d029      	beq.n	800117a <HAL_DMA_IRQHandler+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d022      	beq.n	8001176 <HAL_DMA_IRQHandler+0x162>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a35      	ldr	r2, [pc, #212]	; (800120c <HAL_DMA_IRQHandler+0x1f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01a      	beq.n	8001170 <HAL_DMA_IRQHandler+0x15c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d012      	beq.n	800116a <HAL_DMA_IRQHandler+0x156>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_DMA_IRQHandler+0x200>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00a      	beq.n	8001164 <HAL_DMA_IRQHandler+0x150>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_DMA_IRQHandler+0x204>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d102      	bne.n	800115e <HAL_DMA_IRQHandler+0x14a>
 8001158:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800115c:	e00e      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800115e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001162:	e00b      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001168:	e008      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	e005      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001174:	e002      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001176:	2320      	movs	r3, #32
 8001178:	e000      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800117a:	2302      	movs	r3, #2
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_DMA_IRQHandler+0x208>)
 800117e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	d034      	beq.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001198:	e02f      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2208      	movs	r2, #8
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 020e 	bic.w	r2, r2, #14
 80011c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    }
  }
  return;
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
}
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020008 	.word	0x40020008
 8001208:	4002001c 	.word	0x4002001c
 800120c:	40020030 	.word	0x40020030
 8001210:	40020044 	.word	0x40020044
 8001214:	40020058 	.word	0x40020058
 8001218:	4002006c 	.word	0x4002006c
 800121c:	40020000 	.word	0x40020000

08001220 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d108      	bne.n	8001260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800125e:	e007      	b.n	8001270 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e169      	b.n	8001564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001290:	2201      	movs	r2, #1
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8158 	bne.w	800155e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a9a      	ldr	r2, [pc, #616]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d05e      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012b8:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d875      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012be:	4a98      	ldr	r2, [pc, #608]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d058      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012c4:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d86f      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ca:	4a96      	ldr	r2, [pc, #600]	; (8001524 <HAL_GPIO_Init+0x2a8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d052      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012d0:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d869      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012d6:	4a94      	ldr	r2, [pc, #592]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04c      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012dc:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d863      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012e2:	4a92      	ldr	r2, [pc, #584]	; (800152c <HAL_GPIO_Init+0x2b0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d046      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012e8:	4a90      	ldr	r2, [pc, #576]	; (800152c <HAL_GPIO_Init+0x2b0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d85d      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d82a      	bhi.n	8001348 <HAL_GPIO_Init+0xcc>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d859      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <HAL_GPIO_Init+0x80>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
 8001308:	080013a5 	.word	0x080013a5
 800130c:	080013ab 	.word	0x080013ab
 8001310:	080013ab 	.word	0x080013ab
 8001314:	080013ab 	.word	0x080013ab
 8001318:	080013ab 	.word	0x080013ab
 800131c:	080013ab 	.word	0x080013ab
 8001320:	080013ab 	.word	0x080013ab
 8001324:	080013ab 	.word	0x080013ab
 8001328:	080013ab 	.word	0x080013ab
 800132c:	080013ab 	.word	0x080013ab
 8001330:	080013ab 	.word	0x080013ab
 8001334:	080013ab 	.word	0x080013ab
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013ab 	.word	0x080013ab
 8001340:	08001359 	.word	0x08001359
 8001344:	0800136d 	.word	0x0800136d
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <HAL_GPIO_Init+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e029      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e024      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01f      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e01a      	b.n	80013ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e013      	b.n	80013ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e009      	b.n	80013ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e003      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x130>
          break;
 80013aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d801      	bhi.n	80013b6 <HAL_GPIO_Init+0x13a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_Init+0x13e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d802      	bhi.n	80013c8 <HAL_GPIO_Init+0x14c>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x152>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	3b08      	subs	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	210f      	movs	r1, #15
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80b1 	beq.w	800155e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2bc>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_GPIO_Init+0x2c0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <HAL_GPIO_Init+0x2c4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1e0>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 800145c:	2304      	movs	r3, #4
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001468:	2300      	movs	r3, #0
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147a:	492f      	ldr	r1, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x2bc>)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x2d0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	492c      	ldr	r1, [pc, #176]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4928      	ldr	r1, [pc, #160]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4922      	ldr	r1, [pc, #136]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	491e      	ldr	r1, [pc, #120]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4918      	ldr	r1, [pc, #96]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4914      	ldr	r1, [pc, #80]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d021      	beq.n	8001550 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
 8001518:	e021      	b.n	800155e <HAL_GPIO_Init+0x2e2>
 800151a:	bf00      	nop
 800151c:	10320000 	.word	0x10320000
 8001520:	10310000 	.word	0x10310000
 8001524:	10220000 	.word	0x10220000
 8001528:	10210000 	.word	0x10210000
 800152c:	10120000 	.word	0x10120000
 8001530:	10110000 	.word	0x10110000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400
 800154c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	43db      	mvns	r3, r3
 8001558:	4909      	ldr	r1, [pc, #36]	; (8001580 <HAL_GPIO_Init+0x304>)
 800155a:	4013      	ands	r3, r2
 800155c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	3301      	adds	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f ae8e 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	372c      	adds	r7, #44	; 0x2c
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af06      	add	r7, sp, #24
 80015ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0fd      	b.n	80017c2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f007 fade 	bl	8008b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 faa5 	bl	8004b3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	687e      	ldr	r6, [r7, #4]
 80015fa:	466d      	mov	r5, sp
 80015fc:	f106 0410 	add.w	r4, r6, #16
 8001600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	602b      	str	r3, [r5, #0]
 8001608:	1d33      	adds	r3, r6, #4
 800160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f003 fa6f 	bl	8004af0 <USB_CoreInit>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0ce      	b.n	80017c2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f003 faa0 	bl	8004b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e04c      	b.n	80016d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3301      	adds	r3, #1
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	b298      	uxth	r0, r3
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3336      	adds	r3, #54	; 0x36
 8001674:	4602      	mov	r2, r0
 8001676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3303      	adds	r3, #3
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	3338      	adds	r3, #56	; 0x38
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	333c      	adds	r3, #60	; 0x3c
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	3340      	adds	r3, #64	; 0x40
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3ad      	bcc.n	8001636 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e044      	b.n	800176a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	d3b5      	bcc.n	80016e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	687e      	ldr	r6, [r7, #4]
 800177c:	466d      	mov	r5, sp
 800177e:	f106 0410 	add.w	r4, r6, #16
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	602b      	str	r3, [r5, #0]
 800178a:	1d33      	adds	r3, r6, #4
 800178c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f003 f9fa 	bl	8004b88 <USB_DevInit>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2202      	movs	r2, #2
 800179e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00d      	b.n	80017c2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fb6b 	bl	8006e96 <USB_DevDisconnect>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_PCD_Start+0x16>
 80017dc:	2302      	movs	r3, #2
 80017de:	e016      	b.n	800180e <HAL_PCD_Start+0x44>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f98f 	bl	8004b10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017f2:	2101      	movs	r1, #1
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f007 fc44 	bl	8009082 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fb3f 	bl	8006e82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b088      	sub	sp, #32
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fb41 	bl	8006eaa <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001832:	d102      	bne.n	800183a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fb61 	bl	8001efc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fb33 	bl	8006eaa <USB_ReadInterrupts>
 8001844:	4603      	mov	r3, r0
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184e:	d112      	bne.n	8001876 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001862:	b292      	uxth	r2, r2
 8001864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f007 fa12 	bl	8008c92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800186e:	2100      	movs	r1, #0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f925 	bl	8001ac0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fb15 	bl	8006eaa <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800188a:	d10b      	bne.n	80018a4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800189e:	b292      	uxth	r2, r2
 80018a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 fafe 	bl	8006eaa <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b8:	d10b      	bne.n	80018d2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018cc:	b292      	uxth	r2, r2
 80018ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 fae7 	bl	8006eaa <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e6:	d126      	bne.n	8001936 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0208 	bic.w	r2, r2, #8
 8001912:	b292      	uxth	r2, r2
 8001914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f007 f9f3 	bl	8008d04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001926:	b29a      	uxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001930:	b292      	uxth	r2, r2
 8001932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fab5 	bl	8006eaa <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194a:	f040 8084 	bne.w	8001a56 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	77fb      	strb	r3, [r7, #31]
 8001952:	e011      	b.n	8001978 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	441a      	add	r2, r3
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	b292      	uxth	r2, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	f107 0120 	add.w	r1, r7, #32
 800196c:	440b      	add	r3, r1
 800196e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	3301      	adds	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	2b07      	cmp	r3, #7
 800197c:	d9ea      	bls.n	8001954 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	b292      	uxth	r2, r2
 80019aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019ae:	bf00      	nop
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f6      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d4:	b292      	uxth	r2, r2
 80019d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	77fb      	strb	r3, [r7, #31]
 80019de:	e010      	b.n	8001a02 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019e0:	7ffb      	ldrb	r3, [r7, #31]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4611      	mov	r1, r2
 80019e8:	7ffa      	ldrb	r2, [r7, #31]
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	440a      	add	r2, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	f107 0120 	add.w	r1, r7, #32
 80019f4:	440b      	add	r3, r1
 80019f6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019fa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019fc:	7ffb      	ldrb	r3, [r7, #31]
 80019fe:	3301      	adds	r3, #1
 8001a00:	77fb      	strb	r3, [r7, #31]
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d9eb      	bls.n	80019e0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0208 	orr.w	r2, r2, #8
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a32:	b292      	uxth	r2, r2
 8001a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0204 	orr.w	r2, r2, #4
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f007 f93d 	bl	8008cd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fa25 	bl	8006eaa <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6a:	d10e      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a7e:	b292      	uxth	r2, r2
 8001a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f007 f8f6 	bl	8008c76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fa0b 	bl	8006eaa <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_PCD_SetAddress+0x1a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e013      	b.n	8001b02 <HAL_PCD_SetAddress+0x42>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 f9b2 	bl	8006e5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	4608      	mov	r0, r1
 8001b14:	4611      	mov	r1, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	70fb      	strb	r3, [r7, #3]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	803b      	strh	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	da0e      	bge.n	8001b4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	705a      	strb	r2, [r3, #1]
 8001b4c:	e00e      	b.n	8001b6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0207 	and.w	r2, r3, #7
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b78:	883a      	ldrh	r2, [r7, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	78ba      	ldrb	r2, [r7, #2]
 8001b82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b96:	78bb      	ldrb	r3, [r7, #2]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_PCD_EP_Open+0xa6>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e00e      	b.n	8001bce <HAL_PCD_EP_Open+0xc4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f802 	bl	8004bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0e      	bge.n	8001c08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	705a      	strb	r2, [r3, #1]
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_EP_Close+0x6a>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e00e      	b.n	8001c5e <HAL_PCD_EP_Close+0x88>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb24 	bl	800529c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 0207 	and.w	r2, r3, #7
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fcd6 	bl	8005674 <USB_EPStartXfer>
 8001cc8:	e005      	b.n	8001cd6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6979      	ldr	r1, [r7, #20]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fccf 	bl	8005674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 0207 	and.w	r2, r3, #7
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2201      	movs	r2, #1
 8001d58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6979      	ldr	r1, [r7, #20]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fc7c 	bl	8005674 <USB_EPStartXfer>
 8001d7c:	e005      	b.n	8001d8a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6979      	ldr	r1, [r7, #20]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fc75 	bl	8005674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 0207 	and.w	r2, r3, #7
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d901      	bls.n	8001db2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e04c      	b.n	8001e4c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da0e      	bge.n	8001dd8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	705a      	strb	r2, [r3, #1]
 8001dd6:	e00c      	b.n	8001df2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_PCD_EP_SetStall+0x7e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e01c      	b.n	8001e4c <HAL_PCD_EP_SetStall+0xb8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 ff1e 	bl	8006c62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f005 f843 	bl	8006ec8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d901      	bls.n	8001e72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e040      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da0e      	bge.n	8001e98 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	705a      	strb	r2, [r3, #1]
 8001e96:	e00e      	b.n	8001eb6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 0207 	and.w	r2, r3, #7
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_EP_ClrStall+0x82>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e00e      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa0>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 ff0c 	bl	8006d02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f04:	e2ec      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 8161 	bne.w	80021e8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d152      	bne.n	8001fd6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f40:	81fb      	strh	r3, [r7, #14]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3328      	adds	r3, #40	; 0x28
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	441a      	add	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f94:	2100      	movs	r1, #0
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f006 fe53 	bl	8008c42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 829b 	beq.w	80024e0 <PCD_EP_ISR_Handler+0x5e4>
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8296 	bne.w	80024e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fd4:	e284      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d034      	beq.n	800205a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	3306      	adds	r3, #6
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800202e:	b29b      	uxth	r3, r3
 8002030:	f004 ff9a 	bl	8006f68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002040:	4013      	ands	r3, r2
 8002042:	823b      	strh	r3, [r7, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	8a3a      	ldrh	r2, [r7, #16]
 800204a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204e:	b292      	uxth	r2, r2
 8002050:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f006 fdc8 	bl	8008be8 <HAL_PCD_SetupStageCallback>
 8002058:	e242      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800205a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800205e:	2b00      	cmp	r3, #0
 8002060:	f280 823e 	bge.w	80024e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002070:	4013      	ands	r3, r2
 8002072:	83bb      	strh	r3, [r7, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	8bba      	ldrh	r2, [r7, #28]
 800207a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207e:	b292      	uxth	r2, r2
 8002080:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	3306      	adds	r3, #6
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <PCD_EP_ISR_Handler+0x1ee>
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	6959      	ldr	r1, [r3, #20]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f004 ff4a 	bl	8006f68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	441a      	add	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020e2:	2100      	movs	r1, #0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f006 fd91 	bl	8008c0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 81f2 	bne.w	80024e0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d112      	bne.n	800214a <PCD_EP_ISR_Handler+0x24e>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800212e:	b29a      	uxth	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800213e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002142:	b29a      	uxth	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	e02f      	b.n	80021aa <PCD_EP_ISR_Handler+0x2ae>
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b3e      	cmp	r3, #62	; 0x3e
 8002150:	d813      	bhi.n	800217a <PCD_EP_ISR_Handler+0x27e>
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <PCD_EP_ISR_Handler+0x270>
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	3301      	adds	r3, #1
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	b29b      	uxth	r3, r3
 8002170:	029b      	lsls	r3, r3, #10
 8002172:	b29a      	uxth	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	e017      	b.n	80021aa <PCD_EP_ISR_Handler+0x2ae>
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <PCD_EP_ISR_Handler+0x298>
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	3b01      	subs	r3, #1
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	b29b      	uxth	r3, r3
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	b29b      	uxth	r3, r3
 800219c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ba:	827b      	strh	r3, [r7, #18]
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021c2:	827b      	strh	r3, [r7, #18]
 80021c4:	8a7b      	ldrh	r3, [r7, #18]
 80021c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ca:	827b      	strh	r3, [r7, #18]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	8a7b      	ldrh	r3, [r7, #18]
 80021d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8013      	strh	r3, [r2, #0]
 80021e6:	e17b      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f280 80ea 	bge.w	80023d8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29a      	uxth	r2, r3
 8002216:	f640 738f 	movw	r3, #3983	; 0xf8f
 800221a:	4013      	ands	r3, r2
 800221c:	853b      	strh	r3, [r7, #40]	; 0x28
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800222e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002232:	b292      	uxth	r2, r2
 8002234:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002236:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	7b1b      	ldrb	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d122      	bne.n	800229a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	3306      	adds	r3, #6
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800227e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8087 	beq.w	8002394 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	6959      	ldr	r1, [r3, #20]
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	88da      	ldrh	r2, [r3, #6]
 8002292:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002294:	f004 fe68 	bl	8006f68 <USB_ReadPMA>
 8002298:	e07c      	b.n	8002394 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	78db      	ldrb	r3, [r3, #3]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d108      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f927 	bl	80024fc <HAL_PCD_EP_DB_Receive>
 80022ae:	4603      	mov	r3, r0
 80022b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022b2:	e06f      	b.n	8002394 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d021      	beq.n	8002352 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	3302      	adds	r3, #2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002336:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02a      	beq.n	8002394 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	6959      	ldr	r1, [r3, #20]
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	891a      	ldrh	r2, [r3, #8]
 800234a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800234c:	f004 fe0c 	bl	8006f68 <USB_ReadPMA>
 8002350:	e020      	b.n	8002394 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	3306      	adds	r3, #6
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800237c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	6959      	ldr	r1, [r3, #20]
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	895a      	ldrh	r2, [r3, #10]
 800238e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002390:	f004 fdea 	bl	8006f68 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239a:	441a      	add	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a6:	441a      	add	r2, r3
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <PCD_EP_ISR_Handler+0x4c2>
 80023b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d206      	bcs.n	80023cc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f006 fc21 	bl	8008c0c <HAL_PCD_DataOutStageCallback>
 80023ca:	e005      	b.n	80023d8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f94e 	bl	8005674 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07e      	beq.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	843b      	strh	r3, [r7, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	441a      	add	r2, r3
 8002420:	8c3b      	ldrh	r3, [r7, #32]
 8002422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242a:	b29b      	uxth	r3, r3
 800242c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	78db      	ldrb	r3, [r3, #3]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d00c      	beq.n	8002450 <PCD_EP_ISR_Handler+0x554>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	78db      	ldrb	r3, [r3, #3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002442:	2b02      	cmp	r3, #2
 8002444:	d146      	bne.n	80024d4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d141      	bne.n	80024d4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	3302      	adds	r3, #2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002478:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	8bfb      	ldrh	r3, [r7, #30]
 8002480:	429a      	cmp	r2, r3
 8002482:	d906      	bls.n	8002492 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	8bfb      	ldrh	r3, [r7, #30]
 800248a:	1ad2      	subs	r2, r2, r3
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	e002      	b.n	8002498 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f006 fbcb 	bl	8008c42 <HAL_PCD_DataInStageCallback>
 80024ac:	e018      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	8bfb      	ldrh	r3, [r7, #30]
 80024b4:	441a      	add	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	8bfb      	ldrh	r3, [r7, #30]
 80024c0:	441a      	add	r2, r3
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f8d1 	bl	8005674 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024d2:	e005      	b.n	80024e0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f91b 	bl	8002716 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f6ff ad0a 	blt.w	8001f06 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3738      	adds	r7, #56	; 0x38
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d07e      	beq.n	8002612 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	3302      	adds	r3, #2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	8b7b      	ldrh	r3, [r7, #26]
 8002544:	429a      	cmp	r2, r3
 8002546:	d306      	bcc.n	8002556 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	8b7b      	ldrh	r3, [r7, #26]
 800254e:	1ad2      	subs	r2, r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	619a      	str	r2, [r3, #24]
 8002554:	e002      	b.n	800255c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d123      	bne.n	80025ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	833b      	strh	r3, [r7, #24]
 8002580:	8b3b      	ldrh	r3, [r7, #24]
 8002582:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002586:	833b      	strh	r3, [r7, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	8b3b      	ldrh	r3, [r7, #24]
 8002598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01f      	beq.n	80025f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	82fb      	strh	r3, [r7, #22]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	8afb      	ldrh	r3, [r7, #22]
 80025e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025f6:	8b7b      	ldrh	r3, [r7, #26]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8087 	beq.w	800270c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6959      	ldr	r1, [r3, #20]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	891a      	ldrh	r2, [r3, #8]
 800260a:	8b7b      	ldrh	r3, [r7, #26]
 800260c:	f004 fcac 	bl	8006f68 <USB_ReadPMA>
 8002610:	e07c      	b.n	800270c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	3306      	adds	r3, #6
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	8b7b      	ldrh	r3, [r7, #26]
 8002642:	429a      	cmp	r2, r3
 8002644:	d306      	bcc.n	8002654 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	8b7b      	ldrh	r3, [r7, #26]
 800264c:	1ad2      	subs	r2, r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	619a      	str	r2, [r3, #24]
 8002652:	e002      	b.n	800265a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d123      	bne.n	80026aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	83fb      	strh	r3, [r7, #30]
 800267e:	8bfb      	ldrh	r3, [r7, #30]
 8002680:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002684:	83fb      	strh	r3, [r7, #30]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	8bfb      	ldrh	r3, [r7, #30]
 8002696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11f      	bne.n	80026f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	83bb      	strh	r3, [r7, #28]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	441a      	add	r2, r3
 80026de:	8bbb      	ldrh	r3, [r7, #28]
 80026e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026f4:	8b7b      	ldrh	r3, [r7, #26]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6959      	ldr	r1, [r3, #20]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	895a      	ldrh	r2, [r3, #10]
 8002706:	8b7b      	ldrh	r3, [r7, #26]
 8002708:	f004 fc2e 	bl	8006f68 <USB_ReadPMA>
    }
  }

  return count;
 800270c:	8b7b      	ldrh	r3, [r7, #26]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b0a2      	sub	sp, #136	; 0x88
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 81c7 	beq.w	8002abe <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	3302      	adds	r3, #2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002764:	429a      	cmp	r2, r3
 8002766:	d907      	bls.n	8002778 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002770:	1ad2      	subs	r2, r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	e002      	b.n	800277e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80b9 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d126      	bne.n	80027de <HAL_PCD_EP_DB_Transmit+0xc8>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	4413      	add	r3, r2
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	011a      	lsls	r2, r3, #4
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	4413      	add	r3, r2
 80027b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e01a      	b.n	8002814 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d116      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	4413      	add	r3, r2
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	4413      	add	r3, r2
 8002808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	2200      	movs	r2, #0
 8002812:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d126      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002868:	b29a      	uxth	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	e017      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	785b      	ldrb	r3, [r3, #1]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d113      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	4413      	add	r3, r2
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	011a      	lsls	r2, r3, #4
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	4413      	add	r3, r2
 8002894:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f006 f9cb 	bl	8008c42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 82d4 	beq.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	827b      	strh	r3, [r7, #18]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	8a7b      	ldrh	r3, [r7, #18]
 80028e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	8013      	strh	r3, [r2, #0]
 80028f8:	e2b2      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d021      	beq.n	8002948 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800294e:	2b01      	cmp	r3, #1
 8002950:	f040 8286 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800296a:	441a      	add	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d309      	bcc.n	8002990 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	1ad2      	subs	r2, r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	621a      	str	r2, [r3, #32]
 800298e:	e015      	b.n	80029bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d107      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800299c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029a6:	e009      	b.n	80029bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d155      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x35a>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	4413      	add	r3, r2
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d112      	bne.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x302>
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	e047      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a1c:	d811      	bhi.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a30:	3301      	adds	r3, #1
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	029b      	lsls	r3, r3, #10
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	e032      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x342>
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a54:	3b01      	subs	r3, #1
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	e01b      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d117      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	4413      	add	r3, r2
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	011a      	lsls	r2, r3, #4
 8002a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a98:	4413      	add	r3, r2
 8002a9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6959      	ldr	r1, [r3, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	891a      	ldrh	r2, [r3, #8]
 8002ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f004 fa11 	bl	8006ede <USB_WritePMA>
 8002abc:	e1d0      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3306      	adds	r3, #6
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d307      	bcc.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	619a      	str	r2, [r3, #24]
 8002b04:	e002      	b.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 80c4 	bne.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d126      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x456>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	4413      	add	r3, r2
 8002b34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	011a      	lsls	r2, r3, #4
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	4413      	add	r3, r2
 8002b40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e01a      	b.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d116      	bne.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	677b      	str	r3, [r7, #116]	; 0x74
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b88:	4413      	add	r3, r2
 8002b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d12f      	bne.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc8:	4413      	add	r3, r2
 8002bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	e017      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d113      	bne.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c26:	4413      	add	r3, r2
 8002c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	011a      	lsls	r2, r3, #4
 8002c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c32:	4413      	add	r3, r2
 8002c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f005 fffb 	bl	8008c42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8104 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
 8002c9c:	e0e0      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d121      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 80b4 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d00:	441a      	add	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d0e:	441a      	add	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d309      	bcc.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	621a      	str	r2, [r3, #32]
 8002d32:	e015      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d4a:	e009      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	667b      	str	r3, [r7, #100]	; 0x64
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d155      	bne.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x704>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d82:	4413      	add	r3, r2
 8002d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	011a      	lsls	r2, r3, #4
 8002d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8e:	4413      	add	r3, r2
 8002d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d94:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d112      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e044      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x736>
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc6:	d811      	bhi.n	8002dec <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	3301      	adds	r3, #1
 8002ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e02f      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x736>
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	657b      	str	r3, [r7, #84]	; 0x54
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	657b      	str	r3, [r7, #84]	; 0x54
 8002e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e018      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x736>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d114      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x736>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e30:	4413      	add	r3, r2
 8002e32:	667b      	str	r3, [r7, #100]	; 0x64
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	011a      	lsls	r2, r3, #4
 8002e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
 8002e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6959      	ldr	r1, [r3, #20]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	895a      	ldrh	r2, [r3, #10]
 8002e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f004 f83f 	bl	8006ede <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7a:	823b      	strh	r3, [r7, #16]
 8002e7c:	8a3b      	ldrh	r3, [r7, #16]
 8002e7e:	f083 0310 	eor.w	r3, r3, #16
 8002e82:	823b      	strh	r3, [r7, #16]
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	f083 0320 	eor.w	r3, r3, #32
 8002e8a:	823b      	strh	r3, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	8a3b      	ldrh	r3, [r7, #16]
 8002e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3788      	adds	r7, #136	; 0x88
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e009      	b.n	8002f04 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef0:	897a      	ldrh	r2, [r7, #10]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	80da      	strh	r2, [r3, #6]
 8002f18:	e00b      	b.n	8002f32 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e26c      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f60:	4b92      	ldr	r3, [pc, #584]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d00c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f6c:	4b8f      	ldr	r3, [pc, #572]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d112      	bne.n	8002f9e <HAL_RCC_OscConfig+0x5e>
 8002f78:	4b8c      	ldr	r3, [pc, #560]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06c      	beq.n	800306c <HAL_RCC_OscConfig+0x12c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d168      	bne.n	800306c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e246      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x76>
 8002fa8:	4b80      	ldr	r3, [pc, #512]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7f      	ldr	r2, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e02e      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x98>
 8002fbe:	4b7b      	ldr	r3, [pc, #492]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7a      	ldr	r2, [pc, #488]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b78      	ldr	r3, [pc, #480]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a77      	ldr	r2, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0xbc>
 8002fe2:	4b72      	ldr	r3, [pc, #456]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a71      	ldr	r2, [pc, #452]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xd4>
 8002ffc:	4b6b      	ldr	r3, [pc, #428]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a67      	ldr	r2, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fe04 	bl	8000c28 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fd fe00 	bl	8000c28 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1fa      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xe4>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd fdf0 	bl	8000c28 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fd fdec 	bl	8000c28 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1e6      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x10c>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307a:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003086:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x18c>
 8003092:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x176>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1ba      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4939      	ldr	r1, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	e03a      	b.n	8003142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fd fda5 	bl	8000c28 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fd fda1 	bl	8000c28 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e19b      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4927      	ldr	r1, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fd fd84 	bl	8000c28 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fd fd80 	bl	8000c28 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e17a      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d03a      	beq.n	80031c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d019      	beq.n	800318a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fd fd64 	bl	8000c28 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003164:	f7fd fd60 	bl	8000c28 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e15a      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003182:	2001      	movs	r0, #1
 8003184:	f000 faa6 	bl	80036d4 <RCC_Delay>
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7fd fd4a 	bl	8000c28 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003196:	e00f      	b.n	80031b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fd fd46 	bl	8000c28 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d908      	bls.n	80031b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e140      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	42420000 	.word	0x42420000
 80031b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	4b9e      	ldr	r3, [pc, #632]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e9      	bne.n	8003198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a6 	beq.w	800331e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b97      	ldr	r3, [pc, #604]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b94      	ldr	r3, [pc, #592]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a93      	ldr	r2, [pc, #588]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b8e      	ldr	r3, [pc, #568]	; (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b8b      	ldr	r3, [pc, #556]	; (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a8a      	ldr	r2, [pc, #552]	; (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fd07 	bl	8000c28 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fd fd03 	bl	8000c28 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0fd      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x312>
 8003244:	4b7b      	ldr	r3, [pc, #492]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a7a      	ldr	r2, [pc, #488]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e02d      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x334>
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a75      	ldr	r2, [pc, #468]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	e01c      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d10c      	bne.n	8003296 <HAL_RCC_OscConfig+0x356>
 800327c:	4b6d      	ldr	r3, [pc, #436]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a6c      	ldr	r2, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a69      	ldr	r2, [pc, #420]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x36e>
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a66      	ldr	r2, [pc, #408]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	4b64      	ldr	r3, [pc, #400]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a63      	ldr	r2, [pc, #396]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fcb7 	bl	8000c28 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fcb3 	bl	8000c28 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ab      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ee      	beq.n	80032be <HAL_RCC_OscConfig+0x37e>
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7fd fca1 	bl	8000c28 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fd fc9d 	bl	8000c28 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e095      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4a47      	ldr	r2, [pc, #284]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8081 	beq.w	800342a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003328:	4b42      	ldr	r3, [pc, #264]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d061      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d146      	bne.n	80033ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_OscConfig+0x4fc>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd fc71 	bl	8000c28 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334a:	f7fd fc6d 	bl	8000c28 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e067      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d108      	bne.n	8003384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	492d      	ldr	r1, [pc, #180]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a19      	ldr	r1, [r3, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	430b      	orrs	r3, r1
 8003396:	4927      	ldr	r1, [pc, #156]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_OscConfig+0x4fc>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fd fc41 	bl	8000c28 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fd fc3d 	bl	8000c28 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e037      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x46a>
 80033c8:	e02f      	b.n	800342a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_RCC_OscConfig+0x4fc>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fc2a 	bl	8000c28 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fc26 	bl	8000c28 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e020      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x498>
 80033f6:	e018      	b.n	800342a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e013      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_OscConfig+0x4f4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	429a      	cmp	r2, r3
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	42420060 	.word	0x42420060

08003440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d0      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d910      	bls.n	8003484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b67      	ldr	r3, [pc, #412]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4965      	ldr	r1, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d040      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d115      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e073      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06b      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4936      	ldr	r1, [pc, #216]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fd fb7a 	bl	8000c28 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fd fb76 	bl	8000c28 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e053      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d210      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4922      	ldr	r1, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1cc>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1d0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fad8 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40022000 	.word	0x40022000
 8003604:	40021000 	.word	0x40021000
 8003608:	0800a3a0 	.word	0x0800a3a0
 800360c:	2000001c 	.word	0x2000001c
 8003610:	20000020 	.word	0x20000020

08003614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b490      	push	{r4, r7}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800361c:	1d3c      	adds	r4, r7, #4
 800361e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003624:	f240 2301 	movw	r3, #513	; 0x201
 8003628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x46>
 8003652:	e02d      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	e02d      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	0c9b      	lsrs	r3, r3, #18
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003666:	4413      	add	r3, r2
 8003668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800366c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0c5b      	lsrs	r3, r3, #17
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003686:	4413      	add	r3, r2
 8003688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800368c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003692:	fb02 f203 	mul.w	r2, r2, r3
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e004      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	623b      	str	r3, [r7, #32]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	623b      	str	r3, [r7, #32]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc90      	pop	{r4, r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	0800a348 	.word	0x0800a348
 80036c8:	40021000 	.word	0x40021000
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	003d0900 	.word	0x003d0900

080036d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCC_Delay+0x34>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <RCC_Delay+0x38>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0a5b      	lsrs	r3, r3, #9
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036f0:	bf00      	nop
  }
  while (Delay --);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	60fa      	str	r2, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <RCC_Delay+0x1c>
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	2000001c 	.word	0x2000001c
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d07d      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b46      	ldr	r3, [pc, #280]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d118      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a42      	ldr	r2, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7fd fa5a 	bl	8000c28 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	e008      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fd fa56 	bl	8000c28 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e06d      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d027      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ca:	4a29      	ldr	r2, [pc, #164]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d014      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fd fa25 	bl	8000c28 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fd fa21 	bl	8000c28 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ee      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4917      	ldr	r1, [pc, #92]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	4313      	orrs	r3, r2
 8003814:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	42420440 	.word	0x42420440

0800387c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e041      	b.n	8003912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fc ff0c 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f000 fe04 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d001      	beq.n	8003934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_TIM_Base_Start+0x88>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_TIM_Base_Start+0x48>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d009      	beq.n	8003964 <HAL_TIM_Base_Start+0x48>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <HAL_TIM_Base_Start+0x8c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_Base_Start+0x48>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a13      	ldr	r2, [pc, #76]	; (80039ac <HAL_TIM_Base_Start+0x90>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d010      	beq.n	8003998 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e007      	b.n	8003998 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800

080039b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e041      	b.n	8003a46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f839 	bl	8003a4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fd6a 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_PWM_Start_DMA+0x28>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e022      	b.n	8003ace <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d109      	bne.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x42>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e015      	b.n	8003ace <HAL_TIM_PWM_Start_DMA+0x6e>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d109      	bne.n	8003abc <HAL_TIM_PWM_Start_DMA+0x5c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e008      	b.n	8003ace <HAL_TIM_PWM_Start_DMA+0x6e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e14e      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_TIM_PWM_Start_DMA+0x90>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e022      	b.n	8003b36 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d109      	bne.n	8003b0a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e015      	b.n	8003b36 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d109      	bne.n	8003b24 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e008      	b.n	8003b36 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d024      	beq.n	8003b84 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start_DMA+0xea>
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e114      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start_DMA+0xfa>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	e016      	b.n	8003b88 <HAL_TIM_PWM_Start_DMA+0x128>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	e00e      	b.n	8003b88 <HAL_TIM_PWM_Start_DMA+0x128>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	e006      	b.n	8003b88 <HAL_TIM_PWM_Start_DMA+0x128>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b82:	e001      	b.n	8003b88 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0f5      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	f200 80ae 	bhi.w	8003cec <HAL_TIM_PWM_Start_DMA+0x28c>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bcd 	.word	0x08003bcd
 8003b9c:	08003ced 	.word	0x08003ced
 8003ba0:	08003ced 	.word	0x08003ced
 8003ba4:	08003ced 	.word	0x08003ced
 8003ba8:	08003c15 	.word	0x08003c15
 8003bac:	08003ced 	.word	0x08003ced
 8003bb0:	08003ced 	.word	0x08003ced
 8003bb4:	08003ced 	.word	0x08003ced
 8003bb8:	08003c5d 	.word	0x08003c5d
 8003bbc:	08003ced 	.word	0x08003ced
 8003bc0:	08003ced 	.word	0x08003ced
 8003bc4:	08003ced 	.word	0x08003ced
 8003bc8:	08003ca5 	.word	0x08003ca5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	4a68      	ldr	r2, [pc, #416]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3334      	adds	r3, #52	; 0x34
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	f7fd f9ae 	bl	8000f54 <HAL_DMA_Start_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0b8      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	60da      	str	r2, [r3, #12]
      break;
 8003c12:	e06c      	b.n	8003cee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	461a      	mov	r2, r3
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	f7fd f98a 	bl	8000f54 <HAL_DMA_Start_IT>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e094      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c58:	60da      	str	r2, [r3, #12]
      break;
 8003c5a:	e048      	b.n	8003cee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a45      	ldr	r2, [pc, #276]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	333c      	adds	r3, #60	; 0x3c
 8003c80:	461a      	mov	r2, r3
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	f7fd f966 	bl	8000f54 <HAL_DMA_Start_IT>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e070      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca0:	60da      	str	r2, [r3, #12]
      break;
 8003ca2:	e024      	b.n	8003cee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3340      	adds	r3, #64	; 0x40
 8003cc8:	461a      	mov	r2, r3
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	f7fd f942 	bl	8000f54 <HAL_DMA_Start_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e04c      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ce8:	60da      	str	r2, [r3, #12]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003cec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fe66 	bl	80049c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d009      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d111      	bne.n	8003d62 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d010      	beq.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	e007      	b.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	080043b9 	.word	0x080043b9
 8003d80:	08004461 	.word	0x08004461
 8003d84:	08004327 	.word	0x08004327
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa78 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fa6b 	bl	80042ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fa7a 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0204 	mvn.w	r2, #4
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa4e 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa41 	bl	80042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa50 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0208 	mvn.w	r2, #8
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa24 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa17 	bl	80042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa26 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0210 	mvn.w	r2, #16
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9fa 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9ed 	bl	80042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f9fc 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0201 	mvn.w	r2, #1
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9c8 	bl	80042a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fdcd 	bl	8004ade <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9c9 	bl	8004302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0220 	mvn.w	r2, #32
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fd98 	bl	8004acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0ac      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	f200 809f 	bhi.w	800410c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	0800410d 	.word	0x0800410d
 8003fdc:	0800410d 	.word	0x0800410d
 8003fe0:	0800410d 	.word	0x0800410d
 8003fe4:	08004049 	.word	0x08004049
 8003fe8:	0800410d 	.word	0x0800410d
 8003fec:	0800410d 	.word	0x0800410d
 8003ff0:	0800410d 	.word	0x0800410d
 8003ff4:	0800408b 	.word	0x0800408b
 8003ff8:	0800410d 	.word	0x0800410d
 8003ffc:	0800410d 	.word	0x0800410d
 8004000:	0800410d 	.word	0x0800410d
 8004004:	080040cb 	.word	0x080040cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fabc 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0208 	orr.w	r2, r2, #8
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	619a      	str	r2, [r3, #24]
      break;
 8004046:	e062      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb02 	bl	8004658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6999      	ldr	r1, [r3, #24]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	021a      	lsls	r2, r3, #8
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	619a      	str	r2, [r3, #24]
      break;
 8004088:	e041      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fb4b 	bl	800472c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0208 	orr.w	r2, r2, #8
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0204 	bic.w	r2, r2, #4
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	61da      	str	r2, [r3, #28]
      break;
 80040c8:	e021      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fb95 	bl	8004800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	021a      	lsls	r2, r3, #8
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	61da      	str	r2, [r3, #28]
      break;
 800410a:	e000      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800410c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e0b3      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x180>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004170:	d03e      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004176:	f200 8087 	bhi.w	8004288 <HAL_TIM_ConfigClockSource+0x168>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	f000 8085 	beq.w	800428c <HAL_TIM_ConfigClockSource+0x16c>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d87f      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d01a      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0xa2>
 800418c:	2b70      	cmp	r3, #112	; 0x70
 800418e:	d87b      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 8004190:	2b60      	cmp	r3, #96	; 0x60
 8004192:	d050      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x116>
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d877      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d03c      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0xf6>
 800419c:	2b50      	cmp	r3, #80	; 0x50
 800419e:	d873      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d058      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x136>
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d86f      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d064      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x156>
 80041ac:	2b30      	cmp	r3, #48	; 0x30
 80041ae:	d86b      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d060      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x156>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d867      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05c      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x156>
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d05a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041c0:	e062      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f000 fbda 	bl	800498a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	609a      	str	r2, [r3, #8]
      break;
 80041ee:	e04e      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f000 fbc3 	bl	800498a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004212:	609a      	str	r2, [r3, #8]
      break;
 8004214:	e03b      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f000 fb3a 	bl	800489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2150      	movs	r1, #80	; 0x50
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fb91 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004234:	e02b      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f000 fb58 	bl	80048f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2160      	movs	r1, #96	; 0x60
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fb81 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004254:	e01b      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fb1a 	bl	800489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fb71 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004274:	e00b      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f000 fb68 	bl	8004956 <TIM_ITRx_SetConfig>
        break;
 8004286:	e002      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800428c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d107      	bne.n	800434e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434c:	e02a      	b.n	80043a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2202      	movs	r2, #2
 800435c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004366:	e01d      	b.n	80043a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d107      	bne.n	8004382 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004380:	e010      	b.n	80043a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d107      	bne.n	800439c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2208      	movs	r2, #8
 8004390:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800439a:	e003      	b.n	80043a4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff ffb5 	bl	8004314 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d10b      	bne.n	80043e8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d136      	bne.n	800444c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e6:	e031      	b.n	800444c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10b      	bne.n	800440a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d125      	bne.n	800444c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004408:	e020      	b.n	800444c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d10b      	bne.n	800442c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2204      	movs	r2, #4
 8004418:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d114      	bne.n	800444c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442a:	e00f      	b.n	800444c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d10a      	bne.n	800444c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff46 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d103      	bne.n	8004480 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	771a      	strb	r2, [r3, #28]
 800447e:	e019      	b.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2202      	movs	r2, #2
 800448e:	771a      	strb	r2, [r3, #28]
 8004490:	e010      	b.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d103      	bne.n	80044a4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2204      	movs	r2, #4
 80044a0:	771a      	strb	r2, [r3, #28]
 80044a2:	e007      	b.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d102      	bne.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2208      	movs	r2, #8
 80044b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff1b 	bl	80042f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a29      	ldr	r2, [pc, #164]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <TIM_Base_SetConfig+0xbc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0x30>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <TIM_Base_SetConfig+0xc0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d007      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <TIM_Base_SetConfig+0xbc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_Base_SetConfig+0x62>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <TIM_Base_SetConfig+0xc0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <TIM_Base_SetConfig+0xb8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d103      	bne.n	8004570 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	615a      	str	r2, [r3, #20]
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a13      	ldr	r2, [pc, #76]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00

08004658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0210 	bic.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0320 	bic.w	r3, r3, #32
 80046a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC2_SetConfig+0xd0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10d      	bne.n	80046d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC2_SetConfig+0xd0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d113      	bne.n	8004704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00

0800472c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_OC3_SetConfig+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <TIM_OC3_SetConfig+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d113      	bne.n	80047d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00

08004800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	031b      	lsls	r3, r3, #12
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <TIM_OC4_SetConfig+0x98>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d109      	bne.n	8004874 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00

0800489c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 030a 	bic.w	r3, r3, #10
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 0210 	bic.w	r2, r3, #16
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	f043 0307 	orr.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	609a      	str	r2, [r3, #8]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	401a      	ands	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1a      	ldr	r2, [r3, #32]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e046      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800

08004acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004af0:	b084      	sub	sp, #16
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	f107 0014 	add.w	r0, r7, #20
 8004afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr

08004b10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b88:	b084      	sub	sp, #16
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	f107 0014 	add.w	r0, r7, #20
 8004b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	b004      	add	sp, #16
 8004bc6:	4770      	bx	lr

08004bc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b09b      	sub	sp, #108	; 0x6c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d81f      	bhi.n	8004c3a <USB_ActivateEndpoint+0x72>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <USB_ActivateEndpoint+0x38>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c43 	.word	0x08004c43
 8004c0c:	08004c1f 	.word	0x08004c1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c1c:	e012      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c2a:	e00b      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c38:	e004      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c40:	e000      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>
      break;
 8004c42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	7b1b      	ldrb	r3, [r3, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8149 	bne.w	8004f48 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8084 	beq.w	8004dc8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	011a      	lsls	r2, r3, #4
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	88db      	ldrh	r3, [r3, #6]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	81fb      	strh	r3, [r7, #14]
 8004d02:	89fb      	ldrh	r3, [r7, #14]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <USB_ActivateEndpoint+0x17c>
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	81bb      	strh	r3, [r7, #12]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	89bb      	ldrh	r3, [r7, #12]
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d020      	beq.n	8004d8e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	813b      	strh	r3, [r7, #8]
 8004d64:	893b      	ldrh	r3, [r7, #8]
 8004d66:	f083 0320 	eor.w	r3, r3, #32
 8004d6a:	813b      	strh	r3, [r7, #8]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	893b      	ldrh	r3, [r7, #8]
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]
 8004d8c:	e27f      	b.n	800528e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da4:	817b      	strh	r3, [r7, #10]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]
 8004dc6:	e262      	b.n	800528e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	4413      	add	r3, r2
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	88db      	ldrh	r3, [r3, #6]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	4413      	add	r3, r2
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	011a      	lsls	r2, r3, #4
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d112      	bne.n	8004e4e <USB_ActivateEndpoint+0x286>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e02f      	b.n	8004eae <USB_ActivateEndpoint+0x2e6>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b3e      	cmp	r3, #62	; 0x3e
 8004e54:	d813      	bhi.n	8004e7e <USB_ActivateEndpoint+0x2b6>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <USB_ActivateEndpoint+0x2a8>
 8004e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	029b      	lsls	r3, r3, #10
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	e017      	b.n	8004eae <USB_ActivateEndpoint+0x2e6>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	663b      	str	r3, [r7, #96]	; 0x60
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <USB_ActivateEndpoint+0x2d0>
 8004e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e94:	3b01      	subs	r3, #1
 8004e96:	663b      	str	r3, [r7, #96]	; 0x60
 8004e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	029b      	lsls	r3, r3, #10
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	83fb      	strh	r3, [r7, #30]
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01b      	beq.n	8004efe <USB_ActivateEndpoint+0x336>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	83bb      	strh	r3, [r7, #28]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8bbb      	ldrh	r3, [r7, #28]
 8004eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f14:	837b      	strh	r3, [r7, #26]
 8004f16:	8b7b      	ldrh	r3, [r7, #26]
 8004f18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f1c:	837b      	strh	r3, [r7, #26]
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f24:	837b      	strh	r3, [r7, #26]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8b7b      	ldrh	r3, [r7, #26]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e1a2      	b.n	800528e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f94:	4413      	add	r3, r2
 8004f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	011a      	lsls	r2, r3, #4
 8004f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	891b      	ldrh	r3, [r3, #8]
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc8:	4413      	add	r3, r2
 8004fca:	653b      	str	r3, [r7, #80]	; 0x50
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	895b      	ldrh	r3, [r3, #10]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 8091 	bne.w	8005118 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005004:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01b      	beq.n	8005046 <USB_ActivateEndpoint+0x47e>
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005024:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005042:	b29b      	uxth	r3, r3
 8005044:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	873b      	strh	r3, [r7, #56]	; 0x38
 8005054:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01b      	beq.n	8005096 <USB_ActivateEndpoint+0x4ce>
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f4:	867b      	strh	r3, [r7, #50]	; 0x32
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]
 8005116:	e0ba      	b.n	800528e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005128:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800512c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01d      	beq.n	8005170 <USB_ActivateEndpoint+0x5a8>
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01d      	beq.n	80051c8 <USB_ActivateEndpoint+0x600>
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	441a      	add	r2, r3
 80051b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d024      	beq.n	800521a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051ee:	f083 0320 	eor.w	r3, r3, #32
 80051f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
 8005218:	e01d      	b.n	8005256 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005230:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800528e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005292:	4618      	mov	r0, r3
 8005294:	376c      	adds	r7, #108	; 0x6c
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800529c:	b480      	push	{r7}
 800529e:	b08d      	sub	sp, #52	; 0x34
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	7b1b      	ldrb	r3, [r3, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 808e 	bne.w	80053cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d044      	beq.n	8005342 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	81bb      	strh	r3, [r7, #12]
 80052c6:	89bb      	ldrh	r3, [r7, #12]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <USB_DeactivateEndpoint+0x6c>
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	817b      	strh	r3, [r7, #10]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	813b      	strh	r3, [r7, #8]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	893b      	ldrh	r3, [r7, #8]
 800532c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	b29b      	uxth	r3, r3
 800533e:	8013      	strh	r3, [r2, #0]
 8005340:	e192      	b.n	8005668 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	827b      	strh	r3, [r7, #18]
 8005350:	8a7b      	ldrh	r3, [r7, #18]
 8005352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01b      	beq.n	8005392 <USB_DeactivateEndpoint+0xf6>
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	823b      	strh	r3, [r7, #16]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	8a3b      	ldrh	r3, [r7, #16]
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	81fb      	strh	r3, [r7, #14]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	89fb      	ldrh	r3, [r7, #14]
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
 80053ca:	e14d      	b.n	8005668 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 80a5 	bne.w	8005520 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	843b      	strh	r3, [r7, #32]
 80053e4:	8c3b      	ldrh	r3, [r7, #32]
 80053e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01b      	beq.n	8005426 <USB_DeactivateEndpoint+0x18a>
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	83fb      	strh	r3, [r7, #30]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	8bfb      	ldrh	r3, [r7, #30]
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	83bb      	strh	r3, [r7, #28]
 8005434:	8bbb      	ldrh	r3, [r7, #28]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <USB_DeactivateEndpoint+0x1da>
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	837b      	strh	r3, [r7, #26]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8b7b      	ldrh	r3, [r7, #26]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	833b      	strh	r3, [r7, #24]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	8b3b      	ldrh	r3, [r7, #24]
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	82fb      	strh	r3, [r7, #22]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8afb      	ldrh	r3, [r7, #22]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fc:	82bb      	strh	r3, [r7, #20]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	8abb      	ldrh	r3, [r7, #20]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
 800551e:	e0a3      	b.n	8005668 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800552e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <USB_DeactivateEndpoint+0x2d4>
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800557e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <USB_DeactivateEndpoint+0x324>
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	853b      	strh	r3, [r7, #40]	; 0x28
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	847b      	strh	r3, [r7, #34]	; 0x22
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005664:	b29b      	uxth	r3, r3
 8005666:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3734      	adds	r7, #52	; 0x34
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0cc      	sub	sp, #304	; 0x130
 8005678:	af00      	add	r7, sp, #0
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	6018      	str	r0, [r3, #0]
 800567e:	463b      	mov	r3, r7
 8005680:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 872e 	bne.w	80064ea <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d905      	bls.n	80056aa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80056a8:	e004      	b.n	80056b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	7b1b      	ldrb	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d134      	bne.n	8005728 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6959      	ldr	r1, [r3, #20]
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	88da      	ldrh	r2, [r3, #6]
 80056ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	1d38      	adds	r0, r7, #4
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	f001 fc03 	bl	8006ede <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056d8:	f107 0310 	add.w	r3, r7, #16
 80056dc:	1d3a      	adds	r2, r7, #4
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4619      	mov	r1, r3
 80056ee:	f107 0310 	add.w	r3, r7, #16
 80056f2:	f107 0210 	add.w	r2, r7, #16
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	440a      	add	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4413      	add	r3, r2
 800570c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	b29a      	uxth	r2, r3
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	f000 beac 	b.w	8006480 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	2b02      	cmp	r3, #2
 8005730:	f040 838c 	bne.w	8005e4c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	f240 8330 	bls.w	8005da6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	463b      	mov	r3, r7
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	1ad2      	subs	r2, r2, r3
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 819e 	beq.w	8005af4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057bc:	1d3a      	adds	r2, r7, #4
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d17a      	bne.n	80058c2 <USB_EPStartXfer+0x24e>
 80057cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d0:	1d3a      	adds	r2, r7, #4
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4619      	mov	r1, r3
 80057e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	440a      	add	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11a      	bne.n	8005848 <USB_EPStartXfer+0x1d4>
 8005812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005820:	b29a      	uxth	r2, r3
 8005822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583c:	b29a      	uxth	r2, r3
 800583e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e062      	b.n	800590e <USB_EPStartXfer+0x29a>
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	2b3e      	cmp	r3, #62	; 0x3e
 800584e:	d819      	bhi.n	8005884 <USB_EPStartXfer+0x210>
 8005850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800585a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <USB_EPStartXfer+0x1fc>
 8005866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800586a:	3301      	adds	r3, #1
 800586c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29a      	uxth	r2, r3
 800587a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e044      	b.n	800590e <USB_EPStartXfer+0x29a>
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <USB_EPStartXfer+0x230>
 800589a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800589e:	3b01      	subs	r3, #1
 80058a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	e025      	b.n	800590e <USB_EPStartXfer+0x29a>
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d120      	bne.n	800590e <USB_EPStartXfer+0x29a>
 80058cc:	1d3b      	adds	r3, r7, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4619      	mov	r1, r3
 80058d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	440a      	add	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4413      	add	r3, r2
 80058f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005904:	b29a      	uxth	r2, r3
 8005906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	895b      	ldrh	r3, [r3, #10]
 8005914:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6959      	ldr	r1, [r3, #20]
 800591e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005922:	b29b      	uxth	r3, r3
 8005924:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005928:	1d38      	adds	r0, r7, #4
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	f001 fad7 	bl	8006ede <USB_WritePMA>
            ep->xfer_buff += len;
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593a:	441a      	add	r2, r3
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	d909      	bls.n	8005966 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	1ad2      	subs	r2, r2, r3
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	621a      	str	r2, [r3, #32]
 8005964:	e008      	b.n	8005978 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2200      	movs	r2, #0
 8005976:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d17a      	bne.n	8005a78 <USB_EPStartXfer+0x404>
 8005982:	f107 0318 	add.w	r3, r7, #24
 8005986:	1d3a      	adds	r2, r7, #4
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	f107 0218 	add.w	r2, r7, #24
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	440a      	add	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	011a      	lsls	r2, r3, #4
 80059ae:	f107 0318 	add.w	r3, r7, #24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11a      	bne.n	80059fe <USB_EPStartXfer+0x38a>
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e067      	b.n	8005ace <USB_EPStartXfer+0x45a>
 80059fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a02:	2b3e      	cmp	r3, #62	; 0x3e
 8005a04:	d819      	bhi.n	8005a3a <USB_EPStartXfer+0x3c6>
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_EPStartXfer+0x3b2>
 8005a1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	029b      	lsls	r3, r3, #10
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e049      	b.n	8005ace <USB_EPStartXfer+0x45a>
 8005a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <USB_EPStartXfer+0x3e6>
 8005a50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a54:	3b01      	subs	r3, #1
 8005a56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f107 0314 	add.w	r3, r7, #20
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e02a      	b.n	8005ace <USB_EPStartXfer+0x45a>
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d125      	bne.n	8005ace <USB_EPStartXfer+0x45a>
 8005a82:	f107 0320 	add.w	r3, r7, #32
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4619      	mov	r1, r3
 8005a98:	f107 0320 	add.w	r3, r7, #32
 8005a9c:	f107 0220 	add.w	r2, r7, #32
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	011a      	lsls	r2, r3, #4
 8005aae:	f107 0320 	add.w	r3, r7, #32
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	f107 031c 	add.w	r3, r7, #28
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	891b      	ldrh	r3, [r3, #8]
 8005ad4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6959      	ldr	r1, [r3, #20]
 8005ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ae8:	1d38      	adds	r0, r7, #4
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	f001 f9f7 	bl	8006ede <USB_WritePMA>
 8005af0:	f000 bcc6 	b.w	8006480 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d164      	bne.n	8005bc8 <USB_EPStartXfer+0x554>
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b12:	4413      	add	r3, r2
 8005b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	011a      	lsls	r2, r3, #4
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
 8005b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d112      	bne.n	8005b56 <USB_EPStartXfer+0x4e2>
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e057      	b.n	8005c06 <USB_EPStartXfer+0x592>
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5c:	d817      	bhi.n	8005b8e <USB_EPStartXfer+0x51a>
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <USB_EPStartXfer+0x50a>
 8005b74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e03b      	b.n	8005c06 <USB_EPStartXfer+0x592>
 8005b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <USB_EPStartXfer+0x53a>
 8005ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	029b      	lsls	r3, r3, #10
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	e01e      	b.n	8005c06 <USB_EPStartXfer+0x592>
 8005bc8:	463b      	mov	r3, r7
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d119      	bne.n	8005c06 <USB_EPStartXfer+0x592>
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	4413      	add	r3, r2
 8005be8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011a      	lsls	r2, r3, #4
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	891b      	ldrh	r3, [r3, #8]
 8005c0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6959      	ldr	r1, [r3, #20]
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c20:	1d38      	adds	r0, r7, #4
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	f001 f95b 	bl	8006ede <USB_WritePMA>
            ep->xfer_buff += len;
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c32:	441a      	add	r2, r3
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a1a      	ldr	r2, [r3, #32]
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d909      	bls.n	8005c5e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	1ad2      	subs	r2, r2, r3
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	621a      	str	r2, [r3, #32]
 8005c5c:	e008      	b.n	8005c70 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	643b      	str	r3, [r7, #64]	; 0x40
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d164      	bne.n	8005d4a <USB_EPStartXfer+0x6d6>
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	4413      	add	r3, r2
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	011a      	lsls	r2, r3, #4
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8005caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <USB_EPStartXfer+0x664>
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e054      	b.n	8005d82 <USB_EPStartXfer+0x70e>
 8005cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d817      	bhi.n	8005d10 <USB_EPStartXfer+0x69c>
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USB_EPStartXfer+0x68c>
 8005cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e038      	b.n	8005d82 <USB_EPStartXfer+0x70e>
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_EPStartXfer+0x6bc>
 8005d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	801a      	strh	r2, [r3, #0]
 8005d48:	e01b      	b.n	8005d82 <USB_EPStartXfer+0x70e>
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d116      	bne.n	8005d82 <USB_EPStartXfer+0x70e>
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d62:	4413      	add	r3, r2
 8005d64:	643b      	str	r3, [r7, #64]	; 0x40
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	895b      	ldrh	r3, [r3, #10]
 8005d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d9c:	1d38      	adds	r0, r7, #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	f001 f89d 	bl	8006ede <USB_WritePMA>
 8005da4:	e36c      	b.n	8006480 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e08:	4413      	add	r3, r2
 8005e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	891b      	ldrh	r3, [r3, #8]
 8005e2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6959      	ldr	r1, [r3, #20]
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e42:	1d38      	adds	r0, r7, #4
 8005e44:	6800      	ldr	r0, [r0, #0]
 8005e46:	f001 f84a 	bl	8006ede <USB_WritePMA>
 8005e4a:	e319      	b.n	8006480 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8162 	beq.w	8006182 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d164      	bne.n	8005f9a <USB_EPStartXfer+0x926>
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee4:	4413      	add	r3, r2
 8005ee6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	011a      	lsls	r2, r3, #4
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8005efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d112      	bne.n	8005f28 <USB_EPStartXfer+0x8b4>
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	e057      	b.n	8005fd8 <USB_EPStartXfer+0x964>
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2e:	d817      	bhi.n	8005f60 <USB_EPStartXfer+0x8ec>
 8005f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <USB_EPStartXfer+0x8dc>
 8005f46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e03b      	b.n	8005fd8 <USB_EPStartXfer+0x964>
 8005f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <USB_EPStartXfer+0x90c>
 8005f76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	029b      	lsls	r3, r3, #10
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e01e      	b.n	8005fd8 <USB_EPStartXfer+0x964>
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d119      	bne.n	8005fd8 <USB_EPStartXfer+0x964>
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	895b      	ldrh	r3, [r3, #10]
 8005fde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6959      	ldr	r1, [r3, #20]
 8005fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ff2:	1d38      	adds	r0, r7, #4
 8005ff4:	6800      	ldr	r0, [r0, #0]
 8005ff6:	f000 ff72 	bl	8006ede <USB_WritePMA>
          ep->xfer_buff += len;
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006004:	441a      	add	r2, r3
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800600c:	463b      	mov	r3, r7
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	d909      	bls.n	8006030 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800601c:	463b      	mov	r3, r7
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	1ad2      	subs	r2, r2, r3
 8006028:	463b      	mov	r3, r7
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	621a      	str	r2, [r3, #32]
 800602e:	e008      	b.n	8006042 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006030:	463b      	mov	r3, r7
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800603a:	463b      	mov	r3, r7
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 821a 	beq.w	8006480 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d164      	bne.n	8006120 <USB_EPStartXfer+0xaac>
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	66bb      	str	r3, [r7, #104]	; 0x68
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800606a:	4413      	add	r3, r2
 800606c:	66bb      	str	r3, [r7, #104]	; 0x68
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006078:	4413      	add	r3, r2
 800607a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800607e:	667b      	str	r3, [r7, #100]	; 0x64
 8006080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d112      	bne.n	80060ae <USB_EPStartXfer+0xa3a>
 8006088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006092:	b29a      	uxth	r2, r3
 8006094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e057      	b.n	800615e <USB_EPStartXfer+0xaea>
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	2b3e      	cmp	r3, #62	; 0x3e
 80060b4:	d817      	bhi.n	80060e6 <USB_EPStartXfer+0xa72>
 80060b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <USB_EPStartXfer+0xa62>
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d0:	3301      	adds	r3, #1
 80060d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	b29b      	uxth	r3, r3
 80060dc:	029b      	lsls	r3, r3, #10
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e03b      	b.n	800615e <USB_EPStartXfer+0xaea>
 80060e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <USB_EPStartXfer+0xa92>
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006100:	3b01      	subs	r3, #1
 8006102:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	b29b      	uxth	r3, r3
 800610c:	029b      	lsls	r3, r3, #10
 800610e:	b29b      	uxth	r3, r3
 8006110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006118:	b29a      	uxth	r2, r3
 800611a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e01e      	b.n	800615e <USB_EPStartXfer+0xaea>
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d119      	bne.n	800615e <USB_EPStartXfer+0xaea>
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	673b      	str	r3, [r7, #112]	; 0x70
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613e:	4413      	add	r3, r2
 8006140:	673b      	str	r3, [r7, #112]	; 0x70
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	011a      	lsls	r2, r3, #4
 800614a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800614c:	4413      	add	r3, r2
 800614e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	b29a      	uxth	r2, r3
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800615e:	463b      	mov	r3, r7
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	891b      	ldrh	r3, [r3, #8]
 8006164:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006168:	463b      	mov	r3, r7
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6959      	ldr	r1, [r3, #20]
 800616e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006172:	b29b      	uxth	r3, r3
 8006174:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006178:	1d38      	adds	r0, r7, #4
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	f000 feaf 	bl	8006ede <USB_WritePMA>
 8006180:	e17e      	b.n	8006480 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d16f      	bne.n	800626c <USB_EPStartXfer+0xbf8>
 800618c:	1d3b      	adds	r3, r7, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061a4:	4413      	add	r3, r2
 80061a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	011a      	lsls	r2, r3, #4
 80061b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b6:	4413      	add	r3, r2
 80061b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d116      	bne.n	80061f6 <USB_EPStartXfer+0xb82>
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e05f      	b.n	80062b6 <USB_EPStartXfer+0xc42>
 80061f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fa:	2b3e      	cmp	r3, #62	; 0x3e
 80061fc:	d818      	bhi.n	8006230 <USB_EPStartXfer+0xbbc>
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <USB_EPStartXfer+0xbaa>
 8006214:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006218:	3301      	adds	r3, #1
 800621a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800621e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006222:	b29b      	uxth	r3, r3
 8006224:	029b      	lsls	r3, r3, #10
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e042      	b.n	80062b6 <USB_EPStartXfer+0xc42>
 8006230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USB_EPStartXfer+0xbdc>
 8006246:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800624a:	3b01      	subs	r3, #1
 800624c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006250:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006254:	b29b      	uxth	r3, r3
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	b29b      	uxth	r3, r3
 800625a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	e024      	b.n	80062b6 <USB_EPStartXfer+0xc42>
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d11f      	bne.n	80062b6 <USB_EPStartXfer+0xc42>
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800628e:	4413      	add	r3, r2
 8006290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	891b      	ldrh	r3, [r3, #8]
 80062bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6959      	ldr	r1, [r3, #20]
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062d0:	1d38      	adds	r0, r7, #4
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	f000 fe03 	bl	8006ede <USB_WritePMA>
          ep->xfer_buff += len;
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e2:	441a      	add	r2, r3
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062ea:	463b      	mov	r3, r7
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d909      	bls.n	800630e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	621a      	str	r2, [r3, #32]
 800630c:	e008      	b.n	8006320 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2200      	movs	r2, #0
 800631e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80ab 	beq.w	8006480 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d16f      	bne.n	800641c <USB_EPStartXfer+0xda8>
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006354:	4413      	add	r3, r2
 8006356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006366:	4413      	add	r3, r2
 8006368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800636c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d116      	bne.n	80063a6 <USB_EPStartXfer+0xd32>
 8006378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e05b      	b.n	800645e <USB_EPStartXfer+0xdea>
 80063a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063aa:	2b3e      	cmp	r3, #62	; 0x3e
 80063ac:	d818      	bhi.n	80063e0 <USB_EPStartXfer+0xd6c>
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <USB_EPStartXfer+0xd5a>
 80063c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c8:	3301      	adds	r3, #1
 80063ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e03e      	b.n	800645e <USB_EPStartXfer+0xdea>
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <USB_EPStartXfer+0xd8c>
 80063f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fa:	3b01      	subs	r3, #1
 80063fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006404:	b29b      	uxth	r3, r3
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	b29b      	uxth	r3, r3
 800640a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e020      	b.n	800645e <USB_EPStartXfer+0xdea>
 800641c:	463b      	mov	r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d11b      	bne.n	800645e <USB_EPStartXfer+0xdea>
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006436:	4413      	add	r3, r2
 8006438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	011a      	lsls	r2, r3, #4
 8006444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006448:	4413      	add	r3, r2
 800644a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800644e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	895b      	ldrh	r3, [r3, #10]
 8006464:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6959      	ldr	r1, [r3, #20]
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	b29b      	uxth	r3, r3
 8006474:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006478:	1d38      	adds	r0, r7, #4
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	f000 fd2f 	bl	8006ede <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	463b      	mov	r3, r7
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f107 020a 	add.w	r2, r7, #10
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649e:	8013      	strh	r3, [r2, #0]
 80064a0:	f107 030a 	add.w	r3, r7, #10
 80064a4:	f107 020a 	add.w	r2, r7, #10
 80064a8:	8812      	ldrh	r2, [r2, #0]
 80064aa:	f082 0210 	eor.w	r2, r2, #16
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	f107 030a 	add.w	r3, r7, #10
 80064b4:	f107 020a 	add.w	r2, r7, #10
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	f082 0220 	eor.w	r2, r2, #32
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	463b      	mov	r3, r7
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	f107 030a 	add.w	r3, r7, #10
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
 80064e8:	e3b5      	b.n	8006c56 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064ea:	463b      	mov	r3, r7
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 8090 	bne.w	8006616 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064f6:	463b      	mov	r3, r7
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	429a      	cmp	r2, r3
 8006504:	d90e      	bls.n	8006524 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	619a      	str	r2, [r3, #24]
 8006522:	e008      	b.n	8006536 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800652e:	463b      	mov	r3, r7
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006546:	b29b      	uxth	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800654e:	4413      	add	r3, r2
 8006550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	011a      	lsls	r2, r3, #4
 800655c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006560:	4413      	add	r3, r2
 8006562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d116      	bne.n	80065a0 <USB_EPStartXfer+0xf2c>
 8006572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e32c      	b.n	8006bfa <USB_EPStartXfer+0x1586>
 80065a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a4:	2b3e      	cmp	r3, #62	; 0x3e
 80065a6:	d818      	bhi.n	80065da <USB_EPStartXfer+0xf66>
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <USB_EPStartXfer+0xf54>
 80065be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c2:	3301      	adds	r3, #1
 80065c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e30f      	b.n	8006bfa <USB_EPStartXfer+0x1586>
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <USB_EPStartXfer+0xf86>
 80065f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f4:	3b01      	subs	r3, #1
 80065f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fe:	b29b      	uxth	r3, r3
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e2f1      	b.n	8006bfa <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	78db      	ldrb	r3, [r3, #3]
 800661c:	2b02      	cmp	r3, #2
 800661e:	f040 818f 	bne.w	8006940 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d175      	bne.n	8006718 <USB_EPStartXfer+0x10a4>
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006644:	4413      	add	r3, r2
 8006646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	011a      	lsls	r2, r3, #4
 8006652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006656:	4413      	add	r3, r2
 8006658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006660:	463b      	mov	r3, r7
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d116      	bne.n	8006698 <USB_EPStartXfer+0x1024>
 800666a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e065      	b.n	8006764 <USB_EPStartXfer+0x10f0>
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b3e      	cmp	r3, #62	; 0x3e
 80066a0:	d81a      	bhi.n	80066d8 <USB_EPStartXfer+0x1064>
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <USB_EPStartXfer+0x1052>
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	3301      	adds	r3, #1
 80066c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	e045      	b.n	8006764 <USB_EPStartXfer+0x10f0>
 80066d8:	463b      	mov	r3, r7
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <USB_EPStartXfer+0x1088>
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006700:	b29b      	uxth	r3, r3
 8006702:	029b      	lsls	r3, r3, #10
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e025      	b.n	8006764 <USB_EPStartXfer+0x10f0>
 8006718:	463b      	mov	r3, r7
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d120      	bne.n	8006764 <USB_EPStartXfer+0x10f0>
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673a:	4413      	add	r3, r2
 800673c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800674c:	4413      	add	r3, r2
 800674e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006752:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006756:	463b      	mov	r3, r7
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d175      	bne.n	8006862 <USB_EPStartXfer+0x11ee>
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800678e:	4413      	add	r3, r2
 8006790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006794:	463b      	mov	r3, r7
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	011a      	lsls	r2, r3, #4
 800679c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067a0:	4413      	add	r3, r2
 80067a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d116      	bne.n	80067e2 <USB_EPStartXfer+0x116e>
 80067b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e061      	b.n	80068a6 <USB_EPStartXfer+0x1232>
 80067e2:	463b      	mov	r3, r7
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ea:	d81a      	bhi.n	8006822 <USB_EPStartXfer+0x11ae>
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f8:	463b      	mov	r3, r7
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <USB_EPStartXfer+0x119c>
 8006806:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800680a:	3301      	adds	r3, #1
 800680c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006810:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006814:	b29b      	uxth	r3, r3
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e041      	b.n	80068a6 <USB_EPStartXfer+0x1232>
 8006822:	463b      	mov	r3, r7
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <USB_EPStartXfer+0x11d2>
 800683c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006840:	3b01      	subs	r3, #1
 8006842:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006846:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29b      	uxth	r3, r3
 8006850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006858:	b29a      	uxth	r2, r3
 800685a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e021      	b.n	80068a6 <USB_EPStartXfer+0x1232>
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d11c      	bne.n	80068a6 <USB_EPStartXfer+0x1232>
 800686c:	1d3b      	adds	r3, r7, #4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	011a      	lsls	r2, r3, #4
 800688a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800688e:	4413      	add	r3, r2
 8006890:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 81a4 	beq.w	8006bfa <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <USB_EPStartXfer+0x126a>
 80068d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 8187 	bne.w	8006bfa <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 8180 	bne.w	8006bfa <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	463b      	mov	r3, r7
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006918:	1d3b      	adds	r3, r7, #4
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e15c      	b.n	8006bfa <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006940:	463b      	mov	r3, r7
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	2b01      	cmp	r3, #1
 8006948:	f040 8155 	bne.w	8006bf6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	463b      	mov	r3, r7
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d90e      	bls.n	800697a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	619a      	str	r2, [r3, #24]
 8006978:	e008      	b.n	800698c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d16f      	bne.n	8006a76 <USB_EPStartXfer+0x1402>
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800699e:	1d3b      	adds	r3, r7, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069ae:	4413      	add	r3, r2
 80069b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d116      	bne.n	8006a00 <USB_EPStartXfer+0x138c>
 80069d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069de:	b29a      	uxth	r2, r3
 80069e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	e05f      	b.n	8006ac0 <USB_EPStartXfer+0x144c>
 8006a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a04:	2b3e      	cmp	r3, #62	; 0x3e
 8006a06:	d818      	bhi.n	8006a3a <USB_EPStartXfer+0x13c6>
 8006a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <USB_EPStartXfer+0x13b4>
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a22:	3301      	adds	r3, #1
 8006a24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	029b      	lsls	r3, r3, #10
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e042      	b.n	8006ac0 <USB_EPStartXfer+0x144c>
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <USB_EPStartXfer+0x13e6>
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a54:	3b01      	subs	r3, #1
 8006a56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e024      	b.n	8006ac0 <USB_EPStartXfer+0x144c>
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d11f      	bne.n	8006ac0 <USB_EPStartXfer+0x144c>
 8006a80:	1d3b      	adds	r3, r7, #4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a88:	1d3b      	adds	r3, r7, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	4413      	add	r3, r2
 8006a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	011a      	lsls	r2, r3, #4
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	4413      	add	r3, r2
 8006aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d16f      	bne.n	8006bb2 <USB_EPStartXfer+0x153e>
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aea:	4413      	add	r3, r2
 8006aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006af0:	463b      	mov	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	011a      	lsls	r2, r3, #4
 8006af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d116      	bne.n	8006b3c <USB_EPStartXfer+0x14c8>
 8006b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e05e      	b.n	8006bfa <USB_EPStartXfer+0x1586>
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	2b3e      	cmp	r3, #62	; 0x3e
 8006b42:	d818      	bhi.n	8006b76 <USB_EPStartXfer+0x1502>
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USB_EPStartXfer+0x14f0>
 8006b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e041      	b.n	8006bfa <USB_EPStartXfer+0x1586>
 8006b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USB_EPStartXfer+0x1522>
 8006b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b90:	3b01      	subs	r3, #1
 8006b92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	029b      	lsls	r3, r3, #10
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e023      	b.n	8006bfa <USB_EPStartXfer+0x1586>
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d11e      	bne.n	8006bfa <USB_EPStartXfer+0x1586>
 8006bbc:	1d3b      	adds	r3, r7, #4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bcc:	4413      	add	r3, r2
 8006bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	011a      	lsls	r2, r3, #4
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	4413      	add	r3, r2
 8006be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e001      	b.n	8006bfa <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e02e      	b.n	8006c58 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c20:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c2c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d020      	beq.n	8006cb6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8a:	81bb      	strh	r3, [r7, #12]
 8006c8c:	89bb      	ldrh	r3, [r7, #12]
 8006c8e:	f083 0310 	eor.w	r3, r3, #16
 8006c92:	81bb      	strh	r3, [r7, #12]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	89bb      	ldrh	r3, [r7, #12]
 8006ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	8013      	strh	r3, [r2, #0]
 8006cb4:	e01f      	b.n	8006cf6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	81fb      	strh	r3, [r7, #14]
 8006cce:	89fb      	ldrh	r3, [r7, #14]
 8006cd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cd4:	81fb      	strh	r3, [r7, #14]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	89fb      	ldrh	r3, [r7, #14]
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	7b1b      	ldrb	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 809d 	bne.w	8006e50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d04c      	beq.n	8006db8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	823b      	strh	r3, [r7, #16]
 8006d2c:	8a3b      	ldrh	r3, [r7, #16]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01b      	beq.n	8006d6e <USB_EPClearStall+0x6c>
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4c:	81fb      	strh	r3, [r7, #14]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	78db      	ldrb	r3, [r3, #3]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d06c      	beq.n	8006e50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8c:	81bb      	strh	r3, [r7, #12]
 8006d8e:	89bb      	ldrh	r3, [r7, #12]
 8006d90:	f083 0320 	eor.w	r3, r3, #32
 8006d94:	81bb      	strh	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	89bb      	ldrh	r3, [r7, #12]
 8006da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8013      	strh	r3, [r2, #0]
 8006db6:	e04b      	b.n	8006e50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	82fb      	strh	r3, [r7, #22]
 8006dc6:	8afb      	ldrh	r3, [r7, #22]
 8006dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <USB_EPClearStall+0x106>
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	82bb      	strh	r3, [r7, #20]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	441a      	add	r2, r3
 8006df2:	8abb      	ldrh	r3, [r7, #20]
 8006df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	827b      	strh	r3, [r7, #18]
 8006e20:	8a7b      	ldrh	r3, [r7, #18]
 8006e22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e26:	827b      	strh	r3, [r7, #18]
 8006e28:	8a7b      	ldrh	r3, [r7, #18]
 8006e2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e2e:	827b      	strh	r3, [r7, #18]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	8a7b      	ldrh	r3, [r7, #18]
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2280      	movs	r2, #128	; 0x80
 8006e72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b08d      	sub	sp, #52	; 0x34
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	461a      	mov	r2, r3
 8006eec:	460b      	mov	r3, r1
 8006eee:	80fb      	strh	r3, [r7, #6]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ef4:	88bb      	ldrh	r3, [r7, #4]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	005a      	lsls	r2, r3, #1
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f16:	e01e      	b.n	8006f56 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	3301      	adds	r3, #1
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	3302      	adds	r3, #2
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	3302      	adds	r3, #2
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	3b01      	subs	r3, #1
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1dd      	bne.n	8006f18 <USB_WritePMA+0x3a>
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3734      	adds	r7, #52	; 0x34
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b08b      	sub	sp, #44	; 0x2c
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4611      	mov	r1, r2
 8006f74:	461a      	mov	r2, r3
 8006f76:	460b      	mov	r3, r1
 8006f78:	80fb      	strh	r3, [r7, #6]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f7e:	88bb      	ldrh	r3, [r7, #4]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	005a      	lsls	r2, r3, #1
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa0:	e01b      	b.n	8006fda <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	3302      	adds	r3, #2
 8006fae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e0      	bne.n	8006fa2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fe0:	88bb      	ldrh	r3, [r7, #4]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	701a      	strb	r2, [r3, #0]
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	372c      	adds	r7, #44	; 0x2c
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr

08007006 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7c1b      	ldrb	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d115      	bne.n	800704a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800701e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007022:	2202      	movs	r2, #2
 8007024:	2181      	movs	r1, #129	; 0x81
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 feef 	bl	8008e0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007036:	2202      	movs	r2, #2
 8007038:	2101      	movs	r1, #1
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fee5 	bl	8008e0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007048:	e012      	b.n	8007070 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	2202      	movs	r2, #2
 800704e:	2181      	movs	r1, #129	; 0x81
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 feda 	bl	8008e0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	2202      	movs	r2, #2
 8007060:	2101      	movs	r1, #1
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fed1 	bl	8008e0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007070:	2308      	movs	r3, #8
 8007072:	2203      	movs	r2, #3
 8007074:	2182      	movs	r1, #130	; 0x82
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fec7 	bl	8008e0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007082:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007086:	f001 ffe7 	bl	8009058 <USBD_static_malloc>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
 80070a0:	e026      	b.n	80070f0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	7c1b      	ldrb	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d109      	bne.n	80070e0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d6:	2101      	movs	r1, #1
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 ff87 	bl	8008fec <USBD_LL_PrepareReceive>
 80070de:	e007      	b.n	80070f0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	2101      	movs	r1, #1
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 ff7e 	bl	8008fec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800710a:	2181      	movs	r1, #129	; 0x81
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fea2 	bl	8008e56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fe9b 	bl	8008e56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007128:	2182      	movs	r1, #130	; 0x82
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fe93 	bl	8008e56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007150:	4618      	mov	r0, r3
 8007152:	f001 ff8d 	bl	8009070 <USBD_static_free>
    pdev->pClassData = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718e:	2b00      	cmp	r3, #0
 8007190:	d039      	beq.n	8007206 <USBD_CDC_Setup+0x9e>
 8007192:	2b20      	cmp	r3, #32
 8007194:	d17f      	bne.n	8007296 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d029      	beq.n	80071f2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b25b      	sxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da11      	bge.n	80071cc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80071b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	88d2      	ldrh	r2, [r2, #6]
 80071ba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071bc:	6939      	ldr	r1, [r7, #16]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fa0a 	bl	80085de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071ca:	e06b      	b.n	80072a4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	785a      	ldrb	r2, [r3, #1]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fa25 	bl	800863a <USBD_CtlPrepareRx>
      break;
 80071f0:	e058      	b.n	80072a4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	7850      	ldrb	r0, [r2, #1]
 80071fe:	2200      	movs	r2, #0
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	4798      	blx	r3
      break;
 8007204:	e04e      	b.n	80072a4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b0b      	cmp	r3, #11
 800720c:	d02e      	beq.n	800726c <USBD_CDC_Setup+0x104>
 800720e:	2b0b      	cmp	r3, #11
 8007210:	dc38      	bgt.n	8007284 <USBD_CDC_Setup+0x11c>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <USBD_CDC_Setup+0xb4>
 8007216:	2b0a      	cmp	r3, #10
 8007218:	d014      	beq.n	8007244 <USBD_CDC_Setup+0xdc>
 800721a:	e033      	b.n	8007284 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007222:	2b03      	cmp	r3, #3
 8007224:	d107      	bne.n	8007236 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007226:	f107 030c 	add.w	r3, r7, #12
 800722a:	2202      	movs	r2, #2
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 f9d5 	bl	80085de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007234:	e02e      	b.n	8007294 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f966 	bl	800850a <USBD_CtlError>
            ret = USBD_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	75fb      	strb	r3, [r7, #23]
          break;
 8007242:	e027      	b.n	8007294 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	2b03      	cmp	r3, #3
 800724c:	d107      	bne.n	800725e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800724e:	f107 030f 	add.w	r3, r7, #15
 8007252:	2201      	movs	r2, #1
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 f9c1 	bl	80085de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800725c:	e01a      	b.n	8007294 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f952 	bl	800850a <USBD_CtlError>
            ret = USBD_FAIL;
 8007266:	2302      	movs	r3, #2
 8007268:	75fb      	strb	r3, [r7, #23]
          break;
 800726a:	e013      	b.n	8007294 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	2b03      	cmp	r3, #3
 8007274:	d00d      	beq.n	8007292 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f946 	bl	800850a <USBD_CtlError>
            ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007282:	e006      	b.n	8007292 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 f93f 	bl	800850a <USBD_CtlError>
          ret = USBD_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	75fb      	strb	r3, [r7, #23]
          break;
 8007290:	e000      	b.n	8007294 <USBD_CDC_Setup+0x12c>
          break;
 8007292:	bf00      	nop
      }
      break;
 8007294:	e006      	b.n	80072a4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f936 	bl	800850a <USBD_CtlError>
      ret = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	75fb      	strb	r3, [r7, #23]
      break;
 80072a2:	bf00      	nop
  }

  return ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	460b      	mov	r3, r1
 80072b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d03a      	beq.n	800734a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	331c      	adds	r3, #28
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d029      	beq.n	800733e <USBD_CDC_DataIn+0x90>
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	331c      	adds	r3, #28
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	78f9      	ldrb	r1, [r7, #3]
 80072fe:	68b8      	ldr	r0, [r7, #8]
 8007300:	460b      	mov	r3, r1
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4403      	add	r3, r0
 800730a:	3338      	adds	r3, #56	; 0x38
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007312:	fb03 f301 	mul.w	r3, r3, r1
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d110      	bne.n	800733e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800731c:	78fa      	ldrb	r2, [r7, #3]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	331c      	adds	r3, #28
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007330:	78f9      	ldrb	r1, [r7, #3]
 8007332:	2300      	movs	r3, #0
 8007334:	2200      	movs	r2, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fe35 	bl	8008fa6 <USBD_LL_Transmit>
 800733c:	e003      	b.n	8007346 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fe60 	bl	8009032 <USBD_LL_GetRxDataSize>
 8007372:	4602      	mov	r2, r0
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00d      	beq.n	80073a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007398:	4611      	mov	r1, r2
 800739a:	4798      	blx	r3

    return USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	e000      	b.n	80073a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80073a0:	2302      	movs	r3, #2
  }
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d015      	beq.n	80073f0 <USBD_CDC_EP0_RxReady+0x46>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d010      	beq.n	80073f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073e4:	b292      	uxth	r2, r2
 80073e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	22ff      	movs	r2, #255	; 0xff
 80073ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2243      	movs	r2, #67	; 0x43
 8007408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	200000b0 	.word	0x200000b0

0800741c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2243      	movs	r2, #67	; 0x43
 8007428:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	2000006c 	.word	0x2000006c

0800743c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2243      	movs	r2, #67	; 0x43
 8007448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800744a:	4b03      	ldr	r3, [pc, #12]	; (8007458 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200000f4 	.word	0x200000f4

0800745c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	220a      	movs	r2, #10
 8007468:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800746a:	4b03      	ldr	r3, [pc, #12]	; (8007478 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000028 	.word	0x20000028

0800747c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007486:	2302      	movs	r3, #2
 8007488:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074c6:	88fa      	ldrh	r2, [r7, #6]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr

080074da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01c      	beq.n	8007554 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007520:	2b00      	cmp	r3, #0
 8007522:	d115      	bne.n	8007550 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007542:	b29b      	uxth	r3, r3
 8007544:	2181      	movs	r1, #129	; 0x81
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 fd2d 	bl	8008fa6 <USBD_LL_Transmit>

      return USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e002      	b.n	8007556 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007554:	2302      	movs	r3, #2
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d017      	beq.n	80075a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7c1b      	ldrb	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758a:	2101      	movs	r1, #1
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 fd2d 	bl	8008fec <USBD_LL_PrepareReceive>
 8007592:	e007      	b.n	80075a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	2101      	movs	r1, #1
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fd24 	bl	8008fec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e000      	b.n	80075aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80075a8:	2302      	movs	r3, #2
  }
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	4613      	mov	r3, r2
 80075be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075c6:	2302      	movs	r3, #2
 80075c8:	e01a      	b.n	8007600 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fb91 	bl	8008d20 <USBD_LL_Init>

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	e001      	b.n	800762e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800762a:	2302      	movs	r3, #2
 800762c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr

0800763a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fbc6 	bl	8008dd4 <USBD_LL_Start>

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007672:	2302      	movs	r3, #2
 8007674:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	4611      	mov	r1, r2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	4611      	mov	r1, r2
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fed8 	bl	8008492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b02      	cmp	r3, #2
 8007704:	d016      	beq.n	8007734 <USBD_LL_SetupStage+0x6a>
 8007706:	2b02      	cmp	r3, #2
 8007708:	d81c      	bhi.n	8007744 <USBD_LL_SetupStage+0x7a>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <USBD_LL_SetupStage+0x4a>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d008      	beq.n	8007724 <USBD_LL_SetupStage+0x5a>
 8007712:	e017      	b.n	8007744 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9cb 	bl	8007ab8 <USBD_StdDevReq>
      break;
 8007722:	e01a      	b.n	800775a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa2d 	bl	8007b8c <USBD_StdItfReq>
      break;
 8007732:	e012      	b.n	800775a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa6d 	bl	8007c1c <USBD_StdEPReq>
      break;
 8007742:	e00a      	b.n	800775a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800774a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fb9e 	bl	8008e94 <USBD_LL_StallEP>
      break;
 8007758:	bf00      	nop
  }

  return USBD_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d14b      	bne.n	8007810 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800777e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007786:	2b03      	cmp	r3, #3
 8007788:	d134      	bne.n	80077f4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d919      	bls.n	80077ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d203      	bcs.n	80077b8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	e002      	b.n	80077be <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077bc:	b29b      	uxth	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 ff57 	bl	8008676 <USBD_CtlContinueRx>
 80077c8:	e038      	b.n	800783c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d105      	bne.n	80077ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 ff54 	bl	800869a <USBD_CtlSendStatus>
 80077f2:	e023      	b.n	800783c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077fa:	2b05      	cmp	r3, #5
 80077fc:	d11e      	bne.n	800783c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007806:	2100      	movs	r1, #0
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 fb43 	bl	8008e94 <USBD_LL_StallEP>
 800780e:	e015      	b.n	800783c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00d      	beq.n	8007838 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007822:	2b03      	cmp	r3, #3
 8007824:	d108      	bne.n	8007838 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	7afa      	ldrb	r2, [r7, #11]
 8007830:	4611      	mov	r1, r2
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	4798      	blx	r3
 8007836:	e001      	b.n	800783c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007838:	2302      	movs	r3, #2
 800783a:	e000      	b.n	800783e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	460b      	mov	r3, r1
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d17f      	bne.n	800795a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3314      	adds	r3, #20
 800785e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007866:	2b02      	cmp	r3, #2
 8007868:	d15c      	bne.n	8007924 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	429a      	cmp	r2, r3
 8007874:	d915      	bls.n	80078a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fec1 	bl	8008616 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f001 fba6 	bl	8008fec <USBD_LL_PrepareReceive>
 80078a0:	e04e      	b.n	8007940 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	6912      	ldr	r2, [r2, #16]
 80078aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80078ae:	fb02 f201 	mul.w	r2, r2, r1
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11c      	bne.n	80078f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d316      	bcc.n	80078f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d20f      	bcs.n	80078f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fe9d 	bl	8008616 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e4:	2300      	movs	r3, #0
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f001 fb7e 	bl	8008fec <USBD_LL_PrepareReceive>
 80078f0:	e026      	b.n	8007940 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007904:	2b03      	cmp	r3, #3
 8007906:	d105      	bne.n	8007914 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f001 fabc 	bl	8008e94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fecf 	bl	80086c0 <USBD_CtlReceiveStatus>
 8007922:	e00d      	b.n	8007940 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800792a:	2b04      	cmp	r3, #4
 800792c:	d004      	beq.n	8007938 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007938:	2180      	movs	r1, #128	; 0x80
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f001 faaa 	bl	8008e94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007946:	2b01      	cmp	r3, #1
 8007948:	d11d      	bne.n	8007986 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fe81 	bl	8007652 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007958:	e015      	b.n	8007986 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800796c:	2b03      	cmp	r3, #3
 800796e:	d108      	bne.n	8007982 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	7afa      	ldrb	r2, [r7, #11]
 800797a:	4611      	mov	r1, r2
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	4798      	blx	r3
 8007980:	e001      	b.n	8007986 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007982:	2302      	movs	r3, #2
 8007984:	e000      	b.n	8007988 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fa33 	bl	8008e0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2240      	movs	r2, #64	; 0x40
 80079b0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fa25 	bl	8008e0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2240      	movs	r2, #64	; 0x40
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	4611      	mov	r1, r2
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
  }

  return USBD_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	78fa      	ldrb	r2, [r7, #3]
 8007a22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2204      	movs	r2, #4
 8007a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d105      	bne.n	8007a76 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d10b      	bne.n	8007aac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d005      	beq.n	8007ade <USBD_StdDevReq+0x26>
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d84f      	bhi.n	8007b76 <USBD_StdDevReq+0xbe>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <USBD_StdDevReq+0x36>
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d14b      	bne.n	8007b76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      break;
 8007aec:	e048      	b.n	8007b80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d839      	bhi.n	8007b6a <USBD_StdDevReq+0xb2>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USBD_StdDevReq+0x44>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007b61 	.word	0x08007b61
 8007b04:	08007b6b 	.word	0x08007b6b
 8007b08:	08007b57 	.word	0x08007b57
 8007b0c:	08007b6b 	.word	0x08007b6b
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b6b 	.word	0x08007b6b
 8007b1c:	08007b43 	.word	0x08007b43
 8007b20:	08007b39 	.word	0x08007b39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9dc 	bl	8007ee4 <USBD_GetDescriptor>
          break;
 8007b2c:	e022      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fb3f 	bl	80081b4 <USBD_SetAddress>
          break;
 8007b36:	e01d      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fb7e 	bl	800823c <USBD_SetConfig>
          break;
 8007b40:	e018      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc07 	bl	8008358 <USBD_GetConfig>
          break;
 8007b4a:	e013      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fc37 	bl	80083c2 <USBD_GetStatus>
          break;
 8007b54:	e00e      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fc65 	bl	8008428 <USBD_SetFeature>
          break;
 8007b5e:	e009      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fc74 	bl	8008450 <USBD_ClrFeature>
          break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fccc 	bl	800850a <USBD_CtlError>
          break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e004      	b.n	8007b80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fcc6 	bl	800850a <USBD_CtlError>
      break;
 8007b7e:	bf00      	nop
  }

  return ret;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop

08007b8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d005      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d82e      	bhi.n	8007c08 <USBD_StdItfReq+0x7c>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d12a      	bne.n	8007c08 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d81d      	bhi.n	8007bfa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	889b      	ldrh	r3, [r3, #4]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d813      	bhi.n	8007bf0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d110      	bne.n	8007c04 <USBD_StdItfReq+0x78>
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10d      	bne.n	8007c04 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fd56 	bl	800869a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bee:	e009      	b.n	8007c04 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc89 	bl	800850a <USBD_CtlError>
          break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc84 	bl	800850a <USBD_CtlError>
          break;
 8007c02:	e000      	b.n	8007c06 <USBD_StdItfReq+0x7a>
          break;
 8007c04:	bf00      	nop
      }
      break;
 8007c06:	e004      	b.n	8007c12 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc7d 	bl	800850a <USBD_CtlError>
      break;
 8007c10:	bf00      	nop
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	889b      	ldrh	r3, [r3, #4]
 8007c2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	d007      	beq.n	8007c4c <USBD_StdEPReq+0x30>
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	f200 8146 	bhi.w	8007ece <USBD_StdEPReq+0x2b2>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <USBD_StdEPReq+0x40>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	f040 8141 	bne.w	8007ece <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
      break;
 8007c5a:	e13d      	b.n	8007ed8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d10a      	bne.n	8007c7e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	e12d      	b.n	8007eda <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d007      	beq.n	8007c96 <USBD_StdEPReq+0x7a>
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f300 811b 	bgt.w	8007ec2 <USBD_StdEPReq+0x2a6>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d072      	beq.n	8007d76 <USBD_StdEPReq+0x15a>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d03a      	beq.n	8007d0a <USBD_StdEPReq+0xee>
 8007c94:	e115      	b.n	8007ec2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d002      	beq.n	8007ca6 <USBD_StdEPReq+0x8a>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d015      	beq.n	8007cd0 <USBD_StdEPReq+0xb4>
 8007ca4:	e02b      	b.n	8007cfe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <USBD_StdEPReq+0xaa>
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d009      	beq.n	8007cc6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 f8ec 	bl	8008e94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 f8e8 	bl	8008e94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc4:	e020      	b.n	8007d08 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc1e 	bl	800850a <USBD_CtlError>
              break;
 8007cce:	e01b      	b.n	8007d08 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_StdEPReq+0xda>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d008      	beq.n	8007cf6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f8cf 	bl	8008e94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fccf 	bl	800869a <USBD_CtlSendStatus>

              break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc02 	bl	800850a <USBD_CtlError>
              break;
 8007d06:	bf00      	nop
          }
          break;
 8007d08:	e0e0      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d002      	beq.n	8007d1a <USBD_StdEPReq+0xfe>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d015      	beq.n	8007d44 <USBD_StdEPReq+0x128>
 8007d18:	e026      	b.n	8007d68 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <USBD_StdEPReq+0x11e>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d009      	beq.n	8007d3a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f8b2 	bl	8008e94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d30:	2180      	movs	r1, #128	; 0x80
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f8ae 	bl	8008e94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d38:	e01c      	b.n	8007d74 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fbe4 	bl	800850a <USBD_CtlError>
              break;
 8007d42:	e017      	b.n	8007d74 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d112      	bne.n	8007d72 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f8b9 	bl	8008ed2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc9a 	bl	800869a <USBD_CtlSendStatus>
              }
              break;
 8007d66:	e004      	b.n	8007d72 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fbcd 	bl	800850a <USBD_CtlError>
              break;
 8007d70:	e000      	b.n	8007d74 <USBD_StdEPReq+0x158>
              break;
 8007d72:	bf00      	nop
          }
          break;
 8007d74:	e0aa      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d002      	beq.n	8007d86 <USBD_StdEPReq+0x16a>
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d032      	beq.n	8007dea <USBD_StdEPReq+0x1ce>
 8007d84:	e097      	b.n	8007eb6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <USBD_StdEPReq+0x180>
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d004      	beq.n	8007d9c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fbb8 	bl	800850a <USBD_CtlError>
                break;
 8007d9a:	e091      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	da0b      	bge.n	8007dbc <USBD_StdEPReq+0x1a0>
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	3310      	adds	r3, #16
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	e00b      	b.n	8007dd4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2202      	movs	r2, #2
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fbfb 	bl	80085de <USBD_CtlSendData>
              break;
 8007de8:	e06a      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da11      	bge.n	8007e16 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3318      	adds	r3, #24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d117      	bne.n	8007e3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb7b 	bl	800850a <USBD_CtlError>
                  break;
 8007e14:	e054      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb68 	bl	800850a <USBD_CtlError>
                  break;
 8007e3a:	e041      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	da0b      	bge.n	8007e5c <USBD_StdEPReq+0x240>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	3310      	adds	r3, #16
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	3304      	adds	r3, #4
 8007e5a:	e00b      	b.n	8007e74 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <USBD_StdEPReq+0x266>
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d103      	bne.n	8007e8a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	e00e      	b.n	8007ea8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f83e 	bl	8008f10 <USBD_LL_IsStallEP>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e002      	b.n	8007ea8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fb95 	bl	80085de <USBD_CtlSendData>
              break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb26 	bl	800850a <USBD_CtlError>
              break;
 8007ebe:	bf00      	nop
          }
          break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb20 	bl	800850a <USBD_CtlError>
          break;
 8007eca:	bf00      	nop
      }
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb1a 	bl	800850a <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	2b06      	cmp	r3, #6
 8007f06:	f200 8128 	bhi.w	800815a <USBD_GetDescriptor+0x276>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <USBD_GetDescriptor+0x2c>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f45 	.word	0x08007f45
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	0800815b 	.word	0x0800815b
 8007f20:	0800815b 	.word	0x0800815b
 8007f24:	080080fb 	.word	0x080080fb
 8007f28:	08008127 	.word	0x08008127
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	7c12      	ldrb	r2, [r2, #16]
 8007f38:	f107 0108 	add.w	r1, r7, #8
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	60f8      	str	r0, [r7, #12]
      break;
 8007f42:	e112      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7c1b      	ldrb	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f107 0208 	add.w	r2, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f66:	e100      	b.n	800816a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	f107 0208 	add.w	r2, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
      break;
 8007f82:	e0f2      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	885b      	ldrh	r3, [r3, #2]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	f200 80ac 	bhi.w	80080e8 <USBD_GetDescriptor+0x204>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_GetDescriptor+0xb4>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fb1 	.word	0x08007fb1
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08008019 	.word	0x08008019
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	08008081 	.word	0x08008081
 8007fac:	080080b5 	.word	0x080080b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	7c12      	ldrb	r2, [r2, #16]
 8007fc8:	f107 0108 	add.w	r1, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fd2:	e091      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa97 	bl	800850a <USBD_CtlError>
            err++;
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fe2:	e089      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7c12      	ldrb	r2, [r2, #16]
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008006:	e077      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa7d 	bl	800850a <USBD_CtlError>
            err++;
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	3301      	adds	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]
          break;
 8008016:	e06f      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	7c12      	ldrb	r2, [r2, #16]
 8008030:	f107 0108 	add.w	r1, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803a:	e05d      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa63 	bl	800850a <USBD_CtlError>
            err++;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	3301      	adds	r3, #1
 8008048:	72fb      	strb	r3, [r7, #11]
          break;
 800804a:	e055      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	7c12      	ldrb	r2, [r2, #16]
 8008064:	f107 0108 	add.w	r1, r7, #8
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
 800806c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806e:	e043      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa49 	bl	800850a <USBD_CtlError>
            err++;
 8008078:	7afb      	ldrb	r3, [r7, #11]
 800807a:	3301      	adds	r3, #1
 800807c:	72fb      	strb	r3, [r7, #11]
          break;
 800807e:	e03b      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7c12      	ldrb	r2, [r2, #16]
 8008098:	f107 0108 	add.w	r1, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a2:	e029      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa2f 	bl	800850a <USBD_CtlError>
            err++;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	3301      	adds	r3, #1
 80080b0:	72fb      	strb	r3, [r7, #11]
          break;
 80080b2:	e021      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d6:	e00f      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa15 	bl	800850a <USBD_CtlError>
            err++;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	3301      	adds	r3, #1
 80080e4:	72fb      	strb	r3, [r7, #11]
          break;
 80080e6:	e007      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa0d 	bl	800850a <USBD_CtlError>
          err++;
 80080f0:	7afb      	ldrb	r3, [r7, #11]
 80080f2:	3301      	adds	r3, #1
 80080f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080f6:	e038      	b.n	800816a <USBD_GetDescriptor+0x286>
 80080f8:	e037      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7c1b      	ldrb	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810a:	f107 0208 	add.w	r2, r7, #8
 800810e:	4610      	mov	r0, r2
 8008110:	4798      	blx	r3
 8008112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008114:	e029      	b.n	800816a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9f6 	bl	800850a <USBD_CtlError>
        err++;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	3301      	adds	r3, #1
 8008122:	72fb      	strb	r3, [r7, #11]
      break;
 8008124:	e021      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7c1b      	ldrb	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10d      	bne.n	800814a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	4610      	mov	r0, r2
 800813c:	4798      	blx	r3
 800813e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	2207      	movs	r2, #7
 8008146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008148:	e00f      	b.n	800816a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9dc 	bl	800850a <USBD_CtlError>
        err++;
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	3301      	adds	r3, #1
 8008156:	72fb      	strb	r3, [r7, #11]
      break;
 8008158:	e007      	b.n	800816a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f9d4 	bl	800850a <USBD_CtlError>
      err++;
 8008162:	7afb      	ldrb	r3, [r7, #11]
 8008164:	3301      	adds	r3, #1
 8008166:	72fb      	strb	r3, [r7, #11]
      break;
 8008168:	bf00      	nop
  }

  if (err != 0U)
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11c      	bne.n	80081aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008170:	893b      	ldrh	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d011      	beq.n	800819a <USBD_GetDescriptor+0x2b6>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88db      	ldrh	r3, [r3, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88da      	ldrh	r2, [r3, #6]
 8008182:	893b      	ldrh	r3, [r7, #8]
 8008184:	4293      	cmp	r3, r2
 8008186:	bf28      	it	cs
 8008188:	4613      	movcs	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800818e:	893b      	ldrh	r3, [r7, #8]
 8008190:	461a      	mov	r2, r3
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa22 	bl	80085de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa79 	bl	800869a <USBD_CtlSendStatus>
 80081a8:	e000      	b.n	80081ac <USBD_GetDescriptor+0x2c8>
    return;
 80081aa:	bf00      	nop
    }
  }
}
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop

080081b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d130      	bne.n	8008228 <USBD_SetAddress+0x74>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	88db      	ldrh	r3, [r3, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d12c      	bne.n	8008228 <USBD_SetAddress+0x74>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b7f      	cmp	r3, #127	; 0x7f
 80081d4:	d828      	bhi.n	8008228 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	885b      	ldrh	r3, [r3, #2]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d104      	bne.n	80081f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f98b 	bl	800850a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f4:	e01d      	b.n	8008232 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7bfa      	ldrb	r2, [r7, #15]
 80081fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 feb0 	bl	8008f68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa46 	bl	800869a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	e009      	b.n	8008232 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	e004      	b.n	8008232 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f96d 	bl	800850a <USBD_CtlError>
  }
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	885b      	ldrh	r3, [r3, #2]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	4b41      	ldr	r3, [pc, #260]	; (8008354 <USBD_SetConfig+0x118>)
 800824e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008250:	4b40      	ldr	r3, [pc, #256]	; (8008354 <USBD_SetConfig+0x118>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d904      	bls.n	8008262 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f955 	bl	800850a <USBD_CtlError>
 8008260:	e075      	b.n	800834e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	2b02      	cmp	r3, #2
 800826a:	d002      	beq.n	8008272 <USBD_SetConfig+0x36>
 800826c:	2b03      	cmp	r3, #3
 800826e:	d023      	beq.n	80082b8 <USBD_SetConfig+0x7c>
 8008270:	e062      	b.n	8008338 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008272:	4b38      	ldr	r3, [pc, #224]	; (8008354 <USBD_SetConfig+0x118>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01a      	beq.n	80082b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800827a:	4b36      	ldr	r3, [pc, #216]	; (8008354 <USBD_SetConfig+0x118>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2203      	movs	r2, #3
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800828c:	4b31      	ldr	r3, [pc, #196]	; (8008354 <USBD_SetConfig+0x118>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff f9e7 	bl	8007666 <USBD_SetClassConfig>
 8008298:	4603      	mov	r3, r0
 800829a:	2b02      	cmp	r3, #2
 800829c:	d104      	bne.n	80082a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f932 	bl	800850a <USBD_CtlError>
            return;
 80082a6:	e052      	b.n	800834e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9f6 	bl	800869a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082ae:	e04e      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9f2 	bl	800869a <USBD_CtlSendStatus>
        break;
 80082b6:	e04a      	b.n	800834e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082b8:	4b26      	ldr	r3, [pc, #152]	; (8008354 <USBD_SetConfig+0x118>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d112      	bne.n	80082e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082c8:	4b22      	ldr	r3, [pc, #136]	; (8008354 <USBD_SetConfig+0x118>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082d2:	4b20      	ldr	r3, [pc, #128]	; (8008354 <USBD_SetConfig+0x118>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff f9e3 	bl	80076a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f9db 	bl	800869a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082e4:	e033      	b.n	800834e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082e6:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <USBD_SetConfig+0x118>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d01d      	beq.n	8008330 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff f9d1 	bl	80076a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <USBD_SetConfig+0x118>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <USBD_SetConfig+0x118>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff f9a7 	bl	8007666 <USBD_SetClassConfig>
 8008318:	4603      	mov	r3, r0
 800831a:	2b02      	cmp	r3, #2
 800831c:	d104      	bne.n	8008328 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8f2 	bl	800850a <USBD_CtlError>
            return;
 8008326:	e012      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f9b6 	bl	800869a <USBD_CtlSendStatus>
        break;
 800832e:	e00e      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f9b2 	bl	800869a <USBD_CtlSendStatus>
        break;
 8008336:	e00a      	b.n	800834e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f8e5 	bl	800850a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <USBD_SetConfig+0x118>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff f9ac 	bl	80076a4 <USBD_ClrClassConfig>
        break;
 800834c:	bf00      	nop
    }
  }
}
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000411 	.word	0x20000411

08008358 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	88db      	ldrh	r3, [r3, #6]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d004      	beq.n	8008374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8cc 	bl	800850a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008372:	e022      	b.n	80083ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837a:	2b02      	cmp	r3, #2
 800837c:	dc02      	bgt.n	8008384 <USBD_GetConfig+0x2c>
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc03      	bgt.n	800838a <USBD_GetConfig+0x32>
 8008382:	e015      	b.n	80083b0 <USBD_GetConfig+0x58>
 8008384:	2b03      	cmp	r3, #3
 8008386:	d00b      	beq.n	80083a0 <USBD_GetConfig+0x48>
 8008388:	e012      	b.n	80083b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3308      	adds	r3, #8
 8008394:	2201      	movs	r2, #1
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f920 	bl	80085de <USBD_CtlSendData>
        break;
 800839e:	e00c      	b.n	80083ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	2201      	movs	r2, #1
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f918 	bl	80085de <USBD_CtlSendData>
        break;
 80083ae:	e004      	b.n	80083ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8a9 	bl	800850a <USBD_CtlError>
        break;
 80083b8:	bf00      	nop
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	3b01      	subs	r3, #1
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d81e      	bhi.n	8008416 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	88db      	ldrh	r3, [r3, #6]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d004      	beq.n	80083ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f891 	bl	800850a <USBD_CtlError>
        break;
 80083e8:	e01a      	b.n	8008420 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f043 0202 	orr.w	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	330c      	adds	r3, #12
 800840a:	2202      	movs	r2, #2
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8e5 	bl	80085de <USBD_CtlSendData>
      break;
 8008414:	e004      	b.n	8008420 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f876 	bl	800850a <USBD_CtlError>
      break;
 800841e:	bf00      	nop
  }
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d106      	bne.n	8008448 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f929 	bl	800869a <USBD_CtlSendStatus>
  }
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008460:	3b01      	subs	r3, #1
 8008462:	2b02      	cmp	r3, #2
 8008464:	d80b      	bhi.n	800847e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d10c      	bne.n	8008488 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f90f 	bl	800869a <USBD_CtlSendStatus>
      }
      break;
 800847c:	e004      	b.n	8008488 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f842 	bl	800850a <USBD_CtlError>
      break;
 8008486:	e000      	b.n	800848a <USBD_ClrFeature+0x3a>
      break;
 8008488:	bf00      	nop
  }
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785a      	ldrb	r2, [r3, #1]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	3302      	adds	r3, #2
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	3303      	adds	r3, #3
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	b29b      	uxth	r3, r3
 80084c0:	4413      	add	r3, r2
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	3304      	adds	r3, #4
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3305      	adds	r3, #5
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4413      	add	r3, r2
 80084de:	b29a      	uxth	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3306      	adds	r3, #6
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	3307      	adds	r3, #7
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4413      	add	r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	80da      	strh	r2, [r3, #6]

}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fcbc 	bl	8008e94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800851c:	2100      	movs	r1, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fcb8 	bl	8008e94 <USBD_LL_StallEP>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d032      	beq.n	80085a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 f834 	bl	80085b0 <USBD_GetLen>
 8008548:	4603      	mov	r3, r0
 800854a:	3301      	adds	r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	75fa      	strb	r2, [r7, #23]
 800855c:	461a      	mov	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	75fa      	strb	r2, [r7, #23]
 800856e:	461a      	mov	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4413      	add	r3, r2
 8008574:	2203      	movs	r2, #3
 8008576:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008578:	e012      	b.n	80085a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	60fa      	str	r2, [r7, #12]
 8008580:	7dfa      	ldrb	r2, [r7, #23]
 8008582:	1c51      	adds	r1, r2, #1
 8008584:	75f9      	strb	r1, [r7, #23]
 8008586:	4611      	mov	r1, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	440a      	add	r2, r1
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	75fa      	strb	r2, [r7, #23]
 8008596:	461a      	mov	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4413      	add	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e8      	bne.n	800857a <USBD_GetString+0x4e>
    }
  }
}
 80085a8:	bf00      	nop
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085bc:	e005      	b.n	80085ca <USBD_GetLen+0x1a>
  {
    len++;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	3301      	adds	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f5      	bne.n	80085be <USBD_GetLen+0xe>
  }

  return len;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085fa:	88fa      	ldrh	r2, [r7, #6]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	2100      	movs	r1, #0
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fccd 	bl	8008fa6 <USBD_LL_Transmit>

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	4613      	mov	r3, r2
 8008622:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fcbb 	bl	8008fa6 <USBD_LL_Transmit>

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2203      	movs	r2, #3
 800864c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	2100      	movs	r1, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fcc0 	bl	8008fec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	4613      	mov	r3, r2
 8008682:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	2100      	movs	r1, #0
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 fcae 	bl	8008fec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2204      	movs	r2, #4
 80086a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086aa:	2300      	movs	r3, #0
 80086ac:	2200      	movs	r2, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc78 	bl	8008fa6 <USBD_LL_Transmit>

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2205      	movs	r2, #5
 80086cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086d0:	2300      	movs	r3, #0
 80086d2:	2200      	movs	r2, #0
 80086d4:	2100      	movs	r1, #0
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc88 	bl	8008fec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086ec:	2200      	movs	r2, #0
 80086ee:	4912      	ldr	r1, [pc, #72]	; (8008738 <MX_USB_DEVICE_Init+0x50>)
 80086f0:	4812      	ldr	r0, [pc, #72]	; (800873c <MX_USB_DEVICE_Init+0x54>)
 80086f2:	f7fe ff5e 	bl	80075b2 <USBD_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086fc:	f7f7 ffa8 	bl	8000650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008700:	490f      	ldr	r1, [pc, #60]	; (8008740 <MX_USB_DEVICE_Init+0x58>)
 8008702:	480e      	ldr	r0, [pc, #56]	; (800873c <MX_USB_DEVICE_Init+0x54>)
 8008704:	f7fe ff80 	bl	8007608 <USBD_RegisterClass>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800870e:	f7f7 ff9f 	bl	8000650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008712:	490c      	ldr	r1, [pc, #48]	; (8008744 <MX_USB_DEVICE_Init+0x5c>)
 8008714:	4809      	ldr	r0, [pc, #36]	; (800873c <MX_USB_DEVICE_Init+0x54>)
 8008716:	f7fe feb1 	bl	800747c <USBD_CDC_RegisterInterface>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008720:	f7f7 ff96 	bl	8000650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008724:	4805      	ldr	r0, [pc, #20]	; (800873c <MX_USB_DEVICE_Init+0x54>)
 8008726:	f7fe ff88 	bl	800763a <USBD_Start>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008730:	f7f7 ff8e 	bl	8000650 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008734:	bf00      	nop
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20000148 	.word	0x20000148
 800873c:	200006dc 	.word	0x200006dc
 8008740:	20000034 	.word	0x20000034
 8008744:	20000138 	.word	0x20000138

08008748 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800874c:	2200      	movs	r2, #0
 800874e:	4909      	ldr	r1, [pc, #36]	; (8008774 <CDC_Init_FS+0x2c>)
 8008750:	4809      	ldr	r0, [pc, #36]	; (8008778 <CDC_Init_FS+0x30>)
 8008752:	f7fe fea9 	bl	80074a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008756:	4909      	ldr	r1, [pc, #36]	; (800877c <CDC_Init_FS+0x34>)
 8008758:	4807      	ldr	r0, [pc, #28]	; (8008778 <CDC_Init_FS+0x30>)
 800875a:	f7fe febe 	bl	80074da <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <CDC_Init_FS+0x30>)
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	2b03      	cmp	r3, #3
 8008766:	d101      	bne.n	800876c <CDC_Init_FS+0x24>
	  welcome();
 8008768:	f7f7 fea8 	bl	80004bc <welcome>
  }

  return (USBD_OK);
 800876c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800876e:	4618      	mov	r0, r3
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000d88 	.word	0x20000d88
 8008778:	200006dc 	.word	0x200006dc
 800877c:	200009a0 	.word	0x200009a0

08008780 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008784:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008786:	4618      	mov	r0, r3
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr
	...

08008790 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
 800879c:	4613      	mov	r3, r2
 800879e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b23      	cmp	r3, #35	; 0x23
 80087a4:	d84a      	bhi.n	800883c <CDC_Control_FS+0xac>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <CDC_Control_FS+0x1c>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	0800883d 	.word	0x0800883d
 80087b0:	0800883d 	.word	0x0800883d
 80087b4:	0800883d 	.word	0x0800883d
 80087b8:	0800883d 	.word	0x0800883d
 80087bc:	0800883d 	.word	0x0800883d
 80087c0:	0800883d 	.word	0x0800883d
 80087c4:	0800883d 	.word	0x0800883d
 80087c8:	0800883d 	.word	0x0800883d
 80087cc:	0800883d 	.word	0x0800883d
 80087d0:	0800883d 	.word	0x0800883d
 80087d4:	0800883d 	.word	0x0800883d
 80087d8:	0800883d 	.word	0x0800883d
 80087dc:	0800883d 	.word	0x0800883d
 80087e0:	0800883d 	.word	0x0800883d
 80087e4:	0800883d 	.word	0x0800883d
 80087e8:	0800883d 	.word	0x0800883d
 80087ec:	0800883d 	.word	0x0800883d
 80087f0:	0800883d 	.word	0x0800883d
 80087f4:	0800883d 	.word	0x0800883d
 80087f8:	0800883d 	.word	0x0800883d
 80087fc:	0800883d 	.word	0x0800883d
 8008800:	0800883d 	.word	0x0800883d
 8008804:	0800883d 	.word	0x0800883d
 8008808:	0800883d 	.word	0x0800883d
 800880c:	0800883d 	.word	0x0800883d
 8008810:	0800883d 	.word	0x0800883d
 8008814:	0800883d 	.word	0x0800883d
 8008818:	0800883d 	.word	0x0800883d
 800881c:	0800883d 	.word	0x0800883d
 8008820:	0800883d 	.word	0x0800883d
 8008824:	0800883d 	.word	0x0800883d
 8008828:	0800883d 	.word	0x0800883d
 800882c:	0800883d 	.word	0x0800883d
 8008830:	0800883d 	.word	0x0800883d
 8008834:	0800883d 	.word	0x0800883d
 8008838:	0800883d 	.word	0x0800883d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800883c:	bf00      	nop
  }

  return (USBD_OK);
 800883e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop

0800884c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//	uint32_t start_pos = 0;
	uint8_t  enter = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	e01b      	b.n	8008898 <CDC_Receive_FS+0x4c>
		if( in_usb_buf_pos < USB_BUFFER_LENGTH ) {
 8008860:	4b31      	ldr	r3, [pc, #196]	; (8008928 <CDC_Receive_FS+0xdc>)
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	2bff      	cmp	r3, #255	; 0xff
 8008866:	d80c      	bhi.n	8008882 <CDC_Receive_FS+0x36>
			input_usb_buffer[ in_usb_buf_pos++ ] = Buf[ loop ];
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	441a      	add	r2, r3
 800886e:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <CDC_Receive_FS+0xdc>)
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	1c59      	adds	r1, r3, #1
 8008874:	b288      	uxth	r0, r1
 8008876:	492c      	ldr	r1, [pc, #176]	; (8008928 <CDC_Receive_FS+0xdc>)
 8008878:	8008      	strh	r0, [r1, #0]
 800887a:	4619      	mov	r1, r3
 800887c:	7812      	ldrb	r2, [r2, #0]
 800887e:	4b2b      	ldr	r3, [pc, #172]	; (800892c <CDC_Receive_FS+0xe0>)
 8008880:	545a      	strb	r2, [r3, r1]
		}
		if( Buf[ loop ] == 13 ) {
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	4413      	add	r3, r2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b0d      	cmp	r3, #13
 800888c:	d101      	bne.n	8008892 <CDC_Receive_FS+0x46>
			enter = 1;
 800888e:	2301      	movs	r3, #1
 8008890:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	3301      	adds	r3, #1
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d3de      	bcc.n	8008860 <CDC_Receive_FS+0x14>
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );

	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fc4c 	bl	8009144 <malloc>
 80088ac:	4603      	mov	r3, r0
 80088ae:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	e019      	b.n	80088ee <CDC_Receive_FS+0xa2>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	441a      	add	r2, r3
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	6179      	str	r1, [r7, #20]
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	440b      	add	r3, r1
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	4413      	add	r3, r2
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b0d      	cmp	r3, #13
 80088d8:	d106      	bne.n	80088e8 <CDC_Receive_FS+0x9c>
			out_buf[ out_buf_len++ ] = '\n';
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	617a      	str	r2, [r7, #20]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	220a      	movs	r2, #10
 80088e6:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	3301      	adds	r3, #1
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d3e0      	bcc.n	80088ba <CDC_Receive_FS+0x6e>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 80088f8:	6979      	ldr	r1, [r7, #20]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7f7 fdd0 	bl	80004a0 <usb_transmit_fs>
	free( out_buf );
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fc27 	bl	8009154 <free>
	if( enter > 0 ) {
 8008906:	7ffb      	ldrb	r3, [r7, #31]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <CDC_Receive_FS+0xc4>
		get_command();
 800890c:	f7f7 fdfa 	bl	8000504 <get_command>
	}
//	if( Buf[ 0 ] == '\r' ) {
//		send_prompt();
//	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	4807      	ldr	r0, [pc, #28]	; (8008930 <CDC_Receive_FS+0xe4>)
 8008914:	f7fe fde1 	bl	80074da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008918:	4805      	ldr	r0, [pc, #20]	; (8008930 <CDC_Receive_FS+0xe4>)
 800891a:	f7fe fe20 	bl	800755e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800891e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008920:	4618      	mov	r0, r3
 8008922:	3720      	adds	r7, #32
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20000318 	.word	0x20000318
 800892c:	20000218 	.word	0x20000218
 8008930:	200006dc 	.word	0x200006dc

08008934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008944:	4b0d      	ldr	r3, [pc, #52]	; (800897c <CDC_Transmit_FS+0x48>)
 8008946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008956:	2301      	movs	r3, #1
 8008958:	e00b      	b.n	8008972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800895a:	887b      	ldrh	r3, [r7, #2]
 800895c:	461a      	mov	r2, r3
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4806      	ldr	r0, [pc, #24]	; (800897c <CDC_Transmit_FS+0x48>)
 8008962:	f7fe fda1 	bl	80074a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008966:	4805      	ldr	r0, [pc, #20]	; (800897c <CDC_Transmit_FS+0x48>)
 8008968:	f7fe fdca 	bl	8007500 <USBD_CDC_TransmitPacket>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200006dc 	.word	0x200006dc

08008980 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2212      	movs	r2, #18
 8008990:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008992:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000164 	.word	0x20000164

080089a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2204      	movs	r2, #4
 80089b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089b6:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000178 	.word	0x20000178

080089c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d105      	bne.n	80089e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4907      	ldr	r1, [pc, #28]	; (80089fc <USBD_FS_ProductStrDescriptor+0x34>)
 80089de:	4808      	ldr	r0, [pc, #32]	; (8008a00 <USBD_FS_ProductStrDescriptor+0x38>)
 80089e0:	f7ff fda4 	bl	800852c <USBD_GetString>
 80089e4:	e004      	b.n	80089f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	4904      	ldr	r1, [pc, #16]	; (80089fc <USBD_FS_ProductStrDescriptor+0x34>)
 80089ea:	4805      	ldr	r0, [pc, #20]	; (8008a00 <USBD_FS_ProductStrDescriptor+0x38>)
 80089ec:	f7ff fd9e 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001170 	.word	0x20001170
 8008a00:	0800a358 	.word	0x0800a358

08008a04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	4904      	ldr	r1, [pc, #16]	; (8008a24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a14:	4804      	ldr	r0, [pc, #16]	; (8008a28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a16:	f7ff fd89 	bl	800852c <USBD_GetString>
  return USBD_StrDesc;
 8008a1a:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20001170 	.word	0x20001170
 8008a28:	0800a370 	.word	0x0800a370

08008a2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	6039      	str	r1, [r7, #0]
 8008a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	221a      	movs	r2, #26
 8008a3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a3e:	f000 f843 	bl	8008ac8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a42:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	2000017c 	.word	0x2000017c

08008a50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	6039      	str	r1, [r7, #0]
 8008a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	4907      	ldr	r1, [pc, #28]	; (8008a84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a66:	4808      	ldr	r0, [pc, #32]	; (8008a88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a68:	f7ff fd60 	bl	800852c <USBD_GetString>
 8008a6c:	e004      	b.n	8008a78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4904      	ldr	r1, [pc, #16]	; (8008a84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a72:	4805      	ldr	r0, [pc, #20]	; (8008a88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a74:	f7ff fd5a 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20001170 	.word	0x20001170
 8008a88:	0800a384 	.word	0x0800a384

08008a8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aa2:	4808      	ldr	r0, [pc, #32]	; (8008ac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008aa4:	f7ff fd42 	bl	800852c <USBD_GetString>
 8008aa8:	e004      	b.n	8008ab4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4904      	ldr	r1, [pc, #16]	; (8008ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab0:	f7ff fd3c 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20001170 	.word	0x20001170
 8008ac4:	0800a390 	.word	0x0800a390

08008ac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ace:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <Get_SerialNum+0x44>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <Get_SerialNum+0x48>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ada:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <Get_SerialNum+0x4c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008aee:	2208      	movs	r2, #8
 8008af0:	4909      	ldr	r1, [pc, #36]	; (8008b18 <Get_SerialNum+0x50>)
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f814 	bl	8008b20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008af8:	2204      	movs	r2, #4
 8008afa:	4908      	ldr	r1, [pc, #32]	; (8008b1c <Get_SerialNum+0x54>)
 8008afc:	68b8      	ldr	r0, [r7, #8]
 8008afe:	f000 f80f 	bl	8008b20 <IntToUnicode>
  }
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	1ffff7e8 	.word	0x1ffff7e8
 8008b10:	1ffff7ec 	.word	0x1ffff7ec
 8008b14:	1ffff7f0 	.word	0x1ffff7f0
 8008b18:	2000017e 	.word	0x2000017e
 8008b1c:	2000018e 	.word	0x2000018e

08008b20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]
 8008b36:	e027      	b.n	8008b88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	0f1b      	lsrs	r3, r3, #28
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	d80b      	bhi.n	8008b58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0f1b      	lsrs	r3, r3, #28
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	440b      	add	r3, r1
 8008b50:	3230      	adds	r2, #48	; 0x30
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e00a      	b.n	8008b6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	0f1b      	lsrs	r3, r3, #28
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	4619      	mov	r1, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	440b      	add	r3, r1
 8008b68:	3237      	adds	r2, #55	; 0x37
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	3301      	adds	r3, #1
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	3301      	adds	r3, #1
 8008b86:	75fb      	strb	r3, [r7, #23]
 8008b88:	7dfa      	ldrb	r2, [r7, #23]
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3d3      	bcc.n	8008b38 <IntToUnicode+0x18>
  }
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a0d      	ldr	r2, [pc, #52]	; (8008be0 <HAL_PCD_MspInit+0x44>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d113      	bne.n	8008bd6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008bae:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <HAL_PCD_MspInit+0x48>)
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <HAL_PCD_MspInit+0x48>)
 8008bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bb8:	61d3      	str	r3, [r2, #28]
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <HAL_PCD_MspInit+0x48>)
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	2014      	movs	r0, #20
 8008bcc:	f7f8 f931 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008bd0:	2014      	movs	r0, #20
 8008bd2:	f7f8 f94a 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40005c00 	.word	0x40005c00
 8008be4:	40021000 	.word	0x40021000

08008be8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe fd63 	bl	80076ca <USBD_LL_SetupStage>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	440b      	add	r3, r1
 8008c2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f7fe fd95 	bl	8007764 <USBD_LL_DataOutStage>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	333c      	adds	r3, #60	; 0x3c
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	f7fe fdec 	bl	8007846 <USBD_LL_DataInStage>
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fefc 	bl	8007a82 <USBD_LL_SOF>
}
 8008c8a:	bf00      	nop
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d001      	beq.n	8008caa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ca6:	f7f7 fcd3 	bl	8000650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cb0:	7bfa      	ldrb	r2, [r7, #15]
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe feac 	bl	8007a12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fe65 	bl	8007990 <USBD_LL_Reset>
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fea6 	bl	8007a30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <HAL_PCD_SuspendCallback+0x30>)
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	4a03      	ldr	r2, [pc, #12]	; (8008d00 <HAL_PCD_SuspendCallback+0x30>)
 8008cf2:	f043 0306 	orr.w	r3, r3, #6
 8008cf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	e000ed00 	.word	0xe000ed00

08008d04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fea0 	bl	8007a58 <USBD_LL_Resume>
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d28:	4a28      	ldr	r2, [pc, #160]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a26      	ldr	r2, [pc, #152]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008d38:	4b24      	ldr	r3, [pc, #144]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d3a:	4a25      	ldr	r2, [pc, #148]	; (8008dd0 <USBD_LL_Init+0xb0>)
 8008d3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d3e:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d40:	2208      	movs	r2, #8
 8008d42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d46:	2202      	movs	r2, #2
 8008d48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d4a:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008d50:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d5c:	481b      	ldr	r0, [pc, #108]	; (8008dcc <USBD_LL_Init+0xac>)
 8008d5e:	f7f8 fc29 	bl	80015b4 <HAL_PCD_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008d68:	f7f7 fc72 	bl	8000650 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d72:	2318      	movs	r3, #24
 8008d74:	2200      	movs	r2, #0
 8008d76:	2100      	movs	r1, #0
 8008d78:	f7fa f89f 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d82:	2358      	movs	r3, #88	; 0x58
 8008d84:	2200      	movs	r2, #0
 8008d86:	2180      	movs	r1, #128	; 0x80
 8008d88:	f7fa f897 	bl	8002eba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d92:	23c0      	movs	r3, #192	; 0xc0
 8008d94:	2200      	movs	r2, #0
 8008d96:	2181      	movs	r1, #129	; 0x81
 8008d98:	f7fa f88f 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008da2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008da6:	2200      	movs	r2, #0
 8008da8:	2101      	movs	r1, #1
 8008daa:	f7fa f886 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db8:	2200      	movs	r2, #0
 8008dba:	2182      	movs	r1, #130	; 0x82
 8008dbc:	f7fa f87d 	bl	8002eba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20001370 	.word	0x20001370
 8008dd0:	40005c00 	.word	0x40005c00

08008dd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f8 fced 	bl	80017ca <HAL_PCD_Start>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f94e 	bl	8009098 <USBD_Get_USB_Status>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	4608      	mov	r0, r1
 8008e14:	4611      	mov	r1, r2
 8008e16:	461a      	mov	r2, r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	70fb      	strb	r3, [r7, #3]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70bb      	strb	r3, [r7, #2]
 8008e20:	4613      	mov	r3, r2
 8008e22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e32:	78bb      	ldrb	r3, [r7, #2]
 8008e34:	883a      	ldrh	r2, [r7, #0]
 8008e36:	78f9      	ldrb	r1, [r7, #3]
 8008e38:	f7f8 fe67 	bl	8001b0a <HAL_PCD_EP_Open>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f928 	bl	8009098 <USBD_Get_USB_Status>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f8 feae 	bl	8001bd6 <HAL_PCD_EP_Close>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f909 	bl	8009098 <USBD_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f8 ff6e 	bl	8001d94 <HAL_PCD_EP_SetStall>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f8ea 	bl	8009098 <USBD_Get_USB_Status>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7f8 ffaf 	bl	8001e54 <HAL_PCD_EP_ClrStall>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f8cb 	bl	8009098 <USBD_Get_USB_Status>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da0c      	bge.n	8008f46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	440b      	add	r3, r1
 8008f40:	3302      	adds	r3, #2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	e00b      	b.n	8008f5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f4c:	68f9      	ldr	r1, [r7, #12]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	440b      	add	r3, r1
 8008f58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008f5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f8 fd9a 	bl	8001ac0 <HAL_PCD_SetAddress>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f880 	bl	8009098 <USBD_Get_USB_Status>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b086      	sub	sp, #24
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	72fb      	strb	r3, [r7, #11]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fc8:	893b      	ldrh	r3, [r7, #8]
 8008fca:	7af9      	ldrb	r1, [r7, #11]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	f7f8 fe9e 	bl	8001d0e <HAL_PCD_EP_Transmit>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 f85d 	bl	8009098 <USBD_Get_USB_Status>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fe2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	72fb      	strb	r3, [r7, #11]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800900e:	893b      	ldrh	r3, [r7, #8]
 8009010:	7af9      	ldrb	r1, [r7, #11]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	f7f8 fe27 	bl	8001c66 <HAL_PCD_EP_Receive>
 8009018:	4603      	mov	r3, r0
 800901a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f83a 	bl	8009098 <USBD_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009028:	7dbb      	ldrb	r3, [r7, #22]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009044:	78fa      	ldrb	r2, [r7, #3]
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7f8 fe49 	bl	8001ce0 <HAL_PCD_EP_GetRxCount>
 800904e:	4603      	mov	r3, r0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009060:	4b02      	ldr	r3, [pc, #8]	; (800906c <USBD_static_malloc+0x14>)
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr
 800906c:	20000414 	.word	0x20000414

08009070 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr

08009098 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d817      	bhi.n	80090dc <USBD_Get_USB_Status+0x44>
 80090ac:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <USBD_Get_USB_Status+0x1c>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	080090cb 	.word	0x080090cb
 80090bc:	080090d1 	.word	0x080090d1
 80090c0:	080090d7 	.word	0x080090d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
    break;
 80090c8:	e00b      	b.n	80090e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ca:	2302      	movs	r3, #2
 80090cc:	73fb      	strb	r3, [r7, #15]
    break;
 80090ce:	e008      	b.n	80090e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
    break;
 80090d4:	e005      	b.n	80090e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090d6:	2302      	movs	r3, #2
 80090d8:	73fb      	strb	r3, [r7, #15]
    break;
 80090da:	e002      	b.n	80090e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090dc:	2302      	movs	r3, #2
 80090de:	73fb      	strb	r3, [r7, #15]
    break;
 80090e0:	bf00      	nop
  }
  return usb_status;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bc80      	pop	{r7}
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	; (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000198 	.word	0x20000198

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	2600      	movs	r6, #0
 8009100:	4d0c      	ldr	r5, [pc, #48]	; (8009134 <__libc_init_array+0x38>)
 8009102:	4c0d      	ldr	r4, [pc, #52]	; (8009138 <__libc_init_array+0x3c>)
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	42a6      	cmp	r6, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	f001 f90c 	bl	800a328 <_init>
 8009110:	2600      	movs	r6, #0
 8009112:	4d0a      	ldr	r5, [pc, #40]	; (800913c <__libc_init_array+0x40>)
 8009114:	4c0a      	ldr	r4, [pc, #40]	; (8009140 <__libc_init_array+0x44>)
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	42a6      	cmp	r6, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f855 3b04 	ldr.w	r3, [r5], #4
 8009124:	4798      	blx	r3
 8009126:	3601      	adds	r6, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f855 3b04 	ldr.w	r3, [r5], #4
 800912e:	4798      	blx	r3
 8009130:	3601      	adds	r6, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	0800a65c 	.word	0x0800a65c
 8009138:	0800a65c 	.word	0x0800a65c
 800913c:	0800a65c 	.word	0x0800a65c
 8009140:	0800a660 	.word	0x0800a660

08009144 <malloc>:
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <malloc+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f000 b85f 	b.w	800920c <_malloc_r>
 800914e:	bf00      	nop
 8009150:	20000198 	.word	0x20000198

08009154 <free>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <free+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 b80b 	b.w	8009174 <_free_r>
 800915e:	bf00      	nop
 8009160:	20000198 	.word	0x20000198

08009164 <memset>:
 8009164:	4603      	mov	r3, r0
 8009166:	4402      	add	r2, r0
 8009168:	4293      	cmp	r3, r2
 800916a:	d100      	bne.n	800916e <memset+0xa>
 800916c:	4770      	bx	lr
 800916e:	f803 1b01 	strb.w	r1, [r3], #1
 8009172:	e7f9      	b.n	8009168 <memset+0x4>

08009174 <_free_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4605      	mov	r5, r0
 8009178:	2900      	cmp	r1, #0
 800917a:	d043      	beq.n	8009204 <_free_r+0x90>
 800917c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009180:	1f0c      	subs	r4, r1, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfb8      	it	lt
 8009186:	18e4      	addlt	r4, r4, r3
 8009188:	f000 f9e8 	bl	800955c <__malloc_lock>
 800918c:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <_free_r+0x94>)
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	4610      	mov	r0, r2
 8009192:	b933      	cbnz	r3, 80091a2 <_free_r+0x2e>
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	6014      	str	r4, [r2, #0]
 8009198:	4628      	mov	r0, r5
 800919a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800919e:	f000 b9e3 	b.w	8009568 <__malloc_unlock>
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	d90a      	bls.n	80091bc <_free_r+0x48>
 80091a6:	6821      	ldr	r1, [r4, #0]
 80091a8:	1862      	adds	r2, r4, r1
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bf01      	itttt	eq
 80091ae:	681a      	ldreq	r2, [r3, #0]
 80091b0:	685b      	ldreq	r3, [r3, #4]
 80091b2:	1852      	addeq	r2, r2, r1
 80091b4:	6022      	streq	r2, [r4, #0]
 80091b6:	6063      	str	r3, [r4, #4]
 80091b8:	6004      	str	r4, [r0, #0]
 80091ba:	e7ed      	b.n	8009198 <_free_r+0x24>
 80091bc:	461a      	mov	r2, r3
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	b10b      	cbz	r3, 80091c6 <_free_r+0x52>
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	d9fa      	bls.n	80091bc <_free_r+0x48>
 80091c6:	6811      	ldr	r1, [r2, #0]
 80091c8:	1850      	adds	r0, r2, r1
 80091ca:	42a0      	cmp	r0, r4
 80091cc:	d10b      	bne.n	80091e6 <_free_r+0x72>
 80091ce:	6820      	ldr	r0, [r4, #0]
 80091d0:	4401      	add	r1, r0
 80091d2:	1850      	adds	r0, r2, r1
 80091d4:	4283      	cmp	r3, r0
 80091d6:	6011      	str	r1, [r2, #0]
 80091d8:	d1de      	bne.n	8009198 <_free_r+0x24>
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4401      	add	r1, r0
 80091e0:	6011      	str	r1, [r2, #0]
 80091e2:	6053      	str	r3, [r2, #4]
 80091e4:	e7d8      	b.n	8009198 <_free_r+0x24>
 80091e6:	d902      	bls.n	80091ee <_free_r+0x7a>
 80091e8:	230c      	movs	r3, #12
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	e7d4      	b.n	8009198 <_free_r+0x24>
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	1821      	adds	r1, r4, r0
 80091f2:	428b      	cmp	r3, r1
 80091f4:	bf01      	itttt	eq
 80091f6:	6819      	ldreq	r1, [r3, #0]
 80091f8:	685b      	ldreq	r3, [r3, #4]
 80091fa:	1809      	addeq	r1, r1, r0
 80091fc:	6021      	streq	r1, [r4, #0]
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7c9      	b.n	8009198 <_free_r+0x24>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000634 	.word	0x20000634

0800920c <_malloc_r>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	1ccd      	adds	r5, r1, #3
 8009210:	f025 0503 	bic.w	r5, r5, #3
 8009214:	3508      	adds	r5, #8
 8009216:	2d0c      	cmp	r5, #12
 8009218:	bf38      	it	cc
 800921a:	250c      	movcc	r5, #12
 800921c:	2d00      	cmp	r5, #0
 800921e:	4606      	mov	r6, r0
 8009220:	db01      	blt.n	8009226 <_malloc_r+0x1a>
 8009222:	42a9      	cmp	r1, r5
 8009224:	d903      	bls.n	800922e <_malloc_r+0x22>
 8009226:	230c      	movs	r3, #12
 8009228:	6033      	str	r3, [r6, #0]
 800922a:	2000      	movs	r0, #0
 800922c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922e:	f000 f995 	bl	800955c <__malloc_lock>
 8009232:	4921      	ldr	r1, [pc, #132]	; (80092b8 <_malloc_r+0xac>)
 8009234:	680a      	ldr	r2, [r1, #0]
 8009236:	4614      	mov	r4, r2
 8009238:	b99c      	cbnz	r4, 8009262 <_malloc_r+0x56>
 800923a:	4f20      	ldr	r7, [pc, #128]	; (80092bc <_malloc_r+0xb0>)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	b923      	cbnz	r3, 800924a <_malloc_r+0x3e>
 8009240:	4621      	mov	r1, r4
 8009242:	4630      	mov	r0, r6
 8009244:	f000 f8aa 	bl	800939c <_sbrk_r>
 8009248:	6038      	str	r0, [r7, #0]
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	f000 f8a5 	bl	800939c <_sbrk_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d123      	bne.n	800929e <_malloc_r+0x92>
 8009256:	230c      	movs	r3, #12
 8009258:	4630      	mov	r0, r6
 800925a:	6033      	str	r3, [r6, #0]
 800925c:	f000 f984 	bl	8009568 <__malloc_unlock>
 8009260:	e7e3      	b.n	800922a <_malloc_r+0x1e>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	1b5b      	subs	r3, r3, r5
 8009266:	d417      	bmi.n	8009298 <_malloc_r+0x8c>
 8009268:	2b0b      	cmp	r3, #11
 800926a:	d903      	bls.n	8009274 <_malloc_r+0x68>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	441c      	add	r4, r3
 8009270:	6025      	str	r5, [r4, #0]
 8009272:	e004      	b.n	800927e <_malloc_r+0x72>
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	42a2      	cmp	r2, r4
 8009278:	bf0c      	ite	eq
 800927a:	600b      	streq	r3, [r1, #0]
 800927c:	6053      	strne	r3, [r2, #4]
 800927e:	4630      	mov	r0, r6
 8009280:	f000 f972 	bl	8009568 <__malloc_unlock>
 8009284:	f104 000b 	add.w	r0, r4, #11
 8009288:	1d23      	adds	r3, r4, #4
 800928a:	f020 0007 	bic.w	r0, r0, #7
 800928e:	1ac2      	subs	r2, r0, r3
 8009290:	d0cc      	beq.n	800922c <_malloc_r+0x20>
 8009292:	1a1b      	subs	r3, r3, r0
 8009294:	50a3      	str	r3, [r4, r2]
 8009296:	e7c9      	b.n	800922c <_malloc_r+0x20>
 8009298:	4622      	mov	r2, r4
 800929a:	6864      	ldr	r4, [r4, #4]
 800929c:	e7cc      	b.n	8009238 <_malloc_r+0x2c>
 800929e:	1cc4      	adds	r4, r0, #3
 80092a0:	f024 0403 	bic.w	r4, r4, #3
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d0e3      	beq.n	8009270 <_malloc_r+0x64>
 80092a8:	1a21      	subs	r1, r4, r0
 80092aa:	4630      	mov	r0, r6
 80092ac:	f000 f876 	bl	800939c <_sbrk_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d1dd      	bne.n	8009270 <_malloc_r+0x64>
 80092b4:	e7cf      	b.n	8009256 <_malloc_r+0x4a>
 80092b6:	bf00      	nop
 80092b8:	20000634 	.word	0x20000634
 80092bc:	20000638 	.word	0x20000638

080092c0 <srand>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4b10      	ldr	r3, [pc, #64]	; (8009304 <srand+0x44>)
 80092c4:	4604      	mov	r4, r0
 80092c6:	681d      	ldr	r5, [r3, #0]
 80092c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80092ca:	b9b3      	cbnz	r3, 80092fa <srand+0x3a>
 80092cc:	2018      	movs	r0, #24
 80092ce:	f7ff ff39 	bl	8009144 <malloc>
 80092d2:	4602      	mov	r2, r0
 80092d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80092d6:	b920      	cbnz	r0, 80092e2 <srand+0x22>
 80092d8:	2142      	movs	r1, #66	; 0x42
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <srand+0x48>)
 80092dc:	480b      	ldr	r0, [pc, #44]	; (800930c <srand+0x4c>)
 80092de:	f000 f8fb 	bl	80094d8 <__assert_func>
 80092e2:	490b      	ldr	r1, [pc, #44]	; (8009310 <srand+0x50>)
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <srand+0x54>)
 80092e6:	e9c0 1300 	strd	r1, r3, [r0]
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <srand+0x58>)
 80092ec:	2100      	movs	r1, #0
 80092ee:	6083      	str	r3, [r0, #8]
 80092f0:	230b      	movs	r3, #11
 80092f2:	8183      	strh	r3, [r0, #12]
 80092f4:	2001      	movs	r0, #1
 80092f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80092fa:	2200      	movs	r2, #0
 80092fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80092fe:	611c      	str	r4, [r3, #16]
 8009300:	615a      	str	r2, [r3, #20]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000198 	.word	0x20000198
 8009308:	0800a4b4 	.word	0x0800a4b4
 800930c:	0800a4cb 	.word	0x0800a4cb
 8009310:	abcd330e 	.word	0xabcd330e
 8009314:	e66d1234 	.word	0xe66d1234
 8009318:	0005deec 	.word	0x0005deec

0800931c <rand>:
 800931c:	4b17      	ldr	r3, [pc, #92]	; (800937c <rand+0x60>)
 800931e:	b510      	push	{r4, lr}
 8009320:	681c      	ldr	r4, [r3, #0]
 8009322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009324:	b9b3      	cbnz	r3, 8009354 <rand+0x38>
 8009326:	2018      	movs	r0, #24
 8009328:	f7ff ff0c 	bl	8009144 <malloc>
 800932c:	4602      	mov	r2, r0
 800932e:	63a0      	str	r0, [r4, #56]	; 0x38
 8009330:	b920      	cbnz	r0, 800933c <rand+0x20>
 8009332:	214e      	movs	r1, #78	; 0x4e
 8009334:	4b12      	ldr	r3, [pc, #72]	; (8009380 <rand+0x64>)
 8009336:	4813      	ldr	r0, [pc, #76]	; (8009384 <rand+0x68>)
 8009338:	f000 f8ce 	bl	80094d8 <__assert_func>
 800933c:	4912      	ldr	r1, [pc, #72]	; (8009388 <rand+0x6c>)
 800933e:	4b13      	ldr	r3, [pc, #76]	; (800938c <rand+0x70>)
 8009340:	e9c0 1300 	strd	r1, r3, [r0]
 8009344:	4b12      	ldr	r3, [pc, #72]	; (8009390 <rand+0x74>)
 8009346:	2100      	movs	r1, #0
 8009348:	6083      	str	r3, [r0, #8]
 800934a:	230b      	movs	r3, #11
 800934c:	8183      	strh	r3, [r0, #12]
 800934e:	2001      	movs	r0, #1
 8009350:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009354:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009356:	480f      	ldr	r0, [pc, #60]	; (8009394 <rand+0x78>)
 8009358:	690a      	ldr	r2, [r1, #16]
 800935a:	694b      	ldr	r3, [r1, #20]
 800935c:	4350      	muls	r0, r2
 800935e:	4c0e      	ldr	r4, [pc, #56]	; (8009398 <rand+0x7c>)
 8009360:	fb04 0003 	mla	r0, r4, r3, r0
 8009364:	fba2 3404 	umull	r3, r4, r2, r4
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	4404      	add	r4, r0
 800936c:	f144 0000 	adc.w	r0, r4, #0
 8009370:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009374:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	20000198 	.word	0x20000198
 8009380:	0800a4b4 	.word	0x0800a4b4
 8009384:	0800a4cb 	.word	0x0800a4cb
 8009388:	abcd330e 	.word	0xabcd330e
 800938c:	e66d1234 	.word	0xe66d1234
 8009390:	0005deec 	.word	0x0005deec
 8009394:	5851f42d 	.word	0x5851f42d
 8009398:	4c957f2d 	.word	0x4c957f2d

0800939c <_sbrk_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	2300      	movs	r3, #0
 80093a0:	4d05      	ldr	r5, [pc, #20]	; (80093b8 <_sbrk_r+0x1c>)
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	f7f7 fae4 	bl	8000974 <_sbrk>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_sbrk_r+0x1a>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_sbrk_r+0x1a>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	2000165c 	.word	0x2000165c

080093bc <strcat>:
 80093bc:	4602      	mov	r2, r0
 80093be:	b510      	push	{r4, lr}
 80093c0:	7814      	ldrb	r4, [r2, #0]
 80093c2:	4613      	mov	r3, r2
 80093c4:	3201      	adds	r2, #1
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	d1fa      	bne.n	80093c0 <strcat+0x4>
 80093ca:	3b01      	subs	r3, #1
 80093cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093d4:	2a00      	cmp	r2, #0
 80093d6:	d1f9      	bne.n	80093cc <strcat+0x10>
 80093d8:	bd10      	pop	{r4, pc}

080093da <strcpy>:
 80093da:	4603      	mov	r3, r0
 80093dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093e0:	f803 2b01 	strb.w	r2, [r3], #1
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	d1f9      	bne.n	80093dc <strcpy+0x2>
 80093e8:	4770      	bx	lr
	...

080093ec <strtok>:
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <strtok+0x5c>)
 80093ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	681f      	ldr	r7, [r3, #0]
 80093f4:	4605      	mov	r5, r0
 80093f6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80093f8:	460e      	mov	r6, r1
 80093fa:	b9ec      	cbnz	r4, 8009438 <strtok+0x4c>
 80093fc:	2050      	movs	r0, #80	; 0x50
 80093fe:	f7ff fea1 	bl	8009144 <malloc>
 8009402:	4602      	mov	r2, r0
 8009404:	65b8      	str	r0, [r7, #88]	; 0x58
 8009406:	b920      	cbnz	r0, 8009412 <strtok+0x26>
 8009408:	2157      	movs	r1, #87	; 0x57
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <strtok+0x60>)
 800940c:	4810      	ldr	r0, [pc, #64]	; (8009450 <strtok+0x64>)
 800940e:	f000 f863 	bl	80094d8 <__assert_func>
 8009412:	e9c0 4400 	strd	r4, r4, [r0]
 8009416:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800941a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800941e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009422:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009426:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800942a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800942e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009432:	6184      	str	r4, [r0, #24]
 8009434:	7704      	strb	r4, [r0, #28]
 8009436:	6244      	str	r4, [r0, #36]	; 0x24
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800943e:	2301      	movs	r3, #1
 8009440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009444:	f000 b806 	b.w	8009454 <__strtok_r>
 8009448:	20000198 	.word	0x20000198
 800944c:	0800a4b4 	.word	0x0800a4b4
 8009450:	0800a52a 	.word	0x0800a52a

08009454 <__strtok_r>:
 8009454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009456:	b908      	cbnz	r0, 800945c <__strtok_r+0x8>
 8009458:	6810      	ldr	r0, [r2, #0]
 800945a:	b188      	cbz	r0, 8009480 <__strtok_r+0x2c>
 800945c:	4604      	mov	r4, r0
 800945e:	460f      	mov	r7, r1
 8009460:	4620      	mov	r0, r4
 8009462:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009466:	f817 6b01 	ldrb.w	r6, [r7], #1
 800946a:	b91e      	cbnz	r6, 8009474 <__strtok_r+0x20>
 800946c:	b965      	cbnz	r5, 8009488 <__strtok_r+0x34>
 800946e:	4628      	mov	r0, r5
 8009470:	6015      	str	r5, [r2, #0]
 8009472:	e005      	b.n	8009480 <__strtok_r+0x2c>
 8009474:	42b5      	cmp	r5, r6
 8009476:	d1f6      	bne.n	8009466 <__strtok_r+0x12>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1f0      	bne.n	800945e <__strtok_r+0xa>
 800947c:	6014      	str	r4, [r2, #0]
 800947e:	7003      	strb	r3, [r0, #0]
 8009480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009482:	461c      	mov	r4, r3
 8009484:	e00c      	b.n	80094a0 <__strtok_r+0x4c>
 8009486:	b915      	cbnz	r5, 800948e <__strtok_r+0x3a>
 8009488:	460e      	mov	r6, r1
 800948a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800948e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009492:	42ab      	cmp	r3, r5
 8009494:	d1f7      	bne.n	8009486 <__strtok_r+0x32>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f3      	beq.n	8009482 <__strtok_r+0x2e>
 800949a:	2300      	movs	r3, #0
 800949c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80094a0:	6014      	str	r4, [r2, #0]
 80094a2:	e7ed      	b.n	8009480 <__strtok_r+0x2c>

080094a4 <time>:
 80094a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094a6:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <time+0x30>)
 80094a8:	4604      	mov	r4, r0
 80094aa:	2200      	movs	r2, #0
 80094ac:	4669      	mov	r1, sp
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	f000 f842 	bl	8009538 <_gettimeofday_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	da05      	bge.n	80094c4 <time+0x20>
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	f04f 33ff 	mov.w	r3, #4294967295
 80094c0:	e9cd 2300 	strd	r2, r3, [sp]
 80094c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c8:	b10c      	cbz	r4, 80094ce <time+0x2a>
 80094ca:	e9c4 0100 	strd	r0, r1, [r4]
 80094ce:	b004      	add	sp, #16
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	bf00      	nop
 80094d4:	20000198 	.word	0x20000198

080094d8 <__assert_func>:
 80094d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094da:	4614      	mov	r4, r2
 80094dc:	461a      	mov	r2, r3
 80094de:	4b09      	ldr	r3, [pc, #36]	; (8009504 <__assert_func+0x2c>)
 80094e0:	4605      	mov	r5, r0
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68d8      	ldr	r0, [r3, #12]
 80094e6:	b14c      	cbz	r4, 80094fc <__assert_func+0x24>
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <__assert_func+0x30>)
 80094ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094ee:	9100      	str	r1, [sp, #0]
 80094f0:	462b      	mov	r3, r5
 80094f2:	4906      	ldr	r1, [pc, #24]	; (800950c <__assert_func+0x34>)
 80094f4:	f000 f80e 	bl	8009514 <fiprintf>
 80094f8:	f000 fbea 	bl	8009cd0 <abort>
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <__assert_func+0x38>)
 80094fe:	461c      	mov	r4, r3
 8009500:	e7f3      	b.n	80094ea <__assert_func+0x12>
 8009502:	bf00      	nop
 8009504:	20000198 	.word	0x20000198
 8009508:	0800a58b 	.word	0x0800a58b
 800950c:	0800a598 	.word	0x0800a598
 8009510:	0800a5c6 	.word	0x0800a5c6

08009514 <fiprintf>:
 8009514:	b40e      	push	{r1, r2, r3}
 8009516:	b503      	push	{r0, r1, lr}
 8009518:	4601      	mov	r1, r0
 800951a:	ab03      	add	r3, sp, #12
 800951c:	4805      	ldr	r0, [pc, #20]	; (8009534 <fiprintf+0x20>)
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	6800      	ldr	r0, [r0, #0]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	f000 f84d 	bl	80095c4 <_vfiprintf_r>
 800952a:	b002      	add	sp, #8
 800952c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009530:	b003      	add	sp, #12
 8009532:	4770      	bx	lr
 8009534:	20000198 	.word	0x20000198

08009538 <_gettimeofday_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	2300      	movs	r3, #0
 800953c:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_gettimeofday_r+0x20>)
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	f000 fee7 	bl	800a318 <_gettimeofday>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d102      	bne.n	8009554 <_gettimeofday_r+0x1c>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b103      	cbz	r3, 8009554 <_gettimeofday_r+0x1c>
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	bf00      	nop
 8009558:	2000165c 	.word	0x2000165c

0800955c <__malloc_lock>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__malloc_lock+0x8>)
 800955e:	f000 bd77 	b.w	800a050 <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	20001664 	.word	0x20001664

08009568 <__malloc_unlock>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__malloc_unlock+0x8>)
 800956a:	f000 bd72 	b.w	800a052 <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	20001664 	.word	0x20001664

08009574 <__sfputc_r>:
 8009574:	6893      	ldr	r3, [r2, #8]
 8009576:	b410      	push	{r4}
 8009578:	3b01      	subs	r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	6093      	str	r3, [r2, #8]
 800957e:	da07      	bge.n	8009590 <__sfputc_r+0x1c>
 8009580:	6994      	ldr	r4, [r2, #24]
 8009582:	42a3      	cmp	r3, r4
 8009584:	db01      	blt.n	800958a <__sfputc_r+0x16>
 8009586:	290a      	cmp	r1, #10
 8009588:	d102      	bne.n	8009590 <__sfputc_r+0x1c>
 800958a:	bc10      	pop	{r4}
 800958c:	f000 bae0 	b.w	8009b50 <__swbuf_r>
 8009590:	6813      	ldr	r3, [r2, #0]
 8009592:	1c58      	adds	r0, r3, #1
 8009594:	6010      	str	r0, [r2, #0]
 8009596:	7019      	strb	r1, [r3, #0]
 8009598:	4608      	mov	r0, r1
 800959a:	bc10      	pop	{r4}
 800959c:	4770      	bx	lr

0800959e <__sfputs_r>:
 800959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a0:	4606      	mov	r6, r0
 80095a2:	460f      	mov	r7, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	18d5      	adds	r5, r2, r3
 80095a8:	42ac      	cmp	r4, r5
 80095aa:	d101      	bne.n	80095b0 <__sfputs_r+0x12>
 80095ac:	2000      	movs	r0, #0
 80095ae:	e007      	b.n	80095c0 <__sfputs_r+0x22>
 80095b0:	463a      	mov	r2, r7
 80095b2:	4630      	mov	r0, r6
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	f7ff ffdc 	bl	8009574 <__sfputc_r>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d1f3      	bne.n	80095a8 <__sfputs_r+0xa>
 80095c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095c4 <_vfiprintf_r>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	460d      	mov	r5, r1
 80095ca:	4614      	mov	r4, r2
 80095cc:	4698      	mov	r8, r3
 80095ce:	4606      	mov	r6, r0
 80095d0:	b09d      	sub	sp, #116	; 0x74
 80095d2:	b118      	cbz	r0, 80095dc <_vfiprintf_r+0x18>
 80095d4:	6983      	ldr	r3, [r0, #24]
 80095d6:	b90b      	cbnz	r3, 80095dc <_vfiprintf_r+0x18>
 80095d8:	f000 fc9c 	bl	8009f14 <__sinit>
 80095dc:	4b89      	ldr	r3, [pc, #548]	; (8009804 <_vfiprintf_r+0x240>)
 80095de:	429d      	cmp	r5, r3
 80095e0:	d11b      	bne.n	800961a <_vfiprintf_r+0x56>
 80095e2:	6875      	ldr	r5, [r6, #4]
 80095e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f2:	f000 fd2d 	bl	800a050 <__retarget_lock_acquire_recursive>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	071b      	lsls	r3, r3, #28
 80095fa:	d501      	bpl.n	8009600 <_vfiprintf_r+0x3c>
 80095fc:	692b      	ldr	r3, [r5, #16]
 80095fe:	b9eb      	cbnz	r3, 800963c <_vfiprintf_r+0x78>
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f000 faf6 	bl	8009bf4 <__swsetup_r>
 8009608:	b1c0      	cbz	r0, 800963c <_vfiprintf_r+0x78>
 800960a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800960c:	07dc      	lsls	r4, r3, #31
 800960e:	d50e      	bpl.n	800962e <_vfiprintf_r+0x6a>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b01d      	add	sp, #116	; 0x74
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	4b7b      	ldr	r3, [pc, #492]	; (8009808 <_vfiprintf_r+0x244>)
 800961c:	429d      	cmp	r5, r3
 800961e:	d101      	bne.n	8009624 <_vfiprintf_r+0x60>
 8009620:	68b5      	ldr	r5, [r6, #8]
 8009622:	e7df      	b.n	80095e4 <_vfiprintf_r+0x20>
 8009624:	4b79      	ldr	r3, [pc, #484]	; (800980c <_vfiprintf_r+0x248>)
 8009626:	429d      	cmp	r5, r3
 8009628:	bf08      	it	eq
 800962a:	68f5      	ldreq	r5, [r6, #12]
 800962c:	e7da      	b.n	80095e4 <_vfiprintf_r+0x20>
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4ed      	bmi.n	8009610 <_vfiprintf_r+0x4c>
 8009634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009636:	f000 fd0c 	bl	800a052 <__retarget_lock_release_recursive>
 800963a:	e7e9      	b.n	8009610 <_vfiprintf_r+0x4c>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	2330      	movs	r3, #48	; 0x30
 8009648:	f04f 0901 	mov.w	r9, #1
 800964c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009650:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009810 <_vfiprintf_r+0x24c>
 8009654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0xa2>
 8009662:	2a25      	cmp	r2, #37	; 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x96>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xc0>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ff93 	bl	800959e <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80aa 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a2 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a4:	931a      	str	r3, [sp, #104]	; 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4858      	ldr	r0, [pc, #352]	; (8009810 <_vfiprintf_r+0x24c>)
 80096b0:	f000 fd34 	bl	800a11c <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x12c>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	; 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x13c>
 80096d4:	4654      	mov	r4, sl
 80096d6:	2000      	movs	r0, #0
 80096d8:	f04f 0c0a 	mov.w	ip, #10
 80096dc:	9a07      	ldr	r2, [sp, #28]
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94e      	bls.n	8009788 <_vfiprintf_r+0x1c4>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x156>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x156>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	46a2      	mov	sl, r4
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xe2>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	; 0x2e
 800971e:	d10c      	bne.n	800973a <_vfiprintf_r+0x176>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d135      	bne.n	8009792 <_vfiprintf_r+0x1ce>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	3402      	adds	r4, #2
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	9203      	str	r2, [sp, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	bfb8      	it	lt
 8009734:	f04f 33ff 	movlt.w	r3, #4294967295
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009820 <_vfiprintf_r+0x25c>
 800973e:	2203      	movs	r2, #3
 8009740:	4650      	mov	r0, sl
 8009742:	7821      	ldrb	r1, [r4, #0]
 8009744:	f000 fcea 	bl	800a11c <memchr>
 8009748:	b140      	cbz	r0, 800975c <_vfiprintf_r+0x198>
 800974a:	2340      	movs	r3, #64	; 0x40
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	fa03 f000 	lsl.w	r0, r3, r0
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	3401      	adds	r4, #1
 8009758:	4303      	orrs	r3, r0
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009760:	2206      	movs	r2, #6
 8009762:	482c      	ldr	r0, [pc, #176]	; (8009814 <_vfiprintf_r+0x250>)
 8009764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009768:	f000 fcd8 	bl	800a11c <memchr>
 800976c:	2800      	cmp	r0, #0
 800976e:	d03f      	beq.n	80097f0 <_vfiprintf_r+0x22c>
 8009770:	4b29      	ldr	r3, [pc, #164]	; (8009818 <_vfiprintf_r+0x254>)
 8009772:	bb1b      	cbnz	r3, 80097bc <_vfiprintf_r+0x1f8>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	3307      	adds	r3, #7
 8009778:	f023 0307 	bic.w	r3, r3, #7
 800977c:	3308      	adds	r3, #8
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	443b      	add	r3, r7
 8009784:	9309      	str	r3, [sp, #36]	; 0x24
 8009786:	e767      	b.n	8009658 <_vfiprintf_r+0x94>
 8009788:	460c      	mov	r4, r1
 800978a:	2001      	movs	r0, #1
 800978c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009790:	e7a5      	b.n	80096de <_vfiprintf_r+0x11a>
 8009792:	2300      	movs	r3, #0
 8009794:	f04f 0c0a 	mov.w	ip, #10
 8009798:	4619      	mov	r1, r3
 800979a:	3401      	adds	r4, #1
 800979c:	9305      	str	r3, [sp, #20]
 800979e:	4620      	mov	r0, r4
 80097a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a4:	3a30      	subs	r2, #48	; 0x30
 80097a6:	2a09      	cmp	r2, #9
 80097a8:	d903      	bls.n	80097b2 <_vfiprintf_r+0x1ee>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0c5      	beq.n	800973a <_vfiprintf_r+0x176>
 80097ae:	9105      	str	r1, [sp, #20]
 80097b0:	e7c3      	b.n	800973a <_vfiprintf_r+0x176>
 80097b2:	4604      	mov	r4, r0
 80097b4:	2301      	movs	r3, #1
 80097b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ba:	e7f0      	b.n	800979e <_vfiprintf_r+0x1da>
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4630      	mov	r0, r6
 80097c4:	4b15      	ldr	r3, [pc, #84]	; (800981c <_vfiprintf_r+0x258>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	f3af 8000 	nop.w
 80097cc:	4607      	mov	r7, r0
 80097ce:	1c78      	adds	r0, r7, #1
 80097d0:	d1d6      	bne.n	8009780 <_vfiprintf_r+0x1bc>
 80097d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d4:	07d9      	lsls	r1, r3, #31
 80097d6:	d405      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	059a      	lsls	r2, r3, #22
 80097dc:	d402      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e0:	f000 fc37 	bl	800a052 <__retarget_lock_release_recursive>
 80097e4:	89ab      	ldrh	r3, [r5, #12]
 80097e6:	065b      	lsls	r3, r3, #25
 80097e8:	f53f af12 	bmi.w	8009610 <_vfiprintf_r+0x4c>
 80097ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ee:	e711      	b.n	8009614 <_vfiprintf_r+0x50>
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	4b08      	ldr	r3, [pc, #32]	; (800981c <_vfiprintf_r+0x258>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	f000 f882 	bl	8009904 <_printf_i>
 8009800:	e7e4      	b.n	80097cc <_vfiprintf_r+0x208>
 8009802:	bf00      	nop
 8009804:	0800a61c 	.word	0x0800a61c
 8009808:	0800a63c 	.word	0x0800a63c
 800980c:	0800a5fc 	.word	0x0800a5fc
 8009810:	0800a5c7 	.word	0x0800a5c7
 8009814:	0800a5d1 	.word	0x0800a5d1
 8009818:	00000000 	.word	0x00000000
 800981c:	0800959f 	.word	0x0800959f
 8009820:	0800a5cd 	.word	0x0800a5cd

08009824 <_printf_common>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	4616      	mov	r6, r2
 800982a:	4699      	mov	r9, r3
 800982c:	688a      	ldr	r2, [r1, #8]
 800982e:	690b      	ldr	r3, [r1, #16]
 8009830:	4607      	mov	r7, r0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfb8      	it	lt
 8009836:	4613      	movlt	r3, r2
 8009838:	6033      	str	r3, [r6, #0]
 800983a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800983e:	460c      	mov	r4, r1
 8009840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009844:	b10a      	cbz	r2, 800984a <_printf_common+0x26>
 8009846:	3301      	adds	r3, #1
 8009848:	6033      	str	r3, [r6, #0]
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	0699      	lsls	r1, r3, #26
 800984e:	bf42      	ittt	mi
 8009850:	6833      	ldrmi	r3, [r6, #0]
 8009852:	3302      	addmi	r3, #2
 8009854:	6033      	strmi	r3, [r6, #0]
 8009856:	6825      	ldr	r5, [r4, #0]
 8009858:	f015 0506 	ands.w	r5, r5, #6
 800985c:	d106      	bne.n	800986c <_printf_common+0x48>
 800985e:	f104 0a19 	add.w	sl, r4, #25
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	6832      	ldr	r2, [r6, #0]
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	42ab      	cmp	r3, r5
 800986a:	dc28      	bgt.n	80098be <_printf_common+0x9a>
 800986c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009870:	1e13      	subs	r3, r2, #0
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	bf18      	it	ne
 8009876:	2301      	movne	r3, #1
 8009878:	0692      	lsls	r2, r2, #26
 800987a:	d42d      	bmi.n	80098d8 <_printf_common+0xb4>
 800987c:	4649      	mov	r1, r9
 800987e:	4638      	mov	r0, r7
 8009880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009884:	47c0      	blx	r8
 8009886:	3001      	adds	r0, #1
 8009888:	d020      	beq.n	80098cc <_printf_common+0xa8>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	68e5      	ldr	r5, [r4, #12]
 800988e:	f003 0306 	and.w	r3, r3, #6
 8009892:	2b04      	cmp	r3, #4
 8009894:	bf18      	it	ne
 8009896:	2500      	movne	r5, #0
 8009898:	6832      	ldr	r2, [r6, #0]
 800989a:	f04f 0600 	mov.w	r6, #0
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	bf08      	it	eq
 80098a2:	1aad      	subeq	r5, r5, r2
 80098a4:	6922      	ldr	r2, [r4, #16]
 80098a6:	bf08      	it	eq
 80098a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098ac:	4293      	cmp	r3, r2
 80098ae:	bfc4      	itt	gt
 80098b0:	1a9b      	subgt	r3, r3, r2
 80098b2:	18ed      	addgt	r5, r5, r3
 80098b4:	341a      	adds	r4, #26
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	d11a      	bne.n	80098f0 <_printf_common+0xcc>
 80098ba:	2000      	movs	r0, #0
 80098bc:	e008      	b.n	80098d0 <_printf_common+0xac>
 80098be:	2301      	movs	r3, #1
 80098c0:	4652      	mov	r2, sl
 80098c2:	4649      	mov	r1, r9
 80098c4:	4638      	mov	r0, r7
 80098c6:	47c0      	blx	r8
 80098c8:	3001      	adds	r0, #1
 80098ca:	d103      	bne.n	80098d4 <_printf_common+0xb0>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d4:	3501      	adds	r5, #1
 80098d6:	e7c4      	b.n	8009862 <_printf_common+0x3e>
 80098d8:	2030      	movs	r0, #48	; 0x30
 80098da:	18e1      	adds	r1, r4, r3
 80098dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098e6:	4422      	add	r2, r4
 80098e8:	3302      	adds	r3, #2
 80098ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ee:	e7c5      	b.n	800987c <_printf_common+0x58>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4622      	mov	r2, r4
 80098f4:	4649      	mov	r1, r9
 80098f6:	4638      	mov	r0, r7
 80098f8:	47c0      	blx	r8
 80098fa:	3001      	adds	r0, #1
 80098fc:	d0e6      	beq.n	80098cc <_printf_common+0xa8>
 80098fe:	3601      	adds	r6, #1
 8009900:	e7d9      	b.n	80098b6 <_printf_common+0x92>
	...

08009904 <_printf_i>:
 8009904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	460c      	mov	r4, r1
 800990a:	7e27      	ldrb	r7, [r4, #24]
 800990c:	4691      	mov	r9, r2
 800990e:	2f78      	cmp	r7, #120	; 0x78
 8009910:	4680      	mov	r8, r0
 8009912:	469a      	mov	sl, r3
 8009914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800991a:	d807      	bhi.n	800992c <_printf_i+0x28>
 800991c:	2f62      	cmp	r7, #98	; 0x62
 800991e:	d80a      	bhi.n	8009936 <_printf_i+0x32>
 8009920:	2f00      	cmp	r7, #0
 8009922:	f000 80d9 	beq.w	8009ad8 <_printf_i+0x1d4>
 8009926:	2f58      	cmp	r7, #88	; 0x58
 8009928:	f000 80a4 	beq.w	8009a74 <_printf_i+0x170>
 800992c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009934:	e03a      	b.n	80099ac <_printf_i+0xa8>
 8009936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800993a:	2b15      	cmp	r3, #21
 800993c:	d8f6      	bhi.n	800992c <_printf_i+0x28>
 800993e:	a001      	add	r0, pc, #4	; (adr r0, 8009944 <_printf_i+0x40>)
 8009940:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009944:	0800999d 	.word	0x0800999d
 8009948:	080099b1 	.word	0x080099b1
 800994c:	0800992d 	.word	0x0800992d
 8009950:	0800992d 	.word	0x0800992d
 8009954:	0800992d 	.word	0x0800992d
 8009958:	0800992d 	.word	0x0800992d
 800995c:	080099b1 	.word	0x080099b1
 8009960:	0800992d 	.word	0x0800992d
 8009964:	0800992d 	.word	0x0800992d
 8009968:	0800992d 	.word	0x0800992d
 800996c:	0800992d 	.word	0x0800992d
 8009970:	08009abf 	.word	0x08009abf
 8009974:	080099e1 	.word	0x080099e1
 8009978:	08009aa1 	.word	0x08009aa1
 800997c:	0800992d 	.word	0x0800992d
 8009980:	0800992d 	.word	0x0800992d
 8009984:	08009ae1 	.word	0x08009ae1
 8009988:	0800992d 	.word	0x0800992d
 800998c:	080099e1 	.word	0x080099e1
 8009990:	0800992d 	.word	0x0800992d
 8009994:	0800992d 	.word	0x0800992d
 8009998:	08009aa9 	.word	0x08009aa9
 800999c:	680b      	ldr	r3, [r1, #0]
 800999e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099a2:	1d1a      	adds	r2, r3, #4
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	600a      	str	r2, [r1, #0]
 80099a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0a4      	b.n	8009afa <_printf_i+0x1f6>
 80099b0:	6825      	ldr	r5, [r4, #0]
 80099b2:	6808      	ldr	r0, [r1, #0]
 80099b4:	062e      	lsls	r6, r5, #24
 80099b6:	f100 0304 	add.w	r3, r0, #4
 80099ba:	d50a      	bpl.n	80099d2 <_printf_i+0xce>
 80099bc:	6805      	ldr	r5, [r0, #0]
 80099be:	600b      	str	r3, [r1, #0]
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	da03      	bge.n	80099cc <_printf_i+0xc8>
 80099c4:	232d      	movs	r3, #45	; 0x2d
 80099c6:	426d      	negs	r5, r5
 80099c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099cc:	230a      	movs	r3, #10
 80099ce:	485e      	ldr	r0, [pc, #376]	; (8009b48 <_printf_i+0x244>)
 80099d0:	e019      	b.n	8009a06 <_printf_i+0x102>
 80099d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099d6:	6805      	ldr	r5, [r0, #0]
 80099d8:	600b      	str	r3, [r1, #0]
 80099da:	bf18      	it	ne
 80099dc:	b22d      	sxthne	r5, r5
 80099de:	e7ef      	b.n	80099c0 <_printf_i+0xbc>
 80099e0:	680b      	ldr	r3, [r1, #0]
 80099e2:	6825      	ldr	r5, [r4, #0]
 80099e4:	1d18      	adds	r0, r3, #4
 80099e6:	6008      	str	r0, [r1, #0]
 80099e8:	0628      	lsls	r0, r5, #24
 80099ea:	d501      	bpl.n	80099f0 <_printf_i+0xec>
 80099ec:	681d      	ldr	r5, [r3, #0]
 80099ee:	e002      	b.n	80099f6 <_printf_i+0xf2>
 80099f0:	0669      	lsls	r1, r5, #25
 80099f2:	d5fb      	bpl.n	80099ec <_printf_i+0xe8>
 80099f4:	881d      	ldrh	r5, [r3, #0]
 80099f6:	2f6f      	cmp	r7, #111	; 0x6f
 80099f8:	bf0c      	ite	eq
 80099fa:	2308      	moveq	r3, #8
 80099fc:	230a      	movne	r3, #10
 80099fe:	4852      	ldr	r0, [pc, #328]	; (8009b48 <_printf_i+0x244>)
 8009a00:	2100      	movs	r1, #0
 8009a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a06:	6866      	ldr	r6, [r4, #4]
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	bfa8      	it	ge
 8009a0c:	6821      	ldrge	r1, [r4, #0]
 8009a0e:	60a6      	str	r6, [r4, #8]
 8009a10:	bfa4      	itt	ge
 8009a12:	f021 0104 	bicge.w	r1, r1, #4
 8009a16:	6021      	strge	r1, [r4, #0]
 8009a18:	b90d      	cbnz	r5, 8009a1e <_printf_i+0x11a>
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	d04d      	beq.n	8009aba <_printf_i+0x1b6>
 8009a1e:	4616      	mov	r6, r2
 8009a20:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a24:	fb03 5711 	mls	r7, r3, r1, r5
 8009a28:	5dc7      	ldrb	r7, [r0, r7]
 8009a2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a2e:	462f      	mov	r7, r5
 8009a30:	42bb      	cmp	r3, r7
 8009a32:	460d      	mov	r5, r1
 8009a34:	d9f4      	bls.n	8009a20 <_printf_i+0x11c>
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d10b      	bne.n	8009a52 <_printf_i+0x14e>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	07df      	lsls	r7, r3, #31
 8009a3e:	d508      	bpl.n	8009a52 <_printf_i+0x14e>
 8009a40:	6923      	ldr	r3, [r4, #16]
 8009a42:	6861      	ldr	r1, [r4, #4]
 8009a44:	4299      	cmp	r1, r3
 8009a46:	bfde      	ittt	le
 8009a48:	2330      	movle	r3, #48	; 0x30
 8009a4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a52:	1b92      	subs	r2, r2, r6
 8009a54:	6122      	str	r2, [r4, #16]
 8009a56:	464b      	mov	r3, r9
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f8cd a000 	str.w	sl, [sp]
 8009a60:	aa03      	add	r2, sp, #12
 8009a62:	f7ff fedf 	bl	8009824 <_printf_common>
 8009a66:	3001      	adds	r0, #1
 8009a68:	d14c      	bne.n	8009b04 <_printf_i+0x200>
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	b004      	add	sp, #16
 8009a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a74:	4834      	ldr	r0, [pc, #208]	; (8009b48 <_printf_i+0x244>)
 8009a76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a7a:	680e      	ldr	r6, [r1, #0]
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a82:	061f      	lsls	r7, r3, #24
 8009a84:	600e      	str	r6, [r1, #0]
 8009a86:	d514      	bpl.n	8009ab2 <_printf_i+0x1ae>
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	bf44      	itt	mi
 8009a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009a90:	6023      	strmi	r3, [r4, #0]
 8009a92:	b91d      	cbnz	r5, 8009a9c <_printf_i+0x198>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	f023 0320 	bic.w	r3, r3, #32
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	e7af      	b.n	8009a00 <_printf_i+0xfc>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	2378      	movs	r3, #120	; 0x78
 8009aaa:	4828      	ldr	r0, [pc, #160]	; (8009b4c <_printf_i+0x248>)
 8009aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ab0:	e7e3      	b.n	8009a7a <_printf_i+0x176>
 8009ab2:	065e      	lsls	r6, r3, #25
 8009ab4:	bf48      	it	mi
 8009ab6:	b2ad      	uxthmi	r5, r5
 8009ab8:	e7e6      	b.n	8009a88 <_printf_i+0x184>
 8009aba:	4616      	mov	r6, r2
 8009abc:	e7bb      	b.n	8009a36 <_printf_i+0x132>
 8009abe:	680b      	ldr	r3, [r1, #0]
 8009ac0:	6826      	ldr	r6, [r4, #0]
 8009ac2:	1d1d      	adds	r5, r3, #4
 8009ac4:	6960      	ldr	r0, [r4, #20]
 8009ac6:	600d      	str	r5, [r1, #0]
 8009ac8:	0635      	lsls	r5, r6, #24
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	d501      	bpl.n	8009ad2 <_printf_i+0x1ce>
 8009ace:	6018      	str	r0, [r3, #0]
 8009ad0:	e002      	b.n	8009ad8 <_printf_i+0x1d4>
 8009ad2:	0671      	lsls	r1, r6, #25
 8009ad4:	d5fb      	bpl.n	8009ace <_printf_i+0x1ca>
 8009ad6:	8018      	strh	r0, [r3, #0]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4616      	mov	r6, r2
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	e7ba      	b.n	8009a56 <_printf_i+0x152>
 8009ae0:	680b      	ldr	r3, [r1, #0]
 8009ae2:	1d1a      	adds	r2, r3, #4
 8009ae4:	600a      	str	r2, [r1, #0]
 8009ae6:	681e      	ldr	r6, [r3, #0]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4630      	mov	r0, r6
 8009aec:	6862      	ldr	r2, [r4, #4]
 8009aee:	f000 fb15 	bl	800a11c <memchr>
 8009af2:	b108      	cbz	r0, 8009af8 <_printf_i+0x1f4>
 8009af4:	1b80      	subs	r0, r0, r6
 8009af6:	6060      	str	r0, [r4, #4]
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	2300      	movs	r3, #0
 8009afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b02:	e7a8      	b.n	8009a56 <_printf_i+0x152>
 8009b04:	4632      	mov	r2, r6
 8009b06:	4649      	mov	r1, r9
 8009b08:	4640      	mov	r0, r8
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	47d0      	blx	sl
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d0ab      	beq.n	8009a6a <_printf_i+0x166>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	079b      	lsls	r3, r3, #30
 8009b16:	d413      	bmi.n	8009b40 <_printf_i+0x23c>
 8009b18:	68e0      	ldr	r0, [r4, #12]
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	4298      	cmp	r0, r3
 8009b1e:	bfb8      	it	lt
 8009b20:	4618      	movlt	r0, r3
 8009b22:	e7a4      	b.n	8009a6e <_printf_i+0x16a>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4632      	mov	r2, r6
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	47d0      	blx	sl
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d09b      	beq.n	8009a6a <_printf_i+0x166>
 8009b32:	3501      	adds	r5, #1
 8009b34:	68e3      	ldr	r3, [r4, #12]
 8009b36:	9903      	ldr	r1, [sp, #12]
 8009b38:	1a5b      	subs	r3, r3, r1
 8009b3a:	42ab      	cmp	r3, r5
 8009b3c:	dcf2      	bgt.n	8009b24 <_printf_i+0x220>
 8009b3e:	e7eb      	b.n	8009b18 <_printf_i+0x214>
 8009b40:	2500      	movs	r5, #0
 8009b42:	f104 0619 	add.w	r6, r4, #25
 8009b46:	e7f5      	b.n	8009b34 <_printf_i+0x230>
 8009b48:	0800a5d8 	.word	0x0800a5d8
 8009b4c:	0800a5e9 	.word	0x0800a5e9

08009b50 <__swbuf_r>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	460e      	mov	r6, r1
 8009b54:	4614      	mov	r4, r2
 8009b56:	4605      	mov	r5, r0
 8009b58:	b118      	cbz	r0, 8009b62 <__swbuf_r+0x12>
 8009b5a:	6983      	ldr	r3, [r0, #24]
 8009b5c:	b90b      	cbnz	r3, 8009b62 <__swbuf_r+0x12>
 8009b5e:	f000 f9d9 	bl	8009f14 <__sinit>
 8009b62:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <__swbuf_r+0x98>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d12b      	bne.n	8009bc0 <__swbuf_r+0x70>
 8009b68:	686c      	ldr	r4, [r5, #4]
 8009b6a:	69a3      	ldr	r3, [r4, #24]
 8009b6c:	60a3      	str	r3, [r4, #8]
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	071a      	lsls	r2, r3, #28
 8009b72:	d52f      	bpl.n	8009bd4 <__swbuf_r+0x84>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	b36b      	cbz	r3, 8009bd4 <__swbuf_r+0x84>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	6820      	ldr	r0, [r4, #0]
 8009b7c:	b2f6      	uxtb	r6, r6
 8009b7e:	1ac0      	subs	r0, r0, r3
 8009b80:	6963      	ldr	r3, [r4, #20]
 8009b82:	4637      	mov	r7, r6
 8009b84:	4283      	cmp	r3, r0
 8009b86:	dc04      	bgt.n	8009b92 <__swbuf_r+0x42>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f000 f92e 	bl	8009dec <_fflush_r>
 8009b90:	bb30      	cbnz	r0, 8009be0 <__swbuf_r+0x90>
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	3001      	adds	r0, #1
 8009b96:	3b01      	subs	r3, #1
 8009b98:	60a3      	str	r3, [r4, #8]
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	701e      	strb	r6, [r3, #0]
 8009ba2:	6963      	ldr	r3, [r4, #20]
 8009ba4:	4283      	cmp	r3, r0
 8009ba6:	d004      	beq.n	8009bb2 <__swbuf_r+0x62>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	07db      	lsls	r3, r3, #31
 8009bac:	d506      	bpl.n	8009bbc <__swbuf_r+0x6c>
 8009bae:	2e0a      	cmp	r6, #10
 8009bb0:	d104      	bne.n	8009bbc <__swbuf_r+0x6c>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f919 	bl	8009dec <_fflush_r>
 8009bba:	b988      	cbnz	r0, 8009be0 <__swbuf_r+0x90>
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <__swbuf_r+0x9c>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d101      	bne.n	8009bca <__swbuf_r+0x7a>
 8009bc6:	68ac      	ldr	r4, [r5, #8]
 8009bc8:	e7cf      	b.n	8009b6a <__swbuf_r+0x1a>
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <__swbuf_r+0xa0>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	bf08      	it	eq
 8009bd0:	68ec      	ldreq	r4, [r5, #12]
 8009bd2:	e7ca      	b.n	8009b6a <__swbuf_r+0x1a>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 f80c 	bl	8009bf4 <__swsetup_r>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d0cb      	beq.n	8009b78 <__swbuf_r+0x28>
 8009be0:	f04f 37ff 	mov.w	r7, #4294967295
 8009be4:	e7ea      	b.n	8009bbc <__swbuf_r+0x6c>
 8009be6:	bf00      	nop
 8009be8:	0800a61c 	.word	0x0800a61c
 8009bec:	0800a63c 	.word	0x0800a63c
 8009bf0:	0800a5fc 	.word	0x0800a5fc

08009bf4 <__swsetup_r>:
 8009bf4:	4b32      	ldr	r3, [pc, #200]	; (8009cc0 <__swsetup_r+0xcc>)
 8009bf6:	b570      	push	{r4, r5, r6, lr}
 8009bf8:	681d      	ldr	r5, [r3, #0]
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	b125      	cbz	r5, 8009c0a <__swsetup_r+0x16>
 8009c00:	69ab      	ldr	r3, [r5, #24]
 8009c02:	b913      	cbnz	r3, 8009c0a <__swsetup_r+0x16>
 8009c04:	4628      	mov	r0, r5
 8009c06:	f000 f985 	bl	8009f14 <__sinit>
 8009c0a:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <__swsetup_r+0xd0>)
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	d10f      	bne.n	8009c30 <__swsetup_r+0x3c>
 8009c10:	686c      	ldr	r4, [r5, #4]
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c18:	0719      	lsls	r1, r3, #28
 8009c1a:	d42c      	bmi.n	8009c76 <__swsetup_r+0x82>
 8009c1c:	06dd      	lsls	r5, r3, #27
 8009c1e:	d411      	bmi.n	8009c44 <__swsetup_r+0x50>
 8009c20:	2309      	movs	r3, #9
 8009c22:	6033      	str	r3, [r6, #0]
 8009c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	e03e      	b.n	8009cae <__swsetup_r+0xba>
 8009c30:	4b25      	ldr	r3, [pc, #148]	; (8009cc8 <__swsetup_r+0xd4>)
 8009c32:	429c      	cmp	r4, r3
 8009c34:	d101      	bne.n	8009c3a <__swsetup_r+0x46>
 8009c36:	68ac      	ldr	r4, [r5, #8]
 8009c38:	e7eb      	b.n	8009c12 <__swsetup_r+0x1e>
 8009c3a:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <__swsetup_r+0xd8>)
 8009c3c:	429c      	cmp	r4, r3
 8009c3e:	bf08      	it	eq
 8009c40:	68ec      	ldreq	r4, [r5, #12]
 8009c42:	e7e6      	b.n	8009c12 <__swsetup_r+0x1e>
 8009c44:	0758      	lsls	r0, r3, #29
 8009c46:	d512      	bpl.n	8009c6e <__swsetup_r+0x7a>
 8009c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c4a:	b141      	cbz	r1, 8009c5e <__swsetup_r+0x6a>
 8009c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c50:	4299      	cmp	r1, r3
 8009c52:	d002      	beq.n	8009c5a <__swsetup_r+0x66>
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff fa8d 	bl	8009174 <_free_r>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	2300      	movs	r3, #0
 8009c68:	6063      	str	r3, [r4, #4]
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	f043 0308 	orr.w	r3, r3, #8
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	b94b      	cbnz	r3, 8009c8e <__swsetup_r+0x9a>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c84:	d003      	beq.n	8009c8e <__swsetup_r+0x9a>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f000 fa07 	bl	800a09c <__smakebuf_r>
 8009c8e:	89a0      	ldrh	r0, [r4, #12]
 8009c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c94:	f010 0301 	ands.w	r3, r0, #1
 8009c98:	d00a      	beq.n	8009cb0 <__swsetup_r+0xbc>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	425b      	negs	r3, r3
 8009ca2:	61a3      	str	r3, [r4, #24]
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	b943      	cbnz	r3, 8009cba <__swsetup_r+0xc6>
 8009ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cac:	d1ba      	bne.n	8009c24 <__swsetup_r+0x30>
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	0781      	lsls	r1, r0, #30
 8009cb2:	bf58      	it	pl
 8009cb4:	6963      	ldrpl	r3, [r4, #20]
 8009cb6:	60a3      	str	r3, [r4, #8]
 8009cb8:	e7f4      	b.n	8009ca4 <__swsetup_r+0xb0>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e7f7      	b.n	8009cae <__swsetup_r+0xba>
 8009cbe:	bf00      	nop
 8009cc0:	20000198 	.word	0x20000198
 8009cc4:	0800a61c 	.word	0x0800a61c
 8009cc8:	0800a63c 	.word	0x0800a63c
 8009ccc:	0800a5fc 	.word	0x0800a5fc

08009cd0 <abort>:
 8009cd0:	2006      	movs	r0, #6
 8009cd2:	b508      	push	{r3, lr}
 8009cd4:	f000 fa58 	bl	800a188 <raise>
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f7f6 fdd8 	bl	800088e <_exit>
	...

08009ce0 <__sflush_r>:
 8009ce0:	898a      	ldrh	r2, [r1, #12]
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	0710      	lsls	r0, r2, #28
 8009cea:	460c      	mov	r4, r1
 8009cec:	d458      	bmi.n	8009da0 <__sflush_r+0xc0>
 8009cee:	684b      	ldr	r3, [r1, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dc05      	bgt.n	8009d00 <__sflush_r+0x20>
 8009cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dc02      	bgt.n	8009d00 <__sflush_r+0x20>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	d0f9      	beq.n	8009cfa <__sflush_r+0x1a>
 8009d06:	2300      	movs	r3, #0
 8009d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d0c:	682f      	ldr	r7, [r5, #0]
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	d032      	beq.n	8009d78 <__sflush_r+0x98>
 8009d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	075a      	lsls	r2, r3, #29
 8009d18:	d505      	bpl.n	8009d26 <__sflush_r+0x46>
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	1ac0      	subs	r0, r0, r3
 8009d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d20:	b10b      	cbz	r3, 8009d26 <__sflush_r+0x46>
 8009d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d24:	1ac0      	subs	r0, r0, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	6a21      	ldr	r1, [r4, #32]
 8009d30:	47b0      	blx	r6
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	d106      	bne.n	8009d46 <__sflush_r+0x66>
 8009d38:	6829      	ldr	r1, [r5, #0]
 8009d3a:	291d      	cmp	r1, #29
 8009d3c:	d82c      	bhi.n	8009d98 <__sflush_r+0xb8>
 8009d3e:	4a2a      	ldr	r2, [pc, #168]	; (8009de8 <__sflush_r+0x108>)
 8009d40:	40ca      	lsrs	r2, r1
 8009d42:	07d6      	lsls	r6, r2, #31
 8009d44:	d528      	bpl.n	8009d98 <__sflush_r+0xb8>
 8009d46:	2200      	movs	r2, #0
 8009d48:	6062      	str	r2, [r4, #4]
 8009d4a:	6922      	ldr	r2, [r4, #16]
 8009d4c:	04d9      	lsls	r1, r3, #19
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	d504      	bpl.n	8009d5c <__sflush_r+0x7c>
 8009d52:	1c42      	adds	r2, r0, #1
 8009d54:	d101      	bne.n	8009d5a <__sflush_r+0x7a>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	b903      	cbnz	r3, 8009d5c <__sflush_r+0x7c>
 8009d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5e:	602f      	str	r7, [r5, #0]
 8009d60:	2900      	cmp	r1, #0
 8009d62:	d0ca      	beq.n	8009cfa <__sflush_r+0x1a>
 8009d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__sflush_r+0x92>
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f7ff fa01 	bl	8009174 <_free_r>
 8009d72:	2000      	movs	r0, #0
 8009d74:	6360      	str	r0, [r4, #52]	; 0x34
 8009d76:	e7c1      	b.n	8009cfc <__sflush_r+0x1c>
 8009d78:	6a21      	ldr	r1, [r4, #32]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	1c41      	adds	r1, r0, #1
 8009d82:	d1c7      	bne.n	8009d14 <__sflush_r+0x34>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0c4      	beq.n	8009d14 <__sflush_r+0x34>
 8009d8a:	2b1d      	cmp	r3, #29
 8009d8c:	d001      	beq.n	8009d92 <__sflush_r+0xb2>
 8009d8e:	2b16      	cmp	r3, #22
 8009d90:	d101      	bne.n	8009d96 <__sflush_r+0xb6>
 8009d92:	602f      	str	r7, [r5, #0]
 8009d94:	e7b1      	b.n	8009cfa <__sflush_r+0x1a>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	e7ad      	b.n	8009cfc <__sflush_r+0x1c>
 8009da0:	690f      	ldr	r7, [r1, #16]
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d0a9      	beq.n	8009cfa <__sflush_r+0x1a>
 8009da6:	0793      	lsls	r3, r2, #30
 8009da8:	bf18      	it	ne
 8009daa:	2300      	movne	r3, #0
 8009dac:	680e      	ldr	r6, [r1, #0]
 8009dae:	bf08      	it	eq
 8009db0:	694b      	ldreq	r3, [r1, #20]
 8009db2:	eba6 0807 	sub.w	r8, r6, r7
 8009db6:	600f      	str	r7, [r1, #0]
 8009db8:	608b      	str	r3, [r1, #8]
 8009dba:	f1b8 0f00 	cmp.w	r8, #0
 8009dbe:	dd9c      	ble.n	8009cfa <__sflush_r+0x1a>
 8009dc0:	4643      	mov	r3, r8
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	6a21      	ldr	r1, [r4, #32]
 8009dc8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dca:	47b0      	blx	r6
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	dc06      	bgt.n	8009dde <__sflush_r+0xfe>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	e78e      	b.n	8009cfc <__sflush_r+0x1c>
 8009dde:	4407      	add	r7, r0
 8009de0:	eba8 0800 	sub.w	r8, r8, r0
 8009de4:	e7e9      	b.n	8009dba <__sflush_r+0xda>
 8009de6:	bf00      	nop
 8009de8:	20400001 	.word	0x20400001

08009dec <_fflush_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	690b      	ldr	r3, [r1, #16]
 8009df0:	4605      	mov	r5, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	b913      	cbnz	r3, 8009dfc <_fflush_r+0x10>
 8009df6:	2500      	movs	r5, #0
 8009df8:	4628      	mov	r0, r5
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	b118      	cbz	r0, 8009e06 <_fflush_r+0x1a>
 8009dfe:	6983      	ldr	r3, [r0, #24]
 8009e00:	b90b      	cbnz	r3, 8009e06 <_fflush_r+0x1a>
 8009e02:	f000 f887 	bl	8009f14 <__sinit>
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <_fflush_r+0x6c>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	d11b      	bne.n	8009e44 <_fflush_r+0x58>
 8009e0c:	686c      	ldr	r4, [r5, #4]
 8009e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0ef      	beq.n	8009df6 <_fflush_r+0xa>
 8009e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e18:	07d0      	lsls	r0, r2, #31
 8009e1a:	d404      	bmi.n	8009e26 <_fflush_r+0x3a>
 8009e1c:	0599      	lsls	r1, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_fflush_r+0x3a>
 8009e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e22:	f000 f915 	bl	800a050 <__retarget_lock_acquire_recursive>
 8009e26:	4628      	mov	r0, r5
 8009e28:	4621      	mov	r1, r4
 8009e2a:	f7ff ff59 	bl	8009ce0 <__sflush_r>
 8009e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e30:	4605      	mov	r5, r0
 8009e32:	07da      	lsls	r2, r3, #31
 8009e34:	d4e0      	bmi.n	8009df8 <_fflush_r+0xc>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	059b      	lsls	r3, r3, #22
 8009e3a:	d4dd      	bmi.n	8009df8 <_fflush_r+0xc>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3e:	f000 f908 	bl	800a052 <__retarget_lock_release_recursive>
 8009e42:	e7d9      	b.n	8009df8 <_fflush_r+0xc>
 8009e44:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <_fflush_r+0x70>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	d101      	bne.n	8009e4e <_fflush_r+0x62>
 8009e4a:	68ac      	ldr	r4, [r5, #8]
 8009e4c:	e7df      	b.n	8009e0e <_fflush_r+0x22>
 8009e4e:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <_fflush_r+0x74>)
 8009e50:	429c      	cmp	r4, r3
 8009e52:	bf08      	it	eq
 8009e54:	68ec      	ldreq	r4, [r5, #12]
 8009e56:	e7da      	b.n	8009e0e <_fflush_r+0x22>
 8009e58:	0800a61c 	.word	0x0800a61c
 8009e5c:	0800a63c 	.word	0x0800a63c
 8009e60:	0800a5fc 	.word	0x0800a5fc

08009e64 <std>:
 8009e64:	2300      	movs	r3, #0
 8009e66:	b510      	push	{r4, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e72:	6083      	str	r3, [r0, #8]
 8009e74:	8181      	strh	r1, [r0, #12]
 8009e76:	6643      	str	r3, [r0, #100]	; 0x64
 8009e78:	81c2      	strh	r2, [r0, #14]
 8009e7a:	6183      	str	r3, [r0, #24]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	2208      	movs	r2, #8
 8009e80:	305c      	adds	r0, #92	; 0x5c
 8009e82:	f7ff f96f 	bl	8009164 <memset>
 8009e86:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <std+0x38>)
 8009e88:	6224      	str	r4, [r4, #32]
 8009e8a:	6263      	str	r3, [r4, #36]	; 0x24
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <std+0x3c>)
 8009e8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e90:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <std+0x40>)
 8009e92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <std+0x44>)
 8009e96:	6323      	str	r3, [r4, #48]	; 0x30
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a1c1 	.word	0x0800a1c1
 8009ea0:	0800a1e3 	.word	0x0800a1e3
 8009ea4:	0800a21b 	.word	0x0800a21b
 8009ea8:	0800a23f 	.word	0x0800a23f

08009eac <_cleanup_r>:
 8009eac:	4901      	ldr	r1, [pc, #4]	; (8009eb4 <_cleanup_r+0x8>)
 8009eae:	f000 b8af 	b.w	800a010 <_fwalk_reent>
 8009eb2:	bf00      	nop
 8009eb4:	08009ded 	.word	0x08009ded

08009eb8 <__sfmoreglue>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	2568      	movs	r5, #104	; 0x68
 8009ebc:	1e4a      	subs	r2, r1, #1
 8009ebe:	4355      	muls	r5, r2
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ec6:	f7ff f9a1 	bl	800920c <_malloc_r>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	b140      	cbz	r0, 8009ee0 <__sfmoreglue+0x28>
 8009ece:	2100      	movs	r1, #0
 8009ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ed4:	300c      	adds	r0, #12
 8009ed6:	60a0      	str	r0, [r4, #8]
 8009ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009edc:	f7ff f942 	bl	8009164 <memset>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <__sfp_lock_acquire>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__sfp_lock_acquire+0x8>)
 8009ee6:	f000 b8b3 	b.w	800a050 <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	20001668 	.word	0x20001668

08009ef0 <__sfp_lock_release>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sfp_lock_release+0x8>)
 8009ef2:	f000 b8ae 	b.w	800a052 <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20001668 	.word	0x20001668

08009efc <__sinit_lock_acquire>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sinit_lock_acquire+0x8>)
 8009efe:	f000 b8a7 	b.w	800a050 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	20001663 	.word	0x20001663

08009f08 <__sinit_lock_release>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sinit_lock_release+0x8>)
 8009f0a:	f000 b8a2 	b.w	800a052 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20001663 	.word	0x20001663

08009f14 <__sinit>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	f7ff fff0 	bl	8009efc <__sinit_lock_acquire>
 8009f1c:	69a3      	ldr	r3, [r4, #24]
 8009f1e:	b11b      	cbz	r3, 8009f28 <__sinit+0x14>
 8009f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f24:	f7ff bff0 	b.w	8009f08 <__sinit_lock_release>
 8009f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <__sinit+0x68>)
 8009f30:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <__sinit+0x6c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	bf08      	it	eq
 8009f3a:	2301      	moveq	r3, #1
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	bf08      	it	eq
 8009f40:	61a3      	streq	r3, [r4, #24]
 8009f42:	f000 f81f 	bl	8009f84 <__sfp>
 8009f46:	6060      	str	r0, [r4, #4]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 f81b 	bl	8009f84 <__sfp>
 8009f4e:	60a0      	str	r0, [r4, #8]
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f817 	bl	8009f84 <__sfp>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2104      	movs	r1, #4
 8009f5a:	60e0      	str	r0, [r4, #12]
 8009f5c:	6860      	ldr	r0, [r4, #4]
 8009f5e:	f7ff ff81 	bl	8009e64 <std>
 8009f62:	2201      	movs	r2, #1
 8009f64:	2109      	movs	r1, #9
 8009f66:	68a0      	ldr	r0, [r4, #8]
 8009f68:	f7ff ff7c 	bl	8009e64 <std>
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	2112      	movs	r1, #18
 8009f70:	68e0      	ldr	r0, [r4, #12]
 8009f72:	f7ff ff77 	bl	8009e64 <std>
 8009f76:	2301      	movs	r3, #1
 8009f78:	61a3      	str	r3, [r4, #24]
 8009f7a:	e7d1      	b.n	8009f20 <__sinit+0xc>
 8009f7c:	0800a4b0 	.word	0x0800a4b0
 8009f80:	08009ead 	.word	0x08009ead

08009f84 <__sfp>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	4607      	mov	r7, r0
 8009f88:	f7ff ffac 	bl	8009ee4 <__sfp_lock_acquire>
 8009f8c:	4b1e      	ldr	r3, [pc, #120]	; (800a008 <__sfp+0x84>)
 8009f8e:	681e      	ldr	r6, [r3, #0]
 8009f90:	69b3      	ldr	r3, [r6, #24]
 8009f92:	b913      	cbnz	r3, 8009f9a <__sfp+0x16>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ffbd 	bl	8009f14 <__sinit>
 8009f9a:	3648      	adds	r6, #72	; 0x48
 8009f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	d503      	bpl.n	8009fac <__sfp+0x28>
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	b30b      	cbz	r3, 8009fec <__sfp+0x68>
 8009fa8:	6836      	ldr	r6, [r6, #0]
 8009faa:	e7f7      	b.n	8009f9c <__sfp+0x18>
 8009fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fb0:	b9d5      	cbnz	r5, 8009fe8 <__sfp+0x64>
 8009fb2:	4b16      	ldr	r3, [pc, #88]	; (800a00c <__sfp+0x88>)
 8009fb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fb8:	60e3      	str	r3, [r4, #12]
 8009fba:	6665      	str	r5, [r4, #100]	; 0x64
 8009fbc:	f000 f847 	bl	800a04e <__retarget_lock_init_recursive>
 8009fc0:	f7ff ff96 	bl	8009ef0 <__sfp_lock_release>
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fd0:	6025      	str	r5, [r4, #0]
 8009fd2:	61a5      	str	r5, [r4, #24]
 8009fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fd8:	f7ff f8c4 	bl	8009164 <memset>
 8009fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe8:	3468      	adds	r4, #104	; 0x68
 8009fea:	e7d9      	b.n	8009fa0 <__sfp+0x1c>
 8009fec:	2104      	movs	r1, #4
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ff62 	bl	8009eb8 <__sfmoreglue>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	6030      	str	r0, [r6, #0]
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1d5      	bne.n	8009fa8 <__sfp+0x24>
 8009ffc:	f7ff ff78 	bl	8009ef0 <__sfp_lock_release>
 800a000:	230c      	movs	r3, #12
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	e7ee      	b.n	8009fe4 <__sfp+0x60>
 800a006:	bf00      	nop
 800a008:	0800a4b0 	.word	0x0800a4b0
 800a00c:	ffff0001 	.word	0xffff0001

0800a010 <_fwalk_reent>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4606      	mov	r6, r0
 800a016:	4688      	mov	r8, r1
 800a018:	2700      	movs	r7, #0
 800a01a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a01e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a022:	f1b9 0901 	subs.w	r9, r9, #1
 800a026:	d505      	bpl.n	800a034 <_fwalk_reent+0x24>
 800a028:	6824      	ldr	r4, [r4, #0]
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d1f7      	bne.n	800a01e <_fwalk_reent+0xe>
 800a02e:	4638      	mov	r0, r7
 800a030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a034:	89ab      	ldrh	r3, [r5, #12]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d907      	bls.n	800a04a <_fwalk_reent+0x3a>
 800a03a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a03e:	3301      	adds	r3, #1
 800a040:	d003      	beq.n	800a04a <_fwalk_reent+0x3a>
 800a042:	4629      	mov	r1, r5
 800a044:	4630      	mov	r0, r6
 800a046:	47c0      	blx	r8
 800a048:	4307      	orrs	r7, r0
 800a04a:	3568      	adds	r5, #104	; 0x68
 800a04c:	e7e9      	b.n	800a022 <_fwalk_reent+0x12>

0800a04e <__retarget_lock_init_recursive>:
 800a04e:	4770      	bx	lr

0800a050 <__retarget_lock_acquire_recursive>:
 800a050:	4770      	bx	lr

0800a052 <__retarget_lock_release_recursive>:
 800a052:	4770      	bx	lr

0800a054 <__swhatbuf_r>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	460e      	mov	r6, r1
 800a058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a05c:	4614      	mov	r4, r2
 800a05e:	2900      	cmp	r1, #0
 800a060:	461d      	mov	r5, r3
 800a062:	b096      	sub	sp, #88	; 0x58
 800a064:	da07      	bge.n	800a076 <__swhatbuf_r+0x22>
 800a066:	2300      	movs	r3, #0
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	89b3      	ldrh	r3, [r6, #12]
 800a06c:	061a      	lsls	r2, r3, #24
 800a06e:	d410      	bmi.n	800a092 <__swhatbuf_r+0x3e>
 800a070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a074:	e00e      	b.n	800a094 <__swhatbuf_r+0x40>
 800a076:	466a      	mov	r2, sp
 800a078:	f000 f908 	bl	800a28c <_fstat_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	dbf2      	blt.n	800a066 <__swhatbuf_r+0x12>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a08a:	425a      	negs	r2, r3
 800a08c:	415a      	adcs	r2, r3
 800a08e:	602a      	str	r2, [r5, #0]
 800a090:	e7ee      	b.n	800a070 <__swhatbuf_r+0x1c>
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	2000      	movs	r0, #0
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	b016      	add	sp, #88	; 0x58
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__smakebuf_r>:
 800a09c:	898b      	ldrh	r3, [r1, #12]
 800a09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0a0:	079d      	lsls	r5, r3, #30
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	d507      	bpl.n	800a0b8 <__smakebuf_r+0x1c>
 800a0a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	6163      	str	r3, [r4, #20]
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	466a      	mov	r2, sp
 800a0ba:	ab01      	add	r3, sp, #4
 800a0bc:	f7ff ffca 	bl	800a054 <__swhatbuf_r>
 800a0c0:	9900      	ldr	r1, [sp, #0]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff f8a1 	bl	800920c <_malloc_r>
 800a0ca:	b948      	cbnz	r0, 800a0e0 <__smakebuf_r+0x44>
 800a0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d0:	059a      	lsls	r2, r3, #22
 800a0d2:	d4ef      	bmi.n	800a0b4 <__smakebuf_r+0x18>
 800a0d4:	f023 0303 	bic.w	r3, r3, #3
 800a0d8:	f043 0302 	orr.w	r3, r3, #2
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	e7e3      	b.n	800a0a8 <__smakebuf_r+0xc>
 800a0e0:	4b0d      	ldr	r3, [pc, #52]	; (800a118 <__smakebuf_r+0x7c>)
 800a0e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	6020      	str	r0, [r4, #0]
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	6120      	str	r0, [r4, #16]
 800a0f2:	6163      	str	r3, [r4, #20]
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	b15b      	cbz	r3, 800a110 <__smakebuf_r+0x74>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0fe:	f000 f8d7 	bl	800a2b0 <_isatty_r>
 800a102:	b128      	cbz	r0, 800a110 <__smakebuf_r+0x74>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	f043 0301 	orr.w	r3, r3, #1
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	89a0      	ldrh	r0, [r4, #12]
 800a112:	4305      	orrs	r5, r0
 800a114:	81a5      	strh	r5, [r4, #12]
 800a116:	e7cd      	b.n	800a0b4 <__smakebuf_r+0x18>
 800a118:	08009ead 	.word	0x08009ead

0800a11c <memchr>:
 800a11c:	4603      	mov	r3, r0
 800a11e:	b510      	push	{r4, lr}
 800a120:	b2c9      	uxtb	r1, r1
 800a122:	4402      	add	r2, r0
 800a124:	4293      	cmp	r3, r2
 800a126:	4618      	mov	r0, r3
 800a128:	d101      	bne.n	800a12e <memchr+0x12>
 800a12a:	2000      	movs	r0, #0
 800a12c:	e003      	b.n	800a136 <memchr+0x1a>
 800a12e:	7804      	ldrb	r4, [r0, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	428c      	cmp	r4, r1
 800a134:	d1f6      	bne.n	800a124 <memchr+0x8>
 800a136:	bd10      	pop	{r4, pc}

0800a138 <_raise_r>:
 800a138:	291f      	cmp	r1, #31
 800a13a:	b538      	push	{r3, r4, r5, lr}
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	d904      	bls.n	800a14c <_raise_r+0x14>
 800a142:	2316      	movs	r3, #22
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 30ff 	mov.w	r0, #4294967295
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a14e:	b112      	cbz	r2, 800a156 <_raise_r+0x1e>
 800a150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a154:	b94b      	cbnz	r3, 800a16a <_raise_r+0x32>
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f830 	bl	800a1bc <_getpid_r>
 800a15c:	462a      	mov	r2, r5
 800a15e:	4601      	mov	r1, r0
 800a160:	4620      	mov	r0, r4
 800a162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a166:	f000 b817 	b.w	800a198 <_kill_r>
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d00a      	beq.n	800a184 <_raise_r+0x4c>
 800a16e:	1c59      	adds	r1, r3, #1
 800a170:	d103      	bne.n	800a17a <_raise_r+0x42>
 800a172:	2316      	movs	r3, #22
 800a174:	6003      	str	r3, [r0, #0]
 800a176:	2001      	movs	r0, #1
 800a178:	e7e7      	b.n	800a14a <_raise_r+0x12>
 800a17a:	2400      	movs	r4, #0
 800a17c:	4628      	mov	r0, r5
 800a17e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a182:	4798      	blx	r3
 800a184:	2000      	movs	r0, #0
 800a186:	e7e0      	b.n	800a14a <_raise_r+0x12>

0800a188 <raise>:
 800a188:	4b02      	ldr	r3, [pc, #8]	; (800a194 <raise+0xc>)
 800a18a:	4601      	mov	r1, r0
 800a18c:	6818      	ldr	r0, [r3, #0]
 800a18e:	f7ff bfd3 	b.w	800a138 <_raise_r>
 800a192:	bf00      	nop
 800a194:	20000198 	.word	0x20000198

0800a198 <_kill_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	2300      	movs	r3, #0
 800a19c:	4d06      	ldr	r5, [pc, #24]	; (800a1b8 <_kill_r+0x20>)
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	f7f6 fb62 	bl	800086e <_kill>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	d102      	bne.n	800a1b4 <_kill_r+0x1c>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	b103      	cbz	r3, 800a1b4 <_kill_r+0x1c>
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	bd38      	pop	{r3, r4, r5, pc}
 800a1b6:	bf00      	nop
 800a1b8:	2000165c 	.word	0x2000165c

0800a1bc <_getpid_r>:
 800a1bc:	f7f6 bb50 	b.w	8000860 <_getpid>

0800a1c0 <__sread>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	f000 f894 	bl	800a2f4 <_read_r>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	bfab      	itete	ge
 800a1d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d4:	181b      	addge	r3, r3, r0
 800a1d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1da:	bfac      	ite	ge
 800a1dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1de:	81a3      	strhlt	r3, [r4, #12]
 800a1e0:	bd10      	pop	{r4, pc}

0800a1e2 <__swrite>:
 800a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	05db      	lsls	r3, r3, #23
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	d505      	bpl.n	800a200 <__swrite+0x1e>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	f000 f868 	bl	800a2d0 <_lseek_r>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	4632      	mov	r2, r6
 800a204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	4628      	mov	r0, r5
 800a20c:	463b      	mov	r3, r7
 800a20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	f000 b817 	b.w	800a248 <_write_r>

0800a21a <__sseek>:
 800a21a:	b510      	push	{r4, lr}
 800a21c:	460c      	mov	r4, r1
 800a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a222:	f000 f855 	bl	800a2d0 <_lseek_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	bf15      	itete	ne
 800a22c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a22e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a236:	81a3      	strheq	r3, [r4, #12]
 800a238:	bf18      	it	ne
 800a23a:	81a3      	strhne	r3, [r4, #12]
 800a23c:	bd10      	pop	{r4, pc}

0800a23e <__sclose>:
 800a23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a242:	f000 b813 	b.w	800a26c <_close_r>
	...

0800a248 <_write_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	2200      	movs	r2, #0
 800a252:	4d05      	ldr	r5, [pc, #20]	; (800a268 <_write_r+0x20>)
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f7f6 fb40 	bl	80008dc <_write>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_write_r+0x1e>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_write_r+0x1e>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	2000165c 	.word	0x2000165c

0800a26c <_close_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	2300      	movs	r3, #0
 800a270:	4d05      	ldr	r5, [pc, #20]	; (800a288 <_close_r+0x1c>)
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	f7f6 fb4c 	bl	8000914 <_close>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_close_r+0x1a>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_close_r+0x1a>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	2000165c 	.word	0x2000165c

0800a28c <_fstat_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	2300      	movs	r3, #0
 800a290:	4d06      	ldr	r5, [pc, #24]	; (800a2ac <_fstat_r+0x20>)
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	f7f6 fb46 	bl	800092a <_fstat>
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	d102      	bne.n	800a2a8 <_fstat_r+0x1c>
 800a2a2:	682b      	ldr	r3, [r5, #0]
 800a2a4:	b103      	cbz	r3, 800a2a8 <_fstat_r+0x1c>
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	bd38      	pop	{r3, r4, r5, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000165c 	.word	0x2000165c

0800a2b0 <_isatty_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4d05      	ldr	r5, [pc, #20]	; (800a2cc <_isatty_r+0x1c>)
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7f6 fb44 	bl	8000948 <_isatty>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_isatty_r+0x1a>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_isatty_r+0x1a>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	2000165c 	.word	0x2000165c

0800a2d0 <_lseek_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4d05      	ldr	r5, [pc, #20]	; (800a2f0 <_lseek_r+0x20>)
 800a2dc:	602a      	str	r2, [r5, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f7f6 fb3c 	bl	800095c <_lseek>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_lseek_r+0x1e>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_lseek_r+0x1e>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	2000165c 	.word	0x2000165c

0800a2f4 <_read_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4d05      	ldr	r5, [pc, #20]	; (800a314 <_read_r+0x20>)
 800a300:	602a      	str	r2, [r5, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f7f6 facd 	bl	80008a2 <_read>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_read_r+0x1e>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_read_r+0x1e>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	2000165c 	.word	0x2000165c

0800a318 <_gettimeofday>:
 800a318:	2258      	movs	r2, #88	; 0x58
 800a31a:	4b02      	ldr	r3, [pc, #8]	; (800a324 <_gettimeofday+0xc>)
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	4770      	bx	lr
 800a324:	2000165c 	.word	0x2000165c

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
