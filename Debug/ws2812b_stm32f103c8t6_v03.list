
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba6c  0800ba6c  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba6c  0800ba6c  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba6c  0800ba6c  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800ba74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200002e0  0800bd54  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016b0  0800bd54  000216b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b80  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c38  00000000  00000000  00039e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001554c  00000000  00000000  0005b51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec1b  00000000  00000000  00070a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  000ff6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00104cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00104ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e0 	.word	0x200002e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b5bc 	.word	0x0800b5bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e4 	.word	0x200002e4
 8000148:	0800b5bc 	.word	0x0800b5bc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 ffd3 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f8a5 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f991 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f971 	bl	8000468 <MX_DMA_Init>
  MX_TIM3_Init();
 8000186:	f000 f8f9 	bl	800037c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800018a:	f008 fecd 	bl	8008f28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
 8000192:	e007      	b.n	80001a4 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	4a47      	ldr	r2, [pc, #284]	; (80002b4 <main+0x144>)
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	3301      	adds	r3, #1
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	d9f4      	bls.n	8000194 <main+0x24>
  }

  ws2812b_init();
 80001aa:	f000 ff5d 	bl	8001068 <ws2812b_init>

  srand( (unsigned) time( NULL ));
 80001ae:	2000      	movs	r0, #0
 80001b0:	f009 febc 	bl	8009f2c <time>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f009 fcc6 	bl	8009b48 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t volume = 128; // max 256
 80001bc:	2380      	movs	r3, #128	; 0x80
 80001be:	807b      	strh	r3, [r7, #2]
  uint8_t r = gamma8[ rand() % volume ];
 80001c0:	f009 fcf0 	bl	8009ba4 <rand>
 80001c4:	4602      	mov	r2, r0
 80001c6:	887b      	ldrh	r3, [r7, #2]
 80001c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001cc:	fb03 f301 	mul.w	r3, r3, r1
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	4a39      	ldr	r2, [pc, #228]	; (80002b8 <main+0x148>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	71bb      	strb	r3, [r7, #6]
  uint8_t g = gamma8[ rand() % volume ];
 80001d8:	f009 fce4 	bl	8009ba4 <rand>
 80001dc:	4602      	mov	r2, r0
 80001de:	887b      	ldrh	r3, [r7, #2]
 80001e0:	fb92 f1f3 	sdiv	r1, r2, r3
 80001e4:	fb03 f301 	mul.w	r3, r3, r1
 80001e8:	1ad3      	subs	r3, r2, r3
 80001ea:	4a33      	ldr	r2, [pc, #204]	; (80002b8 <main+0x148>)
 80001ec:	5cd3      	ldrb	r3, [r2, r3]
 80001ee:	717b      	strb	r3, [r7, #5]
  uint8_t b = gamma8[ rand() % volume ];
 80001f0:	f009 fcd8 	bl	8009ba4 <rand>
 80001f4:	4602      	mov	r2, r0
 80001f6:	887b      	ldrh	r3, [r7, #2]
 80001f8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001fc:	fb03 f301 	mul.w	r3, r3, r1
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	4a2d      	ldr	r2, [pc, #180]	; (80002b8 <main+0x148>)
 8000204:	5cd3      	ldrb	r3, [r2, r3]
 8000206:	713b      	strb	r3, [r7, #4]

  while (1)
  {

	send_queue_via_usb();
 8000208:	f000 fbe4 	bl	80009d4 <send_queue_via_usb>
	HAL_Delay( 1 );
 800020c:	2001      	movs	r0, #1
 800020e:	f000 ffe9 	bl	80011e4 <HAL_Delay>

	if( effect_on_off ) counter++;
 8000212:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <main+0x14c>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d005      	beq.n	8000226 <main+0xb6>
 800021a:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <main+0x150>)
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	b29a      	uxth	r2, r3
 8000222:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <main+0x150>)
 8000224:	801a      	strh	r2, [r3, #0]
	if( counter >= 100 && effect_on_off ) {
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <main+0x150>)
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	2b63      	cmp	r3, #99	; 0x63
 800022c:	d9ec      	bls.n	8000208 <main+0x98>
 800022e:	4b23      	ldr	r3, [pc, #140]	; (80002bc <main+0x14c>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0e8      	beq.n	8000208 <main+0x98>
		counter = 0;
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <main+0x150>)
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
		if( led_loop >= LED_N ) {
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <main+0x154>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	2b07      	cmp	r3, #7
 8000242:	d926      	bls.n	8000292 <main+0x122>
			led_loop = 0;
 8000244:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0x154>)
 8000246:	2200      	movs	r2, #0
 8000248:	801a      	strh	r2, [r3, #0]
			r = gamma8[ rand() % volume ];
 800024a:	f009 fcab 	bl	8009ba4 <rand>
 800024e:	4602      	mov	r2, r0
 8000250:	887b      	ldrh	r3, [r7, #2]
 8000252:	fb92 f1f3 	sdiv	r1, r2, r3
 8000256:	fb03 f301 	mul.w	r3, r3, r1
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <main+0x148>)
 800025e:	5cd3      	ldrb	r3, [r2, r3]
 8000260:	71bb      	strb	r3, [r7, #6]
			g = gamma8[ rand() % volume ];
 8000262:	f009 fc9f 	bl	8009ba4 <rand>
 8000266:	4602      	mov	r2, r0
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	fb92 f1f3 	sdiv	r1, r2, r3
 800026e:	fb03 f301 	mul.w	r3, r3, r1
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <main+0x148>)
 8000276:	5cd3      	ldrb	r3, [r2, r3]
 8000278:	717b      	strb	r3, [r7, #5]
			b = gamma8[ rand() % volume ];
 800027a:	f009 fc93 	bl	8009ba4 <rand>
 800027e:	4602      	mov	r2, r0
 8000280:	887b      	ldrh	r3, [r7, #2]
 8000282:	fb92 f1f3 	sdiv	r1, r2, r3
 8000286:	fb03 f301 	mul.w	r3, r3, r1
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <main+0x148>)
 800028e:	5cd3      	ldrb	r3, [r2, r3]
 8000290:	713b      	strb	r3, [r7, #4]
		}
		ws2812b_set_color( led_loop, r, g, b );
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <main+0x154>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	793b      	ldrb	r3, [r7, #4]
 800029a:	797a      	ldrb	r2, [r7, #5]
 800029c:	79b9      	ldrb	r1, [r7, #6]
 800029e:	f000 fe1f 	bl	8000ee0 <ws2812b_set_color>
		ws2812b_update();
 80002a2:	f000 fe4b 	bl	8000f3c <ws2812b_update>
		led_loop++;
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <main+0x154>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0x154>)
 80002b0:	801a      	strh	r2, [r3, #0]
	send_queue_via_usb();
 80002b2:	e7a9      	b.n	8000208 <main+0x98>
 80002b4:	2000070c 	.word	0x2000070c
 80002b8:	0800b6a4 	.word	0x0800b6a4
 80002bc:	200003fe 	.word	0x200003fe
 80002c0:	20000400 	.word	0x20000400
 80002c4:	20000402 	.word	0x20000402

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	; 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f009 fb88 	bl	80099ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f970 	bl	8003604 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 fbcb 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fbda 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000356:	f000 fbb5 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800035a:	2310      	movs	r3, #16
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f003 fd35 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000370:	f000 fba8 	bl	8000ac4 <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3750      	adds	r7, #80	; 0x50
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08e      	sub	sp, #56	; 0x38
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	f107 0320 	add.w	r3, r7, #32
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	615a      	str	r2, [r3, #20]
 80003aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003ae:	4a2d      	ldr	r2, [pc, #180]	; (8000464 <MX_TIM3_Init+0xe8>)
 80003b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003b2:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 80003be:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003c0:	2259      	movs	r2, #89	; 0x59
 80003c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d0:	4823      	ldr	r0, [pc, #140]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003d2:	f003 fdb5 	bl	8003f40 <HAL_TIM_Base_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80003dc:	f000 fb72 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ea:	4619      	mov	r1, r3
 80003ec:	481c      	ldr	r0, [pc, #112]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003ee:	f004 fab7 	bl	8004960 <HAL_TIM_ConfigClockSource>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80003f8:	f000 fb64 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003fc:	4818      	ldr	r0, [pc, #96]	; (8000460 <MX_TIM3_Init+0xe4>)
 80003fe:	f003 fe39 	bl	8004074 <HAL_TIM_PWM_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000408:	f000 fb5c 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000414:	f107 0320 	add.w	r3, r7, #32
 8000418:	4619      	mov	r1, r3
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_TIM3_Init+0xe4>)
 800041c:	f004 ff18 	bl	8005250 <HAL_TIMEx_MasterConfigSynchronization>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000426:	f000 fb4d 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042a:	2360      	movs	r3, #96	; 0x60
 800042c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <MX_TIM3_Init+0xe4>)
 8000442:	f004 f9cf 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800044c:	f000 fb3a 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <MX_TIM3_Init+0xe4>)
 8000452:	f000 fbc7 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 8000456:	bf00      	nop
 8000458:	3738      	adds	r7, #56	; 0x38
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000680 	.word	0x20000680
 8000464:	40000400 	.word	0x40000400

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_DMA_Init+0x38>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2010      	movs	r0, #16
 800048c:	f000 ffa5 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000490:	2010      	movs	r0, #16
 8000492:	f000 ffbe 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_GPIO_Init+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <MX_GPIO_Init+0x90>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_GPIO_Init+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0310 	and.w	r3, r3, #16
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_GPIO_Init+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <MX_GPIO_Init+0x90>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_GPIO_Init+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MX_GPIO_Init+0x90>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <MX_GPIO_Init+0x90>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_GPIO_Init+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_GPIO_Init+0x94>)
 8000508:	f001 fb86 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_GPIO_Init+0x94>)
 8000526:	f001 f9f3 	bl	8001910 <HAL_GPIO_Init>

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	40011000 	.word	0x40011000

0800053c <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	wait_for_CDC_transmit_ready();
 8000546:	f008 fe43 	bl	80091d0 <wait_for_CDC_transmit_ready>
	CDC_Transmit_FS( txBuf, buf_len );
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f008 fe19 	bl	8009184 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <welcome>:

void welcome(void) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <welcome+0x40>)
 8000564:	f7ff fdfc 	bl	8000160 <strlen>
 8000568:	4604      	mov	r4, r0
 800056a:	480d      	ldr	r0, [pc, #52]	; (80005a0 <welcome+0x44>)
 800056c:	f7ff fdf8 	bl	8000160 <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	4423      	add	r3, r4
 8000574:	4618      	mov	r0, r3
 8000576:	f009 fa29 	bl	80099cc <malloc>
 800057a:	4603      	mov	r3, r0
 800057c:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 800057e:	4907      	ldr	r1, [pc, #28]	; (800059c <welcome+0x40>)
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f009 fbdd 	bl	8009d40 <strcpy>
	strcat( tmp_buf, prompt );
 8000586:	4906      	ldr	r1, [pc, #24]	; (80005a0 <welcome+0x44>)
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f009 fbca 	bl	8009d22 <strcat>
	write_to_future_send_via_usb( tmp_buf );
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 fa5c 	bl	8000a4c <write_to_future_send_via_usb>
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000000 	.word	0x20000000

080005a4 <get_command>:

void get_command(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b092      	sub	sp, #72	; 0x48
 80005a8:	af00      	add	r7, sp, #0
	char *out_str;
	char *result[ 5 ];
	input_usb_buffer[ in_usb_buf_pos ] = 0;
 80005aa:	4ba7      	ldr	r3, [pc, #668]	; (8000848 <get_command+0x2a4>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4ba6      	ldr	r3, [pc, #664]	; (800084c <get_command+0x2a8>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	5499      	strb	r1, [r3, r2]
	strcat( input_usb_buffer, " " );
 80005b6:	48a5      	ldr	r0, [pc, #660]	; (800084c <get_command+0x2a8>)
 80005b8:	f7ff fdd2 	bl	8000160 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	4ba2      	ldr	r3, [pc, #648]	; (800084c <get_command+0x2a8>)
 80005c2:	4413      	add	r3, r2
 80005c4:	49a2      	ldr	r1, [pc, #648]	; (8000850 <get_command+0x2ac>)
 80005c6:	461a      	mov	r2, r3
 80005c8:	460b      	mov	r3, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	8013      	strh	r3, [r2, #0]
	char *token = strtok( input_usb_buffer, " " );
 80005ce:	49a0      	ldr	r1, [pc, #640]	; (8000850 <get_command+0x2ac>)
 80005d0:	489e      	ldr	r0, [pc, #632]	; (800084c <get_command+0x2a8>)
 80005d2:	f009 fbbd 	bl	8009d50 <strtok>
 80005d6:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t loop = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if( token != NULL ) {
 80005de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d02f      	beq.n	8000644 <get_command+0xa0>
		while( token != NULL && loop < 5 ) {
 80005e4:	e026      	b.n	8000634 <get_command+0x90>
			result[ loop ] = malloc( strlen( token ) * sizeof( char ));
 80005e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80005e8:	f7ff fdba 	bl	8000160 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 f9ea 	bl	80099cc <malloc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	00a3      	lsls	r3, r4, #2
 80005fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000602:	440b      	add	r3, r1
 8000604:	f843 2c24 	str.w	r2, [r3, #-36]
			strcpy( result[ loop ], token );
 8000608:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000612:	4413      	add	r3, r2
 8000614:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800061a:	4618      	mov	r0, r3
 800061c:	f009 fb90 	bl	8009d40 <strcpy>
			loop++;
 8000620:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000624:	3301      	adds	r3, #1
 8000626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		    token = strtok( NULL, " " );
 800062a:	4989      	ldr	r1, [pc, #548]	; (8000850 <get_command+0x2ac>)
 800062c:	2000      	movs	r0, #0
 800062e:	f009 fb8f 	bl	8009d50 <strtok>
 8000632:	6478      	str	r0, [r7, #68]	; 0x44
		while( token != NULL && loop < 5 ) {
 8000634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000636:	2b00      	cmp	r3, #0
 8000638:	d017      	beq.n	800066a <get_command+0xc6>
 800063a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800063e:	2b04      	cmp	r3, #4
 8000640:	d9d1      	bls.n	80005e6 <get_command+0x42>
 8000642:	e012      	b.n	800066a <get_command+0xc6>
		}
	}
	else {
		result[ 0 ] = malloc( strlen( input_usb_buffer ) * sizeof( char ));
 8000644:	4881      	ldr	r0, [pc, #516]	; (800084c <get_command+0x2a8>)
 8000646:	f7ff fd8b 	bl	8000160 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	4618      	mov	r0, r3
 800064e:	f009 f9bd 	bl	80099cc <malloc>
 8000652:	4603      	mov	r3, r0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
		strcpy( result[ 0 ], input_usb_buffer );
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	497c      	ldr	r1, [pc, #496]	; (800084c <get_command+0x2a8>)
 800065a:	4618      	mov	r0, r3
 800065c:	f009 fb70 	bl	8009d40 <strcpy>
		loop++;
 8000660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000664:	3301      	adds	r3, #1
 8000666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	}

    if( strcmp( result[ 0 ], "help" ) == 0 || strcmp( result[ 0 ], "?" ) == 0 ) {
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	4979      	ldr	r1, [pc, #484]	; (8000854 <get_command+0x2b0>)
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fd6c 	bl	800014c <strcmp>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d007      	beq.n	800068a <get_command+0xe6>
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	4976      	ldr	r1, [pc, #472]	; (8000858 <get_command+0x2b4>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fd64 	bl	800014c <strcmp>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d110      	bne.n	80006ac <get_command+0x108>
    	out_str = malloc( strlen( help ) * sizeof( char ));
 800068a:	4874      	ldr	r0, [pc, #464]	; (800085c <get_command+0x2b8>)
 800068c:	f7ff fd68 	bl	8000160 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	4618      	mov	r0, r3
 8000694:	f009 f99a 	bl	80099cc <malloc>
 8000698:	4603      	mov	r3, r0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
    	strcpy( out_str, help );
 800069c:	496f      	ldr	r1, [pc, #444]	; (800085c <get_command+0x2b8>)
 800069e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80006a0:	f009 fb4e 	bl	8009d40 <strcpy>
    	write_to_future_send_via_usb( out_str );
 80006a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80006a6:	f000 f9d1 	bl	8000a4c <write_to_future_send_via_usb>
 80006aa:	e163      	b.n	8000974 <get_command+0x3d0>
    }
    else if( strcmp( result[ 0 ], "on" ) == 0 ) {
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	496c      	ldr	r1, [pc, #432]	; (8000860 <get_command+0x2bc>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4b 	bl	800014c <strcmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <get_command+0x126>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4868      	ldr	r0, [pc, #416]	; (8000864 <get_command+0x2c0>)
 80006c4:	f001 faa8 	bl	8001c18 <HAL_GPIO_WritePin>
 80006c8:	e165      	b.n	8000996 <get_command+0x3f2>
    }
    else if( strcmp( result[ 0 ], "off" ) == 0 ) {
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	4966      	ldr	r1, [pc, #408]	; (8000868 <get_command+0x2c4>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd3c 	bl	800014c <strcmp>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <get_command+0x144>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4860      	ldr	r0, [pc, #384]	; (8000864 <get_command+0x2c0>)
 80006e2:	f001 fa99 	bl	8001c18 <HAL_GPIO_WritePin>
 80006e6:	e156      	b.n	8000996 <get_command+0x3f2>
    }
    else if( strcmp( result[ 0 ], "toggle" ) == 0 ) {
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	4960      	ldr	r1, [pc, #384]	; (800086c <get_command+0x2c8>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd2d 	bl	800014c <strcmp>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <get_command+0x160>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4859      	ldr	r0, [pc, #356]	; (8000864 <get_command+0x2c0>)
 80006fe:	f001 faa3 	bl	8001c48 <HAL_GPIO_TogglePin>
 8000702:	e148      	b.n	8000996 <get_command+0x3f2>
    }
    else if( strcmp( result[ 0 ], "led" ) == 0 ) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	495a      	ldr	r1, [pc, #360]	; (8000870 <get_command+0x2cc>)
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fd1f 	bl	800014c <strcmp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	f040 80e8 	bne.w	80008e6 <get_command+0x342>
    	if( loop >= 3 ) {
 8000716:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800071a:	2b02      	cmp	r3, #2
 800071c:	f240 813b 	bls.w	8000996 <get_command+0x3f2>
    		uint16_t led_no = atoi( result[ 1 ]) - 1;
 8000720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000722:	4618      	mov	r0, r3
 8000724:	f009 f924 	bl	8009970 <atoi>
 8000728:	4603      	mov	r3, r0
 800072a:	b29b      	uxth	r3, r3
 800072c:	3b01      	subs	r3, #1
 800072e:	877b      	strh	r3, [r7, #58]	; 0x3a
    		uint32_t r = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
    		uint32_t g = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    		uint32_t b = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
    		if( strcmp( result[ 2 ], "off" ) == 0 ) {
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073e:	494a      	ldr	r1, [pc, #296]	; (8000868 <get_command+0x2c4>)
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd03 	bl	800014c <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d117      	bne.n	800077c <get_command+0x1d8>
    			ws2812b_set_color( led_no, r, g, b );
 800074c:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f000 fbc1 	bl	8000ee0 <ws2812b_set_color>
				ws2812b_update();
 800075e:	f000 fbed 	bl	8000f3c <ws2812b_update>
				out_str = malloc( 50 * sizeof( char ));
 8000762:	2032      	movs	r0, #50	; 0x32
 8000764:	f009 f932 	bl	80099cc <malloc>
 8000768:	4603      	mov	r3, r0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK " );
 800076c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800076e:	4a41      	ldr	r2, [pc, #260]	; (8000874 <get_command+0x2d0>)
 8000770:	6810      	ldr	r0, [r2, #0]
 8000772:	6018      	str	r0, [r3, #0]
				write_to_future_send_via_usb( out_str );
 8000774:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000776:	f000 f969 	bl	8000a4c <write_to_future_send_via_usb>
 800077a:	e10c      	b.n	8000996 <get_command+0x3f2>
    		}
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b23      	cmp	r3, #35	; 0x23
 8000782:	d17f      	bne.n	8000884 <get_command+0x2e0>
 8000784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcea 	bl	8000160 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	2b06      	cmp	r3, #6
 8000790:	d978      	bls.n	8000884 <get_command+0x2e0>
        		char r_str[] = "0x00";
 8000792:	4a39      	ldr	r2, [pc, #228]	; (8000878 <get_command+0x2d4>)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079c:	6018      	str	r0, [r3, #0]
 800079e:	3304      	adds	r3, #4
 80007a0:	7019      	strb	r1, [r3, #0]
    			r_str[ 2 ] = result[ 2 ][ 1 ];
 80007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	74bb      	strb	r3, [r7, #18]
    			r_str[ 3 ] = result[ 2 ][ 2 ];
 80007a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007aa:	789b      	ldrb	r3, [r3, #2]
 80007ac:	74fb      	strb	r3, [r7, #19]
    			sscanf( r_str, "%x", &r );
 80007ae:	f107 0220 	add.w	r2, r7, #32
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4931      	ldr	r1, [pc, #196]	; (800087c <get_command+0x2d8>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f009 fa43 	bl	8009c44 <siscanf>
        		char g_str[] = "0x00";
 80007be:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <get_command+0x2d4>)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	3304      	adds	r3, #4
 80007cc:	7019      	strb	r1, [r3, #0]
    			g_str[ 2 ] = result[ 2 ][ 3 ];
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	78db      	ldrb	r3, [r3, #3]
 80007d2:	72bb      	strb	r3, [r7, #10]
    			g_str[ 3 ] = result[ 2 ][ 4 ];
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	72fb      	strb	r3, [r7, #11]
    			sscanf( g_str, "%x", &g );
 80007da:	f107 021c 	add.w	r2, r7, #28
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4926      	ldr	r1, [pc, #152]	; (800087c <get_command+0x2d8>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 fa2d 	bl	8009c44 <siscanf>
        		char b_str[] = "0x00";
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <get_command+0x2d4>)
 80007ec:	463b      	mov	r3, r7
 80007ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f2:	6018      	str	r0, [r3, #0]
 80007f4:	3304      	adds	r3, #4
 80007f6:	7019      	strb	r1, [r3, #0]
    			b_str[ 2 ] = result[ 2 ][ 5 ];
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	70bb      	strb	r3, [r7, #2]
    			b_str[ 3 ] = result[ 2 ][ 6 ];
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	799b      	ldrb	r3, [r3, #6]
 8000802:	70fb      	strb	r3, [r7, #3]
    			sscanf( b_str, "%x", &b );
 8000804:	f107 0218 	add.w	r2, r7, #24
 8000808:	463b      	mov	r3, r7
 800080a:	491c      	ldr	r1, [pc, #112]	; (800087c <get_command+0x2d8>)
 800080c:	4618      	mov	r0, r3
 800080e:	f009 fa19 	bl	8009c44 <siscanf>
    			ws2812b_set_color( led_no, r, g, b );
 8000812:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	b2d9      	uxtb	r1, r3
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f000 fb5e 	bl	8000ee0 <ws2812b_set_color>
			    ws2812b_update();
 8000824:	f000 fb8a 	bl	8000f3c <ws2812b_update>
			    out_str = malloc( 50 * sizeof( char ));
 8000828:	2032      	movs	r0, #50	; 0x32
 800082a:	f009 f8cf 	bl	80099cc <malloc>
 800082e:	4603      	mov	r3, r0
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 8000832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <get_command+0x2dc>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	7892      	ldrb	r2, [r2, #2]
 800083a:	8019      	strh	r1, [r3, #0]
 800083c:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 800083e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000840:	f000 f904 	bl	8000a4c <write_to_future_send_via_usb>
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 8000844:	e096      	b.n	8000974 <get_command+0x3d0>
 8000846:	bf00      	nop
 8000848:	200003fc 	.word	0x200003fc
 800084c:	200002fc 	.word	0x200002fc
 8000850:	0800b5d4 	.word	0x0800b5d4
 8000854:	0800b5d8 	.word	0x0800b5d8
 8000858:	0800b5e0 	.word	0x0800b5e0
 800085c:	2000001c 	.word	0x2000001c
 8000860:	0800b5e4 	.word	0x0800b5e4
 8000864:	40011000 	.word	0x40011000
 8000868:	0800b5e8 	.word	0x0800b5e8
 800086c:	0800b5ec 	.word	0x0800b5ec
 8000870:	0800b5f4 	.word	0x0800b5f4
 8000874:	0800b5f8 	.word	0x0800b5f8
 8000878:	0800b628 	.word	0x0800b628
 800087c:	0800b5fc 	.word	0x0800b5fc
 8000880:	0800b600 	.word	0x0800b600
    		}
    		else if( loop >= 5 ) {
 8000884:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000888:	2b04      	cmp	r3, #4
 800088a:	f240 8084 	bls.w	8000996 <get_command+0x3f2>
    			r = atoi( result[ 2 ]);
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	4618      	mov	r0, r3
 8000892:	f009 f86d 	bl	8009970 <atoi>
 8000896:	4603      	mov	r3, r0
 8000898:	623b      	str	r3, [r7, #32]
    			g = atoi( result[ 3 ]);
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f867 	bl	8009970 <atoi>
 80008a2:	4603      	mov	r3, r0
 80008a4:	61fb      	str	r3, [r7, #28]
    			b = atoi( result[ 4 ]);
 80008a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a8:	4618      	mov	r0, r3
 80008aa:	f009 f861 	bl	8009970 <atoi>
 80008ae:	4603      	mov	r3, r0
 80008b0:	61bb      	str	r3, [r7, #24]
        		ws2812b_set_color( led_no, r, g, b );
 80008b2:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	b2d9      	uxtb	r1, r3
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f000 fb0e 	bl	8000ee0 <ws2812b_set_color>
    			ws2812b_update();
 80008c4:	f000 fb3a 	bl	8000f3c <ws2812b_update>
    			out_str = malloc( 50 * sizeof( char ));
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f009 f87f 	bl	80099cc <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 80008d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d4:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <get_command+0x40c>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	7892      	ldrb	r2, [r2, #2]
 80008da:	8019      	strh	r1, [r3, #0]
 80008dc:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 80008de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008e0:	f000 f8b4 	bl	8000a4c <write_to_future_send_via_usb>
 80008e4:	e057      	b.n	8000996 <get_command+0x3f2>
    		}
    	}
    }
    else if( strcmp( result[ 0 ], "effect" ) == 0 ) {
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	4932      	ldr	r1, [pc, #200]	; (80009b4 <get_command+0x410>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc2e 	bl	800014c <strcmp>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d114      	bne.n	8000920 <get_command+0x37c>
    	effect_on_off = ! effect_on_off;
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <get_command+0x414>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <get_command+0x414>)
 8000908:	701a      	strb	r2, [r3, #0]
    	if( ! effect_on_off ) {
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <get_command+0x414>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d141      	bne.n	8000996 <get_command+0x3f2>
    		counter  = 0;
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <get_command+0x418>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
    		led_loop = 0;
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <get_command+0x41c>)
 800091a:	2200      	movs	r2, #0
 800091c:	801a      	strh	r2, [r3, #0]
 800091e:	e03a      	b.n	8000996 <get_command+0x3f2>
    	}
    }
    else if( strcmp( result[ 0 ], "turn" ) == 0 && strcmp( result[ 1 ], "off" ) == 0 ) {
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	4928      	ldr	r1, [pc, #160]	; (80009c4 <get_command+0x420>)
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc11 	bl	800014c <strcmp>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d132      	bne.n	8000996 <get_command+0x3f2>
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	4925      	ldr	r1, [pc, #148]	; (80009c8 <get_command+0x424>)
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fc09 	bl	800014c <strcmp>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d12a      	bne.n	8000996 <get_command+0x3f2>
    	clear_led_data();
 8000940:	f000 fbb0 	bl	80010a4 <clear_led_data>
    	ws2812b_update();
 8000944:	f000 fafa 	bl	8000f3c <ws2812b_update>
    	out_str = malloc( 50 * sizeof( char ));
 8000948:	2032      	movs	r0, #50	; 0x32
 800094a:	f009 f83f 	bl	80099cc <malloc>
 800094e:	4603      	mov	r3, r0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
		strcpy( out_str, "all LED's turn OFF" );
 8000952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <get_command+0x428>)
 8000956:	461d      	mov	r5, r3
 8000958:	4614      	mov	r4, r2
 800095a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095c:	6028      	str	r0, [r5, #0]
 800095e:	6069      	str	r1, [r5, #4]
 8000960:	60aa      	str	r2, [r5, #8]
 8000962:	60eb      	str	r3, [r5, #12]
 8000964:	8823      	ldrh	r3, [r4, #0]
 8000966:	78a2      	ldrb	r2, [r4, #2]
 8000968:	822b      	strh	r3, [r5, #16]
 800096a:	4613      	mov	r3, r2
 800096c:	74ab      	strb	r3, [r5, #18]
		write_to_future_send_via_usb( out_str );
 800096e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000970:	f000 f86c 	bl	8000a4c <write_to_future_send_via_usb>
    }

    while( loop > 0 ) {
 8000974:	e00f      	b.n	8000996 <get_command+0x3f2>
    	loop--;
 8000976:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800097a:	3b01      	subs	r3, #1
 800097c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    	free( result[ loop ]);
 8000980:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800098a:	4413      	add	r3, r2
 800098c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000990:	4618      	mov	r0, r3
 8000992:	f009 f823 	bl	80099dc <free>
    while( loop > 0 ) {
 8000996:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1eb      	bne.n	8000976 <get_command+0x3d2>
    }
	in_usb_buf_pos = 0;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <get_command+0x42c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	801a      	strh	r2, [r3, #0]
	send_prompt();
 80009a4:	f000 f874 	bl	8000a90 <send_prompt>
}
 80009a8:	bf00      	nop
 80009aa:	3748      	adds	r7, #72	; 0x48
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bdb0      	pop	{r4, r5, r7, pc}
 80009b0:	0800b600 	.word	0x0800b600
 80009b4:	0800b604 	.word	0x0800b604
 80009b8:	200003fe 	.word	0x200003fe
 80009bc:	20000400 	.word	0x20000400
 80009c0:	20000402 	.word	0x20000402
 80009c4:	0800b60c 	.word	0x0800b60c
 80009c8:	0800b5e8 	.word	0x0800b5e8
 80009cc:	0800b614 	.word	0x0800b614
 80009d0:	200003fc 	.word	0x200003fc

080009d4 <send_queue_via_usb>:

void send_queue_via_usb(void) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	e02b      	b.n	8000a38 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] != NULL && strlen( output_usb_buffer[ loop ]) > 0 ) {
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <send_queue_via_usb+0x74>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d022      	beq.n	8000a32 <send_queue_via_usb+0x5e>
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <send_queue_via_usb+0x74>)
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d01b      	beq.n	8000a32 <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <send_queue_via_usb+0x74>)
 80009fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <send_queue_via_usb+0x74>)
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fba8 	bl	8000160 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff fd91 	bl	800053c <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <send_queue_via_usb+0x74>)
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f008 ffda 	bl	80099dc <free>
			output_usb_buffer[ loop ] = NULL;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <send_queue_via_usb+0x74>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	3301      	adds	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d9d0      	bls.n	80009e0 <send_queue_via_usb+0xc>
		}
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	2000070c 	.word	0x2000070c

08000a4c <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000a58:	e002      	b.n	8000a60 <write_to_future_send_via_usb+0x14>
		loop++;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d805      	bhi.n	8000a72 <write_to_future_send_via_usb+0x26>
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <write_to_future_send_via_usb+0x40>)
 8000a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f3      	bne.n	8000a5a <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d804      	bhi.n	8000a82 <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4904      	ldr	r1, [pc, #16]	; (8000a8c <write_to_future_send_via_usb+0x40>)
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	2000070c 	.word	0x2000070c

08000a90 <send_prompt>:

void send_prompt(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( strlen( prompt ) * sizeof( char ));
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <send_prompt+0x30>)
 8000a98:	f7ff fb62 	bl	8000160 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f008 ff94 	bl	80099cc <malloc>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, prompt );
 8000aa8:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <send_prompt+0x30>)
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f009 f948 	bl	8009d40 <strcpy>
	write_to_future_send_via_usb( tmp_buf );
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ffcb 	bl	8000a4c <write_to_future_send_via_usb>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000000 	.word	0x20000000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_MspInit+0x5c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_MspInit+0x5c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x5c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x5c>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_MspInit+0x60>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_MspInit+0x60>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000

08000b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d141      	bne.n	8000bca <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_TIM_Base_MspInit+0xa4>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <HAL_TIM_Base_MspInit+0xa4>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_TIM_Base_MspInit+0xa4>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_TIM_Base_MspInit+0xac>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b66:	2210      	movs	r2, #16
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b86:	2220      	movs	r2, #32
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b8c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000b94:	f000 fc58 	bl	8001448 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b9e:	f7ff ff91 	bl	8000ac4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_TIM_Base_MspInit+0xa8>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201d      	movs	r0, #29
 8000bc0:	f000 fc0b 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc4:	201d      	movs	r0, #29
 8000bc6:	f000 fc24 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	200006c8 	.word	0x200006c8
 8000be0:	4002006c 	.word	0x4002006c

08000be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_TIM_MspPostInit+0x58>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d117      	bne.n	8000c34 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_TIM_MspPostInit+0x5c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_TIM_MspPostInit+0x5c>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_TIM_MspPostInit+0x5c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c1c:	2340      	movs	r3, #64	; 0x40
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_TIM_MspPostInit+0x60>)
 8000c30:	f000 fe6e 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40000400 	.word	0x40000400
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010800 	.word	0x40010800

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <BusFault_Handler+0x4>

08000c66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 fa8a 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

//	__HAL_DMA_GET_COUNTER( &hdma_tim3_ch1_trig );
	ws2812b_dma_interupt();
 8000ca0:	f000 f974 	bl	8000f8c <ws2812b_dma_interupt>

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Channel6_IRQHandler+0x14>)
 8000ca6:	f000 fcff 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200006c8 	.word	0x200006c8

08000cb4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cba:	f001 f90f 	bl	8001edc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200013b4 	.word	0x200013b4

08000cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

//	inc_ic();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM3_IRQHandler+0x10>)
 8000cce:	f003 fc81 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000680 	.word	0x20000680

08000cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <_kill>:

int _kill(int pid, int sig)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cf4:	f008 fe40 	bl	8009978 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2216      	movs	r2, #22
 8000cfc:	601a      	str	r2, [r3, #0]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_exit>:

void _exit (int status)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d12:	f04f 31ff 	mov.w	r1, #4294967295
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffe7 	bl	8000cea <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d1c:	e7fe      	b.n	8000d1c <_exit+0x12>

08000d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e00a      	b.n	8000d46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d30:	f3af 8000 	nop.w
 8000d34:	4601      	mov	r1, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	60ba      	str	r2, [r7, #8]
 8000d3c:	b2ca      	uxtb	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dbf0      	blt.n	8000d30 <_read+0x12>
	}

return len;
 8000d4e:	687b      	ldr	r3, [r7, #4]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e009      	b.n	8000d7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbf1      	blt.n	8000d6a <_write+0x12>
	}
	return len;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_close>:

int _close(int file)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db6:	605a      	str	r2, [r3, #4]
	return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <_isatty>:

int _isatty(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	return 1;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f008 fdaa 	bl	8009978 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20005000 	.word	0x20005000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000404 	.word	0x20000404
 8000e58:	200016b0 	.word	0x200016b0

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <copy24bit_to_24byte>:
uint16_t led_counter = 0;


// ============================================================================================

void copy24bit_to_24byte( uint8_t *buf3byte, uint8_t *buf24byte ) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t value;
	for( uint8_t loop3byte = 0; loop3byte < 3; loop3byte++ ) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	73bb      	strb	r3, [r7, #14]
 8000e76:	e02a      	b.n	8000ece <copy24bit_to_24byte+0x66>
		value = buf3byte[ loop3byte ];
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	73fb      	strb	r3, [r7, #15]
		for( uint8_t loop24byte = 0; loop24byte < 8; loop24byte++ ) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	737b      	strb	r3, [r7, #13]
 8000e86:	e01c      	b.n	8000ec2 <copy24bit_to_24byte+0x5a>
			if (value & 0x80) {
 8000e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da09      	bge.n	8000ea4 <copy24bit_to_24byte+0x3c>
				buf24byte[ (loop3byte * 8) + loop24byte ] = BIT_1_TIME;
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	7b7b      	ldrb	r3, [r7, #13]
 8000e96:	4413      	add	r3, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e008      	b.n	8000eb6 <copy24bit_to_24byte+0x4e>
			}
			else {
				buf24byte[ (loop3byte * 8) + loop24byte ] = BIT_0_TIME;
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	00da      	lsls	r2, r3, #3
 8000ea8:	7b7b      	ldrb	r3, [r7, #13]
 8000eaa:	4413      	add	r3, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
		for( uint8_t loop24byte = 0; loop24byte < 8; loop24byte++ ) {
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	737b      	strb	r3, [r7, #13]
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d9df      	bls.n	8000e88 <copy24bit_to_24byte+0x20>
	for( uint8_t loop3byte = 0; loop3byte < 3; loop3byte++ ) {
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	73bb      	strb	r3, [r7, #14]
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d9d1      	bls.n	8000e78 <copy24bit_to_24byte+0x10>
		}
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <ws2812b_set_color>:

void ws2812b_set_color( uint32_t led, uint8_t red, uint8_t green, uint8_t blue )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	70fb      	strb	r3, [r7, #3]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70bb      	strb	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	707b      	strb	r3, [r7, #1]
	if( led < LED_N )
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	d816      	bhi.n	8000f2e <ws2812b_set_color+0x4e>
	{
		ws2812b_array[ 3 * led + 0 ] = green;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	490b      	ldr	r1, [pc, #44]	; (8000f38 <ws2812b_set_color+0x58>)
 8000f0a:	78ba      	ldrb	r2, [r7, #2]
 8000f0c:	54ca      	strb	r2, [r1, r3]
		ws2812b_array[ 3 * led + 1 ] = red;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	3301      	adds	r3, #1
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <ws2812b_set_color+0x58>)
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	54ca      	strb	r2, [r1, r3]
		ws2812b_array[ 3 * led + 2 ] = blue;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	3302      	adds	r3, #2
 8000f28:	4903      	ldr	r1, [pc, #12]	; (8000f38 <ws2812b_set_color+0x58>)
 8000f2a:	787a      	ldrb	r2, [r7, #1]
 8000f2c:	54ca      	strb	r2, [r1, r3]
	}
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	2000043c 	.word	0x2000043c

08000f3c <ws2812b_update>:

void ws2812b_update(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	busy_indicator = 1;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <ws2812b_update+0x40>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
	led_counter = 0;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <ws2812b_update+0x44>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
	for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e006      	b.n	8000f62 <ws2812b_update+0x26>
		circular_buffer[ loop ] = 0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <ws2812b_update+0x48>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]
	for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b2f      	cmp	r3, #47	; 0x2f
 8000f66:	d9f5      	bls.n	8000f54 <ws2812b_update+0x18>
	}
	HAL_TIM_PWM_Start_DMA( &htim3, TIM_CHANNEL_1, (uint32_t*) circular_buffer, sizeof( circular_buffer ));
 8000f68:	2330      	movs	r3, #48	; 0x30
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <ws2812b_update+0x48>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <ws2812b_update+0x4c>)
 8000f70:	f003 f8d8 	bl	8004124 <HAL_TIM_PWM_Start_DMA>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000408 	.word	0x20000408
 8000f80:	20000454 	.word	0x20000454
 8000f84:	2000040c 	.word	0x2000040c
 8000f88:	20000680 	.word	0x20000680

08000f8c <ws2812b_dma_interupt>:

void ws2812b_dma_interupt(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	if( led_counter > LED_N ) {
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d907      	bls.n	8000faa <ws2812b_dma_interupt+0x1e>
		HAL_TIM_PWM_Stop_DMA( &htim3, TIM_CHANNEL_1 );
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	482d      	ldr	r0, [pc, #180]	; (8001054 <ws2812b_dma_interupt+0xc8>)
 8000f9e:	f003 fa5b 	bl	8004458 <HAL_TIM_PWM_Stop_DMA>
		busy_indicator = 0;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <ws2812b_dma_interupt+0xcc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e047      	b.n	800103a <ws2812b_dma_interupt+0xae>
	}
	else if( led_counter == LED_N ) {
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d121      	bne.n	8000ff6 <ws2812b_dma_interupt+0x6a>
		if( (led_counter & 0x01) == 0 ) {
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10d      	bne.n	8000fda <ws2812b_dma_interupt+0x4e>
			for( uint8_t loop = 0; loop < (CIRCULAR_LEN >> 1); loop++ ) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e006      	b.n	8000fd2 <ws2812b_dma_interupt+0x46>
				circular_buffer[ loop ] = 90;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <ws2812b_dma_interupt+0xd0>)
 8000fc8:	215a      	movs	r1, #90	; 0x5a
 8000fca:	54d1      	strb	r1, [r2, r3]
			for( uint8_t loop = 0; loop < (CIRCULAR_LEN >> 1); loop++ ) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b17      	cmp	r3, #23
 8000fd6:	d9f5      	bls.n	8000fc4 <ws2812b_dma_interupt+0x38>
 8000fd8:	e02f      	b.n	800103a <ws2812b_dma_interupt+0xae>
			}
		}
		else {
			for( uint8_t loop = (CIRCULAR_LEN >> 1); loop < CIRCULAR_LEN; loop++ ) {
 8000fda:	2318      	movs	r3, #24
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	e006      	b.n	8000fee <ws2812b_dma_interupt+0x62>
				circular_buffer[ loop ] = 90;
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <ws2812b_dma_interupt+0xd0>)
 8000fe4:	215a      	movs	r1, #90	; 0x5a
 8000fe6:	54d1      	strb	r1, [r2, r3]
			for( uint8_t loop = (CIRCULAR_LEN >> 1); loop < CIRCULAR_LEN; loop++ ) {
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	3301      	adds	r3, #1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff2:	d9f5      	bls.n	8000fe0 <ws2812b_dma_interupt+0x54>
 8000ff4:	e021      	b.n	800103a <ws2812b_dma_interupt+0xae>
			}
		}

	}
	else {
		if( (led_counter & 0x01) == 0 ) {
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10d      	bne.n	800101e <ws2812b_dma_interupt+0x92>
			copy24bit_to_24byte( ws2812b_array + (led_counter * 3), circular_buffer + 0 );
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <ws2812b_dma_interupt+0xd4>)
 8001012:	4413      	add	r3, r2
 8001014:	4911      	ldr	r1, [pc, #68]	; (800105c <ws2812b_dma_interupt+0xd0>)
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff26 	bl	8000e68 <copy24bit_to_24byte>
 800101c:	e00d      	b.n	800103a <ws2812b_dma_interupt+0xae>
		}
		else {
			copy24bit_to_24byte( ws2812b_array + (led_counter * 3), circular_buffer + (CIRCULAR_LEN >> 1));
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	461a      	mov	r2, r3
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <ws2812b_dma_interupt+0xd4>)
 800102e:	4413      	add	r3, r2
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <ws2812b_dma_interupt+0xd8>)
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff17 	bl	8000e68 <copy24bit_to_24byte>
		}
	}
	led_counter++;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b03      	ldr	r3, [pc, #12]	; (8001050 <ws2812b_dma_interupt+0xc4>)
 8001044:	801a      	strh	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000454 	.word	0x20000454
 8001054:	20000680 	.word	0x20000680
 8001058:	20000408 	.word	0x20000408
 800105c:	2000040c 	.word	0x2000040c
 8001060:	2000043c 	.word	0x2000043c
 8001064:	20000424 	.word	0x20000424

08001068 <ws2812b_init>:

void ws2812b_init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 800106e:	2300      	movs	r3, #0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	e006      	b.n	8001082 <ws2812b_init+0x1a>
	  ws2812b_array[ loop ] = 0;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <ws2812b_init+0x34>)
 8001078:	2100      	movs	r1, #0
 800107a:	54d1      	strb	r1, [r2, r3]
  for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	3301      	adds	r3, #1
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	2b17      	cmp	r3, #23
 8001086:	d9f5      	bls.n	8001074 <ws2812b_init+0xc>

  HAL_TIM_Base_Start( &htim3 );
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <ws2812b_init+0x38>)
 800108a:	f002 ffa9 	bl	8003fe0 <HAL_TIM_Base_Start>
  ws2812b_update();
 800108e:	f7ff ff55 	bl	8000f3c <ws2812b_update>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000043c 	.word	0x2000043c
 80010a0:	20000680 	.word	0x20000680

080010a4 <clear_led_data>:

void clear_led_data(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
	for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 80010aa:	2300      	movs	r3, #0
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	e006      	b.n	80010be <clear_led_data+0x1a>
		  ws2812b_array[ loop ] = 0;
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <clear_led_data+0x2c>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	54d1      	strb	r1, [r2, r3]
	for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	3301      	adds	r3, #1
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	2b17      	cmp	r3, #23
 80010c2:	d9f5      	bls.n	80010b0 <clear_led_data+0xc>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	2000043c 	.word	0x2000043c

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff feaf 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f008 fc41 	bl	8009984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff f835 	bl	8000170 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001110:	0800ba74 	.word	0x0800ba74
  ldr r2, =_sbss
 8001114:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001118:	200016b0 	.word	0x200016b0

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x28>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f947 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff fcc8 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f95f 	bl	800142e <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f927 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000100 	.word	0x20000100
 80011a4:	20000108 	.word	0x20000108
 80011a8:	20000104 	.word	0x20000104

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000108 	.word	0x20000108
 80011cc:	2000071c 	.word	0x2000071c

080011d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	2000071c 	.word	0x2000071c

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff fff0 	bl	80011d0 <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffe0 	bl	80011d0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000108 	.word	0x20000108

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4906      	ldr	r1, [pc, #24]	; (80012c4 <__NVIC_EnableIRQ+0x34>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff90 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff2d 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff42 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff90 	bl	800131c <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5f 	bl	80012c8 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff35 	bl	8001290 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e043      	b.n	80014e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_DMA_Init+0xa8>)
 8001466:	4413      	add	r3, r2
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_DMA_Init+0xac>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	009a      	lsls	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_DMA_Init+0xb0>)
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001492:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001496:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	bffdfff8 	.word	0xbffdfff8
 80014f4:	cccccccd 	.word	0xcccccccd
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_DMA_Start_IT+0x20>
 8001518:	2302      	movs	r3, #2
 800151a:	e04a      	b.n	80015b2 <HAL_DMA_Start_IT+0xb6>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152a:	2b01      	cmp	r3, #1
 800152c:	d13a      	bne.n	80015a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f9ae 	bl	80018b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 020e 	orr.w	r2, r2, #14
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e00f      	b.n	8001592 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0204 	bic.w	r2, r2, #4
 8001580:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 020a 	orr.w	r2, r2, #10
 8001590:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e005      	b.n	80015b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ac:	2302      	movs	r3, #2
 80015ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d005      	beq.n	80015de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2204      	movs	r2, #4
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e051      	b.n	8001682 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 020e 	bic.w	r2, r2, #14
 80015ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <HAL_DMA_Abort_IT+0xd0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d029      	beq.n	800165c <HAL_DMA_Abort_IT+0xa0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_DMA_Abort_IT+0xd4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d022      	beq.n	8001658 <HAL_DMA_Abort_IT+0x9c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_DMA_Abort_IT+0xd8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d01a      	beq.n	8001652 <HAL_DMA_Abort_IT+0x96>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_DMA_Abort_IT+0xdc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d012      	beq.n	800164c <HAL_DMA_Abort_IT+0x90>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_DMA_Abort_IT+0xe0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00a      	beq.n	8001646 <HAL_DMA_Abort_IT+0x8a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <HAL_DMA_Abort_IT+0xe4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d102      	bne.n	8001640 <HAL_DMA_Abort_IT+0x84>
 800163a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800163e:	e00e      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 8001640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001644:	e00b      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	e008      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	e005      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	e002      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 8001658:	2310      	movs	r3, #16
 800165a:	e000      	b.n	800165e <HAL_DMA_Abort_IT+0xa2>
 800165c:	2301      	movs	r3, #1
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_DMA_Abort_IT+0xe8>)
 8001660:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    } 
  }
  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020008 	.word	0x40020008
 8001690:	4002001c 	.word	0x4002001c
 8001694:	40020030 	.word	0x40020030
 8001698:	40020044 	.word	0x40020044
 800169c:	40020058 	.word	0x40020058
 80016a0:	4002006c 	.word	0x4002006c
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2204      	movs	r2, #4
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d04f      	beq.n	8001770 <HAL_DMA_IRQHandler+0xc8>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04a      	beq.n	8001770 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0204 	bic.w	r2, r2, #4
 80016f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d029      	beq.n	8001756 <HAL_DMA_IRQHandler+0xae>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_DMA_IRQHandler+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_IRQHandler+0xaa>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01a      	beq.n	800174c <HAL_DMA_IRQHandler+0xa4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a62      	ldr	r2, [pc, #392]	; (80018a4 <HAL_DMA_IRQHandler+0x1fc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d012      	beq.n	8001746 <HAL_DMA_IRQHandler+0x9e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_DMA_IRQHandler+0x200>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00a      	beq.n	8001740 <HAL_DMA_IRQHandler+0x98>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <HAL_DMA_IRQHandler+0x204>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d102      	bne.n	800173a <HAL_DMA_IRQHandler+0x92>
 8001734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001738:	e00e      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 800173a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800173e:	e00b      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001744:	e008      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174a:	e005      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	e002      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	e000      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001756:	2304      	movs	r3, #4
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_DMA_IRQHandler+0x208>)
 800175a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8094 	beq.w	800188e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800176e:	e08e      	b.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2202      	movs	r2, #2
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d056      	beq.n	800182e <HAL_DMA_IRQHandler+0x186>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d051      	beq.n	800182e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020a 	bic.w	r2, r2, #10
 80017a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d029      	beq.n	800180e <HAL_DMA_IRQHandler+0x166>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a37      	ldr	r2, [pc, #220]	; (800189c <HAL_DMA_IRQHandler+0x1f4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <HAL_DMA_IRQHandler+0x162>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <HAL_DMA_IRQHandler+0x1f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01a      	beq.n	8001804 <HAL_DMA_IRQHandler+0x15c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a34      	ldr	r2, [pc, #208]	; (80018a4 <HAL_DMA_IRQHandler+0x1fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0x156>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_DMA_IRQHandler+0x200>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x150>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_DMA_IRQHandler+0x204>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x14a>
 80017ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017f0:	e00e      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f6:	e00b      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fc:	e008      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	e005      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 8001804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001808:	e002      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 800180a:	2320      	movs	r3, #32
 800180c:	e000      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 800180e:	2302      	movs	r3, #2
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_DMA_IRQHandler+0x208>)
 8001812:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d034      	beq.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800182c:	e02f      	b.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2208      	movs	r2, #8
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d028      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 020e 	bic.w	r2, r2, #14
 8001856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
    }
  }
  return;
 800188e:	bf00      	nop
 8001890:	bf00      	nop
}
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40020008 	.word	0x40020008
 800189c:	4002001c 	.word	0x4002001c
 80018a0:	40020030 	.word	0x40020030
 80018a4:	40020044 	.word	0x40020044
 80018a8:	40020058 	.word	0x40020058
 80018ac:	4002006c 	.word	0x4002006c
 80018b0:	40020000 	.word	0x40020000

080018b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d108      	bne.n	80018f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018f2:	e007      	b.n	8001904 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e169      	b.n	8001bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8158 	bne.w	8001bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a9a      	ldr	r2, [pc, #616]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d05e      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800194c:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d875      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001952:	4a98      	ldr	r2, [pc, #608]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d058      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001958:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d86f      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800195e:	4a96      	ldr	r2, [pc, #600]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d052      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001964:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d869      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800196a:	4a94      	ldr	r2, [pc, #592]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04c      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001970:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d863      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001976:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d046      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800197c:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d85d      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d82a      	bhi.n	80019dc <HAL_GPIO_Init+0xcc>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d859      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_GPIO_Init+0x80>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	080019e5 	.word	0x080019e5
 8001998:	080019f7 	.word	0x080019f7
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a3f 	.word	0x08001a3f
 80019a4:	08001a3f 	.word	0x08001a3f
 80019a8:	08001a3f 	.word	0x08001a3f
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a3f 	.word	0x08001a3f
 80019b4:	08001a3f 	.word	0x08001a3f
 80019b8:	08001a3f 	.word	0x08001a3f
 80019bc:	08001a3f 	.word	0x08001a3f
 80019c0:	08001a3f 	.word	0x08001a3f
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a3f 	.word	0x08001a3f
 80019cc:	08001a3f 	.word	0x08001a3f
 80019d0:	08001a3f 	.word	0x08001a3f
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a01 	.word	0x08001a01
 80019dc:	4a79      	ldr	r2, [pc, #484]	; (8001bc4 <HAL_GPIO_Init+0x2b4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e2:	e02c      	b.n	8001a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e029      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e024      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e01f      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	330c      	adds	r3, #12
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e01a      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a12:	2304      	movs	r3, #4
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e013      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
          break;
 8001a2a:	e009      	b.n	8001a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	615a      	str	r2, [r3, #20]
          break;
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          break;
 8001a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d801      	bhi.n	8001a4a <HAL_GPIO_Init+0x13a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_Init+0x13e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d802      	bhi.n	8001a5c <HAL_GPIO_Init+0x14c>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x152>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	210f      	movs	r1, #15
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80b1 	beq.w	8001bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa8:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a40      	ldr	r2, [pc, #256]	; (8001bd0 <HAL_GPIO_Init+0x2c0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_Init+0x1ec>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <HAL_GPIO_Init+0x2c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1e8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1e4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1e0>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001afc:	2300      	movs	r3, #0
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0e:	492f      	ldr	r1, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	492c      	ldr	r1, [pc, #176]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4928      	ldr	r1, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4922      	ldr	r1, [pc, #136]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	491e      	ldr	r1, [pc, #120]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4918      	ldr	r1, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4914      	ldr	r1, [pc, #80]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d021      	beq.n	8001be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e021      	b.n	8001bf2 <HAL_GPIO_Init+0x2e2>
 8001bae:	bf00      	nop
 8001bb0:	10320000 	.word	0x10320000
 8001bb4:	10310000 	.word	0x10310000
 8001bb8:	10220000 	.word	0x10220000
 8001bbc:	10210000 	.word	0x10210000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10110000 	.word	0x10110000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4909      	ldr	r1, [pc, #36]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae8e 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	372c      	adds	r7, #44	; 0x2c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43d9      	mvns	r1, r3
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	400b      	ands	r3, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	611a      	str	r2, [r3, #16]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7c:	b08b      	sub	sp, #44	; 0x2c
 8001c7e:	af06      	add	r7, sp, #24
 8001c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0fd      	b.n	8001e88 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f007 fbbb 	bl	800941c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fb62 	bl	800537c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	602b      	str	r3, [r5, #0]
 8001cce:	1d33      	adds	r3, r6, #4
 8001cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f003 fb2c 	bl	8005330 <USB_CoreInit>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0ce      	b.n	8001e88 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fb5d 	bl	80053b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e04c      	b.n	8001d96 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3336      	adds	r3, #54	; 0x36
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3303      	adds	r3, #3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	3301      	adds	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3ad      	bcc.n	8001cfc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e044      	b.n	8001e30 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3b5      	bcc.n	8001da6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f003 fab7 	bl	80053c8 <USB_DevInit>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e00d      	b.n	8001e88 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f005 fc28 	bl	80076d6 <USB_DevDisconnect>

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_PCD_Start+0x16>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e016      	b.n	8001ed4 <HAL_PCD_Start+0x44>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fa4c 	bl	8005350 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001eb8:	2101      	movs	r1, #1
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f007 fd21 	bl	8009902 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fbfc 	bl	80076c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 fbfe 	bl	80076ea <USB_ReadInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef8:	d102      	bne.n	8001f00 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb61 	bl	80025c2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fbf0 	bl	80076ea <USB_ReadInterrupts>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f14:	d112      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f007 faef 	bl	8009512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f34:	2100      	movs	r1, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f925 	bl	8002186 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fbd2 	bl	80076ea <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f50:	d10b      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f64:	b292      	uxth	r2, r2
 8001f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fbbb 	bl	80076ea <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f7e:	d10b      	bne.n	8001f98 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f92:	b292      	uxth	r2, r2
 8001f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 fba4 	bl	80076ea <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fac:	d126      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0204 	bic.w	r2, r2, #4
 8001fc0:	b292      	uxth	r2, r2
 8001fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f007 fad0 	bl	8009584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f005 fb72 	bl	80076ea <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002010:	f040 8084 	bne.w	800211c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]
 8002018:	e011      	b.n	800203e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	7ffb      	ldrb	r3, [r7, #31]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	8812      	ldrh	r2, [r2, #0]
 800202a:	b292      	uxth	r2, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	f107 0120 	add.w	r1, r7, #32
 8002032:	440b      	add	r3, r1
 8002034:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	3301      	adds	r3, #1
 800203c:	77fb      	strb	r3, [r7, #31]
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b07      	cmp	r3, #7
 8002042:	d9ea      	bls.n	800201a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002064:	b29a      	uxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	b292      	uxth	r2, r2
 8002070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002074:	bf00      	nop
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207e:	b29b      	uxth	r3, r3
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f6      	beq.n	8002076 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	b292      	uxth	r2, r2
 800209c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
 80020a4:	e010      	b.n	80020c8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4611      	mov	r1, r2
 80020ae:	7ffa      	ldrb	r2, [r7, #31]
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	440a      	add	r2, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	f107 0120 	add.w	r1, r7, #32
 80020ba:	440b      	add	r3, r1
 80020bc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80020c0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	3301      	adds	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d9eb      	bls.n	80020a6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0208 	orr.w	r2, r2, #8
 80020e0:	b292      	uxth	r2, r2
 80020e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f8:	b292      	uxth	r2, r2
 80020fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	b292      	uxth	r2, r2
 8002112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f007 fa1a 	bl	8009550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f005 fae2 	bl	80076ea <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d10e      	bne.n	8002150 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002144:	b292      	uxth	r2, r2
 8002146:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f007 f9d3 	bl	80094f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f005 fac8 	bl	80076ea <USB_ReadInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d10b      	bne.n	800217e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800217e:	bf00      	nop
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_PCD_SetAddress+0x1a>
 800219c:	2302      	movs	r3, #2
 800219e:	e013      	b.n	80021c8 <HAL_PCD_SetAddress+0x42>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fa6f 	bl	800769c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	460b      	mov	r3, r1
 80021e4:	803b      	strh	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0e      	bge.n	8002214 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	705a      	strb	r2, [r3, #1]
 8002212:	e00e      	b.n	8002232 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 0207 	and.w	r2, r3, #7
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800223e:	883a      	ldrh	r2, [r7, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	78ba      	ldrb	r2, [r7, #2]
 8002248:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800225c:	78bb      	ldrb	r3, [r7, #2]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d102      	bne.n	8002268 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_EP_Open+0xa6>
 8002272:	2302      	movs	r3, #2
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_Open+0xc4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 f8bf 	bl	8005408 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002292:	7afb      	ldrb	r3, [r7, #11]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da0e      	bge.n	80022ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	705a      	strb	r2, [r3, #1]
 80022cc:	e00e      	b.n	80022ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 0207 	and.w	r2, r3, #7
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_EP_Close+0x6a>
 8002302:	2302      	movs	r3, #2
 8002304:	e00e      	b.n	8002324 <HAL_PCD_EP_Close+0x88>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fbe1 	bl	8005adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	f003 0207 	and.w	r2, r3, #7
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	b2da      	uxtb	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 fd93 	bl	8005eb4 <USB_EPStartXfer>
 800238e:	e005      	b.n	800239c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fd8c 	bl	8005eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0207 	and.w	r2, r3, #7
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80023c8:	681b      	ldr	r3, [r3, #0]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	460b      	mov	r3, r1
 80023e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	b2da      	uxtb	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6979      	ldr	r1, [r7, #20]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fd39 	bl	8005eb4 <USB_EPStartXfer>
 8002442:	e005      	b.n	8002450 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6979      	ldr	r1, [r7, #20]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fd32 	bl	8005eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 0207 	and.w	r2, r3, #7
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d901      	bls.n	8002478 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e04c      	b.n	8002512 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800247c:	2b00      	cmp	r3, #0
 800247e:	da0e      	bge.n	800249e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	705a      	strb	r2, [r3, #1]
 800249c:	e00c      	b.n	80024b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_PCD_EP_SetStall+0x7e>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e01c      	b.n	8002512 <HAL_PCD_EP_SetStall+0xb8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 ffdb 	bl	80074a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f005 f900 	bl	8007708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d901      	bls.n	8002538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e040      	b.n	80025ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da0e      	bge.n	800255e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	705a      	strb	r2, [r3, #1]
 800255c:	e00e      	b.n	800257c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 0207 	and.w	r2, r3, #7
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_PCD_EP_ClrStall+0x82>
 8002598:	2302      	movs	r3, #2
 800259a:	e00e      	b.n	80025ba <HAL_PCD_EP_ClrStall+0xa0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 ffc9 	bl	8007542 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08e      	sub	sp, #56	; 0x38
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ca:	e2ec      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8161 	bne.w	80028ae <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d152      	bne.n	800269c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	81fb      	strh	r3, [r7, #14]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	89fb      	ldrh	r3, [r7, #14]
 800260e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002616:	b29b      	uxth	r3, r3
 8002618:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3328      	adds	r3, #40	; 0x28
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3302      	adds	r3, #2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	441a      	add	r2, r3
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800265a:	2100      	movs	r1, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f006 ff30 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 829b 	beq.w	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 8296 	bne.w	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b292      	uxth	r2, r2
 800268e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800269a:	e284      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d034      	beq.n	8002720 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	3306      	adds	r3, #6
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f005 f857 	bl	80077a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29a      	uxth	r2, r3
 8002702:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002706:	4013      	ands	r3, r2
 8002708:	823b      	strh	r3, [r7, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	8a3a      	ldrh	r2, [r7, #16]
 8002710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002714:	b292      	uxth	r2, r2
 8002716:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f006 fea5 	bl	8009468 <HAL_PCD_SetupStageCallback>
 800271e:	e242      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002720:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002724:	2b00      	cmp	r3, #0
 8002726:	f280 823e 	bge.w	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29a      	uxth	r2, r3
 8002732:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002736:	4013      	ands	r3, r2
 8002738:	83bb      	strh	r3, [r7, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	8bba      	ldrh	r2, [r7, #28]
 8002740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	3306      	adds	r3, #6
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d019      	beq.n	80027b0 <PCD_EP_ISR_Handler+0x1ee>
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002794:	b29b      	uxth	r3, r3
 8002796:	f005 f807 	bl	80077a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	441a      	add	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f006 fe6e 	bl	800948c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 81f2 	bne.w	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d112      	bne.n	8002810 <PCD_EP_ISR_Handler+0x24e>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002808:	b29a      	uxth	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e02f      	b.n	8002870 <PCD_EP_ISR_Handler+0x2ae>
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b3e      	cmp	r3, #62	; 0x3e
 8002816:	d813      	bhi.n	8002840 <PCD_EP_ISR_Handler+0x27e>
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <PCD_EP_ISR_Handler+0x270>
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	3301      	adds	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	b29b      	uxth	r3, r3
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e017      	b.n	8002870 <PCD_EP_ISR_Handler+0x2ae>
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <PCD_EP_ISR_Handler+0x298>
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	3b01      	subs	r3, #1
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	b29b      	uxth	r3, r3
 800285e:	029b      	lsls	r3, r3, #10
 8002860:	b29b      	uxth	r3, r3
 8002862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286a:	b29a      	uxth	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	827b      	strh	r3, [r7, #18]
 8002882:	8a7b      	ldrh	r3, [r7, #18]
 8002884:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002888:	827b      	strh	r3, [r7, #18]
 800288a:	8a7b      	ldrh	r3, [r7, #18]
 800288c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002890:	827b      	strh	r3, [r7, #18]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
 80028ac:	e17b      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f280 80ea 	bge.w	8002a9e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028e0:	4013      	ands	r3, r2
 80028e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028f8:	b292      	uxth	r2, r2
 80028fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	7b1b      	ldrb	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d122      	bne.n	8002960 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	3306      	adds	r3, #6
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	6959      	ldr	r1, [r3, #20]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	88da      	ldrh	r2, [r3, #6]
 8002958:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800295a:	f004 ff25 	bl	80077a8 <USB_ReadPMA>
 800295e:	e07c      	b.n	8002a5a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d108      	bne.n	800297a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800296a:	461a      	mov	r2, r3
 800296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f927 	bl	8002bc2 <HAL_PCD_EP_DB_Receive>
 8002974:	4603      	mov	r3, r0
 8002976:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002978:	e06f      	b.n	8002a5a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	847b      	strh	r3, [r7, #34]	; 0x22
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	441a      	add	r2, r3
 80029a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d021      	beq.n	8002a18 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	3302      	adds	r3, #2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02a      	beq.n	8002a5a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	6959      	ldr	r1, [r3, #20]
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	891a      	ldrh	r2, [r3, #8]
 8002a10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a12:	f004 fec9 	bl	80077a8 <USB_ReadPMA>
 8002a16:	e020      	b.n	8002a5a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a40:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	6959      	ldr	r1, [r3, #20]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	895a      	ldrh	r2, [r3, #10]
 8002a54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a56:	f004 fea7 	bl	80077a8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a60:	441a      	add	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a6c:	441a      	add	r2, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <PCD_EP_ISR_Handler+0x4c2>
 8002a7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d206      	bcs.n	8002a92 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f006 fcfe 	bl	800948c <HAL_PCD_DataOutStageCallback>
 8002a90:	e005      	b.n	8002a9e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fa0b 	bl	8005eb4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d07e      	beq.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	843b      	strh	r3, [r7, #32]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	8c3b      	ldrh	r3, [r7, #32]
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d00c      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x554>
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	78db      	ldrb	r3, [r3, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d146      	bne.n	8002b9a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d141      	bne.n	8002b9a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	8bfb      	ldrh	r3, [r7, #30]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d906      	bls.n	8002b58 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	8bfb      	ldrh	r3, [r7, #30]
 8002b50:	1ad2      	subs	r2, r2, r3
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	619a      	str	r2, [r3, #24]
 8002b56:	e002      	b.n	8002b5e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f006 fca8 	bl	80094c2 <HAL_PCD_DataInStageCallback>
 8002b72:	e018      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	8bfb      	ldrh	r3, [r7, #30]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	8bfb      	ldrh	r3, [r7, #30]
 8002b86:	441a      	add	r2, r3
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 f98e 	bl	8005eb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b98:	e005      	b.n	8002ba6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f91b 	bl	8002ddc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f6ff ad0a 	blt.w	80025cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3738      	adds	r7, #56	; 0x38
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b088      	sub	sp, #32
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d07e      	beq.n	8002cd8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	8b7b      	ldrh	r3, [r7, #26]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d306      	bcc.n	8002c1c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	1ad2      	subs	r2, r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	619a      	str	r2, [r3, #24]
 8002c1a:	e002      	b.n	8002c22 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d123      	bne.n	8002c72 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	833b      	strh	r3, [r7, #24]
 8002c46:	8b3b      	ldrh	r3, [r7, #24]
 8002c48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c4c:	833b      	strh	r3, [r7, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	441a      	add	r2, r3
 8002c5c:	8b3b      	ldrh	r3, [r7, #24]
 8002c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01f      	beq.n	8002cbc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	82fb      	strh	r3, [r7, #22]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	441a      	add	r2, r3
 8002ca6:	8afb      	ldrh	r3, [r7, #22]
 8002ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8087 	beq.w	8002dd2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6959      	ldr	r1, [r3, #20]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	891a      	ldrh	r2, [r3, #8]
 8002cd0:	8b7b      	ldrh	r3, [r7, #26]
 8002cd2:	f004 fd69 	bl	80077a8 <USB_ReadPMA>
 8002cd6:	e07c      	b.n	8002dd2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	3306      	adds	r3, #6
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	8b7b      	ldrh	r3, [r7, #26]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d306      	bcc.n	8002d1a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	8b7b      	ldrh	r3, [r7, #26]
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	619a      	str	r2, [r3, #24]
 8002d18:	e002      	b.n	8002d20 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d123      	bne.n	8002d70 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	83fb      	strh	r3, [r7, #30]
 8002d44:	8bfb      	ldrh	r3, [r7, #30]
 8002d46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d4a:	83fb      	strh	r3, [r7, #30]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	8bfb      	ldrh	r3, [r7, #30]
 8002d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11f      	bne.n	8002dba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d94:	83bb      	strh	r3, [r7, #28]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	8bbb      	ldrh	r3, [r7, #28]
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dba:	8b7b      	ldrh	r3, [r7, #26]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6959      	ldr	r1, [r3, #20]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	895a      	ldrh	r2, [r3, #10]
 8002dcc:	8b7b      	ldrh	r3, [r7, #26]
 8002dce:	f004 fceb 	bl	80077a8 <USB_ReadPMA>
    }
  }

  return count;
 8002dd2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3720      	adds	r7, #32
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0a2      	sub	sp, #136	; 0x88
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 81c7 	beq.w	8003184 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d907      	bls.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	619a      	str	r2, [r3, #24]
 8002e3c:	e002      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 80b9 	bne.w	8002fc0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d126      	bne.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	4413      	add	r3, r2
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	011a      	lsls	r2, r3, #4
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	4413      	add	r3, r2
 8002e78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	e01a      	b.n	8002eda <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d116      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0xfe>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	4413      	add	r3, r2
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	4413      	add	r3, r2
 8002ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d126      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4413      	add	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	011a      	lsls	r2, r3, #4
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	e017      	b.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d113      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	011a      	lsls	r2, r3, #4
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2200      	movs	r2, #0
 8002f64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f006 faa8 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 82d4 	beq.w	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	827b      	strh	r3, [r7, #18]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	8a7b      	ldrh	r3, [r7, #18]
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
 8002fbe:	e2b2      	b.n	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003014:	2b01      	cmp	r3, #1
 8003016:	f040 8286 	bne.w	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003022:	441a      	add	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003030:	441a      	add	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	429a      	cmp	r2, r3
 8003040:	d309      	bcc.n	8003056 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	621a      	str	r2, [r3, #32]
 8003054:	e015      	b.n	8003082 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003062:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800306c:	e009      	b.n	8003082 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d155      	bne.n	8003136 <HAL_PCD_EP_DB_Transmit+0x35a>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	4413      	add	r3, r2
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	011a      	lsls	r2, r3, #4
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	4413      	add	r3, r2
 80030ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d112      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x302>
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e047      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x392>
 80030de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e0:	2b3e      	cmp	r3, #62	; 0x3e
 80030e2:	d811      	bhi.n	8003108 <HAL_PCD_EP_DB_Transmit+0x32c>
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_PCD_EP_DB_Transmit+0x31e>
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	3301      	adds	r3, #1
 80030f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	b29a      	uxth	r2, r3
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	e032      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x392>
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_PCD_EP_DB_Transmit+0x342>
 8003118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311a:	3b01      	subs	r3, #1
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
 800311e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003120:	b29b      	uxth	r3, r3
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	b29b      	uxth	r3, r3
 8003126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312e:	b29a      	uxth	r2, r3
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	801a      	strh	r2, [r3, #0]
 8003134:	e01b      	b.n	800316e <HAL_PCD_EP_DB_Transmit+0x392>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d117      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x392>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	643b      	str	r3, [r7, #64]	; 0x40
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	4413      	add	r3, r2
 8003154:	643b      	str	r3, [r7, #64]	; 0x40
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	011a      	lsls	r2, r3, #4
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	4413      	add	r3, r2
 8003160:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003168:	b29a      	uxth	r2, r3
 800316a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6959      	ldr	r1, [r3, #20]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	891a      	ldrh	r2, [r3, #8]
 800317a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	f004 face 	bl	800771e <USB_WritePMA>
 8003182:	e1d0      	b.n	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3306      	adds	r3, #6
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d307      	bcc.n	80031cc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c4:	1ad2      	subs	r2, r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	619a      	str	r2, [r3, #24]
 80031ca:	e002      	b.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80c4 	bne.w	8003364 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d126      	bne.n	8003232 <HAL_PCD_EP_DB_Transmit+0x456>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	4413      	add	r3, r2
 80031fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	011a      	lsls	r2, r3, #4
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003204:	4413      	add	r3, r2
 8003206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
 800320c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003216:	b29a      	uxth	r2, r3
 8003218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322a:	b29a      	uxth	r2, r3
 800322c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	e01a      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d116      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x48c>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	677b      	str	r3, [r7, #116]	; 0x74
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324e:	4413      	add	r3, r2
 8003250:	677b      	str	r3, [r7, #116]	; 0x74
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	011a      	lsls	r2, r3, #4
 8003258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325a:	4413      	add	r3, r2
 800325c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	2200      	movs	r2, #0
 8003266:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	67bb      	str	r3, [r7, #120]	; 0x78
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12f      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800328e:	4413      	add	r3, r2
 8003290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	011a      	lsls	r2, r3, #4
 800329a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800329e:	4413      	add	r3, r2
 80032a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d2:	801a      	strh	r2, [r3, #0]
 80032d4:	e017      	b.n	8003306 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d113      	bne.n	8003306 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	4413      	add	r3, r2
 80032ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	011a      	lsls	r2, r3, #4
 80032f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f8:	4413      	add	r3, r2
 80032fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003302:	2200      	movs	r2, #0
 8003304:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f006 f8d8 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 8104 	bne.w	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
 8003362:	e0e0      	b.n	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d121      	bne.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800339e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 80b4 	bne.w	8003526 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c6:	441a      	add	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d4:	441a      	add	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d309      	bcc.n	80033fa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	621a      	str	r2, [r3, #32]
 80033f8:	e015      	b.n	8003426 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003402:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003406:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003410:	e009      	b.n	8003426 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	667b      	str	r3, [r7, #100]	; 0x64
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d155      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	4413      	add	r3, r2
 800344a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	011a      	lsls	r2, r3, #4
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	4413      	add	r3, r2
 8003456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800345a:	65bb      	str	r3, [r7, #88]	; 0x58
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d112      	bne.n	8003488 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800346c:	b29a      	uxth	r2, r3
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003480:	b29a      	uxth	r2, r3
 8003482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	e044      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x736>
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	2b3e      	cmp	r3, #62	; 0x3e
 800348c:	d811      	bhi.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	3301      	adds	r3, #1
 80034a2:	657b      	str	r3, [r7, #84]	; 0x54
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	029b      	lsls	r3, r3, #10
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	e02f      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x736>
 80034b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80034c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c4:	3b01      	subs	r3, #1
 80034c6:	657b      	str	r3, [r7, #84]	; 0x54
 80034c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e018      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x736>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d114      	bne.n	8003512 <HAL_PCD_EP_DB_Transmit+0x736>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f6:	4413      	add	r3, r2
 80034f8:	667b      	str	r3, [r7, #100]	; 0x64
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	011a      	lsls	r2, r3, #4
 8003500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003502:	4413      	add	r3, r2
 8003504:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003508:	663b      	str	r3, [r7, #96]	; 0x60
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	b29a      	uxth	r2, r3
 800350e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003510:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6959      	ldr	r1, [r3, #20]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	895a      	ldrh	r2, [r3, #10]
 800351e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	f004 f8fc 	bl	800771e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	823b      	strh	r3, [r7, #16]
 8003542:	8a3b      	ldrh	r3, [r7, #16]
 8003544:	f083 0310 	eor.w	r3, r3, #16
 8003548:	823b      	strh	r3, [r7, #16]
 800354a:	8a3b      	ldrh	r3, [r7, #16]
 800354c:	f083 0320 	eor.w	r3, r3, #32
 8003550:	823b      	strh	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	8a3b      	ldrh	r3, [r7, #16]
 8003562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3788      	adds	r7, #136	; 0x88
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	4613      	mov	r3, r2
 8003590:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e009      	b.n	80035ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035b6:	897a      	ldrh	r2, [r7, #10]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	80da      	strh	r2, [r3, #6]
 80035de:	e00b      	b.n	80035f8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2201      	movs	r2, #1
 80035e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e26c      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8087 	beq.w	8003732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003624:	4b92      	ldr	r3, [pc, #584]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b04      	cmp	r3, #4
 800362e:	d00c      	beq.n	800364a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003630:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d112      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
 800363c:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d10b      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364a:	4b89      	ldr	r3, [pc, #548]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06c      	beq.n	8003730 <HAL_RCC_OscConfig+0x12c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d168      	bne.n	8003730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e246      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x76>
 800366c:	4b80      	ldr	r3, [pc, #512]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a7f      	ldr	r2, [pc, #508]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e02e      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x98>
 8003682:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b78      	ldr	r3, [pc, #480]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a77      	ldr	r2, [pc, #476]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0xbc>
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a71      	ldr	r2, [pc, #452]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 80036c0:	4b6b      	ldr	r3, [pc, #428]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a67      	ldr	r2, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd fd76 	bl	80011d0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fd fd72 	bl	80011d0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1fa      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe4>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fd fd62 	bl	80011d0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fd fd5e 	bl	80011d0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1e6      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x10c>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x18c>
 8003756:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x176>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1ba      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4939      	ldr	r1, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e03a      	b.n	8003806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_OscConfig+0x270>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fd fd17 	bl	80011d0 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fd fd13 	bl	80011d0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e19b      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4927      	ldr	r1, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_RCC_OscConfig+0x270>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd fcf6 	bl	80011d0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fd fcf2 	bl	80011d0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e17a      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03a      	beq.n	8003888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d019      	beq.n	800384e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fd fcd6 	bl	80011d0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003828:	f7fd fcd2 	bl	80011d0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e15a      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003846:	2001      	movs	r0, #1
 8003848:	f000 faa6 	bl	8003d98 <RCC_Delay>
 800384c:	e01c      	b.n	8003888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003854:	f7fd fcbc 	bl	80011d0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385a:	e00f      	b.n	800387c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fd fcb8 	bl	80011d0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d908      	bls.n	800387c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e140      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	42420000 	.word	0x42420000
 8003878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b9e      	ldr	r3, [pc, #632]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e9      	bne.n	800385c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a6 	beq.w	80039e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b97      	ldr	r3, [pc, #604]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a93      	ldr	r2, [pc, #588]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]
 80038b2:	4b91      	ldr	r3, [pc, #580]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b8e      	ldr	r3, [pc, #568]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ce:	4b8b      	ldr	r3, [pc, #556]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a8a      	ldr	r2, [pc, #552]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038da:	f7fd fc79 	bl	80011d0 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fd fc75 	bl	80011d0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0fd      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b81      	ldr	r3, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x312>
 8003908:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6213      	str	r3, [r2, #32]
 8003914:	e02d      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x334>
 800391e:	4b76      	ldr	r3, [pc, #472]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a75      	ldr	r2, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6213      	str	r3, [r2, #32]
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	e01c      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b05      	cmp	r3, #5
 800393e:	d10c      	bne.n	800395a <HAL_RCC_OscConfig+0x356>
 8003940:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a6c      	ldr	r2, [pc, #432]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f043 0304 	orr.w	r3, r3, #4
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a69      	ldr	r2, [pc, #420]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	e00b      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 800395a:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fd fc29 	bl	80011d0 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fc25 	bl	80011d0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0ab      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCC_OscConfig+0x37e>
 80039a4:	e014      	b.n	80039d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fd fc13 	bl	80011d0 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fc0f 	bl	80011d0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e095      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ee      	bne.n	80039ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a47      	ldr	r2, [pc, #284]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8081 	beq.w	8003aee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d061      	beq.n	8003abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d146      	bne.n	8003a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd fbe3 	bl	80011d0 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd fbdf 	bl	80011d0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e067      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a36:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	492d      	ldr	r1, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a19      	ldr	r1, [r3, #32]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fd fbb3 	bl	80011d0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fd fbaf 	bl	80011d0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e037      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x46a>
 8003a8c:	e02f      	b.n	8003aee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fd fb9c 	bl	80011d0 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd fb98 	bl	80011d0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e020      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x498>
 8003aba:	e018      	b.n	8003aee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e013      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
 8003b00:	42420060 	.word	0x42420060

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd faec 	bl	80011d0 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd fae8 	bl	80011d0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fa4a 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	0800b694 	.word	0x0800b694
 8003cd0:	20000100 	.word	0x20000100
 8003cd4:	20000104 	.word	0x20000104

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ce0:	1d3c      	adds	r4, r7, #4
 8003ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ce8:	f240 2301 	movw	r3, #513	; 0x201
 8003cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x46>
 8003d16:	e02d      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	623b      	str	r3, [r7, #32]
      break;
 8003d1c:	e02d      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	0c9b      	lsrs	r3, r3, #18
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c5b      	lsrs	r3, r3, #17
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d56:	fb02 f203 	mul.w	r2, r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	e004      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	623b      	str	r3, [r7, #32]
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	623b      	str	r3, [r7, #32]
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	; 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc90      	pop	{r4, r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	0800b630 	.word	0x0800b630
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	007a1200 	.word	0x007a1200
 8003d94:	003d0900 	.word	0x003d0900

08003d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCC_Delay+0x34>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <RCC_Delay+0x38>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0a5b      	lsrs	r3, r3, #9
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003db4:	bf00      	nop
  }
  while (Delay --);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1e5a      	subs	r2, r3, #1
 8003dba:	60fa      	str	r2, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f9      	bne.n	8003db4 <RCC_Delay+0x1c>
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000100 	.word	0x20000100
 8003dd0:	10624dd3 	.word	0x10624dd3

08003dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d07d      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	61d3      	str	r3, [r2, #28]
 8003e0c:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d118      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e28:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a42      	ldr	r2, [pc, #264]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e34:	f7fd f9cc 	bl	80011d0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	e008      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3c:	f7fd f9c8 	bl	80011d0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e06d      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02e      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d027      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e78:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e88:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e8e:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d014      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fd f997 	bl	80011d0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd f993 	bl	80011d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e036      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ee      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4917      	ldr	r1, [pc, #92]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	490b      	ldr	r1, [pc, #44]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42420440 	.word	0x42420440

08003f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e041      	b.n	8003fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc fde4 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 fec2 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d001      	beq.n	8003ff8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_Base_Start+0x88>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_TIM_Base_Start+0x48>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d009      	beq.n	8004028 <HAL_TIM_Base_Start+0x48>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_Base_Start+0x8c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_Base_Start+0x48>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_TIM_Base_Start+0x90>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d111      	bne.n	800404c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b06      	cmp	r3, #6
 8004038:	d010      	beq.n	800405c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	e007      	b.n	800405c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800

08004074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f839 	bl	8004112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 fe28 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_TIM_PWM_Start_DMA+0x28>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e022      	b.n	8004192 <HAL_TIM_PWM_Start_DMA+0x6e>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b04      	cmp	r3, #4
 8004150:	d109      	bne.n	8004166 <HAL_TIM_PWM_Start_DMA+0x42>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e015      	b.n	8004192 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d109      	bne.n	8004180 <HAL_TIM_PWM_Start_DMA+0x5c>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e008      	b.n	8004192 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	e14e      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_TIM_PWM_Start_DMA+0x90>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e022      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0xd6>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d109      	bne.n	80041ce <HAL_TIM_PWM_Start_DMA+0xaa>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e015      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0xd6>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e008      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0xd6>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d024      	beq.n	8004248 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start_DMA+0xea>
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e114      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start_DMA+0xfa>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	e016      	b.n	800424c <HAL_TIM_PWM_Start_DMA+0x128>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start_DMA+0x10a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	e00e      	b.n	800424c <HAL_TIM_PWM_Start_DMA+0x128>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start_DMA+0x11a>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e006      	b.n	800424c <HAL_TIM_PWM_Start_DMA+0x128>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004246:	e001      	b.n	800424c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0f5      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	f200 80ae 	bhi.w	80043b0 <HAL_TIM_PWM_Start_DMA+0x28c>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_TIM_PWM_Start_DMA+0x138>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004291 	.word	0x08004291
 8004260:	080043b1 	.word	0x080043b1
 8004264:	080043b1 	.word	0x080043b1
 8004268:	080043b1 	.word	0x080043b1
 800426c:	080042d9 	.word	0x080042d9
 8004270:	080043b1 	.word	0x080043b1
 8004274:	080043b1 	.word	0x080043b1
 8004278:	080043b1 	.word	0x080043b1
 800427c:	08004321 	.word	0x08004321
 8004280:	080043b1 	.word	0x080043b1
 8004284:	080043b1 	.word	0x080043b1
 8004288:	080043b1 	.word	0x080043b1
 800428c:	08004369 	.word	0x08004369
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	4a6a      	ldr	r2, [pc, #424]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	4a69      	ldr	r2, [pc, #420]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x320>)
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x324>)
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3334      	adds	r3, #52	; 0x34
 80042b4:	461a      	mov	r2, r3
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	f7fd f920 	bl	80014fc <HAL_DMA_Start_IT>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0b8      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	60da      	str	r2, [r3, #12]
      break;
 80042d6:	e06c      	b.n	80043b2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	4a57      	ldr	r2, [pc, #348]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x320>)
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	4a56      	ldr	r2, [pc, #344]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x324>)
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3338      	adds	r3, #56	; 0x38
 80042fc:	461a      	mov	r2, r3
 80042fe:	887b      	ldrh	r3, [r7, #2]
 8004300:	f7fd f8fc 	bl	80014fc <HAL_DMA_Start_IT>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e094      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800431c:	60da      	str	r2, [r3, #12]
      break;
 800431e:	e048      	b.n	80043b2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	4a46      	ldr	r2, [pc, #280]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	4a45      	ldr	r2, [pc, #276]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x320>)
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	4a44      	ldr	r2, [pc, #272]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004336:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	333c      	adds	r3, #60	; 0x3c
 8004344:	461a      	mov	r2, r3
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	f7fd f8d8 	bl	80014fc <HAL_DMA_Start_IT>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e070      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004364:	60da      	str	r2, [r3, #12]
      break;
 8004366:	e024      	b.n	80043b2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4a34      	ldr	r2, [pc, #208]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	4a33      	ldr	r2, [pc, #204]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	4a32      	ldr	r2, [pc, #200]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x324>)
 800437e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3340      	adds	r3, #64	; 0x40
 800438c:	461a      	mov	r2, r3
 800438e:	887b      	ldrh	r3, [r7, #2]
 8004390:	f7fd f8b4 	bl	80014fc <HAL_DMA_Start_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e04c      	b.n	8004438 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ac:	60da      	str	r2, [r3, #12]
      break;
 80043ae:	e000      	b.n	80043b2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80043b0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 ff24 	bl	8005208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <HAL_TIM_PWM_Start_DMA+0x328>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d107      	bne.n	80043da <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_TIM_PWM_Start_DMA+0x328>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d009      	beq.n	8004402 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a17      	ldr	r2, [pc, #92]	; (8004450 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_TIM_PWM_Start_DMA+0x330>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d111      	bne.n	8004426 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b06      	cmp	r3, #6
 8004412:	d010      	beq.n	8004436 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	e007      	b.n	8004436 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	08004bf9 	.word	0x08004bf9
 8004444:	08004ca1 	.word	0x08004ca1
 8004448:	08004b67 	.word	0x08004b67
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d855      	bhi.n	8004514 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044a5 	.word	0x080044a5
 8004474:	08004515 	.word	0x08004515
 8004478:	08004515 	.word	0x08004515
 800447c:	08004515 	.word	0x08004515
 8004480:	080044c1 	.word	0x080044c1
 8004484:	08004515 	.word	0x08004515
 8004488:	08004515 	.word	0x08004515
 800448c:	08004515 	.word	0x08004515
 8004490:	080044dd 	.word	0x080044dd
 8004494:	08004515 	.word	0x08004515
 8004498:	08004515 	.word	0x08004515
 800449c:	08004515 	.word	0x08004515
 80044a0:	080044f9 	.word	0x080044f9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd f87f 	bl	80015bc <HAL_DMA_Abort_IT>
      break;
 80044be:	e02a      	b.n	8004516 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd f871 	bl	80015bc <HAL_DMA_Abort_IT>
      break;
 80044da:	e01c      	b.n	8004516 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd f863 	bl	80015bc <HAL_DMA_Abort_IT>
      break;
 80044f6:	e00e      	b.n	8004516 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004506:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd f855 	bl	80015bc <HAL_DMA_Abort_IT>
      break;
 8004512:	e000      	b.n	8004516 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8004514:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fe72 	bl	8005208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d117      	bne.n	800455e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	f241 1311 	movw	r3, #4369	; 0x1111
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <HAL_TIM_PWM_Stop_DMA+0x106>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	f240 4344 	movw	r3, #1092	; 0x444
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_TIM_PWM_Stop_DMA+0x106>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f241 1311 	movw	r3, #4369	; 0x1111
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_TIM_PWM_Stop_DMA+0x136>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	f240 4344 	movw	r3, #1092	; 0x444
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <HAL_TIM_PWM_Stop_DMA+0x136>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Stop_DMA+0x146>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	e013      	b.n	80045c6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Stop_DMA+0x156>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Stop_DMA+0x166>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	e003      	b.n	80045c6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa78 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa6b 	bl	8004afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fa7a 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0204 	mvn.w	r2, #4
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa4e 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa41 	bl	8004afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fa50 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0208 	mvn.w	r2, #8
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa24 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa17 	bl	8004afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fa26 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2208      	movs	r2, #8
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9fa 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9ed 	bl	8004afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f9fc 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9c8 	bl	8004ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fdcd 	bl	800531e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9c9 	bl	8004b42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0220 	mvn.w	r2, #32
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fd98 	bl	800530c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ac      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f200 809f 	bhi.w	800494c <HAL_TIM_PWM_ConfigChannel+0x168>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004849 	.word	0x08004849
 8004818:	0800494d 	.word	0x0800494d
 800481c:	0800494d 	.word	0x0800494d
 8004820:	0800494d 	.word	0x0800494d
 8004824:	08004889 	.word	0x08004889
 8004828:	0800494d 	.word	0x0800494d
 800482c:	0800494d 	.word	0x0800494d
 8004830:	0800494d 	.word	0x0800494d
 8004834:	080048cb 	.word	0x080048cb
 8004838:	0800494d 	.word	0x0800494d
 800483c:	0800494d 	.word	0x0800494d
 8004840:	0800494d 	.word	0x0800494d
 8004844:	0800490b 	.word	0x0800490b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fabc 	bl	8004dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	619a      	str	r2, [r3, #24]
      break;
 8004886:	e062      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb02 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
      break;
 80048c8:	e041      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fb4b 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0204 	bic.w	r2, r2, #4
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]
      break;
 8004908:	e021      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fb95 	bl	8005040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	021a      	lsls	r2, r3, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	61da      	str	r2, [r3, #28]
      break;
 800494a:	e000      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800494c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_TIM_ConfigClockSource+0x18>
 8004974:	2302      	movs	r3, #2
 8004976:	e0b3      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x180>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b0:	d03e      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0xd0>
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b6:	f200 8087 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	f000 8085 	beq.w	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c6:	d87f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049c8:	2b70      	cmp	r3, #112	; 0x70
 80049ca:	d01a      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0xa2>
 80049cc:	2b70      	cmp	r3, #112	; 0x70
 80049ce:	d87b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049d0:	2b60      	cmp	r3, #96	; 0x60
 80049d2:	d050      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x116>
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d877      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049d8:	2b50      	cmp	r3, #80	; 0x50
 80049da:	d03c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xf6>
 80049dc:	2b50      	cmp	r3, #80	; 0x50
 80049de:	d873      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d058      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x136>
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d86f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d064      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x156>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d86b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d060      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x156>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d867      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x156>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d05a      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a00:	e062      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6899      	ldr	r1, [r3, #8]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f000 fbda 	bl	80051ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	609a      	str	r2, [r3, #8]
      break;
 8004a2e:	e04e      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f000 fbc3 	bl	80051ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a52:	609a      	str	r2, [r3, #8]
      break;
 8004a54:	e03b      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fb3a 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2150      	movs	r1, #80	; 0x50
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb91 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e02b      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 fb58 	bl	8005138 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2160      	movs	r1, #96	; 0x60
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fb81 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004a94:	e01b      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 fb1a 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2140      	movs	r1, #64	; 0x40
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb71 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e00b      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f000 fb68 	bl	8005196 <TIM_ITRx_SetConfig>
        break;
 8004ac6:	e002      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004acc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d107      	bne.n	8004b8e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e02a      	b.n	8004be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d107      	bne.n	8004ba8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba6:	e01d      	b.n	8004be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d107      	bne.n	8004bc2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	e010      	b.n	8004be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bda:	e003      	b.n	8004be4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff ffb5 	bl	8004b54 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d10b      	bne.n	8004c28 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d136      	bne.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c26:	e031      	b.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d10b      	bne.n	8004c4a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2202      	movs	r2, #2
 8004c36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d125      	bne.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c48:	e020      	b.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d10b      	bne.n	8004c6c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2204      	movs	r2, #4
 8004c58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d114      	bne.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6a:	e00f      	b.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d10a      	bne.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff ff46 	bl	8004b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d103      	bne.n	8004cc0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	771a      	strb	r2, [r3, #28]
 8004cbe:	e019      	b.n	8004cf4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d103      	bne.n	8004cd2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	771a      	strb	r2, [r3, #28]
 8004cd0:	e010      	b.n	8004cf4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d103      	bne.n	8004ce4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	771a      	strb	r2, [r3, #28]
 8004ce2:	e007      	b.n	8004cf4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d102      	bne.n	8004cf4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff ff1b 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <TIM_Base_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <TIM_Base_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <TIM_Base_SetConfig+0xbc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <TIM_Base_SetConfig+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d108      	bne.n	8004d7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d103      	bne.n	8004db0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	615a      	str	r2, [r3, #20]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800

08004dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0302 	bic.w	r3, r3, #2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_OC1_SetConfig+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10c      	bne.n	8004e42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0308 	bic.w	r3, r3, #8
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <TIM_OC1_SetConfig+0xc8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d111      	bne.n	8004e6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <TIM_OC2_SetConfig+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <TIM_OC2_SetConfig+0xd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40012c00 	.word	0x40012c00

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <TIM_OC3_SetConfig+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10d      	bne.n	8004fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC3_SetConfig+0xd0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d113      	bne.n	8005016 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00

08005040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <TIM_OC4_SetConfig+0x98>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d109      	bne.n	80050b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00

080050dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 0210 	bic.w	r2, r3, #16
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	031b      	lsls	r3, r3, #12
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005174:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f043 0307 	orr.w	r3, r3, #7
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	021a      	lsls	r2, r3, #8
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	609a      	str	r2, [r3, #8]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2201      	movs	r2, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	43db      	mvns	r3, r3
 800522a:	401a      	ands	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	431a      	orrs	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005264:	2302      	movs	r3, #2
 8005266:	e046      	b.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d009      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a10      	ldr	r2, [pc, #64]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10c      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800

0800530c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005330:	b084      	sub	sp, #16
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	f107 0014 	add.w	r0, r7, #20
 800533e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr

08005350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005360:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005364:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005384:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	b29b      	uxth	r3, r3
 8005396:	43db      	mvns	r3, r3
 8005398:	b29b      	uxth	r3, r3
 800539a:	4013      	ands	r3, r2
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053c8:	b084      	sub	sp, #16
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	f107 0014 	add.w	r0, r7, #20
 80053d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	b004      	add	sp, #16
 8005406:	4770      	bx	lr

08005408 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005408:	b480      	push	{r7}
 800540a:	b09b      	sub	sp, #108	; 0x6c
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	78db      	ldrb	r3, [r3, #3]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d81f      	bhi.n	800547a <USB_ActivateEndpoint+0x72>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <USB_ActivateEndpoint+0x38>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005451 	.word	0x08005451
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005483 	.word	0x08005483
 800544c:	0800545f 	.word	0x0800545f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005450:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005458:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800545c:	e012      	b.n	8005484 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800545e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005462:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005466:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800546a:	e00b      	b.n	8005484 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800546c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005474:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005478:	e004      	b.n	8005484 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005480:	e000      	b.n	8005484 <USB_ActivateEndpoint+0x7c>
      break;
 8005482:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	b29a      	uxth	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	7b1b      	ldrb	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 8149 	bne.w	8005788 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8084 	beq.w	8005608 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	011a      	lsls	r2, r3, #4
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	88db      	ldrh	r3, [r3, #6]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	81fb      	strh	r3, [r7, #14]
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <USB_ActivateEndpoint+0x17c>
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	81bb      	strh	r3, [r7, #12]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	89bb      	ldrh	r3, [r7, #12]
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	78db      	ldrb	r3, [r3, #3]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d020      	beq.n	80055ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a2:	813b      	strh	r3, [r7, #8]
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	f083 0320 	eor.w	r3, r3, #32
 80055aa:	813b      	strh	r3, [r7, #8]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	893b      	ldrh	r3, [r7, #8]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]
 80055cc:	e27f      	b.n	8005ace <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	817b      	strh	r3, [r7, #10]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]
 8005606:	e262      	b.n	8005ace <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	4413      	add	r3, r2
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	011a      	lsls	r2, r3, #4
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	4413      	add	r3, r2
 8005626:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	88db      	ldrh	r3, [r3, #6]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	4413      	add	r3, r2
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	011a      	lsls	r2, r3, #4
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	4413      	add	r3, r2
 800565a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d112      	bne.n	800568e <USB_ActivateEndpoint+0x286>
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005672:	b29a      	uxth	r2, r3
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29a      	uxth	r2, r3
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e02f      	b.n	80056ee <USB_ActivateEndpoint+0x2e6>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b3e      	cmp	r3, #62	; 0x3e
 8005694:	d813      	bhi.n	80056be <USB_ActivateEndpoint+0x2b6>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <USB_ActivateEndpoint+0x2a8>
 80056aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ac:	3301      	adds	r3, #1
 80056ae:	663b      	str	r3, [r7, #96]	; 0x60
 80056b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e017      	b.n	80056ee <USB_ActivateEndpoint+0x2e6>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <USB_ActivateEndpoint+0x2d0>
 80056d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d4:	3b01      	subs	r3, #1
 80056d6:	663b      	str	r3, [r7, #96]	; 0x60
 80056d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	83fb      	strh	r3, [r7, #30]
 80056fc:	8bfb      	ldrh	r3, [r7, #30]
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01b      	beq.n	800573e <USB_ActivateEndpoint+0x336>
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	83bb      	strh	r3, [r7, #28]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8bbb      	ldrh	r3, [r7, #28]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	837b      	strh	r3, [r7, #26]
 8005756:	8b7b      	ldrh	r3, [r7, #26]
 8005758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800575c:	837b      	strh	r3, [r7, #26]
 800575e:	8b7b      	ldrh	r3, [r7, #26]
 8005760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005764:	837b      	strh	r3, [r7, #26]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8b7b      	ldrh	r3, [r7, #26]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]
 8005786:	e1a2      	b.n	8005ace <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d4:	4413      	add	r3, r2
 80057d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	011a      	lsls	r2, r3, #4
 80057de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e6:	657b      	str	r3, [r7, #84]	; 0x54
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	891b      	ldrh	r3, [r3, #8]
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	653b      	str	r3, [r7, #80]	; 0x50
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	4413      	add	r3, r2
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	4413      	add	r3, r2
 8005816:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	895b      	ldrh	r3, [r3, #10]
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 8091 	bne.w	8005958 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01b      	beq.n	8005886 <USB_ActivateEndpoint+0x47e>
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	873b      	strh	r3, [r7, #56]	; 0x38
 8005894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01b      	beq.n	80058d6 <USB_ActivateEndpoint+0x4ce>
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	867b      	strh	r3, [r7, #50]	; 0x32
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e0ba      	b.n	8005ace <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005968:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800596c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01d      	beq.n	80059b0 <USB_ActivateEndpoint+0x5a8>
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01d      	beq.n	8005a08 <USB_ActivateEndpoint+0x600>
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d024      	beq.n	8005a5a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a2e:	f083 0320 	eor.w	r3, r3, #32
 8005a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]
 8005a58:	e01d      	b.n	8005a96 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	376c      	adds	r7, #108	; 0x6c
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08d      	sub	sp, #52	; 0x34
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	7b1b      	ldrb	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 808e 	bne.w	8005c0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d044      	beq.n	8005b82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	81bb      	strh	r3, [r7, #12]
 8005b06:	89bb      	ldrh	r3, [r7, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <USB_DeactivateEndpoint+0x6c>
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	817b      	strh	r3, [r7, #10]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	897b      	ldrh	r3, [r7, #10]
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	813b      	strh	r3, [r7, #8]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	893b      	ldrh	r3, [r7, #8]
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
 8005b80:	e192      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	827b      	strh	r3, [r7, #18]
 8005b90:	8a7b      	ldrh	r3, [r7, #18]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <USB_DeactivateEndpoint+0xf6>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	823b      	strh	r3, [r7, #16]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8a3b      	ldrh	r3, [r7, #16]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	81fb      	strh	r3, [r7, #14]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
 8005c0a:	e14d      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 80a5 	bne.w	8005d60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	843b      	strh	r3, [r7, #32]
 8005c24:	8c3b      	ldrh	r3, [r7, #32]
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <USB_DeactivateEndpoint+0x18a>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	83fb      	strh	r3, [r7, #30]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8bfb      	ldrh	r3, [r7, #30]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	83bb      	strh	r3, [r7, #28]
 8005c74:	8bbb      	ldrh	r3, [r7, #28]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <USB_DeactivateEndpoint+0x1da>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	837b      	strh	r3, [r7, #26]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8b7b      	ldrh	r3, [r7, #26]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	833b      	strh	r3, [r7, #24]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8b3b      	ldrh	r3, [r7, #24]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	82fb      	strh	r3, [r7, #22]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8afb      	ldrh	r3, [r7, #22]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	82bb      	strh	r3, [r7, #20]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8abb      	ldrh	r3, [r7, #20]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
 8005d5e:	e0a3      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <USB_DeactivateEndpoint+0x2d4>
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <USB_DeactivateEndpoint+0x324>
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	853b      	strh	r3, [r7, #40]	; 0x28
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3734      	adds	r7, #52	; 0x34
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b0cc      	sub	sp, #304	; 0x130
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	6018      	str	r0, [r3, #0]
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	f040 872e 	bne.w	8006d2a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ece:	463b      	mov	r3, r7
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d905      	bls.n	8005eea <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ee8:	e004      	b.n	8005ef4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	7b1b      	ldrb	r3, [r3, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d134      	bne.n	8005f68 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6959      	ldr	r1, [r3, #20]
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	88da      	ldrh	r2, [r3, #6]
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	1d38      	adds	r0, r7, #4
 8005f12:	6800      	ldr	r0, [r0, #0]
 8005f14:	f001 fc03 	bl	800771e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	1d3a      	adds	r2, r7, #4
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	f107 0210 	add.w	r2, r7, #16
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	440a      	add	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	011a      	lsls	r2, r3, #4
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005f50:	f107 030c 	add.w	r3, r7, #12
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	f000 beac 	b.w	8006cc0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	f040 838c 	bne.w	800668c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	f240 8330 	bls.w	80065e6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f86:	1d3b      	adds	r3, r7, #4
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd4:	1ad2      	subs	r2, r2, r3
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 819e 	beq.w	8006334 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ffc:	1d3a      	adds	r2, r7, #4
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d17a      	bne.n	8006102 <USB_EPStartXfer+0x24e>
 800600c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006010:	1d3a      	adds	r2, r7, #4
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601e:	b29b      	uxth	r3, r3
 8006020:	4619      	mov	r1, r3
 8006022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006026:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	440a      	add	r2, r1
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	463b      	mov	r3, r7
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	011a      	lsls	r2, r3, #4
 8006038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4413      	add	r3, r2
 8006040:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11a      	bne.n	8006088 <USB_EPStartXfer+0x1d4>
 8006052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006060:	b29a      	uxth	r2, r3
 8006062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607c:	b29a      	uxth	r2, r3
 800607e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e062      	b.n	800614e <USB_EPStartXfer+0x29a>
 8006088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608c:	2b3e      	cmp	r3, #62	; 0x3e
 800608e:	d819      	bhi.n	80060c4 <USB_EPStartXfer+0x210>
 8006090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800609a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <USB_EPStartXfer+0x1fc>
 80060a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060aa:	3301      	adds	r3, #1
 80060ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	029b      	lsls	r3, r3, #10
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e044      	b.n	800614e <USB_EPStartXfer+0x29a>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <USB_EPStartXfer+0x230>
 80060da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060de:	3b01      	subs	r3, #1
 80060e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e025      	b.n	800614e <USB_EPStartXfer+0x29a>
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d120      	bne.n	800614e <USB_EPStartXfer+0x29a>
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006114:	b29b      	uxth	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800611c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	440a      	add	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	011a      	lsls	r2, r3, #4
 800612e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4413      	add	r3, r2
 8006136:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800613a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	b29a      	uxth	r2, r3
 8006146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	895b      	ldrh	r3, [r3, #10]
 8006154:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006158:	463b      	mov	r3, r7
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6959      	ldr	r1, [r3, #20]
 800615e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006162:	b29b      	uxth	r3, r3
 8006164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006168:	1d38      	adds	r0, r7, #4
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	f001 fad7 	bl	800771e <USB_WritePMA>
            ep->xfer_buff += len;
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617a:	441a      	add	r2, r3
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	429a      	cmp	r2, r3
 8006190:	d909      	bls.n	80061a6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	621a      	str	r2, [r3, #32]
 80061a4:	e008      	b.n	80061b8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d17a      	bne.n	80062b8 <USB_EPStartXfer+0x404>
 80061c2:	f107 0318 	add.w	r3, r7, #24
 80061c6:	1d3a      	adds	r2, r7, #4
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	f107 0318 	add.w	r3, r7, #24
 80061dc:	f107 0218 	add.w	r2, r7, #24
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	440a      	add	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	011a      	lsls	r2, r3, #4
 80061ee:	f107 0318 	add.w	r3, r7, #24
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061fa:	f107 0314 	add.w	r3, r7, #20
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <USB_EPStartXfer+0x38a>
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006216:	b29a      	uxth	r2, r3
 8006218:	f107 0314 	add.w	r3, r7, #20
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	f107 0314 	add.w	r3, r7, #20
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	f107 0314 	add.w	r3, r7, #20
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e067      	b.n	800630e <USB_EPStartXfer+0x45a>
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	2b3e      	cmp	r3, #62	; 0x3e
 8006244:	d819      	bhi.n	800627a <USB_EPStartXfer+0x3c6>
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <USB_EPStartXfer+0x3b2>
 800625c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006266:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800626a:	b29b      	uxth	r3, r3
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	b29a      	uxth	r2, r3
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	e049      	b.n	800630e <USB_EPStartXfer+0x45a>
 800627a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <USB_EPStartXfer+0x3e6>
 8006290:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006294:	3b01      	subs	r3, #1
 8006296:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800629a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800629e:	b29b      	uxth	r3, r3
 80062a0:	029b      	lsls	r3, r3, #10
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e02a      	b.n	800630e <USB_EPStartXfer+0x45a>
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d125      	bne.n	800630e <USB_EPStartXfer+0x45a>
 80062c2:	f107 0320 	add.w	r3, r7, #32
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	1d3b      	adds	r3, r7, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4619      	mov	r1, r3
 80062d8:	f107 0320 	add.w	r3, r7, #32
 80062dc:	f107 0220 	add.w	r2, r7, #32
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	440a      	add	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	463b      	mov	r3, r7
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f107 0320 	add.w	r3, r7, #32
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80062fa:	f107 031c 	add.w	r3, r7, #28
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	b29a      	uxth	r2, r3
 8006306:	f107 031c 	add.w	r3, r7, #28
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	891b      	ldrh	r3, [r3, #8]
 8006314:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6959      	ldr	r1, [r3, #20]
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	b29b      	uxth	r3, r3
 8006324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006328:	1d38      	adds	r0, r7, #4
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	f001 f9f7 	bl	800771e <USB_WritePMA>
 8006330:	f000 bcc6 	b.w	8006cc0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d164      	bne.n	8006408 <USB_EPStartXfer+0x554>
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006352:	4413      	add	r3, r2
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006360:	4413      	add	r3, r2
 8006362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006366:	647b      	str	r3, [r7, #68]	; 0x44
 8006368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d112      	bne.n	8006396 <USB_EPStartXfer+0x4e2>
 8006370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637a:	b29a      	uxth	r2, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29a      	uxth	r2, r3
 8006390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e057      	b.n	8006446 <USB_EPStartXfer+0x592>
 8006396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639a:	2b3e      	cmp	r3, #62	; 0x3e
 800639c:	d817      	bhi.n	80063ce <USB_EPStartXfer+0x51a>
 800639e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <USB_EPStartXfer+0x50a>
 80063b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063b8:	3301      	adds	r3, #1
 80063ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e03b      	b.n	8006446 <USB_EPStartXfer+0x592>
 80063ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <USB_EPStartXfer+0x53a>
 80063e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063e8:	3b01      	subs	r3, #1
 80063ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	029b      	lsls	r3, r3, #10
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e01e      	b.n	8006446 <USB_EPStartXfer+0x592>
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d119      	bne.n	8006446 <USB_EPStartXfer+0x592>
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	653b      	str	r3, [r7, #80]	; 0x50
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006426:	4413      	add	r3, r2
 8006428:	653b      	str	r3, [r7, #80]	; 0x50
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	011a      	lsls	r2, r3, #4
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	4413      	add	r3, r2
 8006436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800643a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	b29a      	uxth	r2, r3
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	891b      	ldrh	r3, [r3, #8]
 800644c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6959      	ldr	r1, [r3, #20]
 8006456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800645a:	b29b      	uxth	r3, r3
 800645c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006460:	1d38      	adds	r0, r7, #4
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	f001 f95b 	bl	800771e <USB_WritePMA>
            ep->xfer_buff += len;
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	441a      	add	r2, r3
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	429a      	cmp	r2, r3
 8006488:	d909      	bls.n	800649e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	621a      	str	r2, [r3, #32]
 800649c:	e008      	b.n	80064b0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800649e:	463b      	mov	r3, r7
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80064a8:	463b      	mov	r3, r7
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2200      	movs	r2, #0
 80064ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	643b      	str	r3, [r7, #64]	; 0x40
 80064b6:	463b      	mov	r3, r7
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d164      	bne.n	800658a <USB_EPStartXfer+0x6d6>
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	4413      	add	r3, r2
 80064d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	011a      	lsls	r2, r3, #4
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d112      	bne.n	8006518 <USB_EPStartXfer+0x664>
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	e054      	b.n	80065c2 <USB_EPStartXfer+0x70e>
 8006518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651c:	2b3e      	cmp	r3, #62	; 0x3e
 800651e:	d817      	bhi.n	8006550 <USB_EPStartXfer+0x69c>
 8006520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800652a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <USB_EPStartXfer+0x68c>
 8006536:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800653a:	3301      	adds	r3, #1
 800653c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29a      	uxth	r2, r3
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e038      	b.n	80065c2 <USB_EPStartXfer+0x70e>
 8006550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800655a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <USB_EPStartXfer+0x6bc>
 8006566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800656a:	3b01      	subs	r3, #1
 800656c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006570:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006574:	b29b      	uxth	r3, r3
 8006576:	029b      	lsls	r3, r3, #10
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006582:	b29a      	uxth	r2, r3
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e01b      	b.n	80065c2 <USB_EPStartXfer+0x70e>
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d116      	bne.n	80065c2 <USB_EPStartXfer+0x70e>
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659c:	b29b      	uxth	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	4413      	add	r3, r2
 80065a4:	643b      	str	r3, [r7, #64]	; 0x40
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	895b      	ldrh	r3, [r3, #10]
 80065c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6959      	ldr	r1, [r3, #20]
 80065d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065dc:	1d38      	adds	r0, r7, #4
 80065de:	6800      	ldr	r0, [r0, #0]
 80065e0:	f001 f89d 	bl	800771e <USB_WritePMA>
 80065e4:	e36c      	b.n	8006cc0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	441a      	add	r2, r3
 800661c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006648:	4413      	add	r3, r2
 800664a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006656:	4413      	add	r3, r2
 8006658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665c:	65bb      	str	r3, [r7, #88]	; 0x58
 800665e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006662:	b29a      	uxth	r2, r3
 8006664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	891b      	ldrh	r3, [r3, #8]
 800666e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6959      	ldr	r1, [r3, #20]
 8006678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667c:	b29b      	uxth	r3, r3
 800667e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006682:	1d38      	adds	r0, r7, #4
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f001 f84a 	bl	800771e <USB_WritePMA>
 800668a:	e319      	b.n	8006cc0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80066aa:	1d3b      	adds	r3, r7, #4
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	463b      	mov	r3, r7
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8162 	beq.w	80069c2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066fe:	1d3b      	adds	r3, r7, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d164      	bne.n	80067da <USB_EPStartXfer+0x926>
 8006710:	1d3b      	adds	r3, r7, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	67bb      	str	r3, [r7, #120]	; 0x78
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006724:	4413      	add	r3, r2
 8006726:	67bb      	str	r3, [r7, #120]	; 0x78
 8006728:	463b      	mov	r3, r7
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	011a      	lsls	r2, r3, #4
 8006730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006732:	4413      	add	r3, r2
 8006734:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006738:	677b      	str	r3, [r7, #116]	; 0x74
 800673a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d112      	bne.n	8006768 <USB_EPStartXfer+0x8b4>
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800674c:	b29a      	uxth	r2, r3
 800674e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006760:	b29a      	uxth	r2, r3
 8006762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e057      	b.n	8006818 <USB_EPStartXfer+0x964>
 8006768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676c:	2b3e      	cmp	r3, #62	; 0x3e
 800676e:	d817      	bhi.n	80067a0 <USB_EPStartXfer+0x8ec>
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800677a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <USB_EPStartXfer+0x8dc>
 8006786:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800678a:	3301      	adds	r3, #1
 800678c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006790:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29a      	uxth	r2, r3
 800679a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e03b      	b.n	8006818 <USB_EPStartXfer+0x964>
 80067a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USB_EPStartXfer+0x90c>
 80067b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e01e      	b.n	8006818 <USB_EPStartXfer+0x964>
 80067da:	463b      	mov	r3, r7
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d119      	bne.n	8006818 <USB_EPStartXfer+0x964>
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f4:	4413      	add	r3, r2
 80067f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800680c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800680e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006812:	b29a      	uxth	r2, r3
 8006814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006816:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	895b      	ldrh	r3, [r3, #10]
 800681e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006822:	463b      	mov	r3, r7
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6959      	ldr	r1, [r3, #20]
 8006828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682c:	b29b      	uxth	r3, r3
 800682e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006832:	1d38      	adds	r0, r7, #4
 8006834:	6800      	ldr	r0, [r0, #0]
 8006836:	f000 ff72 	bl	800771e <USB_WritePMA>
          ep->xfer_buff += len;
 800683a:	463b      	mov	r3, r7
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	441a      	add	r2, r3
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	463b      	mov	r3, r7
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	d909      	bls.n	8006870 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	621a      	str	r2, [r3, #32]
 800686e:	e008      	b.n	8006882 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006870:	463b      	mov	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 821a 	beq.w	8006cc0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d164      	bne.n	8006960 <USB_EPStartXfer+0xaac>
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	66bb      	str	r3, [r7, #104]	; 0x68
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068aa:	4413      	add	r3, r2
 80068ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068be:	667b      	str	r3, [r7, #100]	; 0x64
 80068c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d112      	bne.n	80068ee <USB_EPStartXfer+0xa3a>
 80068c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e057      	b.n	800699e <USB_EPStartXfer+0xaea>
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	2b3e      	cmp	r3, #62	; 0x3e
 80068f4:	d817      	bhi.n	8006926 <USB_EPStartXfer+0xa72>
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <USB_EPStartXfer+0xa62>
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29a      	uxth	r2, r3
 8006920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e03b      	b.n	800699e <USB_EPStartXfer+0xaea>
 8006926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USB_EPStartXfer+0xa92>
 800693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006940:	3b01      	subs	r3, #1
 8006942:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694a:	b29b      	uxth	r3, r3
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	b29b      	uxth	r3, r3
 8006950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006958:	b29a      	uxth	r2, r3
 800695a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	e01e      	b.n	800699e <USB_EPStartXfer+0xaea>
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d119      	bne.n	800699e <USB_EPStartXfer+0xaea>
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	673b      	str	r3, [r7, #112]	; 0x70
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697e:	4413      	add	r3, r2
 8006980:	673b      	str	r3, [r7, #112]	; 0x70
 8006982:	463b      	mov	r3, r7
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800698c:	4413      	add	r3, r2
 800698e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006998:	b29a      	uxth	r2, r3
 800699a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	891b      	ldrh	r3, [r3, #8]
 80069a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6959      	ldr	r1, [r3, #20]
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069b8:	1d38      	adds	r0, r7, #4
 80069ba:	6800      	ldr	r0, [r0, #0]
 80069bc:	f000 feaf 	bl	800771e <USB_WritePMA>
 80069c0:	e17e      	b.n	8006cc0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16f      	bne.n	8006aac <USB_EPStartXfer+0xbf8>
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069e4:	4413      	add	r3, r2
 80069e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	011a      	lsls	r2, r3, #4
 80069f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d116      	bne.n	8006a36 <USB_EPStartXfer+0xb82>
 8006a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e05f      	b.n	8006af6 <USB_EPStartXfer+0xc42>
 8006a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3c:	d818      	bhi.n	8006a70 <USB_EPStartXfer+0xbbc>
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <USB_EPStartXfer+0xbaa>
 8006a54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e042      	b.n	8006af6 <USB_EPStartXfer+0xc42>
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <USB_EPStartXfer+0xbdc>
 8006a86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e024      	b.n	8006af6 <USB_EPStartXfer+0xc42>
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d11f      	bne.n	8006af6 <USB_EPStartXfer+0xc42>
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006abe:	1d3b      	adds	r3, r7, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ace:	4413      	add	r3, r2
 8006ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	011a      	lsls	r2, r3, #4
 8006adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006af4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	891b      	ldrh	r3, [r3, #8]
 8006afc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6959      	ldr	r1, [r3, #20]
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b10:	1d38      	adds	r0, r7, #4
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	f000 fe03 	bl	800771e <USB_WritePMA>
          ep->xfer_buff += len;
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b22:	441a      	add	r2, r3
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d909      	bls.n	8006b4e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	621a      	str	r2, [r3, #32]
 8006b4c:	e008      	b.n	8006b60 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80ab 	beq.w	8006cc0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b6a:	1d3b      	adds	r3, r7, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b72:	463b      	mov	r3, r7
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d16f      	bne.n	8006c5c <USB_EPStartXfer+0xda8>
 8006b7c:	1d3b      	adds	r3, r7, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b94:	4413      	add	r3, r2
 8006b96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <USB_EPStartXfer+0xd32>
 8006bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bca:	801a      	strh	r2, [r3, #0]
 8006bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e05b      	b.n	8006c9e <USB_EPStartXfer+0xdea>
 8006be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bea:	2b3e      	cmp	r3, #62	; 0x3e
 8006bec:	d818      	bhi.n	8006c20 <USB_EPStartXfer+0xd6c>
 8006bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <USB_EPStartXfer+0xd5a>
 8006c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	029b      	lsls	r3, r3, #10
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e03e      	b.n	8006c9e <USB_EPStartXfer+0xdea>
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <USB_EPStartXfer+0xd8c>
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e020      	b.n	8006c9e <USB_EPStartXfer+0xdea>
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d11b      	bne.n	8006c9e <USB_EPStartXfer+0xdea>
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c76:	4413      	add	r3, r2
 8006c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011a      	lsls	r2, r3, #4
 8006c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	895b      	ldrh	r3, [r3, #10]
 8006ca4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6959      	ldr	r1, [r3, #20]
 8006cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cb8:	1d38      	adds	r0, r7, #4
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	f000 fd2f 	bl	800771e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f107 020a 	add.w	r2, r7, #10
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cde:	8013      	strh	r3, [r2, #0]
 8006ce0:	f107 030a 	add.w	r3, r7, #10
 8006ce4:	f107 020a 	add.w	r2, r7, #10
 8006ce8:	8812      	ldrh	r2, [r2, #0]
 8006cea:	f082 0210 	eor.w	r2, r2, #16
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	f107 030a 	add.w	r3, r7, #10
 8006cf4:	f107 020a 	add.w	r2, r7, #10
 8006cf8:	8812      	ldrh	r2, [r2, #0]
 8006cfa:	f082 0220 	eor.w	r2, r2, #32
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	1d3b      	adds	r3, r7, #4
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	463b      	mov	r3, r7
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f107 030a 	add.w	r3, r7, #10
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
 8006d28:	e3b5      	b.n	8007496 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 8090 	bne.w	8006e56 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d36:	463b      	mov	r3, r7
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d90e      	bls.n	8006d64 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006d50:	463b      	mov	r3, r7
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	619a      	str	r2, [r3, #24]
 8006d62:	e008      	b.n	8006d76 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006d64:	463b      	mov	r3, r7
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d7e:	1d3b      	adds	r3, r7, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d8e:	4413      	add	r3, r2
 8006d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	011a      	lsls	r2, r3, #4
 8006d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d116      	bne.n	8006de0 <USB_EPStartXfer+0xf2c>
 8006db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	e32c      	b.n	800743a <USB_EPStartXfer+0x1586>
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	2b3e      	cmp	r3, #62	; 0x3e
 8006de6:	d818      	bhi.n	8006e1a <USB_EPStartXfer+0xf66>
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <USB_EPStartXfer+0xf54>
 8006dfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e02:	3301      	adds	r3, #1
 8006e04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	029b      	lsls	r3, r3, #10
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e30f      	b.n	800743a <USB_EPStartXfer+0x1586>
 8006e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <USB_EPStartXfer+0xf86>
 8006e30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	e2f1      	b.n	800743a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	78db      	ldrb	r3, [r3, #3]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	f040 818f 	bne.w	8007180 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d175      	bne.n	8006f58 <USB_EPStartXfer+0x10a4>
 8006e6c:	1d3b      	adds	r3, r7, #4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e74:	1d3b      	adds	r3, r7, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e84:	4413      	add	r3, r2
 8006e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	011a      	lsls	r2, r3, #4
 8006e92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e96:	4413      	add	r3, r2
 8006e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <USB_EPStartXfer+0x1024>
 8006eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e065      	b.n	8006fa4 <USB_EPStartXfer+0x10f0>
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee0:	d81a      	bhi.n	8006f18 <USB_EPStartXfer+0x1064>
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <USB_EPStartXfer+0x1052>
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f00:	3301      	adds	r3, #1
 8006f02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e045      	b.n	8006fa4 <USB_EPStartXfer+0x10f0>
 8006f18:	463b      	mov	r3, r7
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d104      	bne.n	8006f3c <USB_EPStartXfer+0x1088>
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	3b01      	subs	r3, #1
 8006f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	029b      	lsls	r3, r3, #10
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	e025      	b.n	8006fa4 <USB_EPStartXfer+0x10f0>
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d120      	bne.n	8006fa4 <USB_EPStartXfer+0x10f0>
 8006f62:	1d3b      	adds	r3, r7, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f96:	463b      	mov	r3, r7
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	1d3b      	adds	r3, r7, #4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fac:	463b      	mov	r3, r7
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d175      	bne.n	80070a2 <USB_EPStartXfer+0x11ee>
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fce:	4413      	add	r3, r2
 8006fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	011a      	lsls	r2, r3, #4
 8006fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d116      	bne.n	8007022 <USB_EPStartXfer+0x116e>
 8006ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007000:	b29a      	uxth	r2, r3
 8007002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007006:	801a      	strh	r2, [r3, #0]
 8007008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e061      	b.n	80070e6 <USB_EPStartXfer+0x1232>
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b3e      	cmp	r3, #62	; 0x3e
 800702a:	d81a      	bhi.n	8007062 <USB_EPStartXfer+0x11ae>
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <USB_EPStartXfer+0x119c>
 8007046:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800704a:	3301      	adds	r3, #1
 800704c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007050:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e041      	b.n	80070e6 <USB_EPStartXfer+0x1232>
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800706e:	463b      	mov	r3, r7
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USB_EPStartXfer+0x11d2>
 800707c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007080:	3b01      	subs	r3, #1
 8007082:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007086:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800708a:	b29b      	uxth	r3, r3
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007098:	b29a      	uxth	r2, r3
 800709a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e021      	b.n	80070e6 <USB_EPStartXfer+0x1232>
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d11c      	bne.n	80070e6 <USB_EPStartXfer+0x1232>
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070bc:	4413      	add	r3, r2
 80070be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070c2:	463b      	mov	r3, r7
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	011a      	lsls	r2, r3, #4
 80070ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070e4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070e6:	463b      	mov	r3, r7
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 81a4 	beq.w	800743a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070f2:	1d3b      	adds	r3, r7, #4
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	463b      	mov	r3, r7
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007106:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800710a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <USB_EPStartXfer+0x126a>
 8007112:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800711e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007126:	2b00      	cmp	r3, #0
 8007128:	f040 8187 	bne.w	800743a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800712c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8180 	bne.w	800743a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007158:	1d3b      	adds	r3, r7, #4
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]
 800717e:	e15c      	b.n	800743a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007180:	463b      	mov	r3, r7
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	78db      	ldrb	r3, [r3, #3]
 8007186:	2b01      	cmp	r3, #1
 8007188:	f040 8155 	bne.w	8007436 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	d90e      	bls.n	80071ba <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80071a6:	463b      	mov	r3, r7
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	1ad2      	subs	r2, r2, r3
 80071b2:	463b      	mov	r3, r7
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	619a      	str	r2, [r3, #24]
 80071b8:	e008      	b.n	80071cc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80071ba:	463b      	mov	r3, r7
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d16f      	bne.n	80072b6 <USB_EPStartXfer+0x1402>
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071ee:	4413      	add	r3, r2
 80071f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	011a      	lsls	r2, r3, #4
 80071fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007200:	4413      	add	r3, r2
 8007202:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d116      	bne.n	8007240 <USB_EPStartXfer+0x138c>
 8007212:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800721e:	b29a      	uxth	r2, r3
 8007220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007236:	b29a      	uxth	r2, r3
 8007238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	e05f      	b.n	8007300 <USB_EPStartXfer+0x144c>
 8007240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007244:	2b3e      	cmp	r3, #62	; 0x3e
 8007246:	d818      	bhi.n	800727a <USB_EPStartXfer+0x13c6>
 8007248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <USB_EPStartXfer+0x13b4>
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007262:	3301      	adds	r3, #1
 8007264:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800726c:	b29b      	uxth	r3, r3
 800726e:	029b      	lsls	r3, r3, #10
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e042      	b.n	8007300 <USB_EPStartXfer+0x144c>
 800727a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <USB_EPStartXfer+0x13e6>
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007294:	3b01      	subs	r3, #1
 8007296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800729a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729e:	b29b      	uxth	r3, r3
 80072a0:	029b      	lsls	r3, r3, #10
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e024      	b.n	8007300 <USB_EPStartXfer+0x144c>
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11f      	bne.n	8007300 <USB_EPStartXfer+0x144c>
 80072c0:	1d3b      	adds	r3, r7, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	4413      	add	r3, r2
 80072da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007308:	463b      	mov	r3, r7
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d16f      	bne.n	80073f2 <USB_EPStartXfer+0x153e>
 8007312:	1d3b      	adds	r3, r7, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732a:	4413      	add	r3, r2
 800732c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007330:	463b      	mov	r3, r7
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	011a      	lsls	r2, r3, #4
 8007338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733c:	4413      	add	r3, r2
 800733e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d116      	bne.n	800737c <USB_EPStartXfer+0x14c8>
 800734e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800735a:	b29a      	uxth	r2, r3
 800735c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007378:	801a      	strh	r2, [r3, #0]
 800737a:	e05e      	b.n	800743a <USB_EPStartXfer+0x1586>
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	2b3e      	cmp	r3, #62	; 0x3e
 8007382:	d818      	bhi.n	80073b6 <USB_EPStartXfer+0x1502>
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <USB_EPStartXfer+0x14f0>
 800739a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800739e:	3301      	adds	r3, #1
 80073a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	e041      	b.n	800743a <USB_EPStartXfer+0x1586>
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USB_EPStartXfer+0x1522>
 80073cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	029b      	lsls	r3, r3, #10
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e023      	b.n	800743a <USB_EPStartXfer+0x1586>
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d11e      	bne.n	800743a <USB_EPStartXfer+0x1586>
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007404:	b29b      	uxth	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740c:	4413      	add	r3, r2
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007412:	463b      	mov	r3, r7
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	011a      	lsls	r2, r3, #4
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741e:	4413      	add	r3, r2
 8007420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742c:	b29a      	uxth	r2, r3
 800742e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e001      	b.n	800743a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e02e      	b.n	8007498 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007454:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007458:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800745c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007460:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007464:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800746c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d020      	beq.n	80074f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ca:	81bb      	strh	r3, [r7, #12]
 80074cc:	89bb      	ldrh	r3, [r7, #12]
 80074ce:	f083 0310 	eor.w	r3, r3, #16
 80074d2:	81bb      	strh	r3, [r7, #12]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	89bb      	ldrh	r3, [r7, #12]
 80074e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8013      	strh	r3, [r2, #0]
 80074f4:	e01f      	b.n	8007536 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750c:	81fb      	strh	r3, [r7, #14]
 800750e:	89fb      	ldrh	r3, [r7, #14]
 8007510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007514:	81fb      	strh	r3, [r7, #14]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr

08007542 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	7b1b      	ldrb	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 809d 	bne.w	8007690 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d04c      	beq.n	80075f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	823b      	strh	r3, [r7, #16]
 800756c:	8a3b      	ldrh	r3, [r7, #16]
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01b      	beq.n	80075ae <USB_EPClearStall+0x6c>
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758c:	81fb      	strh	r3, [r7, #14]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	89fb      	ldrh	r3, [r7, #14]
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d06c      	beq.n	8007690 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075cc:	81bb      	strh	r3, [r7, #12]
 80075ce:	89bb      	ldrh	r3, [r7, #12]
 80075d0:	f083 0320 	eor.w	r3, r3, #32
 80075d4:	81bb      	strh	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	89bb      	ldrh	r3, [r7, #12]
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]
 80075f6:	e04b      	b.n	8007690 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	82fb      	strh	r3, [r7, #22]
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <USB_EPClearStall+0x106>
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007626:	82bb      	strh	r3, [r7, #20]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	8abb      	ldrh	r3, [r7, #20]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	827b      	strh	r3, [r7, #18]
 8007660:	8a7b      	ldrh	r3, [r7, #18]
 8007662:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007666:	827b      	strh	r3, [r7, #18]
 8007668:	8a7b      	ldrh	r3, [r7, #18]
 800766a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800766e:	827b      	strh	r3, [r7, #18]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	8a7b      	ldrh	r3, [r7, #18]
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2280      	movs	r2, #128	; 0x80
 80076b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800771e:	b480      	push	{r7}
 8007720:	b08d      	sub	sp, #52	; 0x34
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	4611      	mov	r1, r2
 800772a:	461a      	mov	r2, r3
 800772c:	460b      	mov	r3, r1
 800772e:	80fb      	strh	r3, [r7, #6]
 8007730:	4613      	mov	r3, r2
 8007732:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007734:	88bb      	ldrh	r3, [r7, #4]
 8007736:	3301      	adds	r3, #1
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	005a      	lsls	r2, r3, #1
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007756:	e01e      	b.n	8007796 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	3301      	adds	r3, #1
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	b29b      	uxth	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	b29a      	uxth	r2, r3
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	3302      	adds	r3, #2
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	3302      	adds	r3, #2
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	3b01      	subs	r3, #1
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1dd      	bne.n	8007758 <USB_WritePMA+0x3a>
  }
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	3734      	adds	r7, #52	; 0x34
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b08b      	sub	sp, #44	; 0x2c
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4611      	mov	r1, r2
 80077b4:	461a      	mov	r2, r3
 80077b6:	460b      	mov	r3, r1
 80077b8:	80fb      	strh	r3, [r7, #6]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077be:	88bb      	ldrh	r3, [r7, #4]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	005a      	lsls	r2, r3, #1
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
 80077e0:	e01b      	b.n	800781a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	3302      	adds	r3, #2
 80077ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	b2da      	uxtb	r2, r3
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	3302      	adds	r3, #2
 8007812:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	3b01      	subs	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e0      	bne.n	80077e2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007820:	88bb      	ldrh	r3, [r7, #4]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	701a      	strb	r2, [r3, #0]
  }
}
 800783c:	bf00      	nop
 800783e:	372c      	adds	r7, #44	; 0x2c
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d115      	bne.n	800788a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007862:	2202      	movs	r2, #2
 8007864:	2181      	movs	r1, #129	; 0x81
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 ff0f 	bl	800968a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007876:	2202      	movs	r2, #2
 8007878:	2101      	movs	r1, #1
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 ff05 	bl	800968a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007888:	e012      	b.n	80078b0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	2202      	movs	r2, #2
 800788e:	2181      	movs	r1, #129	; 0x81
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fefa 	bl	800968a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800789c:	2340      	movs	r3, #64	; 0x40
 800789e:	2202      	movs	r2, #2
 80078a0:	2101      	movs	r1, #1
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fef1 	bl	800968a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078b0:	2308      	movs	r3, #8
 80078b2:	2203      	movs	r2, #3
 80078b4:	2182      	movs	r1, #130	; 0x82
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fee7 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078c6:	f002 f807 	bl	80098d8 <USBD_static_malloc>
 80078ca:	4602      	mov	r2, r0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	e026      	b.n	8007930 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007916:	2101      	movs	r1, #1
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 ffa7 	bl	800986c <USBD_LL_PrepareReceive>
 800791e:	e007      	b.n	8007930 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007926:	2340      	movs	r3, #64	; 0x40
 8007928:	2101      	movs	r1, #1
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 ff9e 	bl	800986c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800794a:	2181      	movs	r1, #129	; 0x81
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fec2 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007958:	2101      	movs	r1, #1
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 febb 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007968:	2182      	movs	r1, #130	; 0x82
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 feb3 	bl	80096d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	4618      	mov	r0, r3
 8007992:	f001 ffad 	bl	80098f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d039      	beq.n	8007a46 <USBD_CDC_Setup+0x9e>
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d17f      	bne.n	8007ad6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88db      	ldrh	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d029      	beq.n	8007a32 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b25b      	sxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da11      	bge.n	8007a0c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	88d2      	ldrh	r2, [r2, #6]
 80079fa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079fc:	6939      	ldr	r1, [r7, #16]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	88db      	ldrh	r3, [r3, #6]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fa0a 	bl	8008e1e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a0a:	e06b      	b.n	8007ae4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785a      	ldrb	r2, [r3, #1]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a22:	6939      	ldr	r1, [r7, #16]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	88db      	ldrh	r3, [r3, #6]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fa25 	bl	8008e7a <USBD_CtlPrepareRx>
      break;
 8007a30:	e058      	b.n	8007ae4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	7850      	ldrb	r0, [r2, #1]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	4798      	blx	r3
      break;
 8007a44:	e04e      	b.n	8007ae4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	2b0b      	cmp	r3, #11
 8007a4c:	d02e      	beq.n	8007aac <USBD_CDC_Setup+0x104>
 8007a4e:	2b0b      	cmp	r3, #11
 8007a50:	dc38      	bgt.n	8007ac4 <USBD_CDC_Setup+0x11c>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <USBD_CDC_Setup+0xb4>
 8007a56:	2b0a      	cmp	r3, #10
 8007a58:	d014      	beq.n	8007a84 <USBD_CDC_Setup+0xdc>
 8007a5a:	e033      	b.n	8007ac4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d107      	bne.n	8007a76 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a66:	f107 030c 	add.w	r3, r7, #12
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 f9d5 	bl	8008e1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a74:	e02e      	b.n	8007ad4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f966 	bl	8008d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	75fb      	strb	r3, [r7, #23]
          break;
 8007a82:	e027      	b.n	8007ad4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d107      	bne.n	8007a9e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a8e:	f107 030f 	add.w	r3, r7, #15
 8007a92:	2201      	movs	r2, #1
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f9c1 	bl	8008e1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a9c:	e01a      	b.n	8007ad4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f952 	bl	8008d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aaa:	e013      	b.n	8007ad4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d00d      	beq.n	8007ad2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f946 	bl	8008d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ac2:	e006      	b.n	8007ad2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f93f 	bl	8008d4a <USBD_CtlError>
          ret = USBD_FAIL;
 8007acc:	2302      	movs	r3, #2
 8007ace:	75fb      	strb	r3, [r7, #23]
          break;
 8007ad0:	e000      	b.n	8007ad4 <USBD_CDC_Setup+0x12c>
          break;
 8007ad2:	bf00      	nop
      }
      break;
 8007ad4:	e006      	b.n	8007ae4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f936 	bl	8008d4a <USBD_CtlError>
      ret = USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d03a      	beq.n	8007b8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	331c      	adds	r3, #28
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d029      	beq.n	8007b7e <USBD_CDC_DataIn+0x90>
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	331c      	adds	r3, #28
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	78f9      	ldrb	r1, [r7, #3]
 8007b3e:	68b8      	ldr	r0, [r7, #8]
 8007b40:	460b      	mov	r3, r1
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4403      	add	r3, r0
 8007b4a:	3338      	adds	r3, #56	; 0x38
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b52:	fb03 f301 	mul.w	r3, r3, r1
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d110      	bne.n	8007b7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	331c      	adds	r3, #28
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b70:	78f9      	ldrb	r1, [r7, #3]
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fe55 	bl	8009826 <USBD_LL_Transmit>
 8007b7c:	e003      	b.n	8007b86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 fe80 	bl	80098b2 <USBD_LL_GetRxDataSize>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4798      	blx	r3

    return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007be0:	2302      	movs	r3, #2
  }
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d015      	beq.n	8007c30 <USBD_CDC_EP0_RxReady+0x46>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c0a:	2bff      	cmp	r3, #255	; 0xff
 8007c0c:	d010      	beq.n	8007c30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c24:	b292      	uxth	r2, r2
 8007c26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2243      	movs	r2, #67	; 0x43
 8007c48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c4a:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000194 	.word	0x20000194

08007c5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2243      	movs	r2, #67	; 0x43
 8007c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000150 	.word	0x20000150

08007c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2243      	movs	r2, #67	; 0x43
 8007c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c8a:	4b03      	ldr	r3, [pc, #12]	; (8007c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	200001d8 	.word	0x200001d8

08007c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	220a      	movs	r2, #10
 8007ca8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007caa:	4b03      	ldr	r3, [pc, #12]	; (8007cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	2000010c 	.word	0x2000010c

08007cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01c      	beq.n	8007d94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d115      	bne.n	8007d90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2181      	movs	r1, #129	; 0x81
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fd4d 	bl	8009826 <USBD_LL_Transmit>

      return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e002      	b.n	8007d96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d017      	beq.n	8007de8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	7c1b      	ldrb	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d109      	bne.n	8007dd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dca:	2101      	movs	r1, #1
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fd4d 	bl	800986c <USBD_LL_PrepareReceive>
 8007dd2:	e007      	b.n	8007de4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	2101      	movs	r1, #1
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fd44 	bl	800986c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e06:	2302      	movs	r3, #2
 8007e08:	e01a      	b.n	8007e40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	79fa      	ldrb	r2, [r7, #7]
 8007e36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fbb1 	bl	80095a0 <USBD_LL_Init>

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e001      	b.n	8007e6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fbe6 	bl	8009654 <USBD_LL_Start>

  return USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr

08007ea6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	78fa      	ldrb	r2, [r7, #3]
 8007eca:	4611      	mov	r1, r2
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fed8 	bl	8008cd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f30:	461a      	mov	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f3e:	f003 031f 	and.w	r3, r3, #31
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d016      	beq.n	8007f74 <USBD_LL_SetupStage+0x6a>
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d81c      	bhi.n	8007f84 <USBD_LL_SetupStage+0x7a>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <USBD_LL_SetupStage+0x4a>
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d008      	beq.n	8007f64 <USBD_LL_SetupStage+0x5a>
 8007f52:	e017      	b.n	8007f84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9cb 	bl	80082f8 <USBD_StdDevReq>
      break;
 8007f62:	e01a      	b.n	8007f9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa2d 	bl	80083cc <USBD_StdItfReq>
      break;
 8007f72:	e012      	b.n	8007f9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa6d 	bl	800845c <USBD_StdEPReq>
      break;
 8007f82:	e00a      	b.n	8007f9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fbbe 	bl	8009714 <USBD_LL_StallEP>
      break;
 8007f98:	bf00      	nop
  }

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	460b      	mov	r3, r1
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d14b      	bne.n	8008050 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d134      	bne.n	8008034 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d919      	bls.n	800800a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d203      	bcs.n	8007ff8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	e002      	b.n	8007ffe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 ff57 	bl	8008eb6 <USBD_CtlContinueRx>
 8008008:	e038      	b.n	800807c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800801c:	2b03      	cmp	r3, #3
 800801e:	d105      	bne.n	800802c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 ff54 	bl	8008eda <USBD_CtlSendStatus>
 8008032:	e023      	b.n	800807c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800803a:	2b05      	cmp	r3, #5
 800803c:	d11e      	bne.n	800807c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008046:	2100      	movs	r1, #0
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 fb63 	bl	8009714 <USBD_LL_StallEP>
 800804e:	e015      	b.n	800807c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00d      	beq.n	8008078 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008062:	2b03      	cmp	r3, #3
 8008064:	d108      	bne.n	8008078 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	7afa      	ldrb	r2, [r7, #11]
 8008070:	4611      	mov	r1, r2
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	4798      	blx	r3
 8008076:	e001      	b.n	800807c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	e000      	b.n	800807e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	460b      	mov	r3, r1
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d17f      	bne.n	800819a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3314      	adds	r3, #20
 800809e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d15c      	bne.n	8008164 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d915      	bls.n	80080e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fec1 	bl	8008e56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f001 fbc6 	bl	800986c <USBD_LL_PrepareReceive>
 80080e0:	e04e      	b.n	8008180 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	6912      	ldr	r2, [r2, #16]
 80080ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80080ee:	fb02 f201 	mul.w	r2, r2, r1
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11c      	bne.n	8008132 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008100:	429a      	cmp	r2, r3
 8008102:	d316      	bcc.n	8008132 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800810e:	429a      	cmp	r2, r3
 8008110:	d20f      	bcs.n	8008132 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fe9d 	bl	8008e56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008124:	2300      	movs	r3, #0
 8008126:	2200      	movs	r2, #0
 8008128:	2100      	movs	r1, #0
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f001 fb9e 	bl	800986c <USBD_LL_PrepareReceive>
 8008130:	e026      	b.n	8008180 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008144:	2b03      	cmp	r3, #3
 8008146:	d105      	bne.n	8008154 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008154:	2180      	movs	r1, #128	; 0x80
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 fadc 	bl	8009714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fecf 	bl	8008f00 <USBD_CtlReceiveStatus>
 8008162:	e00d      	b.n	8008180 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800816a:	2b04      	cmp	r3, #4
 800816c:	d004      	beq.n	8008178 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008178:	2180      	movs	r1, #128	; 0x80
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f001 faca 	bl	8009714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d11d      	bne.n	80081c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fe81 	bl	8007e92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008198:	e015      	b.n	80081c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d108      	bne.n	80081c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	7afa      	ldrb	r2, [r7, #11]
 80081ba:	4611      	mov	r1, r2
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	4798      	blx	r3
 80081c0:	e001      	b.n	80081c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081c2:	2302      	movs	r3, #2
 80081c4:	e000      	b.n	80081c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fa53 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2240      	movs	r2, #64	; 0x40
 80081f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f4:	2340      	movs	r3, #64	; 0x40
 80081f6:	2200      	movs	r2, #0
 80081f8:	2180      	movs	r1, #128	; 0x80
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 fa45 	bl	800968a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	4611      	mov	r1, r2
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
  }

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d105      	bne.n	80082b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr

080082c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d10b      	bne.n	80082ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800830e:	2b40      	cmp	r3, #64	; 0x40
 8008310:	d005      	beq.n	800831e <USBD_StdDevReq+0x26>
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d84f      	bhi.n	80083b6 <USBD_StdDevReq+0xbe>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <USBD_StdDevReq+0x36>
 800831a:	2b20      	cmp	r3, #32
 800831c:	d14b      	bne.n	80083b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      break;
 800832c:	e048      	b.n	80083c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b09      	cmp	r3, #9
 8008334:	d839      	bhi.n	80083aa <USBD_StdDevReq+0xb2>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USBD_StdDevReq+0x44>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800838d 	.word	0x0800838d
 8008340:	080083a1 	.word	0x080083a1
 8008344:	080083ab 	.word	0x080083ab
 8008348:	08008397 	.word	0x08008397
 800834c:	080083ab 	.word	0x080083ab
 8008350:	0800836f 	.word	0x0800836f
 8008354:	08008365 	.word	0x08008365
 8008358:	080083ab 	.word	0x080083ab
 800835c:	08008383 	.word	0x08008383
 8008360:	08008379 	.word	0x08008379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f9dc 	bl	8008724 <USBD_GetDescriptor>
          break;
 800836c:	e022      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fb3f 	bl	80089f4 <USBD_SetAddress>
          break;
 8008376:	e01d      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fb7e 	bl	8008a7c <USBD_SetConfig>
          break;
 8008380:	e018      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc07 	bl	8008b98 <USBD_GetConfig>
          break;
 800838a:	e013      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fc37 	bl	8008c02 <USBD_GetStatus>
          break;
 8008394:	e00e      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fc65 	bl	8008c68 <USBD_SetFeature>
          break;
 800839e:	e009      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fc74 	bl	8008c90 <USBD_ClrFeature>
          break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fccc 	bl	8008d4a <USBD_CtlError>
          break;
 80083b2:	bf00      	nop
      }
      break;
 80083b4:	e004      	b.n	80083c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fcc6 	bl	8008d4a <USBD_CtlError>
      break;
 80083be:	bf00      	nop
  }

  return ret;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop

080083cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d005      	beq.n	80083f2 <USBD_StdItfReq+0x26>
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d82e      	bhi.n	8008448 <USBD_StdItfReq+0x7c>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <USBD_StdItfReq+0x26>
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d12a      	bne.n	8008448 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f8:	3b01      	subs	r3, #1
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d81d      	bhi.n	800843a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	d813      	bhi.n	8008430 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d110      	bne.n	8008444 <USBD_StdItfReq+0x78>
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10d      	bne.n	8008444 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fd56 	bl	8008eda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800842e:	e009      	b.n	8008444 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc89 	bl	8008d4a <USBD_CtlError>
          break;
 8008438:	e004      	b.n	8008444 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fc84 	bl	8008d4a <USBD_CtlError>
          break;
 8008442:	e000      	b.n	8008446 <USBD_StdItfReq+0x7a>
          break;
 8008444:	bf00      	nop
      }
      break;
 8008446:	e004      	b.n	8008452 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fc7d 	bl	8008d4a <USBD_CtlError>
      break;
 8008450:	bf00      	nop
  }

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008478:	2b40      	cmp	r3, #64	; 0x40
 800847a:	d007      	beq.n	800848c <USBD_StdEPReq+0x30>
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	f200 8146 	bhi.w	800870e <USBD_StdEPReq+0x2b2>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <USBD_StdEPReq+0x40>
 8008486:	2b20      	cmp	r3, #32
 8008488:	f040 8141 	bne.w	800870e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
      break;
 800849a:	e13d      	b.n	8008718 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d10a      	bne.n	80084be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	e12d      	b.n	800871a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d007      	beq.n	80084d6 <USBD_StdEPReq+0x7a>
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	f300 811b 	bgt.w	8008702 <USBD_StdEPReq+0x2a6>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d072      	beq.n	80085b6 <USBD_StdEPReq+0x15a>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d03a      	beq.n	800854a <USBD_StdEPReq+0xee>
 80084d4:	e115      	b.n	8008702 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_StdEPReq+0x8a>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d015      	beq.n	8008510 <USBD_StdEPReq+0xb4>
 80084e4:	e02b      	b.n	800853e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00c      	beq.n	8008506 <USBD_StdEPReq+0xaa>
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d009      	beq.n	8008506 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 f90c 	bl	8009714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f908 	bl	8009714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008504:	e020      	b.n	8008548 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fc1e 	bl	8008d4a <USBD_CtlError>
              break;
 800850e:	e01b      	b.n	8008548 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	885b      	ldrh	r3, [r3, #2]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10e      	bne.n	8008536 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <USBD_StdEPReq+0xda>
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	2b80      	cmp	r3, #128	; 0x80
 8008522:	d008      	beq.n	8008536 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	88db      	ldrh	r3, [r3, #6]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f8ef 	bl	8009714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fccf 	bl	8008eda <USBD_CtlSendStatus>

              break;
 800853c:	e004      	b.n	8008548 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fc02 	bl	8008d4a <USBD_CtlError>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e0e0      	b.n	800870c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b02      	cmp	r3, #2
 8008552:	d002      	beq.n	800855a <USBD_StdEPReq+0xfe>
 8008554:	2b03      	cmp	r3, #3
 8008556:	d015      	beq.n	8008584 <USBD_StdEPReq+0x128>
 8008558:	e026      	b.n	80085a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <USBD_StdEPReq+0x11e>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d009      	beq.n	800857a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 f8d2 	bl	8009714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008570:	2180      	movs	r1, #128	; 0x80
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f8ce 	bl	8009714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008578:	e01c      	b.n	80085b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fbe4 	bl	8008d4a <USBD_CtlError>
              break;
 8008582:	e017      	b.n	80085b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d112      	bne.n	80085b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f8d9 	bl	8009752 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fc9a 	bl	8008eda <USBD_CtlSendStatus>
              }
              break;
 80085a6:	e004      	b.n	80085b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fbcd 	bl	8008d4a <USBD_CtlError>
              break;
 80085b0:	e000      	b.n	80085b4 <USBD_StdEPReq+0x158>
              break;
 80085b2:	bf00      	nop
          }
          break;
 80085b4:	e0aa      	b.n	800870c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d002      	beq.n	80085c6 <USBD_StdEPReq+0x16a>
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d032      	beq.n	800862a <USBD_StdEPReq+0x1ce>
 80085c4:	e097      	b.n	80086f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <USBD_StdEPReq+0x180>
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b80      	cmp	r3, #128	; 0x80
 80085d0:	d004      	beq.n	80085dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fbb8 	bl	8008d4a <USBD_CtlError>
                break;
 80085da:	e091      	b.n	8008700 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da0b      	bge.n	80085fc <USBD_StdEPReq+0x1a0>
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	3310      	adds	r3, #16
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	4413      	add	r3, r2
 80085f8:	3304      	adds	r3, #4
 80085fa:	e00b      	b.n	8008614 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	4413      	add	r3, r2
 8008612:	3304      	adds	r3, #4
 8008614:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2202      	movs	r2, #2
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fbfb 	bl	8008e1e <USBD_CtlSendData>
              break;
 8008628:	e06a      	b.n	8008700 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800862a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800862e:	2b00      	cmp	r3, #0
 8008630:	da11      	bge.n	8008656 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	f003 020f 	and.w	r2, r3, #15
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	3318      	adds	r3, #24
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d117      	bne.n	800867c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fb7b 	bl	8008d4a <USBD_CtlError>
                  break;
 8008654:	e054      	b.n	8008700 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d104      	bne.n	800867c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fb68 	bl	8008d4a <USBD_CtlError>
                  break;
 800867a:	e041      	b.n	8008700 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800867c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	da0b      	bge.n	800869c <USBD_StdEPReq+0x240>
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	3310      	adds	r3, #16
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	e00b      	b.n	80086b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	3304      	adds	r3, #4
 80086b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <USBD_StdEPReq+0x266>
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b80      	cmp	r3, #128	; 0x80
 80086c0:	d103      	bne.n	80086ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e00e      	b.n	80086e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 f85e 	bl	8009790 <USBD_LL_IsStallEP>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2201      	movs	r2, #1
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e002      	b.n	80086e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2202      	movs	r2, #2
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fb95 	bl	8008e1e <USBD_CtlSendData>
              break;
 80086f4:	e004      	b.n	8008700 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb26 	bl	8008d4a <USBD_CtlError>
              break;
 80086fe:	bf00      	nop
          }
          break;
 8008700:	e004      	b.n	800870c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb20 	bl	8008d4a <USBD_CtlError>
          break;
 800870a:	bf00      	nop
      }
      break;
 800870c:	e004      	b.n	8008718 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fb1a 	bl	8008d4a <USBD_CtlError>
      break;
 8008716:	bf00      	nop
  }

  return ret;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	2b06      	cmp	r3, #6
 8008746:	f200 8128 	bhi.w	800899a <USBD_GetDescriptor+0x276>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <USBD_GetDescriptor+0x2c>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	0800876d 	.word	0x0800876d
 8008754:	08008785 	.word	0x08008785
 8008758:	080087c5 	.word	0x080087c5
 800875c:	0800899b 	.word	0x0800899b
 8008760:	0800899b 	.word	0x0800899b
 8008764:	0800893b 	.word	0x0800893b
 8008768:	08008967 	.word	0x08008967
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
      break;
 8008782:	e112      	b.n	80089aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7c1b      	ldrb	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10d      	bne.n	80087a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	f107 0208 	add.w	r2, r7, #8
 8008798:	4610      	mov	r0, r2
 800879a:	4798      	blx	r3
 800879c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	2202      	movs	r2, #2
 80087a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087a6:	e100      	b.n	80089aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f107 0208 	add.w	r2, r7, #8
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3301      	adds	r3, #1
 80087be:	2202      	movs	r2, #2
 80087c0:	701a      	strb	r2, [r3, #0]
      break;
 80087c2:	e0f2      	b.n	80089aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	885b      	ldrh	r3, [r3, #2]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	f200 80ac 	bhi.w	8008928 <USBD_GetDescriptor+0x204>
 80087d0:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <USBD_GetDescriptor+0xb4>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	08008825 	.word	0x08008825
 80087e0:	08008859 	.word	0x08008859
 80087e4:	0800888d 	.word	0x0800888d
 80087e8:	080088c1 	.word	0x080088c1
 80087ec:	080088f5 	.word	0x080088f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e091      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa97 	bl	8008d4a <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e089      	b.n	8008938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	7c12      	ldrb	r2, [r2, #16]
 800883c:	f107 0108 	add.w	r1, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008846:	e077      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa7d 	bl	8008d4a <USBD_CtlError>
            err++;
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	3301      	adds	r3, #1
 8008854:	72fb      	strb	r3, [r7, #11]
          break;
 8008856:	e06f      	b.n	8008938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	7c12      	ldrb	r2, [r2, #16]
 8008870:	f107 0108 	add.w	r1, r7, #8
 8008874:	4610      	mov	r0, r2
 8008876:	4798      	blx	r3
 8008878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887a:	e05d      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa63 	bl	8008d4a <USBD_CtlError>
            err++;
 8008884:	7afb      	ldrb	r3, [r7, #11]
 8008886:	3301      	adds	r3, #1
 8008888:	72fb      	strb	r3, [r7, #11]
          break;
 800888a:	e055      	b.n	8008938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7c12      	ldrb	r2, [r2, #16]
 80088a4:	f107 0108 	add.w	r1, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ae:	e043      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa49 	bl	8008d4a <USBD_CtlError>
            err++;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	3301      	adds	r3, #1
 80088bc:	72fb      	strb	r3, [r7, #11]
          break;
 80088be:	e03b      	b.n	8008938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e2:	e029      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fa2f 	bl	8008d4a <USBD_CtlError>
            err++;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3301      	adds	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]
          break;
 80088f2:	e021      	b.n	8008938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008916:	e00f      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa15 	bl	8008d4a <USBD_CtlError>
            err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
          break;
 8008926:	e007      	b.n	8008938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa0d 	bl	8008d4a <USBD_CtlError>
          err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008936:	e038      	b.n	80089aa <USBD_GetDescriptor+0x286>
 8008938:	e037      	b.n	80089aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7c1b      	ldrb	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	f107 0208 	add.w	r2, r7, #8
 800894e:	4610      	mov	r0, r2
 8008950:	4798      	blx	r3
 8008952:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008954:	e029      	b.n	80089aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f9f6 	bl	8008d4a <USBD_CtlError>
        err++;
 800895e:	7afb      	ldrb	r3, [r7, #11]
 8008960:	3301      	adds	r3, #1
 8008962:	72fb      	strb	r3, [r7, #11]
      break;
 8008964:	e021      	b.n	80089aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	7c1b      	ldrb	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10d      	bne.n	800898a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f107 0208 	add.w	r2, r7, #8
 800897a:	4610      	mov	r0, r2
 800897c:	4798      	blx	r3
 800897e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	2207      	movs	r2, #7
 8008986:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008988:	e00f      	b.n	80089aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f9dc 	bl	8008d4a <USBD_CtlError>
        err++;
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	3301      	adds	r3, #1
 8008996:	72fb      	strb	r3, [r7, #11]
      break;
 8008998:	e007      	b.n	80089aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9d4 	bl	8008d4a <USBD_CtlError>
      err++;
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	3301      	adds	r3, #1
 80089a6:	72fb      	strb	r3, [r7, #11]
      break;
 80089a8:	bf00      	nop
  }

  if (err != 0U)
 80089aa:	7afb      	ldrb	r3, [r7, #11]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11c      	bne.n	80089ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80089b0:	893b      	ldrh	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d011      	beq.n	80089da <USBD_GetDescriptor+0x2b6>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	88db      	ldrh	r3, [r3, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88da      	ldrh	r2, [r3, #6]
 80089c2:	893b      	ldrh	r3, [r7, #8]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	bf28      	it	cs
 80089c8:	4613      	movcs	r3, r2
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089ce:	893b      	ldrh	r3, [r7, #8]
 80089d0:	461a      	mov	r2, r3
 80089d2:	68f9      	ldr	r1, [r7, #12]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fa22 	bl	8008e1e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	88db      	ldrh	r3, [r3, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa79 	bl	8008eda <USBD_CtlSendStatus>
 80089e8:	e000      	b.n	80089ec <USBD_GetDescriptor+0x2c8>
    return;
 80089ea:	bf00      	nop
    }
  }
}
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop

080089f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	889b      	ldrh	r3, [r3, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d130      	bne.n	8008a68 <USBD_SetAddress+0x74>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	88db      	ldrh	r3, [r3, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d12c      	bne.n	8008a68 <USBD_SetAddress+0x74>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	2b7f      	cmp	r3, #127	; 0x7f
 8008a14:	d828      	bhi.n	8008a68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d104      	bne.n	8008a36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f98b 	bl	8008d4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a34:	e01d      	b.n	8008a72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7bfa      	ldrb	r2, [r7, #15]
 8008a3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fed0 	bl	80097e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa46 	bl	8008eda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5c:	e009      	b.n	8008a72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a66:	e004      	b.n	8008a72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f96d 	bl	8008d4a <USBD_CtlError>
  }
}
 8008a70:	bf00      	nop
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <USBD_SetConfig+0x118>)
 8008a8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a90:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <USBD_SetConfig+0x118>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d904      	bls.n	8008aa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f955 	bl	8008d4a <USBD_CtlError>
 8008aa0:	e075      	b.n	8008b8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d002      	beq.n	8008ab2 <USBD_SetConfig+0x36>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d023      	beq.n	8008af8 <USBD_SetConfig+0x7c>
 8008ab0:	e062      	b.n	8008b78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008ab2:	4b38      	ldr	r3, [pc, #224]	; (8008b94 <USBD_SetConfig+0x118>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01a      	beq.n	8008af0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008aba:	4b36      	ldr	r3, [pc, #216]	; (8008b94 <USBD_SetConfig+0x118>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008acc:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <USBD_SetConfig+0x118>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff f9e7 	bl	8007ea6 <USBD_SetClassConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d104      	bne.n	8008ae8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f932 	bl	8008d4a <USBD_CtlError>
            return;
 8008ae6:	e052      	b.n	8008b8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9f6 	bl	8008eda <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008aee:	e04e      	b.n	8008b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f9f2 	bl	8008eda <USBD_CtlSendStatus>
        break;
 8008af6:	e04a      	b.n	8008b8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008af8:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <USBD_SetConfig+0x118>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d112      	bne.n	8008b26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b08:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b12:	4b20      	ldr	r3, [pc, #128]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff f9e3 	bl	8007ee4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f9db 	bl	8008eda <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b24:	e033      	b.n	8008b8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b26:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d01d      	beq.n	8008b70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff f9d1 	bl	8007ee4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff f9a7 	bl	8007ea6 <USBD_SetClassConfig>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d104      	bne.n	8008b68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f8f2 	bl	8008d4a <USBD_CtlError>
            return;
 8008b66:	e012      	b.n	8008b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f9b6 	bl	8008eda <USBD_CtlSendStatus>
        break;
 8008b6e:	e00e      	b.n	8008b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9b2 	bl	8008eda <USBD_CtlSendStatus>
        break;
 8008b76:	e00a      	b.n	8008b8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8e5 	bl	8008d4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff f9ac 	bl	8007ee4 <USBD_ClrClassConfig>
        break;
 8008b8c:	bf00      	nop
    }
  }
}
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20000456 	.word	0x20000456

08008b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d004      	beq.n	8008bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f8cc 	bl	8008d4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bb2:	e022      	b.n	8008bfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	dc02      	bgt.n	8008bc4 <USBD_GetConfig+0x2c>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc03      	bgt.n	8008bca <USBD_GetConfig+0x32>
 8008bc2:	e015      	b.n	8008bf0 <USBD_GetConfig+0x58>
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetConfig+0x48>
 8008bc8:	e012      	b.n	8008bf0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f920 	bl	8008e1e <USBD_CtlSendData>
        break;
 8008bde:	e00c      	b.n	8008bfa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3304      	adds	r3, #4
 8008be4:	2201      	movs	r2, #1
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f918 	bl	8008e1e <USBD_CtlSendData>
        break;
 8008bee:	e004      	b.n	8008bfa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f8a9 	bl	8008d4a <USBD_CtlError>
        break;
 8008bf8:	bf00      	nop
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	3b01      	subs	r3, #1
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d81e      	bhi.n	8008c56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	88db      	ldrh	r3, [r3, #6]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d004      	beq.n	8008c2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f891 	bl	8008d4a <USBD_CtlError>
        break;
 8008c28:	e01a      	b.n	8008c60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f043 0202 	orr.w	r2, r3, #2
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8e5 	bl	8008e1e <USBD_CtlSendData>
      break;
 8008c54:	e004      	b.n	8008c60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f876 	bl	8008d4a <USBD_CtlError>
      break;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d106      	bne.n	8008c88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f929 	bl	8008eda <USBD_CtlSendStatus>
  }
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d80b      	bhi.n	8008cbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d10c      	bne.n	8008cc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f90f 	bl	8008eda <USBD_CtlSendStatus>
      }
      break;
 8008cbc:	e004      	b.n	8008cc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f842 	bl	8008d4a <USBD_CtlError>
      break;
 8008cc6:	e000      	b.n	8008cca <USBD_ClrFeature+0x3a>
      break;
 8008cc8:	bf00      	nop
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781a      	ldrb	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	785a      	ldrb	r2, [r3, #1]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	3302      	adds	r3, #2
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	3303      	adds	r3, #3
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	3305      	adds	r3, #5
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	3306      	adds	r3, #6
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3307      	adds	r3, #7
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4413      	add	r3, r2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	80da      	strh	r2, [r3, #6]

}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr

08008d4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d54:	2180      	movs	r1, #128	; 0x80
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fcdc 	bl	8009714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fcd8 	bl	8009714 <USBD_LL_StallEP>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d032      	beq.n	8008de8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f834 	bl	8008df0 <USBD_GetLen>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	75fa      	strb	r2, [r7, #23]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	7812      	ldrb	r2, [r2, #0]
 8008da6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	75fa      	strb	r2, [r7, #23]
 8008dae:	461a      	mov	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	2203      	movs	r2, #3
 8008db6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008db8:	e012      	b.n	8008de0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	7dfa      	ldrb	r2, [r7, #23]
 8008dc2:	1c51      	adds	r1, r2, #1
 8008dc4:	75f9      	strb	r1, [r7, #23]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	440a      	add	r2, r1
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	75fa      	strb	r2, [r7, #23]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e8      	bne.n	8008dba <USBD_GetString+0x4e>
    }
  }
}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008dfc:	e005      	b.n	8008e0a <USBD_GetLen+0x1a>
  {
    len++;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	3301      	adds	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3301      	adds	r3, #1
 8008e08:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f5      	bne.n	8008dfe <USBD_GetLen+0xe>
  }

  return len;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr

08008e1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e34:	88fa      	ldrh	r2, [r7, #6]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fced 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	4613      	mov	r3, r2
 8008e62:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fcdb 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 fce0 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fcce 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008eea:	2300      	movs	r3, #0
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc98 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2205      	movs	r2, #5
 8008f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f10:	2300      	movs	r3, #0
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fca8 	bl	800986c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4912      	ldr	r1, [pc, #72]	; (8008f78 <MX_USB_DEVICE_Init+0x50>)
 8008f30:	4812      	ldr	r0, [pc, #72]	; (8008f7c <MX_USB_DEVICE_Init+0x54>)
 8008f32:	f7fe ff5e 	bl	8007df2 <USBD_Init>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f3c:	f7f7 fdc2 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f40:	490f      	ldr	r1, [pc, #60]	; (8008f80 <MX_USB_DEVICE_Init+0x58>)
 8008f42:	480e      	ldr	r0, [pc, #56]	; (8008f7c <MX_USB_DEVICE_Init+0x54>)
 8008f44:	f7fe ff80 	bl	8007e48 <USBD_RegisterClass>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f4e:	f7f7 fdb9 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f52:	490c      	ldr	r1, [pc, #48]	; (8008f84 <MX_USB_DEVICE_Init+0x5c>)
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <MX_USB_DEVICE_Init+0x54>)
 8008f56:	f7fe feb1 	bl	8007cbc <USBD_CDC_RegisterInterface>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f60:	f7f7 fdb0 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f64:	4805      	ldr	r0, [pc, #20]	; (8008f7c <MX_USB_DEVICE_Init+0x54>)
 8008f66:	f7fe ff88 	bl	8007e7a <USBD_Start>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f70:	f7f7 fda8 	bl	8000ac4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f74:	bf00      	nop
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	2000022c 	.word	0x2000022c
 8008f7c:	20000720 	.word	0x20000720
 8008f80:	20000118 	.word	0x20000118
 8008f84:	2000021c 	.word	0x2000021c

08008f88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <CDC_Init_FS+0x2c>)
 8008f90:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <CDC_Init_FS+0x30>)
 8008f92:	f7fe fea9 	bl	8007ce8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f96:	4909      	ldr	r1, [pc, #36]	; (8008fbc <CDC_Init_FS+0x34>)
 8008f98:	4807      	ldr	r0, [pc, #28]	; (8008fb8 <CDC_Init_FS+0x30>)
 8008f9a:	f7fe febe 	bl	8007d1a <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <CDC_Init_FS+0x30>)
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d101      	bne.n	8008fac <CDC_Init_FS+0x24>
	  welcome();
 8008fa8:	f7f7 fad8 	bl	800055c <welcome>
  }

  return (USBD_OK);
 8008fac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000dcc 	.word	0x20000dcc
 8008fb8:	20000720 	.word	0x20000720
 8008fbc:	200009e4 	.word	0x200009e4

08008fc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
	...

08008fd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	71fb      	strb	r3, [r7, #7]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b23      	cmp	r3, #35	; 0x23
 8008fe4:	d84a      	bhi.n	800907c <CDC_Control_FS+0xac>
 8008fe6:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <CDC_Control_FS+0x1c>)
 8008fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fec:	0800907d 	.word	0x0800907d
 8008ff0:	0800907d 	.word	0x0800907d
 8008ff4:	0800907d 	.word	0x0800907d
 8008ff8:	0800907d 	.word	0x0800907d
 8008ffc:	0800907d 	.word	0x0800907d
 8009000:	0800907d 	.word	0x0800907d
 8009004:	0800907d 	.word	0x0800907d
 8009008:	0800907d 	.word	0x0800907d
 800900c:	0800907d 	.word	0x0800907d
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800907d 	.word	0x0800907d
 8009018:	0800907d 	.word	0x0800907d
 800901c:	0800907d 	.word	0x0800907d
 8009020:	0800907d 	.word	0x0800907d
 8009024:	0800907d 	.word	0x0800907d
 8009028:	0800907d 	.word	0x0800907d
 800902c:	0800907d 	.word	0x0800907d
 8009030:	0800907d 	.word	0x0800907d
 8009034:	0800907d 	.word	0x0800907d
 8009038:	0800907d 	.word	0x0800907d
 800903c:	0800907d 	.word	0x0800907d
 8009040:	0800907d 	.word	0x0800907d
 8009044:	0800907d 	.word	0x0800907d
 8009048:	0800907d 	.word	0x0800907d
 800904c:	0800907d 	.word	0x0800907d
 8009050:	0800907d 	.word	0x0800907d
 8009054:	0800907d 	.word	0x0800907d
 8009058:	0800907d 	.word	0x0800907d
 800905c:	0800907d 	.word	0x0800907d
 8009060:	0800907d 	.word	0x0800907d
 8009064:	0800907d 	.word	0x0800907d
 8009068:	0800907d 	.word	0x0800907d
 800906c:	0800907d 	.word	0x0800907d
 8009070:	0800907d 	.word	0x0800907d
 8009074:	0800907d 	.word	0x0800907d
 8009078:	0800907d 	.word	0x0800907d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800907c:	bf00      	nop
  }

  return (USBD_OK);
 800907e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop

0800908c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//	uint32_t start_pos = 0;
	uint8_t  enter = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	e022      	b.n	80090e6 <CDC_Receive_FS+0x5a>
		if( in_usb_buf_pos < USB_BUFFER_LENGTH ) {
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <CDC_Receive_FS+0xec>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	2bff      	cmp	r3, #255	; 0xff
 80090a6:	d80c      	bhi.n	80090c2 <CDC_Receive_FS+0x36>
			input_usb_buffer[ in_usb_buf_pos++ ] = Buf[ loop ];
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	441a      	add	r2, r3
 80090ae:	4b32      	ldr	r3, [pc, #200]	; (8009178 <CDC_Receive_FS+0xec>)
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	b288      	uxth	r0, r1
 80090b6:	4930      	ldr	r1, [pc, #192]	; (8009178 <CDC_Receive_FS+0xec>)
 80090b8:	8008      	strh	r0, [r1, #0]
 80090ba:	4619      	mov	r1, r3
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	4b2f      	ldr	r3, [pc, #188]	; (800917c <CDC_Receive_FS+0xf0>)
 80090c0:	545a      	strb	r2, [r3, r1]
		}
		if( Buf[ loop ] == 13 ) {
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	4413      	add	r3, r2
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b0d      	cmp	r3, #13
 80090cc:	d108      	bne.n	80090e0 <CDC_Receive_FS+0x54>
			input_usb_buffer[ in_usb_buf_pos - 1 ] = ' ';
 80090ce:	4b2a      	ldr	r3, [pc, #168]	; (8009178 <CDC_Receive_FS+0xec>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	4a29      	ldr	r2, [pc, #164]	; (800917c <CDC_Receive_FS+0xf0>)
 80090d6:	2120      	movs	r1, #32
 80090d8:	54d1      	strb	r1, [r2, r3]
			enter = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	77fb      	strb	r3, [r7, #31]
			break;
 80090de:	e007      	b.n	80090f0 <CDC_Receive_FS+0x64>
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d3d7      	bcc.n	80090a0 <CDC_Receive_FS+0x14>
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );

	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fc69 	bl	80099cc <malloc>
 80090fa:	4603      	mov	r3, r0
 80090fc:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	e019      	b.n	800913c <CDC_Receive_FS+0xb0>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	441a      	add	r2, r3
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	1c59      	adds	r1, r3, #1
 8009112:	6179      	str	r1, [r7, #20]
 8009114:	68f9      	ldr	r1, [r7, #12]
 8009116:	440b      	add	r3, r1
 8009118:	7812      	ldrb	r2, [r2, #0]
 800911a:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	4413      	add	r3, r2
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b0d      	cmp	r3, #13
 8009126:	d106      	bne.n	8009136 <CDC_Receive_FS+0xaa>
			out_buf[ out_buf_len++ ] = '\n';
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	617a      	str	r2, [r7, #20]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	220a      	movs	r2, #10
 8009134:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	3301      	adds	r3, #1
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	429a      	cmp	r2, r3
 8009144:	d3e0      	bcc.n	8009108 <CDC_Receive_FS+0x7c>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7f7 f9f7 	bl	800053c <usb_transmit_fs>
	free( out_buf );
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 fc44 	bl	80099dc <free>
	if( enter > 0 ) {
 8009154:	7ffb      	ldrb	r3, [r7, #31]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <CDC_Receive_FS+0xd2>
		get_command();
 800915a:	f7f7 fa23 	bl	80005a4 <get_command>
	}
//	if( Buf[ 0 ] == '\r' ) {
//		send_prompt();
//	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4807      	ldr	r0, [pc, #28]	; (8009180 <CDC_Receive_FS+0xf4>)
 8009162:	f7fe fdda 	bl	8007d1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009166:	4806      	ldr	r0, [pc, #24]	; (8009180 <CDC_Receive_FS+0xf4>)
 8009168:	f7fe fe19 	bl	8007d9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800916c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200003fc 	.word	0x200003fc
 800917c:	200002fc 	.word	0x200002fc
 8009180:	20000720 	.word	0x20000720

08009184 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <CDC_Transmit_FS+0x48>)
 8009196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e00b      	b.n	80091c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091aa:	887b      	ldrh	r3, [r7, #2]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	4806      	ldr	r0, [pc, #24]	; (80091cc <CDC_Transmit_FS+0x48>)
 80091b2:	f7fe fd99 	bl	8007ce8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091b6:	4805      	ldr	r0, [pc, #20]	; (80091cc <CDC_Transmit_FS+0x48>)
 80091b8:	f7fe fdc2 	bl	8007d40 <USBD_CDC_TransmitPacket>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20000720 	.word	0x20000720

080091d0 <wait_for_CDC_transmit_ready>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void wait_for_CDC_transmit_ready(void) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <wait_for_CDC_transmit_ready+0x2c>)
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	607b      	str	r3, [r7, #4]
	while( hcdc->TxState != 0 ){
 80091de:	e002      	b.n	80091e6 <wait_for_CDC_transmit_ready+0x16>
		HAL_Delay( 1 );
 80091e0:	2001      	movs	r0, #1
 80091e2:	f7f7 ffff 	bl	80011e4 <HAL_Delay>
	while( hcdc->TxState != 0 ){
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f7      	bne.n	80091e0 <wait_for_CDC_transmit_ready+0x10>
	}
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20000720 	.word	0x20000720

08009200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2212      	movs	r2, #18
 8009210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000248 	.word	0x20000248

08009224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2204      	movs	r2, #4
 8009234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009236:	4b03      	ldr	r3, [pc, #12]	; (8009244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	2000025c 	.word	0x2000025c

08009248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	6039      	str	r1, [r7, #0]
 8009252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4907      	ldr	r1, [pc, #28]	; (800927c <USBD_FS_ProductStrDescriptor+0x34>)
 800925e:	4808      	ldr	r0, [pc, #32]	; (8009280 <USBD_FS_ProductStrDescriptor+0x38>)
 8009260:	f7ff fd84 	bl	8008d6c <USBD_GetString>
 8009264:	e004      	b.n	8009270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4904      	ldr	r1, [pc, #16]	; (800927c <USBD_FS_ProductStrDescriptor+0x34>)
 800926a:	4805      	ldr	r0, [pc, #20]	; (8009280 <USBD_FS_ProductStrDescriptor+0x38>)
 800926c:	f7ff fd7e 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200011b4 	.word	0x200011b4
 8009280:	0800b640 	.word	0x0800b640

08009284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	4904      	ldr	r1, [pc, #16]	; (80092a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009294:	4804      	ldr	r0, [pc, #16]	; (80092a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009296:	f7ff fd69 	bl	8008d6c <USBD_GetString>
  return USBD_StrDesc;
 800929a:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200011b4 	.word	0x200011b4
 80092a8:	0800b658 	.word	0x0800b658

080092ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	221a      	movs	r2, #26
 80092bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092be:	f000 f843 	bl	8009348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092c2:	4b02      	ldr	r3, [pc, #8]	; (80092cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000260 	.word	0x20000260

080092d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d105      	bne.n	80092ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4907      	ldr	r1, [pc, #28]	; (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092e6:	4808      	ldr	r0, [pc, #32]	; (8009308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092e8:	f7ff fd40 	bl	8008d6c <USBD_GetString>
 80092ec:	e004      	b.n	80092f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4904      	ldr	r1, [pc, #16]	; (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092f2:	4805      	ldr	r0, [pc, #20]	; (8009308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092f4:	f7ff fd3a 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f8:	4b02      	ldr	r3, [pc, #8]	; (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	200011b4 	.word	0x200011b4
 8009308:	0800b66c 	.word	0x0800b66c

0800930c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4907      	ldr	r1, [pc, #28]	; (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009322:	4808      	ldr	r0, [pc, #32]	; (8009344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009324:	f7ff fd22 	bl	8008d6c <USBD_GetString>
 8009328:	e004      	b.n	8009334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4904      	ldr	r1, [pc, #16]	; (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800932e:	4805      	ldr	r0, [pc, #20]	; (8009344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009330:	f7ff fd1c 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200011b4 	.word	0x200011b4
 8009344:	0800b678 	.word	0x0800b678

08009348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <Get_SerialNum+0x44>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009354:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <Get_SerialNum+0x48>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800935a:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <Get_SerialNum+0x4c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4413      	add	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800936e:	2208      	movs	r2, #8
 8009370:	4909      	ldr	r1, [pc, #36]	; (8009398 <Get_SerialNum+0x50>)
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 f814 	bl	80093a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009378:	2204      	movs	r2, #4
 800937a:	4908      	ldr	r1, [pc, #32]	; (800939c <Get_SerialNum+0x54>)
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	f000 f80f 	bl	80093a0 <IntToUnicode>
  }
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	1ffff7e8 	.word	0x1ffff7e8
 8009390:	1ffff7ec 	.word	0x1ffff7ec
 8009394:	1ffff7f0 	.word	0x1ffff7f0
 8009398:	20000262 	.word	0x20000262
 800939c:	20000272 	.word	0x20000272

080093a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]
 80093b6:	e027      	b.n	8009408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	2b09      	cmp	r3, #9
 80093be:	d80b      	bhi.n	80093d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0f1b      	lsrs	r3, r3, #28
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4619      	mov	r1, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	440b      	add	r3, r1
 80093d0:	3230      	adds	r2, #48	; 0x30
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	e00a      	b.n	80093ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	440b      	add	r3, r1
 80093e8:	3237      	adds	r2, #55	; 0x37
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	3301      	adds	r3, #1
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4413      	add	r3, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	3301      	adds	r3, #1
 8009406:	75fb      	strb	r3, [r7, #23]
 8009408:	7dfa      	ldrb	r2, [r7, #23]
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	429a      	cmp	r2, r3
 800940e:	d3d3      	bcc.n	80093b8 <IntToUnicode+0x18>
  }
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a0d      	ldr	r2, [pc, #52]	; (8009460 <HAL_PCD_MspInit+0x44>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d113      	bne.n	8009456 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <HAL_PCD_MspInit+0x48>)
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <HAL_PCD_MspInit+0x48>)
 8009434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009438:	61d3      	str	r3, [r2, #28]
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <HAL_PCD_MspInit+0x48>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	2014      	movs	r0, #20
 800944c:	f7f7 ffc5 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009450:	2014      	movs	r0, #20
 8009452:	f7f7 ffde 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40005c00 	.word	0x40005c00
 8009464:	40021000 	.word	0x40021000

08009468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fd43 	bl	8007f0a <USBD_LL_SetupStage>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f7fe fd75 	bl	8007fa4 <USBD_LL_DataOutStage>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	440b      	add	r3, r1
 80094e2:	333c      	adds	r3, #60	; 0x3c
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	4619      	mov	r1, r3
 80094ea:	f7fe fdcc 	bl	8008086 <USBD_LL_DataInStage>
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fedc 	bl	80082c2 <USBD_LL_SOF>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800951a:	2301      	movs	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d001      	beq.n	800952a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009526:	f7f7 facd 	bl	8000ac4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fe8c 	bl	8008252 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fe45 	bl	80081d0 <USBD_LL_Reset>
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fe86 	bl	8008270 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <HAL_PCD_SuspendCallback+0x30>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	4a03      	ldr	r2, [pc, #12]	; (8009580 <HAL_PCD_SuspendCallback+0x30>)
 8009572:	f043 0306 	orr.w	r3, r3, #6
 8009576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	e000ed00 	.word	0xe000ed00

08009584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fe80 	bl	8008298 <USBD_LL_Resume>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095a8:	4a28      	ldr	r2, [pc, #160]	; (800964c <USBD_LL_Init+0xac>)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a26      	ldr	r2, [pc, #152]	; (800964c <USBD_LL_Init+0xac>)
 80095b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095b8:	4b24      	ldr	r3, [pc, #144]	; (800964c <USBD_LL_Init+0xac>)
 80095ba:	4a25      	ldr	r2, [pc, #148]	; (8009650 <USBD_LL_Init+0xb0>)
 80095bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095be:	4b23      	ldr	r3, [pc, #140]	; (800964c <USBD_LL_Init+0xac>)
 80095c0:	2208      	movs	r2, #8
 80095c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095c4:	4b21      	ldr	r3, [pc, #132]	; (800964c <USBD_LL_Init+0xac>)
 80095c6:	2202      	movs	r2, #2
 80095c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095ca:	4b20      	ldr	r3, [pc, #128]	; (800964c <USBD_LL_Init+0xac>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095d0:	4b1e      	ldr	r3, [pc, #120]	; (800964c <USBD_LL_Init+0xac>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095d6:	4b1d      	ldr	r3, [pc, #116]	; (800964c <USBD_LL_Init+0xac>)
 80095d8:	2200      	movs	r2, #0
 80095da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095dc:	481b      	ldr	r0, [pc, #108]	; (800964c <USBD_LL_Init+0xac>)
 80095de:	f7f8 fb4c 	bl	8001c7a <HAL_PCD_Init>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095e8:	f7f7 fa6c 	bl	8000ac4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095f2:	2318      	movs	r3, #24
 80095f4:	2200      	movs	r2, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	f7f9 ffc2 	bl	8003580 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009602:	2358      	movs	r3, #88	; 0x58
 8009604:	2200      	movs	r2, #0
 8009606:	2180      	movs	r1, #128	; 0x80
 8009608:	f7f9 ffba 	bl	8003580 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009612:	23c0      	movs	r3, #192	; 0xc0
 8009614:	2200      	movs	r2, #0
 8009616:	2181      	movs	r1, #129	; 0x81
 8009618:	f7f9 ffb2 	bl	8003580 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009622:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009626:	2200      	movs	r2, #0
 8009628:	2101      	movs	r1, #1
 800962a:	f7f9 ffa9 	bl	8003580 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009638:	2200      	movs	r2, #0
 800963a:	2182      	movs	r1, #130	; 0x82
 800963c:	f7f9 ffa0 	bl	8003580 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	200013b4 	.word	0x200013b4
 8009650:	40005c00 	.word	0x40005c00

08009654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800966a:	4618      	mov	r0, r3
 800966c:	f7f8 fc10 	bl	8001e90 <HAL_PCD_Start>
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f94e 	bl	8009918 <USBD_Get_USB_Status>
 800967c:	4603      	mov	r3, r0
 800967e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009680:	7bbb      	ldrb	r3, [r7, #14]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	461a      	mov	r2, r3
 8009698:	4603      	mov	r3, r0
 800969a:	70fb      	strb	r3, [r7, #3]
 800969c:	460b      	mov	r3, r1
 800969e:	70bb      	strb	r3, [r7, #2]
 80096a0:	4613      	mov	r3, r2
 80096a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096b2:	78bb      	ldrb	r3, [r7, #2]
 80096b4:	883a      	ldrh	r2, [r7, #0]
 80096b6:	78f9      	ldrb	r1, [r7, #3]
 80096b8:	f7f8 fd8a 	bl	80021d0 <HAL_PCD_EP_Open>
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f928 	bl	8009918 <USBD_Get_USB_Status>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f8 fdd1 	bl	800229c <HAL_PCD_EP_Close>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f909 	bl	8009918 <USBD_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970a:	7bbb      	ldrb	r3, [r7, #14]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	4611      	mov	r1, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7f8 fe91 	bl	800245a <HAL_PCD_EP_SetStall>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f8ea 	bl	8009918 <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7f8 fed2 	bl	800251a <HAL_PCD_EP_ClrStall>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f8cb 	bl	8009918 <USBD_Get_USB_Status>
 8009782:	4603      	mov	r3, r0
 8009784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009786:	7bbb      	ldrb	r3, [r7, #14]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da0c      	bge.n	80097c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	440b      	add	r3, r1
 80097c0:	3302      	adds	r3, #2
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	e00b      	b.n	80097de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097cc:	68f9      	ldr	r1, [r7, #12]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	440b      	add	r3, r1
 80097d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bc80      	pop	{r7}
 80097e6:	4770      	bx	lr

080097e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7f8 fcbd 	bl	8002186 <HAL_PCD_SetAddress>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f880 	bl	8009918 <USBD_Get_USB_Status>
 8009818:	4603      	mov	r3, r0
 800981a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981c:	7bbb      	ldrb	r3, [r7, #14]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b086      	sub	sp, #24
 800982a:	af00      	add	r7, sp, #0
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	461a      	mov	r2, r3
 8009832:	460b      	mov	r3, r1
 8009834:	72fb      	strb	r3, [r7, #11]
 8009836:	4613      	mov	r3, r2
 8009838:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009848:	893b      	ldrh	r3, [r7, #8]
 800984a:	7af9      	ldrb	r1, [r7, #11]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	f7f8 fdc1 	bl	80023d4 <HAL_PCD_EP_Transmit>
 8009852:	4603      	mov	r3, r0
 8009854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f85d 	bl	8009918 <USBD_Get_USB_Status>
 800985e:	4603      	mov	r3, r0
 8009860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009862:	7dbb      	ldrb	r3, [r7, #22]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	607a      	str	r2, [r7, #4]
 8009876:	461a      	mov	r2, r3
 8009878:	460b      	mov	r3, r1
 800987a:	72fb      	strb	r3, [r7, #11]
 800987c:	4613      	mov	r3, r2
 800987e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	7af9      	ldrb	r1, [r7, #11]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	f7f8 fd4a 	bl	800232c <HAL_PCD_EP_Receive>
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f83a 	bl	8009918 <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f8 fd6c 	bl	80023a6 <HAL_PCD_EP_GetRxCount>
 80098ce:	4603      	mov	r3, r0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098e0:	4b02      	ldr	r3, [pc, #8]	; (80098ec <USBD_static_malloc+0x14>)
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bc80      	pop	{r7}
 80098ea:	4770      	bx	lr
 80098ec:	20000458 	.word	0x20000458

080098f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]

}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr

08009902 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	2b03      	cmp	r3, #3
 800992a:	d817      	bhi.n	800995c <USBD_Get_USB_Status+0x44>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_Get_USB_Status+0x1c>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009945 	.word	0x08009945
 8009938:	0800994b 	.word	0x0800994b
 800993c:	08009951 	.word	0x08009951
 8009940:	08009957 	.word	0x08009957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	e00b      	b.n	8009962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800994a:	2302      	movs	r3, #2
 800994c:	73fb      	strb	r3, [r7, #15]
    break;
 800994e:	e008      	b.n	8009962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
    break;
 8009954:	e005      	b.n	8009962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009956:	2302      	movs	r3, #2
 8009958:	73fb      	strb	r3, [r7, #15]
    break;
 800995a:	e002      	b.n	8009962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800995c:	2302      	movs	r3, #2
 800995e:	73fb      	strb	r3, [r7, #15]
    break;
 8009960:	bf00      	nop
  }
  return usb_status;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <atoi>:
 8009970:	220a      	movs	r2, #10
 8009972:	2100      	movs	r1, #0
 8009974:	f000 bad0 	b.w	8009f18 <strtol>

08009978 <__errno>:
 8009978:	4b01      	ldr	r3, [pc, #4]	; (8009980 <__errno+0x8>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000027c 	.word	0x2000027c

08009984 <__libc_init_array>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	2600      	movs	r6, #0
 8009988:	4d0c      	ldr	r5, [pc, #48]	; (80099bc <__libc_init_array+0x38>)
 800998a:	4c0d      	ldr	r4, [pc, #52]	; (80099c0 <__libc_init_array+0x3c>)
 800998c:	1b64      	subs	r4, r4, r5
 800998e:	10a4      	asrs	r4, r4, #2
 8009990:	42a6      	cmp	r6, r4
 8009992:	d109      	bne.n	80099a8 <__libc_init_array+0x24>
 8009994:	f001 fe12 	bl	800b5bc <_init>
 8009998:	2600      	movs	r6, #0
 800999a:	4d0a      	ldr	r5, [pc, #40]	; (80099c4 <__libc_init_array+0x40>)
 800999c:	4c0a      	ldr	r4, [pc, #40]	; (80099c8 <__libc_init_array+0x44>)
 800999e:	1b64      	subs	r4, r4, r5
 80099a0:	10a4      	asrs	r4, r4, #2
 80099a2:	42a6      	cmp	r6, r4
 80099a4:	d105      	bne.n	80099b2 <__libc_init_array+0x2e>
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ac:	4798      	blx	r3
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7ee      	b.n	8009990 <__libc_init_array+0xc>
 80099b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b6:	4798      	blx	r3
 80099b8:	3601      	adds	r6, #1
 80099ba:	e7f2      	b.n	80099a2 <__libc_init_array+0x1e>
 80099bc:	0800ba6c 	.word	0x0800ba6c
 80099c0:	0800ba6c 	.word	0x0800ba6c
 80099c4:	0800ba6c 	.word	0x0800ba6c
 80099c8:	0800ba70 	.word	0x0800ba70

080099cc <malloc>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <malloc+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f000 b85f 	b.w	8009a94 <_malloc_r>
 80099d6:	bf00      	nop
 80099d8:	2000027c 	.word	0x2000027c

080099dc <free>:
 80099dc:	4b02      	ldr	r3, [pc, #8]	; (80099e8 <free+0xc>)
 80099de:	4601      	mov	r1, r0
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f000 b80b 	b.w	80099fc <_free_r>
 80099e6:	bf00      	nop
 80099e8:	2000027c 	.word	0x2000027c

080099ec <memset>:
 80099ec:	4603      	mov	r3, r0
 80099ee:	4402      	add	r2, r0
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d100      	bne.n	80099f6 <memset+0xa>
 80099f4:	4770      	bx	lr
 80099f6:	f803 1b01 	strb.w	r1, [r3], #1
 80099fa:	e7f9      	b.n	80099f0 <memset+0x4>

080099fc <_free_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4605      	mov	r5, r0
 8009a00:	2900      	cmp	r1, #0
 8009a02:	d043      	beq.n	8009a8c <_free_r+0x90>
 8009a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a08:	1f0c      	subs	r4, r1, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bfb8      	it	lt
 8009a0e:	18e4      	addlt	r4, r4, r3
 8009a10:	f000 fb1c 	bl	800a04c <__malloc_lock>
 8009a14:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <_free_r+0x94>)
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	4610      	mov	r0, r2
 8009a1a:	b933      	cbnz	r3, 8009a2a <_free_r+0x2e>
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	6014      	str	r4, [r2, #0]
 8009a20:	4628      	mov	r0, r5
 8009a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a26:	f000 bb17 	b.w	800a058 <__malloc_unlock>
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	d90a      	bls.n	8009a44 <_free_r+0x48>
 8009a2e:	6821      	ldr	r1, [r4, #0]
 8009a30:	1862      	adds	r2, r4, r1
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bf01      	itttt	eq
 8009a36:	681a      	ldreq	r2, [r3, #0]
 8009a38:	685b      	ldreq	r3, [r3, #4]
 8009a3a:	1852      	addeq	r2, r2, r1
 8009a3c:	6022      	streq	r2, [r4, #0]
 8009a3e:	6063      	str	r3, [r4, #4]
 8009a40:	6004      	str	r4, [r0, #0]
 8009a42:	e7ed      	b.n	8009a20 <_free_r+0x24>
 8009a44:	461a      	mov	r2, r3
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	b10b      	cbz	r3, 8009a4e <_free_r+0x52>
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	d9fa      	bls.n	8009a44 <_free_r+0x48>
 8009a4e:	6811      	ldr	r1, [r2, #0]
 8009a50:	1850      	adds	r0, r2, r1
 8009a52:	42a0      	cmp	r0, r4
 8009a54:	d10b      	bne.n	8009a6e <_free_r+0x72>
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	4401      	add	r1, r0
 8009a5a:	1850      	adds	r0, r2, r1
 8009a5c:	4283      	cmp	r3, r0
 8009a5e:	6011      	str	r1, [r2, #0]
 8009a60:	d1de      	bne.n	8009a20 <_free_r+0x24>
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	4401      	add	r1, r0
 8009a68:	6011      	str	r1, [r2, #0]
 8009a6a:	6053      	str	r3, [r2, #4]
 8009a6c:	e7d8      	b.n	8009a20 <_free_r+0x24>
 8009a6e:	d902      	bls.n	8009a76 <_free_r+0x7a>
 8009a70:	230c      	movs	r3, #12
 8009a72:	602b      	str	r3, [r5, #0]
 8009a74:	e7d4      	b.n	8009a20 <_free_r+0x24>
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1821      	adds	r1, r4, r0
 8009a7a:	428b      	cmp	r3, r1
 8009a7c:	bf01      	itttt	eq
 8009a7e:	6819      	ldreq	r1, [r3, #0]
 8009a80:	685b      	ldreq	r3, [r3, #4]
 8009a82:	1809      	addeq	r1, r1, r0
 8009a84:	6021      	streq	r1, [r4, #0]
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6054      	str	r4, [r2, #4]
 8009a8a:	e7c9      	b.n	8009a20 <_free_r+0x24>
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000678 	.word	0x20000678

08009a94 <_malloc_r>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	1ccd      	adds	r5, r1, #3
 8009a98:	f025 0503 	bic.w	r5, r5, #3
 8009a9c:	3508      	adds	r5, #8
 8009a9e:	2d0c      	cmp	r5, #12
 8009aa0:	bf38      	it	cc
 8009aa2:	250c      	movcc	r5, #12
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	db01      	blt.n	8009aae <_malloc_r+0x1a>
 8009aaa:	42a9      	cmp	r1, r5
 8009aac:	d903      	bls.n	8009ab6 <_malloc_r+0x22>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab6:	f000 fac9 	bl	800a04c <__malloc_lock>
 8009aba:	4921      	ldr	r1, [pc, #132]	; (8009b40 <_malloc_r+0xac>)
 8009abc:	680a      	ldr	r2, [r1, #0]
 8009abe:	4614      	mov	r4, r2
 8009ac0:	b99c      	cbnz	r4, 8009aea <_malloc_r+0x56>
 8009ac2:	4f20      	ldr	r7, [pc, #128]	; (8009b44 <_malloc_r+0xb0>)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	b923      	cbnz	r3, 8009ad2 <_malloc_r+0x3e>
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 f8aa 	bl	8009c24 <_sbrk_r>
 8009ad0:	6038      	str	r0, [r7, #0]
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 f8a5 	bl	8009c24 <_sbrk_r>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d123      	bne.n	8009b26 <_malloc_r+0x92>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	f000 fab8 	bl	800a058 <__malloc_unlock>
 8009ae8:	e7e3      	b.n	8009ab2 <_malloc_r+0x1e>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	1b5b      	subs	r3, r3, r5
 8009aee:	d417      	bmi.n	8009b20 <_malloc_r+0x8c>
 8009af0:	2b0b      	cmp	r3, #11
 8009af2:	d903      	bls.n	8009afc <_malloc_r+0x68>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	441c      	add	r4, r3
 8009af8:	6025      	str	r5, [r4, #0]
 8009afa:	e004      	b.n	8009b06 <_malloc_r+0x72>
 8009afc:	6863      	ldr	r3, [r4, #4]
 8009afe:	42a2      	cmp	r2, r4
 8009b00:	bf0c      	ite	eq
 8009b02:	600b      	streq	r3, [r1, #0]
 8009b04:	6053      	strne	r3, [r2, #4]
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 faa6 	bl	800a058 <__malloc_unlock>
 8009b0c:	f104 000b 	add.w	r0, r4, #11
 8009b10:	1d23      	adds	r3, r4, #4
 8009b12:	f020 0007 	bic.w	r0, r0, #7
 8009b16:	1ac2      	subs	r2, r0, r3
 8009b18:	d0cc      	beq.n	8009ab4 <_malloc_r+0x20>
 8009b1a:	1a1b      	subs	r3, r3, r0
 8009b1c:	50a3      	str	r3, [r4, r2]
 8009b1e:	e7c9      	b.n	8009ab4 <_malloc_r+0x20>
 8009b20:	4622      	mov	r2, r4
 8009b22:	6864      	ldr	r4, [r4, #4]
 8009b24:	e7cc      	b.n	8009ac0 <_malloc_r+0x2c>
 8009b26:	1cc4      	adds	r4, r0, #3
 8009b28:	f024 0403 	bic.w	r4, r4, #3
 8009b2c:	42a0      	cmp	r0, r4
 8009b2e:	d0e3      	beq.n	8009af8 <_malloc_r+0x64>
 8009b30:	1a21      	subs	r1, r4, r0
 8009b32:	4630      	mov	r0, r6
 8009b34:	f000 f876 	bl	8009c24 <_sbrk_r>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1dd      	bne.n	8009af8 <_malloc_r+0x64>
 8009b3c:	e7cf      	b.n	8009ade <_malloc_r+0x4a>
 8009b3e:	bf00      	nop
 8009b40:	20000678 	.word	0x20000678
 8009b44:	2000067c 	.word	0x2000067c

08009b48 <srand>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <srand+0x44>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	681d      	ldr	r5, [r3, #0]
 8009b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009b52:	b9b3      	cbnz	r3, 8009b82 <srand+0x3a>
 8009b54:	2018      	movs	r0, #24
 8009b56:	f7ff ff39 	bl	80099cc <malloc>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	63a8      	str	r0, [r5, #56]	; 0x38
 8009b5e:	b920      	cbnz	r0, 8009b6a <srand+0x22>
 8009b60:	2142      	movs	r1, #66	; 0x42
 8009b62:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <srand+0x48>)
 8009b64:	480b      	ldr	r0, [pc, #44]	; (8009b94 <srand+0x4c>)
 8009b66:	f000 fa0d 	bl	8009f84 <__assert_func>
 8009b6a:	490b      	ldr	r1, [pc, #44]	; (8009b98 <srand+0x50>)
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <srand+0x54>)
 8009b6e:	e9c0 1300 	strd	r1, r3, [r0]
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <srand+0x58>)
 8009b74:	2100      	movs	r1, #0
 8009b76:	6083      	str	r3, [r0, #8]
 8009b78:	230b      	movs	r3, #11
 8009b7a:	8183      	strh	r3, [r0, #12]
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009b82:	2200      	movs	r2, #0
 8009b84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009b86:	611c      	str	r4, [r3, #16]
 8009b88:	615a      	str	r2, [r3, #20]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	2000027c 	.word	0x2000027c
 8009b90:	0800b7a8 	.word	0x0800b7a8
 8009b94:	0800b7bf 	.word	0x0800b7bf
 8009b98:	abcd330e 	.word	0xabcd330e
 8009b9c:	e66d1234 	.word	0xe66d1234
 8009ba0:	0005deec 	.word	0x0005deec

08009ba4 <rand>:
 8009ba4:	4b17      	ldr	r3, [pc, #92]	; (8009c04 <rand+0x60>)
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	681c      	ldr	r4, [r3, #0]
 8009baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bac:	b9b3      	cbnz	r3, 8009bdc <rand+0x38>
 8009bae:	2018      	movs	r0, #24
 8009bb0:	f7ff ff0c 	bl	80099cc <malloc>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	63a0      	str	r0, [r4, #56]	; 0x38
 8009bb8:	b920      	cbnz	r0, 8009bc4 <rand+0x20>
 8009bba:	214e      	movs	r1, #78	; 0x4e
 8009bbc:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <rand+0x64>)
 8009bbe:	4813      	ldr	r0, [pc, #76]	; (8009c0c <rand+0x68>)
 8009bc0:	f000 f9e0 	bl	8009f84 <__assert_func>
 8009bc4:	4912      	ldr	r1, [pc, #72]	; (8009c10 <rand+0x6c>)
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <rand+0x70>)
 8009bc8:	e9c0 1300 	strd	r1, r3, [r0]
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <rand+0x74>)
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6083      	str	r3, [r0, #8]
 8009bd2:	230b      	movs	r3, #11
 8009bd4:	8183      	strh	r3, [r0, #12]
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009bdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009bde:	480f      	ldr	r0, [pc, #60]	; (8009c1c <rand+0x78>)
 8009be0:	690a      	ldr	r2, [r1, #16]
 8009be2:	694b      	ldr	r3, [r1, #20]
 8009be4:	4350      	muls	r0, r2
 8009be6:	4c0e      	ldr	r4, [pc, #56]	; (8009c20 <rand+0x7c>)
 8009be8:	fb04 0003 	mla	r0, r4, r3, r0
 8009bec:	fba2 3404 	umull	r3, r4, r2, r4
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	4404      	add	r4, r0
 8009bf4:	f144 0000 	adc.w	r0, r4, #0
 8009bf8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009bfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	bf00      	nop
 8009c04:	2000027c 	.word	0x2000027c
 8009c08:	0800b7a8 	.word	0x0800b7a8
 8009c0c:	0800b7bf 	.word	0x0800b7bf
 8009c10:	abcd330e 	.word	0xabcd330e
 8009c14:	e66d1234 	.word	0xe66d1234
 8009c18:	0005deec 	.word	0x0005deec
 8009c1c:	5851f42d 	.word	0x5851f42d
 8009c20:	4c957f2d 	.word	0x4c957f2d

08009c24 <_sbrk_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	2300      	movs	r3, #0
 8009c28:	4d05      	ldr	r5, [pc, #20]	; (8009c40 <_sbrk_r+0x1c>)
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	f7f7 f8de 	bl	8000df0 <_sbrk>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_sbrk_r+0x1a>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_sbrk_r+0x1a>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	200016a0 	.word	0x200016a0

08009c44 <siscanf>:
 8009c44:	b40e      	push	{r1, r2, r3}
 8009c46:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009c4a:	b530      	push	{r4, r5, lr}
 8009c4c:	b09c      	sub	sp, #112	; 0x70
 8009c4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009c50:	f854 5b04 	ldr.w	r5, [r4], #4
 8009c54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9006      	str	r0, [sp, #24]
 8009c5c:	f7f6 fa80 	bl	8000160 <strlen>
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <siscanf+0x4c>)
 8009c62:	9003      	str	r0, [sp, #12]
 8009c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c66:	2300      	movs	r3, #0
 8009c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c6a:	9314      	str	r3, [sp, #80]	; 0x50
 8009c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c70:	9007      	str	r0, [sp, #28]
 8009c72:	4808      	ldr	r0, [pc, #32]	; (8009c94 <siscanf+0x50>)
 8009c74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	a902      	add	r1, sp, #8
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	9401      	str	r4, [sp, #4]
 8009c82:	f000 fa49 	bl	800a118 <__ssvfiscanf_r>
 8009c86:	b01c      	add	sp, #112	; 0x70
 8009c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c8c:	b003      	add	sp, #12
 8009c8e:	4770      	bx	lr
 8009c90:	08009cbb 	.word	0x08009cbb
 8009c94:	2000027c 	.word	0x2000027c

08009c98 <__sread>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	f000 ffec 	bl	800ac7c <_read_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	bfab      	itete	ge
 8009ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009caa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cac:	181b      	addge	r3, r3, r0
 8009cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb2:	bfac      	ite	ge
 8009cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb6:	81a3      	strhlt	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__seofread>:
 8009cba:	2000      	movs	r0, #0
 8009cbc:	4770      	bx	lr

08009cbe <__swrite>:
 8009cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	898b      	ldrh	r3, [r1, #12]
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	05db      	lsls	r3, r3, #23
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4616      	mov	r6, r2
 8009cce:	d505      	bpl.n	8009cdc <__swrite+0x1e>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd8:	f000 f9a6 	bl	800a028 <_lseek_r>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	4632      	mov	r2, r6
 8009ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	463b      	mov	r3, r7
 8009cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	f000 b935 	b.w	8009f60 <_write_r>

08009cf6 <__sseek>:
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfe:	f000 f993 	bl	800a028 <_lseek_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	bf15      	itete	ne
 8009d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d12:	81a3      	strheq	r3, [r4, #12]
 8009d14:	bf18      	it	ne
 8009d16:	81a3      	strhne	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__sclose>:
 8009d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1e:	f000 b94f 	b.w	8009fc0 <_close_r>

08009d22 <strcat>:
 8009d22:	4602      	mov	r2, r0
 8009d24:	b510      	push	{r4, lr}
 8009d26:	7814      	ldrb	r4, [r2, #0]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	3201      	adds	r2, #1
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	d1fa      	bne.n	8009d26 <strcat+0x4>
 8009d30:	3b01      	subs	r3, #1
 8009d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	d1f9      	bne.n	8009d32 <strcat+0x10>
 8009d3e:	bd10      	pop	{r4, pc}

08009d40 <strcpy>:
 8009d40:	4603      	mov	r3, r0
 8009d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d46:	f803 2b01 	strb.w	r2, [r3], #1
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d1f9      	bne.n	8009d42 <strcpy+0x2>
 8009d4e:	4770      	bx	lr

08009d50 <strtok>:
 8009d50:	4b16      	ldr	r3, [pc, #88]	; (8009dac <strtok+0x5c>)
 8009d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d56:	681f      	ldr	r7, [r3, #0]
 8009d58:	4605      	mov	r5, r0
 8009d5a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009d5c:	460e      	mov	r6, r1
 8009d5e:	b9ec      	cbnz	r4, 8009d9c <strtok+0x4c>
 8009d60:	2050      	movs	r0, #80	; 0x50
 8009d62:	f7ff fe33 	bl	80099cc <malloc>
 8009d66:	4602      	mov	r2, r0
 8009d68:	65b8      	str	r0, [r7, #88]	; 0x58
 8009d6a:	b920      	cbnz	r0, 8009d76 <strtok+0x26>
 8009d6c:	2157      	movs	r1, #87	; 0x57
 8009d6e:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <strtok+0x60>)
 8009d70:	4810      	ldr	r0, [pc, #64]	; (8009db4 <strtok+0x64>)
 8009d72:	f000 f907 	bl	8009f84 <__assert_func>
 8009d76:	e9c0 4400 	strd	r4, r4, [r0]
 8009d7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009d7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009d82:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009d86:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009d8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009d8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009d92:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009d96:	6184      	str	r4, [r0, #24]
 8009d98:	7704      	strb	r4, [r0, #28]
 8009d9a:	6244      	str	r4, [r0, #36]	; 0x24
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009da2:	2301      	movs	r3, #1
 8009da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	f000 b806 	b.w	8009db8 <__strtok_r>
 8009dac:	2000027c 	.word	0x2000027c
 8009db0:	0800b7a8 	.word	0x0800b7a8
 8009db4:	0800b81e 	.word	0x0800b81e

08009db8 <__strtok_r>:
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	b908      	cbnz	r0, 8009dc0 <__strtok_r+0x8>
 8009dbc:	6810      	ldr	r0, [r2, #0]
 8009dbe:	b188      	cbz	r0, 8009de4 <__strtok_r+0x2c>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	460f      	mov	r7, r1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009dca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009dce:	b91e      	cbnz	r6, 8009dd8 <__strtok_r+0x20>
 8009dd0:	b965      	cbnz	r5, 8009dec <__strtok_r+0x34>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	6015      	str	r5, [r2, #0]
 8009dd6:	e005      	b.n	8009de4 <__strtok_r+0x2c>
 8009dd8:	42b5      	cmp	r5, r6
 8009dda:	d1f6      	bne.n	8009dca <__strtok_r+0x12>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f0      	bne.n	8009dc2 <__strtok_r+0xa>
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	7003      	strb	r3, [r0, #0]
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de6:	461c      	mov	r4, r3
 8009de8:	e00c      	b.n	8009e04 <__strtok_r+0x4c>
 8009dea:	b915      	cbnz	r5, 8009df2 <__strtok_r+0x3a>
 8009dec:	460e      	mov	r6, r1
 8009dee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009df2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	d1f7      	bne.n	8009dea <__strtok_r+0x32>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f3      	beq.n	8009de6 <__strtok_r+0x2e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009e04:	6014      	str	r4, [r2, #0]
 8009e06:	e7ed      	b.n	8009de4 <__strtok_r+0x2c>

08009e08 <_strtol_l.isra.0>:
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0e:	4686      	mov	lr, r0
 8009e10:	d001      	beq.n	8009e16 <_strtol_l.isra.0+0xe>
 8009e12:	2b24      	cmp	r3, #36	; 0x24
 8009e14:	d906      	bls.n	8009e24 <_strtol_l.isra.0+0x1c>
 8009e16:	f7ff fdaf 	bl	8009978 <__errno>
 8009e1a:	2316      	movs	r3, #22
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e24:	468c      	mov	ip, r1
 8009e26:	4e3a      	ldr	r6, [pc, #232]	; (8009f10 <_strtol_l.isra.0+0x108>)
 8009e28:	4660      	mov	r0, ip
 8009e2a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009e2e:	5da5      	ldrb	r5, [r4, r6]
 8009e30:	f015 0508 	ands.w	r5, r5, #8
 8009e34:	d1f8      	bne.n	8009e28 <_strtol_l.isra.0+0x20>
 8009e36:	2c2d      	cmp	r4, #45	; 0x2d
 8009e38:	d133      	bne.n	8009ea2 <_strtol_l.isra.0+0x9a>
 8009e3a:	f04f 0801 	mov.w	r8, #1
 8009e3e:	f89c 4000 	ldrb.w	r4, [ip]
 8009e42:	f100 0c02 	add.w	ip, r0, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d05d      	beq.n	8009f06 <_strtol_l.isra.0+0xfe>
 8009e4a:	2b10      	cmp	r3, #16
 8009e4c:	d10c      	bne.n	8009e68 <_strtol_l.isra.0+0x60>
 8009e4e:	2c30      	cmp	r4, #48	; 0x30
 8009e50:	d10a      	bne.n	8009e68 <_strtol_l.isra.0+0x60>
 8009e52:	f89c 0000 	ldrb.w	r0, [ip]
 8009e56:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009e5a:	2858      	cmp	r0, #88	; 0x58
 8009e5c:	d14e      	bne.n	8009efc <_strtol_l.isra.0+0xf4>
 8009e5e:	2310      	movs	r3, #16
 8009e60:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009e64:	f10c 0c02 	add.w	ip, ip, #2
 8009e68:	2500      	movs	r5, #0
 8009e6a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	fbb7 f9f3 	udiv	r9, r7, r3
 8009e74:	4628      	mov	r0, r5
 8009e76:	fb03 7a19 	mls	sl, r3, r9, r7
 8009e7a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009e7e:	2e09      	cmp	r6, #9
 8009e80:	d818      	bhi.n	8009eb4 <_strtol_l.isra.0+0xac>
 8009e82:	4634      	mov	r4, r6
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	dd24      	ble.n	8009ed2 <_strtol_l.isra.0+0xca>
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	db1f      	blt.n	8009ecc <_strtol_l.isra.0+0xc4>
 8009e8c:	4581      	cmp	r9, r0
 8009e8e:	d31d      	bcc.n	8009ecc <_strtol_l.isra.0+0xc4>
 8009e90:	d101      	bne.n	8009e96 <_strtol_l.isra.0+0x8e>
 8009e92:	45a2      	cmp	sl, r4
 8009e94:	db1a      	blt.n	8009ecc <_strtol_l.isra.0+0xc4>
 8009e96:	2501      	movs	r5, #1
 8009e98:	fb00 4003 	mla	r0, r0, r3, r4
 8009e9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ea0:	e7eb      	b.n	8009e7a <_strtol_l.isra.0+0x72>
 8009ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ea4:	bf08      	it	eq
 8009ea6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009eaa:	46a8      	mov	r8, r5
 8009eac:	bf08      	it	eq
 8009eae:	f100 0c02 	addeq.w	ip, r0, #2
 8009eb2:	e7c8      	b.n	8009e46 <_strtol_l.isra.0+0x3e>
 8009eb4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009eb8:	2e19      	cmp	r6, #25
 8009eba:	d801      	bhi.n	8009ec0 <_strtol_l.isra.0+0xb8>
 8009ebc:	3c37      	subs	r4, #55	; 0x37
 8009ebe:	e7e1      	b.n	8009e84 <_strtol_l.isra.0+0x7c>
 8009ec0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009ec4:	2e19      	cmp	r6, #25
 8009ec6:	d804      	bhi.n	8009ed2 <_strtol_l.isra.0+0xca>
 8009ec8:	3c57      	subs	r4, #87	; 0x57
 8009eca:	e7db      	b.n	8009e84 <_strtol_l.isra.0+0x7c>
 8009ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8009ed0:	e7e4      	b.n	8009e9c <_strtol_l.isra.0+0x94>
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	da08      	bge.n	8009ee8 <_strtol_l.isra.0+0xe0>
 8009ed6:	2322      	movs	r3, #34	; 0x22
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f8ce 3000 	str.w	r3, [lr]
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d09e      	beq.n	8009e20 <_strtol_l.isra.0+0x18>
 8009ee2:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009ee6:	e007      	b.n	8009ef8 <_strtol_l.isra.0+0xf0>
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	d000      	beq.n	8009ef0 <_strtol_l.isra.0+0xe8>
 8009eee:	4240      	negs	r0, r0
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	d095      	beq.n	8009e20 <_strtol_l.isra.0+0x18>
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	d1f4      	bne.n	8009ee2 <_strtol_l.isra.0+0xda>
 8009ef8:	6011      	str	r1, [r2, #0]
 8009efa:	e791      	b.n	8009e20 <_strtol_l.isra.0+0x18>
 8009efc:	2430      	movs	r4, #48	; 0x30
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1b2      	bne.n	8009e68 <_strtol_l.isra.0+0x60>
 8009f02:	2308      	movs	r3, #8
 8009f04:	e7b0      	b.n	8009e68 <_strtol_l.isra.0+0x60>
 8009f06:	2c30      	cmp	r4, #48	; 0x30
 8009f08:	d0a3      	beq.n	8009e52 <_strtol_l.isra.0+0x4a>
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	e7ac      	b.n	8009e68 <_strtol_l.isra.0+0x60>
 8009f0e:	bf00      	nop
 8009f10:	0800b8bc 	.word	0x0800b8bc

08009f14 <_strtol_r>:
 8009f14:	f7ff bf78 	b.w	8009e08 <_strtol_l.isra.0>

08009f18 <strtol>:
 8009f18:	4613      	mov	r3, r2
 8009f1a:	460a      	mov	r2, r1
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	4802      	ldr	r0, [pc, #8]	; (8009f28 <strtol+0x10>)
 8009f20:	6800      	ldr	r0, [r0, #0]
 8009f22:	f7ff bf71 	b.w	8009e08 <_strtol_l.isra.0>
 8009f26:	bf00      	nop
 8009f28:	2000027c 	.word	0x2000027c

08009f2c <time>:
 8009f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <time+0x30>)
 8009f30:	4604      	mov	r4, r0
 8009f32:	2200      	movs	r2, #0
 8009f34:	4669      	mov	r1, sp
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f000 f864 	bl	800a004 <_gettimeofday_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	da05      	bge.n	8009f4c <time+0x20>
 8009f40:	f04f 32ff 	mov.w	r2, #4294967295
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	e9cd 2300 	strd	r2, r3, [sp]
 8009f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f50:	b10c      	cbz	r4, 8009f56 <time+0x2a>
 8009f52:	e9c4 0100 	strd	r0, r1, [r4]
 8009f56:	b004      	add	sp, #16
 8009f58:	bd10      	pop	{r4, pc}
 8009f5a:	bf00      	nop
 8009f5c:	2000027c 	.word	0x2000027c

08009f60 <_write_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4d05      	ldr	r5, [pc, #20]	; (8009f80 <_write_r+0x20>)
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f6 fef2 	bl	8000d58 <_write>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_write_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_write_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	200016a0 	.word	0x200016a0

08009f84 <__assert_func>:
 8009f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f86:	4614      	mov	r4, r2
 8009f88:	461a      	mov	r2, r3
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <__assert_func+0x2c>)
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68d8      	ldr	r0, [r3, #12]
 8009f92:	b14c      	cbz	r4, 8009fa8 <__assert_func+0x24>
 8009f94:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <__assert_func+0x30>)
 8009f96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f9a:	9100      	str	r1, [sp, #0]
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	4906      	ldr	r1, [pc, #24]	; (8009fb8 <__assert_func+0x34>)
 8009fa0:	f000 f81e 	bl	8009fe0 <fiprintf>
 8009fa4:	f001 f82c 	bl	800b000 <abort>
 8009fa8:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <__assert_func+0x38>)
 8009faa:	461c      	mov	r4, r3
 8009fac:	e7f3      	b.n	8009f96 <__assert_func+0x12>
 8009fae:	bf00      	nop
 8009fb0:	2000027c 	.word	0x2000027c
 8009fb4:	0800b87f 	.word	0x0800b87f
 8009fb8:	0800b88c 	.word	0x0800b88c
 8009fbc:	0800b8ba 	.word	0x0800b8ba

08009fc0 <_close_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4d05      	ldr	r5, [pc, #20]	; (8009fdc <_close_r+0x1c>)
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f6 fee0 	bl	8000d90 <_close>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_close_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_close_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	200016a0 	.word	0x200016a0

08009fe0 <fiprintf>:
 8009fe0:	b40e      	push	{r1, r2, r3}
 8009fe2:	b503      	push	{r0, r1, lr}
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	ab03      	add	r3, sp, #12
 8009fe8:	4805      	ldr	r0, [pc, #20]	; (800a000 <fiprintf+0x20>)
 8009fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fee:	6800      	ldr	r0, [r0, #0]
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	f000 fa33 	bl	800a45c <_vfiprintf_r>
 8009ff6:	b002      	add	sp, #8
 8009ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ffc:	b003      	add	sp, #12
 8009ffe:	4770      	bx	lr
 800a000:	2000027c 	.word	0x2000027c

0800a004 <_gettimeofday_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	2300      	movs	r3, #0
 800a008:	4d06      	ldr	r5, [pc, #24]	; (800a024 <_gettimeofday_r+0x20>)
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f001 facb 	bl	800b5ac <_gettimeofday>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_gettimeofday_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_gettimeofday_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	200016a0 	.word	0x200016a0

0800a028 <_lseek_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	4611      	mov	r1, r2
 800a030:	2200      	movs	r2, #0
 800a032:	4d05      	ldr	r5, [pc, #20]	; (800a048 <_lseek_r+0x20>)
 800a034:	602a      	str	r2, [r5, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	f7f6 fece 	bl	8000dd8 <_lseek>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_lseek_r+0x1e>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_lseek_r+0x1e>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	200016a0 	.word	0x200016a0

0800a04c <__malloc_lock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_lock+0x8>)
 800a04e:	f001 b997 	b.w	800b380 <__retarget_lock_acquire_recursive>
 800a052:	bf00      	nop
 800a054:	200016a8 	.word	0x200016a8

0800a058 <__malloc_unlock>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__malloc_unlock+0x8>)
 800a05a:	f001 b992 	b.w	800b382 <__retarget_lock_release_recursive>
 800a05e:	bf00      	nop
 800a060:	200016a8 	.word	0x200016a8

0800a064 <_sungetc_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	1c4b      	adds	r3, r1, #1
 800a068:	4614      	mov	r4, r2
 800a06a:	d103      	bne.n	800a074 <_sungetc_r+0x10>
 800a06c:	f04f 35ff 	mov.w	r5, #4294967295
 800a070:	4628      	mov	r0, r5
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	8993      	ldrh	r3, [r2, #12]
 800a076:	b2cd      	uxtb	r5, r1
 800a078:	f023 0320 	bic.w	r3, r3, #32
 800a07c:	8193      	strh	r3, [r2, #12]
 800a07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a080:	6852      	ldr	r2, [r2, #4]
 800a082:	b18b      	cbz	r3, 800a0a8 <_sungetc_r+0x44>
 800a084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a086:	4293      	cmp	r3, r2
 800a088:	dd08      	ble.n	800a09c <_sungetc_r+0x38>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	6022      	str	r2, [r4, #0]
 800a090:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	3301      	adds	r3, #1
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	e7e9      	b.n	800a070 <_sungetc_r+0xc>
 800a09c:	4621      	mov	r1, r4
 800a09e:	f000 feb7 	bl	800ae10 <__submore>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d0f1      	beq.n	800a08a <_sungetc_r+0x26>
 800a0a6:	e7e1      	b.n	800a06c <_sungetc_r+0x8>
 800a0a8:	6921      	ldr	r1, [r4, #16]
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	b151      	cbz	r1, 800a0c4 <_sungetc_r+0x60>
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	d208      	bcs.n	800a0c4 <_sungetc_r+0x60>
 800a0b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a0b6:	42a9      	cmp	r1, r5
 800a0b8:	d104      	bne.n	800a0c4 <_sungetc_r+0x60>
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	3201      	adds	r2, #1
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	6062      	str	r2, [r4, #4]
 800a0c2:	e7d5      	b.n	800a070 <_sungetc_r+0xc>
 800a0c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e7dc      	b.n	800a098 <_sungetc_r+0x34>

0800a0de <__ssrefill_r>:
 800a0de:	b510      	push	{r4, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0e4:	b169      	cbz	r1, 800a102 <__ssrefill_r+0x24>
 800a0e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	d001      	beq.n	800a0f2 <__ssrefill_r+0x14>
 800a0ee:	f7ff fc85 	bl	80099fc <_free_r>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0f6:	6360      	str	r0, [r4, #52]	; 0x34
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	b113      	cbz	r3, 800a102 <__ssrefill_r+0x24>
 800a0fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	bd10      	pop	{r4, pc}
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	2300      	movs	r3, #0
 800a10c:	6063      	str	r3, [r4, #4]
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f043 0320 	orr.w	r3, r3, #32
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	e7f3      	b.n	800a100 <__ssrefill_r+0x22>

0800a118 <__ssvfiscanf_r>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	2100      	movs	r1, #0
 800a120:	4606      	mov	r6, r0
 800a122:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a126:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a12a:	49b3      	ldr	r1, [pc, #716]	; (800a3f8 <__ssvfiscanf_r+0x2e0>)
 800a12c:	f10d 0804 	add.w	r8, sp, #4
 800a130:	91a0      	str	r1, [sp, #640]	; 0x280
 800a132:	49b2      	ldr	r1, [pc, #712]	; (800a3fc <__ssvfiscanf_r+0x2e4>)
 800a134:	4fb2      	ldr	r7, [pc, #712]	; (800a400 <__ssvfiscanf_r+0x2e8>)
 800a136:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800a404 <__ssvfiscanf_r+0x2ec>
 800a13a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a13e:	91a1      	str	r1, [sp, #644]	; 0x284
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	f892 a000 	ldrb.w	sl, [r2]
 800a146:	f1ba 0f00 	cmp.w	sl, #0
 800a14a:	f000 8153 	beq.w	800a3f4 <__ssvfiscanf_r+0x2dc>
 800a14e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a152:	1c55      	adds	r5, r2, #1
 800a154:	f013 0308 	ands.w	r3, r3, #8
 800a158:	d019      	beq.n	800a18e <__ssvfiscanf_r+0x76>
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd0f      	ble.n	800a180 <__ssvfiscanf_r+0x68>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	5cba      	ldrb	r2, [r7, r2]
 800a166:	0712      	lsls	r2, r2, #28
 800a168:	d401      	bmi.n	800a16e <__ssvfiscanf_r+0x56>
 800a16a:	462a      	mov	r2, r5
 800a16c:	e7e9      	b.n	800a142 <__ssvfiscanf_r+0x2a>
 800a16e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a170:	3301      	adds	r3, #1
 800a172:	3201      	adds	r2, #1
 800a174:	9245      	str	r2, [sp, #276]	; 0x114
 800a176:	6862      	ldr	r2, [r4, #4]
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	3a01      	subs	r2, #1
 800a17c:	6062      	str	r2, [r4, #4]
 800a17e:	e7ec      	b.n	800a15a <__ssvfiscanf_r+0x42>
 800a180:	4621      	mov	r1, r4
 800a182:	4630      	mov	r0, r6
 800a184:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a186:	4798      	blx	r3
 800a188:	2800      	cmp	r0, #0
 800a18a:	d0e9      	beq.n	800a160 <__ssvfiscanf_r+0x48>
 800a18c:	e7ed      	b.n	800a16a <__ssvfiscanf_r+0x52>
 800a18e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a192:	f040 8086 	bne.w	800a2a2 <__ssvfiscanf_r+0x18a>
 800a196:	9341      	str	r3, [sp, #260]	; 0x104
 800a198:	9343      	str	r3, [sp, #268]	; 0x10c
 800a19a:	7853      	ldrb	r3, [r2, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	bf04      	itt	eq
 800a1a0:	2310      	moveq	r3, #16
 800a1a2:	1c95      	addeq	r5, r2, #2
 800a1a4:	f04f 020a 	mov.w	r2, #10
 800a1a8:	bf08      	it	eq
 800a1aa:	9341      	streq	r3, [sp, #260]	; 0x104
 800a1ac:	46ab      	mov	fp, r5
 800a1ae:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a1b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a1b6:	2b09      	cmp	r3, #9
 800a1b8:	d91d      	bls.n	800a1f6 <__ssvfiscanf_r+0xde>
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4891      	ldr	r0, [pc, #580]	; (800a404 <__ssvfiscanf_r+0x2ec>)
 800a1be:	f001 f945 	bl	800b44c <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <__ssvfiscanf_r+0xbe>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	465d      	mov	r5, fp
 800a1c8:	eba0 0009 	sub.w	r0, r0, r9
 800a1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1d2:	4318      	orrs	r0, r3
 800a1d4:	9041      	str	r0, [sp, #260]	; 0x104
 800a1d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1da:	2b78      	cmp	r3, #120	; 0x78
 800a1dc:	d806      	bhi.n	800a1ec <__ssvfiscanf_r+0xd4>
 800a1de:	2b57      	cmp	r3, #87	; 0x57
 800a1e0:	d810      	bhi.n	800a204 <__ssvfiscanf_r+0xec>
 800a1e2:	2b25      	cmp	r3, #37	; 0x25
 800a1e4:	d05d      	beq.n	800a2a2 <__ssvfiscanf_r+0x18a>
 800a1e6:	d857      	bhi.n	800a298 <__ssvfiscanf_r+0x180>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d075      	beq.n	800a2d8 <__ssvfiscanf_r+0x1c0>
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	9342      	str	r3, [sp, #264]	; 0x108
 800a1f4:	e082      	b.n	800a2fc <__ssvfiscanf_r+0x1e4>
 800a1f6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a1f8:	465d      	mov	r5, fp
 800a1fa:	fb02 1303 	mla	r3, r2, r3, r1
 800a1fe:	3b30      	subs	r3, #48	; 0x30
 800a200:	9343      	str	r3, [sp, #268]	; 0x10c
 800a202:	e7d3      	b.n	800a1ac <__ssvfiscanf_r+0x94>
 800a204:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a208:	2a20      	cmp	r2, #32
 800a20a:	d8ef      	bhi.n	800a1ec <__ssvfiscanf_r+0xd4>
 800a20c:	a101      	add	r1, pc, #4	; (adr r1, 800a214 <__ssvfiscanf_r+0xfc>)
 800a20e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a2e7 	.word	0x0800a2e7
 800a218:	0800a1ed 	.word	0x0800a1ed
 800a21c:	0800a1ed 	.word	0x0800a1ed
 800a220:	0800a345 	.word	0x0800a345
 800a224:	0800a1ed 	.word	0x0800a1ed
 800a228:	0800a1ed 	.word	0x0800a1ed
 800a22c:	0800a1ed 	.word	0x0800a1ed
 800a230:	0800a1ed 	.word	0x0800a1ed
 800a234:	0800a1ed 	.word	0x0800a1ed
 800a238:	0800a1ed 	.word	0x0800a1ed
 800a23c:	0800a1ed 	.word	0x0800a1ed
 800a240:	0800a35b 	.word	0x0800a35b
 800a244:	0800a331 	.word	0x0800a331
 800a248:	0800a29f 	.word	0x0800a29f
 800a24c:	0800a29f 	.word	0x0800a29f
 800a250:	0800a29f 	.word	0x0800a29f
 800a254:	0800a1ed 	.word	0x0800a1ed
 800a258:	0800a335 	.word	0x0800a335
 800a25c:	0800a1ed 	.word	0x0800a1ed
 800a260:	0800a1ed 	.word	0x0800a1ed
 800a264:	0800a1ed 	.word	0x0800a1ed
 800a268:	0800a1ed 	.word	0x0800a1ed
 800a26c:	0800a36b 	.word	0x0800a36b
 800a270:	0800a33d 	.word	0x0800a33d
 800a274:	0800a2df 	.word	0x0800a2df
 800a278:	0800a1ed 	.word	0x0800a1ed
 800a27c:	0800a1ed 	.word	0x0800a1ed
 800a280:	0800a367 	.word	0x0800a367
 800a284:	0800a1ed 	.word	0x0800a1ed
 800a288:	0800a331 	.word	0x0800a331
 800a28c:	0800a1ed 	.word	0x0800a1ed
 800a290:	0800a1ed 	.word	0x0800a1ed
 800a294:	0800a2e7 	.word	0x0800a2e7
 800a298:	3b45      	subs	r3, #69	; 0x45
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d8a6      	bhi.n	800a1ec <__ssvfiscanf_r+0xd4>
 800a29e:	2305      	movs	r3, #5
 800a2a0:	e02b      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a2a2:	6863      	ldr	r3, [r4, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd0d      	ble.n	800a2c4 <__ssvfiscanf_r+0x1ac>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	4552      	cmp	r2, sl
 800a2ae:	f040 80a1 	bne.w	800a3f4 <__ssvfiscanf_r+0x2dc>
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	6862      	ldr	r2, [r4, #4]
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a2ba:	3a01      	subs	r2, #1
 800a2bc:	3301      	adds	r3, #1
 800a2be:	6062      	str	r2, [r4, #4]
 800a2c0:	9345      	str	r3, [sp, #276]	; 0x114
 800a2c2:	e752      	b.n	800a16a <__ssvfiscanf_r+0x52>
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2ca:	4798      	blx	r3
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d0eb      	beq.n	800a2a8 <__ssvfiscanf_r+0x190>
 800a2d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f040 8084 	bne.w	800a3e0 <__ssvfiscanf_r+0x2c8>
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	e086      	b.n	800a3ec <__ssvfiscanf_r+0x2d4>
 800a2de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2e0:	f042 0220 	orr.w	r2, r2, #32
 800a2e4:	9241      	str	r2, [sp, #260]	; 0x104
 800a2e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ec:	9241      	str	r2, [sp, #260]	; 0x104
 800a2ee:	2210      	movs	r2, #16
 800a2f0:	2b6f      	cmp	r3, #111	; 0x6f
 800a2f2:	bf34      	ite	cc
 800a2f4:	2303      	movcc	r3, #3
 800a2f6:	2304      	movcs	r3, #4
 800a2f8:	9242      	str	r2, [sp, #264]	; 0x108
 800a2fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2fc:	6863      	ldr	r3, [r4, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dd41      	ble.n	800a386 <__ssvfiscanf_r+0x26e>
 800a302:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a304:	0659      	lsls	r1, r3, #25
 800a306:	d404      	bmi.n	800a312 <__ssvfiscanf_r+0x1fa>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	5cba      	ldrb	r2, [r7, r2]
 800a30e:	0712      	lsls	r2, r2, #28
 800a310:	d440      	bmi.n	800a394 <__ssvfiscanf_r+0x27c>
 800a312:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a314:	2b02      	cmp	r3, #2
 800a316:	dc4f      	bgt.n	800a3b8 <__ssvfiscanf_r+0x2a0>
 800a318:	466b      	mov	r3, sp
 800a31a:	4622      	mov	r2, r4
 800a31c:	4630      	mov	r0, r6
 800a31e:	a941      	add	r1, sp, #260	; 0x104
 800a320:	f000 fb62 	bl	800a9e8 <_scanf_chars>
 800a324:	2801      	cmp	r0, #1
 800a326:	d065      	beq.n	800a3f4 <__ssvfiscanf_r+0x2dc>
 800a328:	2802      	cmp	r0, #2
 800a32a:	f47f af1e 	bne.w	800a16a <__ssvfiscanf_r+0x52>
 800a32e:	e7cf      	b.n	800a2d0 <__ssvfiscanf_r+0x1b8>
 800a330:	220a      	movs	r2, #10
 800a332:	e7dd      	b.n	800a2f0 <__ssvfiscanf_r+0x1d8>
 800a334:	2300      	movs	r3, #0
 800a336:	9342      	str	r3, [sp, #264]	; 0x108
 800a338:	2303      	movs	r3, #3
 800a33a:	e7de      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a33c:	2308      	movs	r3, #8
 800a33e:	9342      	str	r3, [sp, #264]	; 0x108
 800a340:	2304      	movs	r3, #4
 800a342:	e7da      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a344:	4629      	mov	r1, r5
 800a346:	4640      	mov	r0, r8
 800a348:	f000 fcaa 	bl	800aca0 <__sccl>
 800a34c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a34e:	4605      	mov	r5, r0
 800a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a354:	9341      	str	r3, [sp, #260]	; 0x104
 800a356:	2301      	movs	r3, #1
 800a358:	e7cf      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a35a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	9341      	str	r3, [sp, #260]	; 0x104
 800a362:	2300      	movs	r3, #0
 800a364:	e7c9      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a366:	2302      	movs	r3, #2
 800a368:	e7c7      	b.n	800a2fa <__ssvfiscanf_r+0x1e2>
 800a36a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a36c:	06c3      	lsls	r3, r0, #27
 800a36e:	f53f aefc 	bmi.w	800a16a <__ssvfiscanf_r+0x52>
 800a372:	9b00      	ldr	r3, [sp, #0]
 800a374:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a376:	1d19      	adds	r1, r3, #4
 800a378:	9100      	str	r1, [sp, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	07c0      	lsls	r0, r0, #31
 800a37e:	bf4c      	ite	mi
 800a380:	801a      	strhmi	r2, [r3, #0]
 800a382:	601a      	strpl	r2, [r3, #0]
 800a384:	e6f1      	b.n	800a16a <__ssvfiscanf_r+0x52>
 800a386:	4621      	mov	r1, r4
 800a388:	4630      	mov	r0, r6
 800a38a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a38c:	4798      	blx	r3
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0b7      	beq.n	800a302 <__ssvfiscanf_r+0x1ea>
 800a392:	e79d      	b.n	800a2d0 <__ssvfiscanf_r+0x1b8>
 800a394:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a396:	3201      	adds	r2, #1
 800a398:	9245      	str	r2, [sp, #276]	; 0x114
 800a39a:	6862      	ldr	r2, [r4, #4]
 800a39c:	3a01      	subs	r2, #1
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	6062      	str	r2, [r4, #4]
 800a3a2:	dd02      	ble.n	800a3aa <__ssvfiscanf_r+0x292>
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	e7ae      	b.n	800a308 <__ssvfiscanf_r+0x1f0>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3b0:	4798      	blx	r3
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0a8      	beq.n	800a308 <__ssvfiscanf_r+0x1f0>
 800a3b6:	e78b      	b.n	800a2d0 <__ssvfiscanf_r+0x1b8>
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	dc06      	bgt.n	800a3ca <__ssvfiscanf_r+0x2b2>
 800a3bc:	466b      	mov	r3, sp
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	a941      	add	r1, sp, #260	; 0x104
 800a3c4:	f000 fb68 	bl	800aa98 <_scanf_i>
 800a3c8:	e7ac      	b.n	800a324 <__ssvfiscanf_r+0x20c>
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <__ssvfiscanf_r+0x2f0>)
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f43f aecc 	beq.w	800a16a <__ssvfiscanf_r+0x52>
 800a3d2:	466b      	mov	r3, sp
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	a941      	add	r1, sp, #260	; 0x104
 800a3da:	f3af 8000 	nop.w
 800a3de:	e7a1      	b.n	800a324 <__ssvfiscanf_r+0x20c>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3e6:	bf18      	it	ne
 800a3e8:	f04f 30ff 	movne.w	r0, #4294967295
 800a3ec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a3f6:	e7f9      	b.n	800a3ec <__ssvfiscanf_r+0x2d4>
 800a3f8:	0800a065 	.word	0x0800a065
 800a3fc:	0800a0df 	.word	0x0800a0df
 800a400:	0800b8bc 	.word	0x0800b8bc
 800a404:	0800b9bc 	.word	0x0800b9bc
 800a408:	00000000 	.word	0x00000000

0800a40c <__sfputc_r>:
 800a40c:	6893      	ldr	r3, [r2, #8]
 800a40e:	b410      	push	{r4}
 800a410:	3b01      	subs	r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	6093      	str	r3, [r2, #8]
 800a416:	da07      	bge.n	800a428 <__sfputc_r+0x1c>
 800a418:	6994      	ldr	r4, [r2, #24]
 800a41a:	42a3      	cmp	r3, r4
 800a41c:	db01      	blt.n	800a422 <__sfputc_r+0x16>
 800a41e:	290a      	cmp	r1, #10
 800a420:	d102      	bne.n	800a428 <__sfputc_r+0x1c>
 800a422:	bc10      	pop	{r4}
 800a424:	f000 bd2c 	b.w	800ae80 <__swbuf_r>
 800a428:	6813      	ldr	r3, [r2, #0]
 800a42a:	1c58      	adds	r0, r3, #1
 800a42c:	6010      	str	r0, [r2, #0]
 800a42e:	7019      	strb	r1, [r3, #0]
 800a430:	4608      	mov	r0, r1
 800a432:	bc10      	pop	{r4}
 800a434:	4770      	bx	lr

0800a436 <__sfputs_r>:
 800a436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a438:	4606      	mov	r6, r0
 800a43a:	460f      	mov	r7, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	18d5      	adds	r5, r2, r3
 800a440:	42ac      	cmp	r4, r5
 800a442:	d101      	bne.n	800a448 <__sfputs_r+0x12>
 800a444:	2000      	movs	r0, #0
 800a446:	e007      	b.n	800a458 <__sfputs_r+0x22>
 800a448:	463a      	mov	r2, r7
 800a44a:	4630      	mov	r0, r6
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	f7ff ffdc 	bl	800a40c <__sfputc_r>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d1f3      	bne.n	800a440 <__sfputs_r+0xa>
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a45c <_vfiprintf_r>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	460d      	mov	r5, r1
 800a462:	4614      	mov	r4, r2
 800a464:	4698      	mov	r8, r3
 800a466:	4606      	mov	r6, r0
 800a468:	b09d      	sub	sp, #116	; 0x74
 800a46a:	b118      	cbz	r0, 800a474 <_vfiprintf_r+0x18>
 800a46c:	6983      	ldr	r3, [r0, #24]
 800a46e:	b90b      	cbnz	r3, 800a474 <_vfiprintf_r+0x18>
 800a470:	f000 fee8 	bl	800b244 <__sinit>
 800a474:	4b89      	ldr	r3, [pc, #548]	; (800a69c <_vfiprintf_r+0x240>)
 800a476:	429d      	cmp	r5, r3
 800a478:	d11b      	bne.n	800a4b2 <_vfiprintf_r+0x56>
 800a47a:	6875      	ldr	r5, [r6, #4]
 800a47c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a47e:	07d9      	lsls	r1, r3, #31
 800a480:	d405      	bmi.n	800a48e <_vfiprintf_r+0x32>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d402      	bmi.n	800a48e <_vfiprintf_r+0x32>
 800a488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48a:	f000 ff79 	bl	800b380 <__retarget_lock_acquire_recursive>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	071b      	lsls	r3, r3, #28
 800a492:	d501      	bpl.n	800a498 <_vfiprintf_r+0x3c>
 800a494:	692b      	ldr	r3, [r5, #16]
 800a496:	b9eb      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x78>
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 fd42 	bl	800af24 <__swsetup_r>
 800a4a0:	b1c0      	cbz	r0, 800a4d4 <_vfiprintf_r+0x78>
 800a4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a4:	07dc      	lsls	r4, r3, #31
 800a4a6:	d50e      	bpl.n	800a4c6 <_vfiprintf_r+0x6a>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	b01d      	add	sp, #116	; 0x74
 800a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b2:	4b7b      	ldr	r3, [pc, #492]	; (800a6a0 <_vfiprintf_r+0x244>)
 800a4b4:	429d      	cmp	r5, r3
 800a4b6:	d101      	bne.n	800a4bc <_vfiprintf_r+0x60>
 800a4b8:	68b5      	ldr	r5, [r6, #8]
 800a4ba:	e7df      	b.n	800a47c <_vfiprintf_r+0x20>
 800a4bc:	4b79      	ldr	r3, [pc, #484]	; (800a6a4 <_vfiprintf_r+0x248>)
 800a4be:	429d      	cmp	r5, r3
 800a4c0:	bf08      	it	eq
 800a4c2:	68f5      	ldreq	r5, [r6, #12]
 800a4c4:	e7da      	b.n	800a47c <_vfiprintf_r+0x20>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	0598      	lsls	r0, r3, #22
 800a4ca:	d4ed      	bmi.n	800a4a8 <_vfiprintf_r+0x4c>
 800a4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ce:	f000 ff58 	bl	800b382 <__retarget_lock_release_recursive>
 800a4d2:	e7e9      	b.n	800a4a8 <_vfiprintf_r+0x4c>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4de:	2330      	movs	r3, #48	; 0x30
 800a4e0:	f04f 0901 	mov.w	r9, #1
 800a4e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a6a8 <_vfiprintf_r+0x24c>
 800a4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	469a      	mov	sl, r3
 800a4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f8:	b10a      	cbz	r2, 800a4fe <_vfiprintf_r+0xa2>
 800a4fa:	2a25      	cmp	r2, #37	; 0x25
 800a4fc:	d1f9      	bne.n	800a4f2 <_vfiprintf_r+0x96>
 800a4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a502:	d00b      	beq.n	800a51c <_vfiprintf_r+0xc0>
 800a504:	465b      	mov	r3, fp
 800a506:	4622      	mov	r2, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ff93 	bl	800a436 <__sfputs_r>
 800a510:	3001      	adds	r0, #1
 800a512:	f000 80aa 	beq.w	800a66a <_vfiprintf_r+0x20e>
 800a516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a518:	445a      	add	r2, fp
 800a51a:	9209      	str	r2, [sp, #36]	; 0x24
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 80a2 	beq.w	800a66a <_vfiprintf_r+0x20e>
 800a526:	2300      	movs	r3, #0
 800a528:	f04f 32ff 	mov.w	r2, #4294967295
 800a52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a530:	f10a 0a01 	add.w	sl, sl, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a53c:	931a      	str	r3, [sp, #104]	; 0x68
 800a53e:	4654      	mov	r4, sl
 800a540:	2205      	movs	r2, #5
 800a542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a546:	4858      	ldr	r0, [pc, #352]	; (800a6a8 <_vfiprintf_r+0x24c>)
 800a548:	f000 ff80 	bl	800b44c <memchr>
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	b9d8      	cbnz	r0, 800a588 <_vfiprintf_r+0x12c>
 800a550:	06d1      	lsls	r1, r2, #27
 800a552:	bf44      	itt	mi
 800a554:	2320      	movmi	r3, #32
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	0713      	lsls	r3, r2, #28
 800a55c:	bf44      	itt	mi
 800a55e:	232b      	movmi	r3, #43	; 0x2b
 800a560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a564:	f89a 3000 	ldrb.w	r3, [sl]
 800a568:	2b2a      	cmp	r3, #42	; 0x2a
 800a56a:	d015      	beq.n	800a598 <_vfiprintf_r+0x13c>
 800a56c:	4654      	mov	r4, sl
 800a56e:	2000      	movs	r0, #0
 800a570:	f04f 0c0a 	mov.w	ip, #10
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	4621      	mov	r1, r4
 800a578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57c:	3b30      	subs	r3, #48	; 0x30
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d94e      	bls.n	800a620 <_vfiprintf_r+0x1c4>
 800a582:	b1b0      	cbz	r0, 800a5b2 <_vfiprintf_r+0x156>
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	e014      	b.n	800a5b2 <_vfiprintf_r+0x156>
 800a588:	eba0 0308 	sub.w	r3, r0, r8
 800a58c:	fa09 f303 	lsl.w	r3, r9, r3
 800a590:	4313      	orrs	r3, r2
 800a592:	46a2      	mov	sl, r4
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	e7d2      	b.n	800a53e <_vfiprintf_r+0xe2>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	1d19      	adds	r1, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	9103      	str	r1, [sp, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfbb      	ittet	lt
 800a5a4:	425b      	neglt	r3, r3
 800a5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5aa:	9307      	strge	r3, [sp, #28]
 800a5ac:	9307      	strlt	r3, [sp, #28]
 800a5ae:	bfb8      	it	lt
 800a5b0:	9204      	strlt	r2, [sp, #16]
 800a5b2:	7823      	ldrb	r3, [r4, #0]
 800a5b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b6:	d10c      	bne.n	800a5d2 <_vfiprintf_r+0x176>
 800a5b8:	7863      	ldrb	r3, [r4, #1]
 800a5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a5bc:	d135      	bne.n	800a62a <_vfiprintf_r+0x1ce>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	3402      	adds	r4, #2
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	9203      	str	r2, [sp, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfb8      	it	lt
 800a5cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6b8 <_vfiprintf_r+0x25c>
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4650      	mov	r0, sl
 800a5da:	7821      	ldrb	r1, [r4, #0]
 800a5dc:	f000 ff36 	bl	800b44c <memchr>
 800a5e0:	b140      	cbz	r0, 800a5f4 <_vfiprintf_r+0x198>
 800a5e2:	2340      	movs	r3, #64	; 0x40
 800a5e4:	eba0 000a 	sub.w	r0, r0, sl
 800a5e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	4303      	orrs	r3, r0
 800a5f2:	9304      	str	r3, [sp, #16]
 800a5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	482c      	ldr	r0, [pc, #176]	; (800a6ac <_vfiprintf_r+0x250>)
 800a5fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a600:	f000 ff24 	bl	800b44c <memchr>
 800a604:	2800      	cmp	r0, #0
 800a606:	d03f      	beq.n	800a688 <_vfiprintf_r+0x22c>
 800a608:	4b29      	ldr	r3, [pc, #164]	; (800a6b0 <_vfiprintf_r+0x254>)
 800a60a:	bb1b      	cbnz	r3, 800a654 <_vfiprintf_r+0x1f8>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	3307      	adds	r3, #7
 800a610:	f023 0307 	bic.w	r3, r3, #7
 800a614:	3308      	adds	r3, #8
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	443b      	add	r3, r7
 800a61c:	9309      	str	r3, [sp, #36]	; 0x24
 800a61e:	e767      	b.n	800a4f0 <_vfiprintf_r+0x94>
 800a620:	460c      	mov	r4, r1
 800a622:	2001      	movs	r0, #1
 800a624:	fb0c 3202 	mla	r2, ip, r2, r3
 800a628:	e7a5      	b.n	800a576 <_vfiprintf_r+0x11a>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f04f 0c0a 	mov.w	ip, #10
 800a630:	4619      	mov	r1, r3
 800a632:	3401      	adds	r4, #1
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	4620      	mov	r0, r4
 800a638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63c:	3a30      	subs	r2, #48	; 0x30
 800a63e:	2a09      	cmp	r2, #9
 800a640:	d903      	bls.n	800a64a <_vfiprintf_r+0x1ee>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0c5      	beq.n	800a5d2 <_vfiprintf_r+0x176>
 800a646:	9105      	str	r1, [sp, #20]
 800a648:	e7c3      	b.n	800a5d2 <_vfiprintf_r+0x176>
 800a64a:	4604      	mov	r4, r0
 800a64c:	2301      	movs	r3, #1
 800a64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a652:	e7f0      	b.n	800a636 <_vfiprintf_r+0x1da>
 800a654:	ab03      	add	r3, sp, #12
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	462a      	mov	r2, r5
 800a65a:	4630      	mov	r0, r6
 800a65c:	4b15      	ldr	r3, [pc, #84]	; (800a6b4 <_vfiprintf_r+0x258>)
 800a65e:	a904      	add	r1, sp, #16
 800a660:	f3af 8000 	nop.w
 800a664:	4607      	mov	r7, r0
 800a666:	1c78      	adds	r0, r7, #1
 800a668:	d1d6      	bne.n	800a618 <_vfiprintf_r+0x1bc>
 800a66a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a66c:	07d9      	lsls	r1, r3, #31
 800a66e:	d405      	bmi.n	800a67c <_vfiprintf_r+0x220>
 800a670:	89ab      	ldrh	r3, [r5, #12]
 800a672:	059a      	lsls	r2, r3, #22
 800a674:	d402      	bmi.n	800a67c <_vfiprintf_r+0x220>
 800a676:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a678:	f000 fe83 	bl	800b382 <__retarget_lock_release_recursive>
 800a67c:	89ab      	ldrh	r3, [r5, #12]
 800a67e:	065b      	lsls	r3, r3, #25
 800a680:	f53f af12 	bmi.w	800a4a8 <_vfiprintf_r+0x4c>
 800a684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a686:	e711      	b.n	800a4ac <_vfiprintf_r+0x50>
 800a688:	ab03      	add	r3, sp, #12
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	462a      	mov	r2, r5
 800a68e:	4630      	mov	r0, r6
 800a690:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <_vfiprintf_r+0x258>)
 800a692:	a904      	add	r1, sp, #16
 800a694:	f000 f882 	bl	800a79c <_printf_i>
 800a698:	e7e4      	b.n	800a664 <_vfiprintf_r+0x208>
 800a69a:	bf00      	nop
 800a69c:	0800ba2c 	.word	0x0800ba2c
 800a6a0:	0800ba4c 	.word	0x0800ba4c
 800a6a4:	0800ba0c 	.word	0x0800ba0c
 800a6a8:	0800b9c0 	.word	0x0800b9c0
 800a6ac:	0800b9c6 	.word	0x0800b9c6
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	0800a437 	.word	0x0800a437
 800a6b8:	0800b9bc 	.word	0x0800b9bc

0800a6bc <_printf_common>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	4699      	mov	r9, r3
 800a6c4:	688a      	ldr	r2, [r1, #8]
 800a6c6:	690b      	ldr	r3, [r1, #16]
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	bfb8      	it	lt
 800a6ce:	4613      	movlt	r3, r2
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6dc:	b10a      	cbz	r2, 800a6e2 <_printf_common+0x26>
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6033      	str	r3, [r6, #0]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	0699      	lsls	r1, r3, #26
 800a6e6:	bf42      	ittt	mi
 800a6e8:	6833      	ldrmi	r3, [r6, #0]
 800a6ea:	3302      	addmi	r3, #2
 800a6ec:	6033      	strmi	r3, [r6, #0]
 800a6ee:	6825      	ldr	r5, [r4, #0]
 800a6f0:	f015 0506 	ands.w	r5, r5, #6
 800a6f4:	d106      	bne.n	800a704 <_printf_common+0x48>
 800a6f6:	f104 0a19 	add.w	sl, r4, #25
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	6832      	ldr	r2, [r6, #0]
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	42ab      	cmp	r3, r5
 800a702:	dc28      	bgt.n	800a756 <_printf_common+0x9a>
 800a704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a708:	1e13      	subs	r3, r2, #0
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	bf18      	it	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	0692      	lsls	r2, r2, #26
 800a712:	d42d      	bmi.n	800a770 <_printf_common+0xb4>
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a71c:	47c0      	blx	r8
 800a71e:	3001      	adds	r0, #1
 800a720:	d020      	beq.n	800a764 <_printf_common+0xa8>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	68e5      	ldr	r5, [r4, #12]
 800a726:	f003 0306 	and.w	r3, r3, #6
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	bf18      	it	ne
 800a72e:	2500      	movne	r5, #0
 800a730:	6832      	ldr	r2, [r6, #0]
 800a732:	f04f 0600 	mov.w	r6, #0
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	bf08      	it	eq
 800a73a:	1aad      	subeq	r5, r5, r2
 800a73c:	6922      	ldr	r2, [r4, #16]
 800a73e:	bf08      	it	eq
 800a740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a744:	4293      	cmp	r3, r2
 800a746:	bfc4      	itt	gt
 800a748:	1a9b      	subgt	r3, r3, r2
 800a74a:	18ed      	addgt	r5, r5, r3
 800a74c:	341a      	adds	r4, #26
 800a74e:	42b5      	cmp	r5, r6
 800a750:	d11a      	bne.n	800a788 <_printf_common+0xcc>
 800a752:	2000      	movs	r0, #0
 800a754:	e008      	b.n	800a768 <_printf_common+0xac>
 800a756:	2301      	movs	r3, #1
 800a758:	4652      	mov	r2, sl
 800a75a:	4649      	mov	r1, r9
 800a75c:	4638      	mov	r0, r7
 800a75e:	47c0      	blx	r8
 800a760:	3001      	adds	r0, #1
 800a762:	d103      	bne.n	800a76c <_printf_common+0xb0>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76c:	3501      	adds	r5, #1
 800a76e:	e7c4      	b.n	800a6fa <_printf_common+0x3e>
 800a770:	2030      	movs	r0, #48	; 0x30
 800a772:	18e1      	adds	r1, r4, r3
 800a774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a77e:	4422      	add	r2, r4
 800a780:	3302      	adds	r3, #2
 800a782:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a786:	e7c5      	b.n	800a714 <_printf_common+0x58>
 800a788:	2301      	movs	r3, #1
 800a78a:	4622      	mov	r2, r4
 800a78c:	4649      	mov	r1, r9
 800a78e:	4638      	mov	r0, r7
 800a790:	47c0      	blx	r8
 800a792:	3001      	adds	r0, #1
 800a794:	d0e6      	beq.n	800a764 <_printf_common+0xa8>
 800a796:	3601      	adds	r6, #1
 800a798:	e7d9      	b.n	800a74e <_printf_common+0x92>
	...

0800a79c <_printf_i>:
 800a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	7e27      	ldrb	r7, [r4, #24]
 800a7a4:	4691      	mov	r9, r2
 800a7a6:	2f78      	cmp	r7, #120	; 0x78
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	469a      	mov	sl, r3
 800a7ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7b2:	d807      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7b4:	2f62      	cmp	r7, #98	; 0x62
 800a7b6:	d80a      	bhi.n	800a7ce <_printf_i+0x32>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f000 80d9 	beq.w	800a970 <_printf_i+0x1d4>
 800a7be:	2f58      	cmp	r7, #88	; 0x58
 800a7c0:	f000 80a4 	beq.w	800a90c <_printf_i+0x170>
 800a7c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7cc:	e03a      	b.n	800a844 <_printf_i+0xa8>
 800a7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7d2:	2b15      	cmp	r3, #21
 800a7d4:	d8f6      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7d6:	a001      	add	r0, pc, #4	; (adr r0, 800a7dc <_printf_i+0x40>)
 800a7d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a7c5 	.word	0x0800a7c5
 800a7e8:	0800a7c5 	.word	0x0800a7c5
 800a7ec:	0800a7c5 	.word	0x0800a7c5
 800a7f0:	0800a7c5 	.word	0x0800a7c5
 800a7f4:	0800a849 	.word	0x0800a849
 800a7f8:	0800a7c5 	.word	0x0800a7c5
 800a7fc:	0800a7c5 	.word	0x0800a7c5
 800a800:	0800a7c5 	.word	0x0800a7c5
 800a804:	0800a7c5 	.word	0x0800a7c5
 800a808:	0800a957 	.word	0x0800a957
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a939 	.word	0x0800a939
 800a814:	0800a7c5 	.word	0x0800a7c5
 800a818:	0800a7c5 	.word	0x0800a7c5
 800a81c:	0800a979 	.word	0x0800a979
 800a820:	0800a7c5 	.word	0x0800a7c5
 800a824:	0800a879 	.word	0x0800a879
 800a828:	0800a7c5 	.word	0x0800a7c5
 800a82c:	0800a7c5 	.word	0x0800a7c5
 800a830:	0800a941 	.word	0x0800a941
 800a834:	680b      	ldr	r3, [r1, #0]
 800a836:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	600a      	str	r2, [r1, #0]
 800a840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a844:	2301      	movs	r3, #1
 800a846:	e0a4      	b.n	800a992 <_printf_i+0x1f6>
 800a848:	6825      	ldr	r5, [r4, #0]
 800a84a:	6808      	ldr	r0, [r1, #0]
 800a84c:	062e      	lsls	r6, r5, #24
 800a84e:	f100 0304 	add.w	r3, r0, #4
 800a852:	d50a      	bpl.n	800a86a <_printf_i+0xce>
 800a854:	6805      	ldr	r5, [r0, #0]
 800a856:	600b      	str	r3, [r1, #0]
 800a858:	2d00      	cmp	r5, #0
 800a85a:	da03      	bge.n	800a864 <_printf_i+0xc8>
 800a85c:	232d      	movs	r3, #45	; 0x2d
 800a85e:	426d      	negs	r5, r5
 800a860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a864:	230a      	movs	r3, #10
 800a866:	485e      	ldr	r0, [pc, #376]	; (800a9e0 <_printf_i+0x244>)
 800a868:	e019      	b.n	800a89e <_printf_i+0x102>
 800a86a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a86e:	6805      	ldr	r5, [r0, #0]
 800a870:	600b      	str	r3, [r1, #0]
 800a872:	bf18      	it	ne
 800a874:	b22d      	sxthne	r5, r5
 800a876:	e7ef      	b.n	800a858 <_printf_i+0xbc>
 800a878:	680b      	ldr	r3, [r1, #0]
 800a87a:	6825      	ldr	r5, [r4, #0]
 800a87c:	1d18      	adds	r0, r3, #4
 800a87e:	6008      	str	r0, [r1, #0]
 800a880:	0628      	lsls	r0, r5, #24
 800a882:	d501      	bpl.n	800a888 <_printf_i+0xec>
 800a884:	681d      	ldr	r5, [r3, #0]
 800a886:	e002      	b.n	800a88e <_printf_i+0xf2>
 800a888:	0669      	lsls	r1, r5, #25
 800a88a:	d5fb      	bpl.n	800a884 <_printf_i+0xe8>
 800a88c:	881d      	ldrh	r5, [r3, #0]
 800a88e:	2f6f      	cmp	r7, #111	; 0x6f
 800a890:	bf0c      	ite	eq
 800a892:	2308      	moveq	r3, #8
 800a894:	230a      	movne	r3, #10
 800a896:	4852      	ldr	r0, [pc, #328]	; (800a9e0 <_printf_i+0x244>)
 800a898:	2100      	movs	r1, #0
 800a89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a89e:	6866      	ldr	r6, [r4, #4]
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	bfa8      	it	ge
 800a8a4:	6821      	ldrge	r1, [r4, #0]
 800a8a6:	60a6      	str	r6, [r4, #8]
 800a8a8:	bfa4      	itt	ge
 800a8aa:	f021 0104 	bicge.w	r1, r1, #4
 800a8ae:	6021      	strge	r1, [r4, #0]
 800a8b0:	b90d      	cbnz	r5, 800a8b6 <_printf_i+0x11a>
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d04d      	beq.n	800a952 <_printf_i+0x1b6>
 800a8b6:	4616      	mov	r6, r2
 800a8b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8bc:	fb03 5711 	mls	r7, r3, r1, r5
 800a8c0:	5dc7      	ldrb	r7, [r0, r7]
 800a8c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8c6:	462f      	mov	r7, r5
 800a8c8:	42bb      	cmp	r3, r7
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	d9f4      	bls.n	800a8b8 <_printf_i+0x11c>
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d10b      	bne.n	800a8ea <_printf_i+0x14e>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	07df      	lsls	r7, r3, #31
 800a8d6:	d508      	bpl.n	800a8ea <_printf_i+0x14e>
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	6861      	ldr	r1, [r4, #4]
 800a8dc:	4299      	cmp	r1, r3
 800a8de:	bfde      	ittt	le
 800a8e0:	2330      	movle	r3, #48	; 0x30
 800a8e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8ea:	1b92      	subs	r2, r2, r6
 800a8ec:	6122      	str	r2, [r4, #16]
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	f8cd a000 	str.w	sl, [sp]
 800a8f8:	aa03      	add	r2, sp, #12
 800a8fa:	f7ff fedf 	bl	800a6bc <_printf_common>
 800a8fe:	3001      	adds	r0, #1
 800a900:	d14c      	bne.n	800a99c <_printf_i+0x200>
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	b004      	add	sp, #16
 800a908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90c:	4834      	ldr	r0, [pc, #208]	; (800a9e0 <_printf_i+0x244>)
 800a90e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a912:	680e      	ldr	r6, [r1, #0]
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	f856 5b04 	ldr.w	r5, [r6], #4
 800a91a:	061f      	lsls	r7, r3, #24
 800a91c:	600e      	str	r6, [r1, #0]
 800a91e:	d514      	bpl.n	800a94a <_printf_i+0x1ae>
 800a920:	07d9      	lsls	r1, r3, #31
 800a922:	bf44      	itt	mi
 800a924:	f043 0320 	orrmi.w	r3, r3, #32
 800a928:	6023      	strmi	r3, [r4, #0]
 800a92a:	b91d      	cbnz	r5, 800a934 <_printf_i+0x198>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	f023 0320 	bic.w	r3, r3, #32
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	2310      	movs	r3, #16
 800a936:	e7af      	b.n	800a898 <_printf_i+0xfc>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	f043 0320 	orr.w	r3, r3, #32
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	2378      	movs	r3, #120	; 0x78
 800a942:	4828      	ldr	r0, [pc, #160]	; (800a9e4 <_printf_i+0x248>)
 800a944:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a948:	e7e3      	b.n	800a912 <_printf_i+0x176>
 800a94a:	065e      	lsls	r6, r3, #25
 800a94c:	bf48      	it	mi
 800a94e:	b2ad      	uxthmi	r5, r5
 800a950:	e7e6      	b.n	800a920 <_printf_i+0x184>
 800a952:	4616      	mov	r6, r2
 800a954:	e7bb      	b.n	800a8ce <_printf_i+0x132>
 800a956:	680b      	ldr	r3, [r1, #0]
 800a958:	6826      	ldr	r6, [r4, #0]
 800a95a:	1d1d      	adds	r5, r3, #4
 800a95c:	6960      	ldr	r0, [r4, #20]
 800a95e:	600d      	str	r5, [r1, #0]
 800a960:	0635      	lsls	r5, r6, #24
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	d501      	bpl.n	800a96a <_printf_i+0x1ce>
 800a966:	6018      	str	r0, [r3, #0]
 800a968:	e002      	b.n	800a970 <_printf_i+0x1d4>
 800a96a:	0671      	lsls	r1, r6, #25
 800a96c:	d5fb      	bpl.n	800a966 <_printf_i+0x1ca>
 800a96e:	8018      	strh	r0, [r3, #0]
 800a970:	2300      	movs	r3, #0
 800a972:	4616      	mov	r6, r2
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	e7ba      	b.n	800a8ee <_printf_i+0x152>
 800a978:	680b      	ldr	r3, [r1, #0]
 800a97a:	1d1a      	adds	r2, r3, #4
 800a97c:	600a      	str	r2, [r1, #0]
 800a97e:	681e      	ldr	r6, [r3, #0]
 800a980:	2100      	movs	r1, #0
 800a982:	4630      	mov	r0, r6
 800a984:	6862      	ldr	r2, [r4, #4]
 800a986:	f000 fd61 	bl	800b44c <memchr>
 800a98a:	b108      	cbz	r0, 800a990 <_printf_i+0x1f4>
 800a98c:	1b80      	subs	r0, r0, r6
 800a98e:	6060      	str	r0, [r4, #4]
 800a990:	6863      	ldr	r3, [r4, #4]
 800a992:	6123      	str	r3, [r4, #16]
 800a994:	2300      	movs	r3, #0
 800a996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a99a:	e7a8      	b.n	800a8ee <_printf_i+0x152>
 800a99c:	4632      	mov	r2, r6
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	47d0      	blx	sl
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d0ab      	beq.n	800a902 <_printf_i+0x166>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	079b      	lsls	r3, r3, #30
 800a9ae:	d413      	bmi.n	800a9d8 <_printf_i+0x23c>
 800a9b0:	68e0      	ldr	r0, [r4, #12]
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	4298      	cmp	r0, r3
 800a9b6:	bfb8      	it	lt
 800a9b8:	4618      	movlt	r0, r3
 800a9ba:	e7a4      	b.n	800a906 <_printf_i+0x16a>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4632      	mov	r2, r6
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	47d0      	blx	sl
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d09b      	beq.n	800a902 <_printf_i+0x166>
 800a9ca:	3501      	adds	r5, #1
 800a9cc:	68e3      	ldr	r3, [r4, #12]
 800a9ce:	9903      	ldr	r1, [sp, #12]
 800a9d0:	1a5b      	subs	r3, r3, r1
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	dcf2      	bgt.n	800a9bc <_printf_i+0x220>
 800a9d6:	e7eb      	b.n	800a9b0 <_printf_i+0x214>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	f104 0619 	add.w	r6, r4, #25
 800a9de:	e7f5      	b.n	800a9cc <_printf_i+0x230>
 800a9e0:	0800b9cd 	.word	0x0800b9cd
 800a9e4:	0800b9de 	.word	0x0800b9de

0800a9e8 <_scanf_chars>:
 800a9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	688a      	ldr	r2, [r1, #8]
 800a9f0:	4680      	mov	r8, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b932      	cbnz	r2, 800aa04 <_scanf_chars+0x1c>
 800a9f6:	698a      	ldr	r2, [r1, #24]
 800a9f8:	2a00      	cmp	r2, #0
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2201      	moveq	r2, #1
 800a9fe:	f04f 32ff 	movne.w	r2, #4294967295
 800aa02:	608a      	str	r2, [r1, #8]
 800aa04:	2700      	movs	r7, #0
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800aa94 <_scanf_chars+0xac>
 800aa0c:	06d1      	lsls	r1, r2, #27
 800aa0e:	bf5f      	itttt	pl
 800aa10:	681a      	ldrpl	r2, [r3, #0]
 800aa12:	1d11      	addpl	r1, r2, #4
 800aa14:	6019      	strpl	r1, [r3, #0]
 800aa16:	6816      	ldrpl	r6, [r2, #0]
 800aa18:	69a0      	ldr	r0, [r4, #24]
 800aa1a:	b188      	cbz	r0, 800aa40 <_scanf_chars+0x58>
 800aa1c:	2801      	cmp	r0, #1
 800aa1e:	d107      	bne.n	800aa30 <_scanf_chars+0x48>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	781a      	ldrb	r2, [r3, #0]
 800aa24:	6963      	ldr	r3, [r4, #20]
 800aa26:	5c9b      	ldrb	r3, [r3, r2]
 800aa28:	b953      	cbnz	r3, 800aa40 <_scanf_chars+0x58>
 800aa2a:	bb27      	cbnz	r7, 800aa76 <_scanf_chars+0x8e>
 800aa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa30:	2802      	cmp	r0, #2
 800aa32:	d120      	bne.n	800aa76 <_scanf_chars+0x8e>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aa3c:	071b      	lsls	r3, r3, #28
 800aa3e:	d41a      	bmi.n	800aa76 <_scanf_chars+0x8e>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	3701      	adds	r7, #1
 800aa44:	06da      	lsls	r2, r3, #27
 800aa46:	bf5e      	ittt	pl
 800aa48:	682b      	ldrpl	r3, [r5, #0]
 800aa4a:	781b      	ldrbpl	r3, [r3, #0]
 800aa4c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aa50:	682a      	ldr	r2, [r5, #0]
 800aa52:	686b      	ldr	r3, [r5, #4]
 800aa54:	3201      	adds	r2, #1
 800aa56:	602a      	str	r2, [r5, #0]
 800aa58:	68a2      	ldr	r2, [r4, #8]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	3a01      	subs	r2, #1
 800aa5e:	606b      	str	r3, [r5, #4]
 800aa60:	60a2      	str	r2, [r4, #8]
 800aa62:	b142      	cbz	r2, 800aa76 <_scanf_chars+0x8e>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dcd7      	bgt.n	800aa18 <_scanf_chars+0x30>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa70:	4798      	blx	r3
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0d0      	beq.n	800aa18 <_scanf_chars+0x30>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	f013 0310 	ands.w	r3, r3, #16
 800aa7c:	d105      	bne.n	800aa8a <_scanf_chars+0xa2>
 800aa7e:	68e2      	ldr	r2, [r4, #12]
 800aa80:	3201      	adds	r2, #1
 800aa82:	60e2      	str	r2, [r4, #12]
 800aa84:	69a2      	ldr	r2, [r4, #24]
 800aa86:	b102      	cbz	r2, 800aa8a <_scanf_chars+0xa2>
 800aa88:	7033      	strb	r3, [r6, #0]
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	441f      	add	r7, r3
 800aa90:	6127      	str	r7, [r4, #16]
 800aa92:	e7cb      	b.n	800aa2c <_scanf_chars+0x44>
 800aa94:	0800b8bc 	.word	0x0800b8bc

0800aa98 <_scanf_i>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	4698      	mov	r8, r3
 800aaa0:	4b72      	ldr	r3, [pc, #456]	; (800ac6c <_scanf_i+0x1d4>)
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	4616      	mov	r6, r2
 800aaa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aab2:	4b6f      	ldr	r3, [pc, #444]	; (800ac70 <_scanf_i+0x1d8>)
 800aab4:	69a1      	ldr	r1, [r4, #24]
 800aab6:	4a6f      	ldr	r2, [pc, #444]	; (800ac74 <_scanf_i+0x1dc>)
 800aab8:	4627      	mov	r7, r4
 800aaba:	2903      	cmp	r1, #3
 800aabc:	bf18      	it	ne
 800aabe:	461a      	movne	r2, r3
 800aac0:	68a3      	ldr	r3, [r4, #8]
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	1e5a      	subs	r2, r3, #1
 800aac6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aaca:	bf81      	itttt	hi
 800aacc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aad0:	eb03 0905 	addhi.w	r9, r3, r5
 800aad4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aad8:	60a3      	strhi	r3, [r4, #8]
 800aada:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aade:	bf98      	it	ls
 800aae0:	f04f 0900 	movls.w	r9, #0
 800aae4:	463d      	mov	r5, r7
 800aae6:	f04f 0b00 	mov.w	fp, #0
 800aaea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	6831      	ldr	r1, [r6, #0]
 800aaf2:	ab03      	add	r3, sp, #12
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	7809      	ldrb	r1, [r1, #0]
 800aaf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aafc:	f000 fca6 	bl	800b44c <memchr>
 800ab00:	b328      	cbz	r0, 800ab4e <_scanf_i+0xb6>
 800ab02:	f1bb 0f01 	cmp.w	fp, #1
 800ab06:	d159      	bne.n	800abbc <_scanf_i+0x124>
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	b92a      	cbnz	r2, 800ab18 <_scanf_i+0x80>
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	6063      	str	r3, [r4, #4]
 800ab12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab16:	6022      	str	r2, [r4, #0]
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab1e:	6022      	str	r2, [r4, #0]
 800ab20:	68a2      	ldr	r2, [r4, #8]
 800ab22:	1e51      	subs	r1, r2, #1
 800ab24:	60a1      	str	r1, [r4, #8]
 800ab26:	b192      	cbz	r2, 800ab4e <_scanf_i+0xb6>
 800ab28:	6832      	ldr	r2, [r6, #0]
 800ab2a:	1c51      	adds	r1, r2, #1
 800ab2c:	6031      	str	r1, [r6, #0]
 800ab2e:	7812      	ldrb	r2, [r2, #0]
 800ab30:	f805 2b01 	strb.w	r2, [r5], #1
 800ab34:	6872      	ldr	r2, [r6, #4]
 800ab36:	3a01      	subs	r2, #1
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	6072      	str	r2, [r6, #4]
 800ab3c:	dc07      	bgt.n	800ab4e <_scanf_i+0xb6>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4650      	mov	r0, sl
 800ab42:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ab46:	4790      	blx	r2
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f040 8085 	bne.w	800ac58 <_scanf_i+0x1c0>
 800ab4e:	f10b 0b01 	add.w	fp, fp, #1
 800ab52:	f1bb 0f03 	cmp.w	fp, #3
 800ab56:	d1cb      	bne.n	800aaf0 <_scanf_i+0x58>
 800ab58:	6863      	ldr	r3, [r4, #4]
 800ab5a:	b90b      	cbnz	r3, 800ab60 <_scanf_i+0xc8>
 800ab5c:	230a      	movs	r3, #10
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	4945      	ldr	r1, [pc, #276]	; (800ac78 <_scanf_i+0x1e0>)
 800ab64:	6960      	ldr	r0, [r4, #20]
 800ab66:	1ac9      	subs	r1, r1, r3
 800ab68:	f000 f89a 	bl	800aca0 <__sccl>
 800ab6c:	f04f 0b00 	mov.w	fp, #0
 800ab70:	68a3      	ldr	r3, [r4, #8]
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d03d      	beq.n	800abf4 <_scanf_i+0x15c>
 800ab78:	6831      	ldr	r1, [r6, #0]
 800ab7a:	6960      	ldr	r0, [r4, #20]
 800ab7c:	f891 c000 	ldrb.w	ip, [r1]
 800ab80:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d035      	beq.n	800abf4 <_scanf_i+0x15c>
 800ab88:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ab8c:	d124      	bne.n	800abd8 <_scanf_i+0x140>
 800ab8e:	0510      	lsls	r0, r2, #20
 800ab90:	d522      	bpl.n	800abd8 <_scanf_i+0x140>
 800ab92:	f10b 0b01 	add.w	fp, fp, #1
 800ab96:	f1b9 0f00 	cmp.w	r9, #0
 800ab9a:	d003      	beq.n	800aba4 <_scanf_i+0x10c>
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	f109 39ff 	add.w	r9, r9, #4294967295
 800aba2:	60a3      	str	r3, [r4, #8]
 800aba4:	6873      	ldr	r3, [r6, #4]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	6073      	str	r3, [r6, #4]
 800abac:	dd1b      	ble.n	800abe6 <_scanf_i+0x14e>
 800abae:	6833      	ldr	r3, [r6, #0]
 800abb0:	3301      	adds	r3, #1
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	e7d9      	b.n	800ab70 <_scanf_i+0xd8>
 800abbc:	f1bb 0f02 	cmp.w	fp, #2
 800abc0:	d1ae      	bne.n	800ab20 <_scanf_i+0x88>
 800abc2:	6822      	ldr	r2, [r4, #0]
 800abc4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800abc8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800abcc:	d1bf      	bne.n	800ab4e <_scanf_i+0xb6>
 800abce:	2310      	movs	r3, #16
 800abd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abd4:	6063      	str	r3, [r4, #4]
 800abd6:	e7a2      	b.n	800ab1e <_scanf_i+0x86>
 800abd8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	780b      	ldrb	r3, [r1, #0]
 800abe0:	f805 3b01 	strb.w	r3, [r5], #1
 800abe4:	e7de      	b.n	800aba4 <_scanf_i+0x10c>
 800abe6:	4631      	mov	r1, r6
 800abe8:	4650      	mov	r0, sl
 800abea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abee:	4798      	blx	r3
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d0df      	beq.n	800abb4 <_scanf_i+0x11c>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	05d9      	lsls	r1, r3, #23
 800abf8:	d50d      	bpl.n	800ac16 <_scanf_i+0x17e>
 800abfa:	42bd      	cmp	r5, r7
 800abfc:	d909      	bls.n	800ac12 <_scanf_i+0x17a>
 800abfe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac02:	4632      	mov	r2, r6
 800ac04:	4650      	mov	r0, sl
 800ac06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac0e:	4798      	blx	r3
 800ac10:	464d      	mov	r5, r9
 800ac12:	42bd      	cmp	r5, r7
 800ac14:	d028      	beq.n	800ac68 <_scanf_i+0x1d0>
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	f012 0210 	ands.w	r2, r2, #16
 800ac1c:	d113      	bne.n	800ac46 <_scanf_i+0x1ae>
 800ac1e:	702a      	strb	r2, [r5, #0]
 800ac20:	4639      	mov	r1, r7
 800ac22:	6863      	ldr	r3, [r4, #4]
 800ac24:	4650      	mov	r0, sl
 800ac26:	9e01      	ldr	r6, [sp, #4]
 800ac28:	47b0      	blx	r6
 800ac2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac2e:	6821      	ldr	r1, [r4, #0]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	f8c8 2000 	str.w	r2, [r8]
 800ac36:	f011 0f20 	tst.w	r1, #32
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	d00f      	beq.n	800ac5e <_scanf_i+0x1c6>
 800ac3e:	6018      	str	r0, [r3, #0]
 800ac40:	68e3      	ldr	r3, [r4, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	60e3      	str	r3, [r4, #12]
 800ac46:	2000      	movs	r0, #0
 800ac48:	1bed      	subs	r5, r5, r7
 800ac4a:	44ab      	add	fp, r5
 800ac4c:	6925      	ldr	r5, [r4, #16]
 800ac4e:	445d      	add	r5, fp
 800ac50:	6125      	str	r5, [r4, #16]
 800ac52:	b007      	add	sp, #28
 800ac54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	f04f 0b00 	mov.w	fp, #0
 800ac5c:	e7ca      	b.n	800abf4 <_scanf_i+0x15c>
 800ac5e:	07ca      	lsls	r2, r1, #31
 800ac60:	bf4c      	ite	mi
 800ac62:	8018      	strhmi	r0, [r3, #0]
 800ac64:	6018      	strpl	r0, [r3, #0]
 800ac66:	e7eb      	b.n	800ac40 <_scanf_i+0x1a8>
 800ac68:	2001      	movs	r0, #1
 800ac6a:	e7f2      	b.n	800ac52 <_scanf_i+0x1ba>
 800ac6c:	0800b688 	.word	0x0800b688
 800ac70:	0800ae0d 	.word	0x0800ae0d
 800ac74:	08009f15 	.word	0x08009f15
 800ac78:	0800ba08 	.word	0x0800ba08

0800ac7c <_read_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	2200      	movs	r2, #0
 800ac86:	4d05      	ldr	r5, [pc, #20]	; (800ac9c <_read_r+0x20>)
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f7f6 f847 	bl	8000d1e <_read>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_read_r+0x1e>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_read_r+0x1e>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	200016a0 	.word	0x200016a0

0800aca0 <__sccl>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	780b      	ldrb	r3, [r1, #0]
 800aca4:	4604      	mov	r4, r0
 800aca6:	2b5e      	cmp	r3, #94	; 0x5e
 800aca8:	bf13      	iteet	ne
 800acaa:	2200      	movne	r2, #0
 800acac:	2201      	moveq	r2, #1
 800acae:	784b      	ldrbeq	r3, [r1, #1]
 800acb0:	1c48      	addne	r0, r1, #1
 800acb2:	bf08      	it	eq
 800acb4:	1c88      	addeq	r0, r1, #2
 800acb6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800acba:	1e61      	subs	r1, r4, #1
 800acbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800acc0:	42a9      	cmp	r1, r5
 800acc2:	d1fb      	bne.n	800acbc <__sccl+0x1c>
 800acc4:	b90b      	cbnz	r3, 800acca <__sccl+0x2a>
 800acc6:	3801      	subs	r0, #1
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	f082 0101 	eor.w	r1, r2, #1
 800acce:	54e1      	strb	r1, [r4, r3]
 800acd0:	1c42      	adds	r2, r0, #1
 800acd2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800acd6:	4610      	mov	r0, r2
 800acd8:	2d2d      	cmp	r5, #45	; 0x2d
 800acda:	f102 36ff 	add.w	r6, r2, #4294967295
 800acde:	d006      	beq.n	800acee <__sccl+0x4e>
 800ace0:	2d5d      	cmp	r5, #93	; 0x5d
 800ace2:	d0f1      	beq.n	800acc8 <__sccl+0x28>
 800ace4:	b90d      	cbnz	r5, 800acea <__sccl+0x4a>
 800ace6:	4630      	mov	r0, r6
 800ace8:	e7ee      	b.n	800acc8 <__sccl+0x28>
 800acea:	462b      	mov	r3, r5
 800acec:	e7ef      	b.n	800acce <__sccl+0x2e>
 800acee:	7816      	ldrb	r6, [r2, #0]
 800acf0:	2e5d      	cmp	r6, #93	; 0x5d
 800acf2:	d0fa      	beq.n	800acea <__sccl+0x4a>
 800acf4:	42b3      	cmp	r3, r6
 800acf6:	dcf8      	bgt.n	800acea <__sccl+0x4a>
 800acf8:	4618      	mov	r0, r3
 800acfa:	3001      	adds	r0, #1
 800acfc:	4286      	cmp	r6, r0
 800acfe:	5421      	strb	r1, [r4, r0]
 800ad00:	dcfb      	bgt.n	800acfa <__sccl+0x5a>
 800ad02:	43d8      	mvns	r0, r3
 800ad04:	4430      	add	r0, r6
 800ad06:	42b3      	cmp	r3, r6
 800ad08:	bfa8      	it	ge
 800ad0a:	2000      	movge	r0, #0
 800ad0c:	1c5d      	adds	r5, r3, #1
 800ad0e:	182b      	adds	r3, r5, r0
 800ad10:	3202      	adds	r2, #2
 800ad12:	e7de      	b.n	800acd2 <__sccl+0x32>

0800ad14 <_strtoul_l.isra.0>:
 800ad14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad18:	468c      	mov	ip, r1
 800ad1a:	4686      	mov	lr, r0
 800ad1c:	4e3a      	ldr	r6, [pc, #232]	; (800ae08 <_strtoul_l.isra.0+0xf4>)
 800ad1e:	4660      	mov	r0, ip
 800ad20:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ad24:	5da5      	ldrb	r5, [r4, r6]
 800ad26:	f015 0508 	ands.w	r5, r5, #8
 800ad2a:	d1f8      	bne.n	800ad1e <_strtoul_l.isra.0+0xa>
 800ad2c:	2c2d      	cmp	r4, #45	; 0x2d
 800ad2e:	d134      	bne.n	800ad9a <_strtoul_l.isra.0+0x86>
 800ad30:	f04f 0801 	mov.w	r8, #1
 800ad34:	f89c 4000 	ldrb.w	r4, [ip]
 800ad38:	f100 0c02 	add.w	ip, r0, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d05e      	beq.n	800adfe <_strtoul_l.isra.0+0xea>
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d10c      	bne.n	800ad5e <_strtoul_l.isra.0+0x4a>
 800ad44:	2c30      	cmp	r4, #48	; 0x30
 800ad46:	d10a      	bne.n	800ad5e <_strtoul_l.isra.0+0x4a>
 800ad48:	f89c 0000 	ldrb.w	r0, [ip]
 800ad4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad50:	2858      	cmp	r0, #88	; 0x58
 800ad52:	d14f      	bne.n	800adf4 <_strtoul_l.isra.0+0xe0>
 800ad54:	2310      	movs	r3, #16
 800ad56:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ad5a:	f10c 0c02 	add.w	ip, ip, #2
 800ad5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ad62:	fbb7 f7f3 	udiv	r7, r7, r3
 800ad66:	2500      	movs	r5, #0
 800ad68:	fb03 f907 	mul.w	r9, r3, r7
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	ea6f 0909 	mvn.w	r9, r9
 800ad72:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ad76:	2e09      	cmp	r6, #9
 800ad78:	d818      	bhi.n	800adac <_strtoul_l.isra.0+0x98>
 800ad7a:	4634      	mov	r4, r6
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	dd24      	ble.n	800adca <_strtoul_l.isra.0+0xb6>
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	db1f      	blt.n	800adc4 <_strtoul_l.isra.0+0xb0>
 800ad84:	4287      	cmp	r7, r0
 800ad86:	d31d      	bcc.n	800adc4 <_strtoul_l.isra.0+0xb0>
 800ad88:	d101      	bne.n	800ad8e <_strtoul_l.isra.0+0x7a>
 800ad8a:	45a1      	cmp	r9, r4
 800ad8c:	db1a      	blt.n	800adc4 <_strtoul_l.isra.0+0xb0>
 800ad8e:	2501      	movs	r5, #1
 800ad90:	fb00 4003 	mla	r0, r0, r3, r4
 800ad94:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ad98:	e7eb      	b.n	800ad72 <_strtoul_l.isra.0+0x5e>
 800ad9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ad9c:	bf08      	it	eq
 800ad9e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ada2:	46a8      	mov	r8, r5
 800ada4:	bf08      	it	eq
 800ada6:	f100 0c02 	addeq.w	ip, r0, #2
 800adaa:	e7c7      	b.n	800ad3c <_strtoul_l.isra.0+0x28>
 800adac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800adb0:	2e19      	cmp	r6, #25
 800adb2:	d801      	bhi.n	800adb8 <_strtoul_l.isra.0+0xa4>
 800adb4:	3c37      	subs	r4, #55	; 0x37
 800adb6:	e7e1      	b.n	800ad7c <_strtoul_l.isra.0+0x68>
 800adb8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800adbc:	2e19      	cmp	r6, #25
 800adbe:	d804      	bhi.n	800adca <_strtoul_l.isra.0+0xb6>
 800adc0:	3c57      	subs	r4, #87	; 0x57
 800adc2:	e7db      	b.n	800ad7c <_strtoul_l.isra.0+0x68>
 800adc4:	f04f 35ff 	mov.w	r5, #4294967295
 800adc8:	e7e4      	b.n	800ad94 <_strtoul_l.isra.0+0x80>
 800adca:	2d00      	cmp	r5, #0
 800adcc:	da07      	bge.n	800adde <_strtoul_l.isra.0+0xca>
 800adce:	2322      	movs	r3, #34	; 0x22
 800add0:	f04f 30ff 	mov.w	r0, #4294967295
 800add4:	f8ce 3000 	str.w	r3, [lr]
 800add8:	b942      	cbnz	r2, 800adec <_strtoul_l.isra.0+0xd8>
 800adda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adde:	f1b8 0f00 	cmp.w	r8, #0
 800ade2:	d000      	beq.n	800ade6 <_strtoul_l.isra.0+0xd2>
 800ade4:	4240      	negs	r0, r0
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d0f7      	beq.n	800adda <_strtoul_l.isra.0+0xc6>
 800adea:	b10d      	cbz	r5, 800adf0 <_strtoul_l.isra.0+0xdc>
 800adec:	f10c 31ff 	add.w	r1, ip, #4294967295
 800adf0:	6011      	str	r1, [r2, #0]
 800adf2:	e7f2      	b.n	800adda <_strtoul_l.isra.0+0xc6>
 800adf4:	2430      	movs	r4, #48	; 0x30
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1b1      	bne.n	800ad5e <_strtoul_l.isra.0+0x4a>
 800adfa:	2308      	movs	r3, #8
 800adfc:	e7af      	b.n	800ad5e <_strtoul_l.isra.0+0x4a>
 800adfe:	2c30      	cmp	r4, #48	; 0x30
 800ae00:	d0a2      	beq.n	800ad48 <_strtoul_l.isra.0+0x34>
 800ae02:	230a      	movs	r3, #10
 800ae04:	e7ab      	b.n	800ad5e <_strtoul_l.isra.0+0x4a>
 800ae06:	bf00      	nop
 800ae08:	0800b8bc 	.word	0x0800b8bc

0800ae0c <_strtoul_r>:
 800ae0c:	f7ff bf82 	b.w	800ad14 <_strtoul_l.isra.0>

0800ae10 <__submore>:
 800ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae14:	460c      	mov	r4, r1
 800ae16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	d11b      	bne.n	800ae58 <__submore+0x48>
 800ae20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae24:	f7fe fe36 	bl	8009a94 <_malloc_r>
 800ae28:	b918      	cbnz	r0, 800ae32 <__submore+0x22>
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae36:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ae3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ae42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ae46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ae4a:	7043      	strb	r3, [r0, #1]
 800ae4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ae50:	7003      	strb	r3, [r0, #0]
 800ae52:	6020      	str	r0, [r4, #0]
 800ae54:	2000      	movs	r0, #0
 800ae56:	e7ea      	b.n	800ae2e <__submore+0x1e>
 800ae58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae5a:	0077      	lsls	r7, r6, #1
 800ae5c:	463a      	mov	r2, r7
 800ae5e:	f000 fb11 	bl	800b484 <_realloc_r>
 800ae62:	4605      	mov	r5, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d0e0      	beq.n	800ae2a <__submore+0x1a>
 800ae68:	eb00 0806 	add.w	r8, r0, r6
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4640      	mov	r0, r8
 800ae72:	f000 faf9 	bl	800b468 <memcpy>
 800ae76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ae7a:	f8c4 8000 	str.w	r8, [r4]
 800ae7e:	e7e9      	b.n	800ae54 <__submore+0x44>

0800ae80 <__swbuf_r>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	460e      	mov	r6, r1
 800ae84:	4614      	mov	r4, r2
 800ae86:	4605      	mov	r5, r0
 800ae88:	b118      	cbz	r0, 800ae92 <__swbuf_r+0x12>
 800ae8a:	6983      	ldr	r3, [r0, #24]
 800ae8c:	b90b      	cbnz	r3, 800ae92 <__swbuf_r+0x12>
 800ae8e:	f000 f9d9 	bl	800b244 <__sinit>
 800ae92:	4b21      	ldr	r3, [pc, #132]	; (800af18 <__swbuf_r+0x98>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	d12b      	bne.n	800aef0 <__swbuf_r+0x70>
 800ae98:	686c      	ldr	r4, [r5, #4]
 800ae9a:	69a3      	ldr	r3, [r4, #24]
 800ae9c:	60a3      	str	r3, [r4, #8]
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	071a      	lsls	r2, r3, #28
 800aea2:	d52f      	bpl.n	800af04 <__swbuf_r+0x84>
 800aea4:	6923      	ldr	r3, [r4, #16]
 800aea6:	b36b      	cbz	r3, 800af04 <__swbuf_r+0x84>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	b2f6      	uxtb	r6, r6
 800aeae:	1ac0      	subs	r0, r0, r3
 800aeb0:	6963      	ldr	r3, [r4, #20]
 800aeb2:	4637      	mov	r7, r6
 800aeb4:	4283      	cmp	r3, r0
 800aeb6:	dc04      	bgt.n	800aec2 <__swbuf_r+0x42>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f92e 	bl	800b11c <_fflush_r>
 800aec0:	bb30      	cbnz	r0, 800af10 <__swbuf_r+0x90>
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	3001      	adds	r0, #1
 800aec6:	3b01      	subs	r3, #1
 800aec8:	60a3      	str	r3, [r4, #8]
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	701e      	strb	r6, [r3, #0]
 800aed2:	6963      	ldr	r3, [r4, #20]
 800aed4:	4283      	cmp	r3, r0
 800aed6:	d004      	beq.n	800aee2 <__swbuf_r+0x62>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	07db      	lsls	r3, r3, #31
 800aedc:	d506      	bpl.n	800aeec <__swbuf_r+0x6c>
 800aede:	2e0a      	cmp	r6, #10
 800aee0:	d104      	bne.n	800aeec <__swbuf_r+0x6c>
 800aee2:	4621      	mov	r1, r4
 800aee4:	4628      	mov	r0, r5
 800aee6:	f000 f919 	bl	800b11c <_fflush_r>
 800aeea:	b988      	cbnz	r0, 800af10 <__swbuf_r+0x90>
 800aeec:	4638      	mov	r0, r7
 800aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <__swbuf_r+0x9c>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d101      	bne.n	800aefa <__swbuf_r+0x7a>
 800aef6:	68ac      	ldr	r4, [r5, #8]
 800aef8:	e7cf      	b.n	800ae9a <__swbuf_r+0x1a>
 800aefa:	4b09      	ldr	r3, [pc, #36]	; (800af20 <__swbuf_r+0xa0>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	bf08      	it	eq
 800af00:	68ec      	ldreq	r4, [r5, #12]
 800af02:	e7ca      	b.n	800ae9a <__swbuf_r+0x1a>
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f80c 	bl	800af24 <__swsetup_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d0cb      	beq.n	800aea8 <__swbuf_r+0x28>
 800af10:	f04f 37ff 	mov.w	r7, #4294967295
 800af14:	e7ea      	b.n	800aeec <__swbuf_r+0x6c>
 800af16:	bf00      	nop
 800af18:	0800ba2c 	.word	0x0800ba2c
 800af1c:	0800ba4c 	.word	0x0800ba4c
 800af20:	0800ba0c 	.word	0x0800ba0c

0800af24 <__swsetup_r>:
 800af24:	4b32      	ldr	r3, [pc, #200]	; (800aff0 <__swsetup_r+0xcc>)
 800af26:	b570      	push	{r4, r5, r6, lr}
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	4606      	mov	r6, r0
 800af2c:	460c      	mov	r4, r1
 800af2e:	b125      	cbz	r5, 800af3a <__swsetup_r+0x16>
 800af30:	69ab      	ldr	r3, [r5, #24]
 800af32:	b913      	cbnz	r3, 800af3a <__swsetup_r+0x16>
 800af34:	4628      	mov	r0, r5
 800af36:	f000 f985 	bl	800b244 <__sinit>
 800af3a:	4b2e      	ldr	r3, [pc, #184]	; (800aff4 <__swsetup_r+0xd0>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d10f      	bne.n	800af60 <__swsetup_r+0x3c>
 800af40:	686c      	ldr	r4, [r5, #4]
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af48:	0719      	lsls	r1, r3, #28
 800af4a:	d42c      	bmi.n	800afa6 <__swsetup_r+0x82>
 800af4c:	06dd      	lsls	r5, r3, #27
 800af4e:	d411      	bmi.n	800af74 <__swsetup_r+0x50>
 800af50:	2309      	movs	r3, #9
 800af52:	6033      	str	r3, [r6, #0]
 800af54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	e03e      	b.n	800afde <__swsetup_r+0xba>
 800af60:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <__swsetup_r+0xd4>)
 800af62:	429c      	cmp	r4, r3
 800af64:	d101      	bne.n	800af6a <__swsetup_r+0x46>
 800af66:	68ac      	ldr	r4, [r5, #8]
 800af68:	e7eb      	b.n	800af42 <__swsetup_r+0x1e>
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <__swsetup_r+0xd8>)
 800af6c:	429c      	cmp	r4, r3
 800af6e:	bf08      	it	eq
 800af70:	68ec      	ldreq	r4, [r5, #12]
 800af72:	e7e6      	b.n	800af42 <__swsetup_r+0x1e>
 800af74:	0758      	lsls	r0, r3, #29
 800af76:	d512      	bpl.n	800af9e <__swsetup_r+0x7a>
 800af78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af7a:	b141      	cbz	r1, 800af8e <__swsetup_r+0x6a>
 800af7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af80:	4299      	cmp	r1, r3
 800af82:	d002      	beq.n	800af8a <__swsetup_r+0x66>
 800af84:	4630      	mov	r0, r6
 800af86:	f7fe fd39 	bl	80099fc <_free_r>
 800af8a:	2300      	movs	r3, #0
 800af8c:	6363      	str	r3, [r4, #52]	; 0x34
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	2300      	movs	r3, #0
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f043 0308 	orr.w	r3, r3, #8
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	6923      	ldr	r3, [r4, #16]
 800afa8:	b94b      	cbnz	r3, 800afbe <__swsetup_r+0x9a>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb4:	d003      	beq.n	800afbe <__swsetup_r+0x9a>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 fa07 	bl	800b3cc <__smakebuf_r>
 800afbe:	89a0      	ldrh	r0, [r4, #12]
 800afc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afc4:	f010 0301 	ands.w	r3, r0, #1
 800afc8:	d00a      	beq.n	800afe0 <__swsetup_r+0xbc>
 800afca:	2300      	movs	r3, #0
 800afcc:	60a3      	str	r3, [r4, #8]
 800afce:	6963      	ldr	r3, [r4, #20]
 800afd0:	425b      	negs	r3, r3
 800afd2:	61a3      	str	r3, [r4, #24]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	b943      	cbnz	r3, 800afea <__swsetup_r+0xc6>
 800afd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afdc:	d1ba      	bne.n	800af54 <__swsetup_r+0x30>
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	0781      	lsls	r1, r0, #30
 800afe2:	bf58      	it	pl
 800afe4:	6963      	ldrpl	r3, [r4, #20]
 800afe6:	60a3      	str	r3, [r4, #8]
 800afe8:	e7f4      	b.n	800afd4 <__swsetup_r+0xb0>
 800afea:	2000      	movs	r0, #0
 800afec:	e7f7      	b.n	800afde <__swsetup_r+0xba>
 800afee:	bf00      	nop
 800aff0:	2000027c 	.word	0x2000027c
 800aff4:	0800ba2c 	.word	0x0800ba2c
 800aff8:	0800ba4c 	.word	0x0800ba4c
 800affc:	0800ba0c 	.word	0x0800ba0c

0800b000 <abort>:
 800b000:	2006      	movs	r0, #6
 800b002:	b508      	push	{r3, lr}
 800b004:	f000 fa8c 	bl	800b520 <raise>
 800b008:	2001      	movs	r0, #1
 800b00a:	f7f5 fe7e 	bl	8000d0a <_exit>
	...

0800b010 <__sflush_r>:
 800b010:	898a      	ldrh	r2, [r1, #12]
 800b012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b016:	4605      	mov	r5, r0
 800b018:	0710      	lsls	r0, r2, #28
 800b01a:	460c      	mov	r4, r1
 800b01c:	d458      	bmi.n	800b0d0 <__sflush_r+0xc0>
 800b01e:	684b      	ldr	r3, [r1, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dc05      	bgt.n	800b030 <__sflush_r+0x20>
 800b024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b026:	2b00      	cmp	r3, #0
 800b028:	dc02      	bgt.n	800b030 <__sflush_r+0x20>
 800b02a:	2000      	movs	r0, #0
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b032:	2e00      	cmp	r6, #0
 800b034:	d0f9      	beq.n	800b02a <__sflush_r+0x1a>
 800b036:	2300      	movs	r3, #0
 800b038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b03c:	682f      	ldr	r7, [r5, #0]
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	d032      	beq.n	800b0a8 <__sflush_r+0x98>
 800b042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	075a      	lsls	r2, r3, #29
 800b048:	d505      	bpl.n	800b056 <__sflush_r+0x46>
 800b04a:	6863      	ldr	r3, [r4, #4]
 800b04c:	1ac0      	subs	r0, r0, r3
 800b04e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b050:	b10b      	cbz	r3, 800b056 <__sflush_r+0x46>
 800b052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b054:	1ac0      	subs	r0, r0, r3
 800b056:	2300      	movs	r3, #0
 800b058:	4602      	mov	r2, r0
 800b05a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b05c:	4628      	mov	r0, r5
 800b05e:	6a21      	ldr	r1, [r4, #32]
 800b060:	47b0      	blx	r6
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	d106      	bne.n	800b076 <__sflush_r+0x66>
 800b068:	6829      	ldr	r1, [r5, #0]
 800b06a:	291d      	cmp	r1, #29
 800b06c:	d82c      	bhi.n	800b0c8 <__sflush_r+0xb8>
 800b06e:	4a2a      	ldr	r2, [pc, #168]	; (800b118 <__sflush_r+0x108>)
 800b070:	40ca      	lsrs	r2, r1
 800b072:	07d6      	lsls	r6, r2, #31
 800b074:	d528      	bpl.n	800b0c8 <__sflush_r+0xb8>
 800b076:	2200      	movs	r2, #0
 800b078:	6062      	str	r2, [r4, #4]
 800b07a:	6922      	ldr	r2, [r4, #16]
 800b07c:	04d9      	lsls	r1, r3, #19
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	d504      	bpl.n	800b08c <__sflush_r+0x7c>
 800b082:	1c42      	adds	r2, r0, #1
 800b084:	d101      	bne.n	800b08a <__sflush_r+0x7a>
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	b903      	cbnz	r3, 800b08c <__sflush_r+0x7c>
 800b08a:	6560      	str	r0, [r4, #84]	; 0x54
 800b08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b08e:	602f      	str	r7, [r5, #0]
 800b090:	2900      	cmp	r1, #0
 800b092:	d0ca      	beq.n	800b02a <__sflush_r+0x1a>
 800b094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b098:	4299      	cmp	r1, r3
 800b09a:	d002      	beq.n	800b0a2 <__sflush_r+0x92>
 800b09c:	4628      	mov	r0, r5
 800b09e:	f7fe fcad 	bl	80099fc <_free_r>
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	6360      	str	r0, [r4, #52]	; 0x34
 800b0a6:	e7c1      	b.n	800b02c <__sflush_r+0x1c>
 800b0a8:	6a21      	ldr	r1, [r4, #32]
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b0      	blx	r6
 800b0b0:	1c41      	adds	r1, r0, #1
 800b0b2:	d1c7      	bne.n	800b044 <__sflush_r+0x34>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0c4      	beq.n	800b044 <__sflush_r+0x34>
 800b0ba:	2b1d      	cmp	r3, #29
 800b0bc:	d001      	beq.n	800b0c2 <__sflush_r+0xb2>
 800b0be:	2b16      	cmp	r3, #22
 800b0c0:	d101      	bne.n	800b0c6 <__sflush_r+0xb6>
 800b0c2:	602f      	str	r7, [r5, #0]
 800b0c4:	e7b1      	b.n	800b02a <__sflush_r+0x1a>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	e7ad      	b.n	800b02c <__sflush_r+0x1c>
 800b0d0:	690f      	ldr	r7, [r1, #16]
 800b0d2:	2f00      	cmp	r7, #0
 800b0d4:	d0a9      	beq.n	800b02a <__sflush_r+0x1a>
 800b0d6:	0793      	lsls	r3, r2, #30
 800b0d8:	bf18      	it	ne
 800b0da:	2300      	movne	r3, #0
 800b0dc:	680e      	ldr	r6, [r1, #0]
 800b0de:	bf08      	it	eq
 800b0e0:	694b      	ldreq	r3, [r1, #20]
 800b0e2:	eba6 0807 	sub.w	r8, r6, r7
 800b0e6:	600f      	str	r7, [r1, #0]
 800b0e8:	608b      	str	r3, [r1, #8]
 800b0ea:	f1b8 0f00 	cmp.w	r8, #0
 800b0ee:	dd9c      	ble.n	800b02a <__sflush_r+0x1a>
 800b0f0:	4643      	mov	r3, r8
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	6a21      	ldr	r1, [r4, #32]
 800b0f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0fa:	47b0      	blx	r6
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	dc06      	bgt.n	800b10e <__sflush_r+0xfe>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	f04f 30ff 	mov.w	r0, #4294967295
 800b106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	e78e      	b.n	800b02c <__sflush_r+0x1c>
 800b10e:	4407      	add	r7, r0
 800b110:	eba8 0800 	sub.w	r8, r8, r0
 800b114:	e7e9      	b.n	800b0ea <__sflush_r+0xda>
 800b116:	bf00      	nop
 800b118:	20400001 	.word	0x20400001

0800b11c <_fflush_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	690b      	ldr	r3, [r1, #16]
 800b120:	4605      	mov	r5, r0
 800b122:	460c      	mov	r4, r1
 800b124:	b913      	cbnz	r3, 800b12c <_fflush_r+0x10>
 800b126:	2500      	movs	r5, #0
 800b128:	4628      	mov	r0, r5
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	b118      	cbz	r0, 800b136 <_fflush_r+0x1a>
 800b12e:	6983      	ldr	r3, [r0, #24]
 800b130:	b90b      	cbnz	r3, 800b136 <_fflush_r+0x1a>
 800b132:	f000 f887 	bl	800b244 <__sinit>
 800b136:	4b14      	ldr	r3, [pc, #80]	; (800b188 <_fflush_r+0x6c>)
 800b138:	429c      	cmp	r4, r3
 800b13a:	d11b      	bne.n	800b174 <_fflush_r+0x58>
 800b13c:	686c      	ldr	r4, [r5, #4]
 800b13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0ef      	beq.n	800b126 <_fflush_r+0xa>
 800b146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b148:	07d0      	lsls	r0, r2, #31
 800b14a:	d404      	bmi.n	800b156 <_fflush_r+0x3a>
 800b14c:	0599      	lsls	r1, r3, #22
 800b14e:	d402      	bmi.n	800b156 <_fflush_r+0x3a>
 800b150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b152:	f000 f915 	bl	800b380 <__retarget_lock_acquire_recursive>
 800b156:	4628      	mov	r0, r5
 800b158:	4621      	mov	r1, r4
 800b15a:	f7ff ff59 	bl	800b010 <__sflush_r>
 800b15e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b160:	4605      	mov	r5, r0
 800b162:	07da      	lsls	r2, r3, #31
 800b164:	d4e0      	bmi.n	800b128 <_fflush_r+0xc>
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	059b      	lsls	r3, r3, #22
 800b16a:	d4dd      	bmi.n	800b128 <_fflush_r+0xc>
 800b16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16e:	f000 f908 	bl	800b382 <__retarget_lock_release_recursive>
 800b172:	e7d9      	b.n	800b128 <_fflush_r+0xc>
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <_fflush_r+0x70>)
 800b176:	429c      	cmp	r4, r3
 800b178:	d101      	bne.n	800b17e <_fflush_r+0x62>
 800b17a:	68ac      	ldr	r4, [r5, #8]
 800b17c:	e7df      	b.n	800b13e <_fflush_r+0x22>
 800b17e:	4b04      	ldr	r3, [pc, #16]	; (800b190 <_fflush_r+0x74>)
 800b180:	429c      	cmp	r4, r3
 800b182:	bf08      	it	eq
 800b184:	68ec      	ldreq	r4, [r5, #12]
 800b186:	e7da      	b.n	800b13e <_fflush_r+0x22>
 800b188:	0800ba2c 	.word	0x0800ba2c
 800b18c:	0800ba4c 	.word	0x0800ba4c
 800b190:	0800ba0c 	.word	0x0800ba0c

0800b194 <std>:
 800b194:	2300      	movs	r3, #0
 800b196:	b510      	push	{r4, lr}
 800b198:	4604      	mov	r4, r0
 800b19a:	e9c0 3300 	strd	r3, r3, [r0]
 800b19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1a2:	6083      	str	r3, [r0, #8]
 800b1a4:	8181      	strh	r1, [r0, #12]
 800b1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800b1a8:	81c2      	strh	r2, [r0, #14]
 800b1aa:	6183      	str	r3, [r0, #24]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	2208      	movs	r2, #8
 800b1b0:	305c      	adds	r0, #92	; 0x5c
 800b1b2:	f7fe fc1b 	bl	80099ec <memset>
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <std+0x38>)
 800b1b8:	6224      	str	r4, [r4, #32]
 800b1ba:	6263      	str	r3, [r4, #36]	; 0x24
 800b1bc:	4b04      	ldr	r3, [pc, #16]	; (800b1d0 <std+0x3c>)
 800b1be:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <std+0x40>)
 800b1c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <std+0x44>)
 800b1c6:	6323      	str	r3, [r4, #48]	; 0x30
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	bf00      	nop
 800b1cc:	08009c99 	.word	0x08009c99
 800b1d0:	08009cbf 	.word	0x08009cbf
 800b1d4:	08009cf7 	.word	0x08009cf7
 800b1d8:	08009d1b 	.word	0x08009d1b

0800b1dc <_cleanup_r>:
 800b1dc:	4901      	ldr	r1, [pc, #4]	; (800b1e4 <_cleanup_r+0x8>)
 800b1de:	f000 b8af 	b.w	800b340 <_fwalk_reent>
 800b1e2:	bf00      	nop
 800b1e4:	0800b11d 	.word	0x0800b11d

0800b1e8 <__sfmoreglue>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	2568      	movs	r5, #104	; 0x68
 800b1ec:	1e4a      	subs	r2, r1, #1
 800b1ee:	4355      	muls	r5, r2
 800b1f0:	460e      	mov	r6, r1
 800b1f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1f6:	f7fe fc4d 	bl	8009a94 <_malloc_r>
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	b140      	cbz	r0, 800b210 <__sfmoreglue+0x28>
 800b1fe:	2100      	movs	r1, #0
 800b200:	e9c0 1600 	strd	r1, r6, [r0]
 800b204:	300c      	adds	r0, #12
 800b206:	60a0      	str	r0, [r4, #8]
 800b208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b20c:	f7fe fbee 	bl	80099ec <memset>
 800b210:	4620      	mov	r0, r4
 800b212:	bd70      	pop	{r4, r5, r6, pc}

0800b214 <__sfp_lock_acquire>:
 800b214:	4801      	ldr	r0, [pc, #4]	; (800b21c <__sfp_lock_acquire+0x8>)
 800b216:	f000 b8b3 	b.w	800b380 <__retarget_lock_acquire_recursive>
 800b21a:	bf00      	nop
 800b21c:	200016ac 	.word	0x200016ac

0800b220 <__sfp_lock_release>:
 800b220:	4801      	ldr	r0, [pc, #4]	; (800b228 <__sfp_lock_release+0x8>)
 800b222:	f000 b8ae 	b.w	800b382 <__retarget_lock_release_recursive>
 800b226:	bf00      	nop
 800b228:	200016ac 	.word	0x200016ac

0800b22c <__sinit_lock_acquire>:
 800b22c:	4801      	ldr	r0, [pc, #4]	; (800b234 <__sinit_lock_acquire+0x8>)
 800b22e:	f000 b8a7 	b.w	800b380 <__retarget_lock_acquire_recursive>
 800b232:	bf00      	nop
 800b234:	200016a7 	.word	0x200016a7

0800b238 <__sinit_lock_release>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__sinit_lock_release+0x8>)
 800b23a:	f000 b8a2 	b.w	800b382 <__retarget_lock_release_recursive>
 800b23e:	bf00      	nop
 800b240:	200016a7 	.word	0x200016a7

0800b244 <__sinit>:
 800b244:	b510      	push	{r4, lr}
 800b246:	4604      	mov	r4, r0
 800b248:	f7ff fff0 	bl	800b22c <__sinit_lock_acquire>
 800b24c:	69a3      	ldr	r3, [r4, #24]
 800b24e:	b11b      	cbz	r3, 800b258 <__sinit+0x14>
 800b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b254:	f7ff bff0 	b.w	800b238 <__sinit_lock_release>
 800b258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b25c:	6523      	str	r3, [r4, #80]	; 0x50
 800b25e:	4b13      	ldr	r3, [pc, #76]	; (800b2ac <__sinit+0x68>)
 800b260:	4a13      	ldr	r2, [pc, #76]	; (800b2b0 <__sinit+0x6c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	62a2      	str	r2, [r4, #40]	; 0x28
 800b266:	42a3      	cmp	r3, r4
 800b268:	bf08      	it	eq
 800b26a:	2301      	moveq	r3, #1
 800b26c:	4620      	mov	r0, r4
 800b26e:	bf08      	it	eq
 800b270:	61a3      	streq	r3, [r4, #24]
 800b272:	f000 f81f 	bl	800b2b4 <__sfp>
 800b276:	6060      	str	r0, [r4, #4]
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 f81b 	bl	800b2b4 <__sfp>
 800b27e:	60a0      	str	r0, [r4, #8]
 800b280:	4620      	mov	r0, r4
 800b282:	f000 f817 	bl	800b2b4 <__sfp>
 800b286:	2200      	movs	r2, #0
 800b288:	2104      	movs	r1, #4
 800b28a:	60e0      	str	r0, [r4, #12]
 800b28c:	6860      	ldr	r0, [r4, #4]
 800b28e:	f7ff ff81 	bl	800b194 <std>
 800b292:	2201      	movs	r2, #1
 800b294:	2109      	movs	r1, #9
 800b296:	68a0      	ldr	r0, [r4, #8]
 800b298:	f7ff ff7c 	bl	800b194 <std>
 800b29c:	2202      	movs	r2, #2
 800b29e:	2112      	movs	r1, #18
 800b2a0:	68e0      	ldr	r0, [r4, #12]
 800b2a2:	f7ff ff77 	bl	800b194 <std>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	61a3      	str	r3, [r4, #24]
 800b2aa:	e7d1      	b.n	800b250 <__sinit+0xc>
 800b2ac:	0800b7a4 	.word	0x0800b7a4
 800b2b0:	0800b1dd 	.word	0x0800b1dd

0800b2b4 <__sfp>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	f7ff ffac 	bl	800b214 <__sfp_lock_acquire>
 800b2bc:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <__sfp+0x84>)
 800b2be:	681e      	ldr	r6, [r3, #0]
 800b2c0:	69b3      	ldr	r3, [r6, #24]
 800b2c2:	b913      	cbnz	r3, 800b2ca <__sfp+0x16>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f7ff ffbd 	bl	800b244 <__sinit>
 800b2ca:	3648      	adds	r6, #72	; 0x48
 800b2cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	d503      	bpl.n	800b2dc <__sfp+0x28>
 800b2d4:	6833      	ldr	r3, [r6, #0]
 800b2d6:	b30b      	cbz	r3, 800b31c <__sfp+0x68>
 800b2d8:	6836      	ldr	r6, [r6, #0]
 800b2da:	e7f7      	b.n	800b2cc <__sfp+0x18>
 800b2dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2e0:	b9d5      	cbnz	r5, 800b318 <__sfp+0x64>
 800b2e2:	4b16      	ldr	r3, [pc, #88]	; (800b33c <__sfp+0x88>)
 800b2e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2e8:	60e3      	str	r3, [r4, #12]
 800b2ea:	6665      	str	r5, [r4, #100]	; 0x64
 800b2ec:	f000 f847 	bl	800b37e <__retarget_lock_init_recursive>
 800b2f0:	f7ff ff96 	bl	800b220 <__sfp_lock_release>
 800b2f4:	2208      	movs	r2, #8
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b300:	6025      	str	r5, [r4, #0]
 800b302:	61a5      	str	r5, [r4, #24]
 800b304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b308:	f7fe fb70 	bl	80099ec <memset>
 800b30c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b314:	4620      	mov	r0, r4
 800b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b318:	3468      	adds	r4, #104	; 0x68
 800b31a:	e7d9      	b.n	800b2d0 <__sfp+0x1c>
 800b31c:	2104      	movs	r1, #4
 800b31e:	4638      	mov	r0, r7
 800b320:	f7ff ff62 	bl	800b1e8 <__sfmoreglue>
 800b324:	4604      	mov	r4, r0
 800b326:	6030      	str	r0, [r6, #0]
 800b328:	2800      	cmp	r0, #0
 800b32a:	d1d5      	bne.n	800b2d8 <__sfp+0x24>
 800b32c:	f7ff ff78 	bl	800b220 <__sfp_lock_release>
 800b330:	230c      	movs	r3, #12
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	e7ee      	b.n	800b314 <__sfp+0x60>
 800b336:	bf00      	nop
 800b338:	0800b7a4 	.word	0x0800b7a4
 800b33c:	ffff0001 	.word	0xffff0001

0800b340 <_fwalk_reent>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	4606      	mov	r6, r0
 800b346:	4688      	mov	r8, r1
 800b348:	2700      	movs	r7, #0
 800b34a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b34e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b352:	f1b9 0901 	subs.w	r9, r9, #1
 800b356:	d505      	bpl.n	800b364 <_fwalk_reent+0x24>
 800b358:	6824      	ldr	r4, [r4, #0]
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	d1f7      	bne.n	800b34e <_fwalk_reent+0xe>
 800b35e:	4638      	mov	r0, r7
 800b360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b364:	89ab      	ldrh	r3, [r5, #12]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d907      	bls.n	800b37a <_fwalk_reent+0x3a>
 800b36a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b36e:	3301      	adds	r3, #1
 800b370:	d003      	beq.n	800b37a <_fwalk_reent+0x3a>
 800b372:	4629      	mov	r1, r5
 800b374:	4630      	mov	r0, r6
 800b376:	47c0      	blx	r8
 800b378:	4307      	orrs	r7, r0
 800b37a:	3568      	adds	r5, #104	; 0x68
 800b37c:	e7e9      	b.n	800b352 <_fwalk_reent+0x12>

0800b37e <__retarget_lock_init_recursive>:
 800b37e:	4770      	bx	lr

0800b380 <__retarget_lock_acquire_recursive>:
 800b380:	4770      	bx	lr

0800b382 <__retarget_lock_release_recursive>:
 800b382:	4770      	bx	lr

0800b384 <__swhatbuf_r>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	460e      	mov	r6, r1
 800b388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38c:	4614      	mov	r4, r2
 800b38e:	2900      	cmp	r1, #0
 800b390:	461d      	mov	r5, r3
 800b392:	b096      	sub	sp, #88	; 0x58
 800b394:	da07      	bge.n	800b3a6 <__swhatbuf_r+0x22>
 800b396:	2300      	movs	r3, #0
 800b398:	602b      	str	r3, [r5, #0]
 800b39a:	89b3      	ldrh	r3, [r6, #12]
 800b39c:	061a      	lsls	r2, r3, #24
 800b39e:	d410      	bmi.n	800b3c2 <__swhatbuf_r+0x3e>
 800b3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3a4:	e00e      	b.n	800b3c4 <__swhatbuf_r+0x40>
 800b3a6:	466a      	mov	r2, sp
 800b3a8:	f000 f8d6 	bl	800b558 <_fstat_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	dbf2      	blt.n	800b396 <__swhatbuf_r+0x12>
 800b3b0:	9a01      	ldr	r2, [sp, #4]
 800b3b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3ba:	425a      	negs	r2, r3
 800b3bc:	415a      	adcs	r2, r3
 800b3be:	602a      	str	r2, [r5, #0]
 800b3c0:	e7ee      	b.n	800b3a0 <__swhatbuf_r+0x1c>
 800b3c2:	2340      	movs	r3, #64	; 0x40
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	b016      	add	sp, #88	; 0x58
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}

0800b3cc <__smakebuf_r>:
 800b3cc:	898b      	ldrh	r3, [r1, #12]
 800b3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3d0:	079d      	lsls	r5, r3, #30
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	d507      	bpl.n	800b3e8 <__smakebuf_r+0x1c>
 800b3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	6163      	str	r3, [r4, #20]
 800b3e4:	b002      	add	sp, #8
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	466a      	mov	r2, sp
 800b3ea:	ab01      	add	r3, sp, #4
 800b3ec:	f7ff ffca 	bl	800b384 <__swhatbuf_r>
 800b3f0:	9900      	ldr	r1, [sp, #0]
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7fe fb4d 	bl	8009a94 <_malloc_r>
 800b3fa:	b948      	cbnz	r0, 800b410 <__smakebuf_r+0x44>
 800b3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b400:	059a      	lsls	r2, r3, #22
 800b402:	d4ef      	bmi.n	800b3e4 <__smakebuf_r+0x18>
 800b404:	f023 0303 	bic.w	r3, r3, #3
 800b408:	f043 0302 	orr.w	r3, r3, #2
 800b40c:	81a3      	strh	r3, [r4, #12]
 800b40e:	e7e3      	b.n	800b3d8 <__smakebuf_r+0xc>
 800b410:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <__smakebuf_r+0x7c>)
 800b412:	62b3      	str	r3, [r6, #40]	; 0x28
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	6020      	str	r0, [r4, #0]
 800b418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	6120      	str	r0, [r4, #16]
 800b422:	6163      	str	r3, [r4, #20]
 800b424:	9b01      	ldr	r3, [sp, #4]
 800b426:	b15b      	cbz	r3, 800b440 <__smakebuf_r+0x74>
 800b428:	4630      	mov	r0, r6
 800b42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42e:	f000 f8a5 	bl	800b57c <_isatty_r>
 800b432:	b128      	cbz	r0, 800b440 <__smakebuf_r+0x74>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	f043 0301 	orr.w	r3, r3, #1
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	89a0      	ldrh	r0, [r4, #12]
 800b442:	4305      	orrs	r5, r0
 800b444:	81a5      	strh	r5, [r4, #12]
 800b446:	e7cd      	b.n	800b3e4 <__smakebuf_r+0x18>
 800b448:	0800b1dd 	.word	0x0800b1dd

0800b44c <memchr>:
 800b44c:	4603      	mov	r3, r0
 800b44e:	b510      	push	{r4, lr}
 800b450:	b2c9      	uxtb	r1, r1
 800b452:	4402      	add	r2, r0
 800b454:	4293      	cmp	r3, r2
 800b456:	4618      	mov	r0, r3
 800b458:	d101      	bne.n	800b45e <memchr+0x12>
 800b45a:	2000      	movs	r0, #0
 800b45c:	e003      	b.n	800b466 <memchr+0x1a>
 800b45e:	7804      	ldrb	r4, [r0, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	428c      	cmp	r4, r1
 800b464:	d1f6      	bne.n	800b454 <memchr+0x8>
 800b466:	bd10      	pop	{r4, pc}

0800b468 <memcpy>:
 800b468:	440a      	add	r2, r1
 800b46a:	4291      	cmp	r1, r2
 800b46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b470:	d100      	bne.n	800b474 <memcpy+0xc>
 800b472:	4770      	bx	lr
 800b474:	b510      	push	{r4, lr}
 800b476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47a:	4291      	cmp	r1, r2
 800b47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b480:	d1f9      	bne.n	800b476 <memcpy+0xe>
 800b482:	bd10      	pop	{r4, pc}

0800b484 <_realloc_r>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	4607      	mov	r7, r0
 800b488:	4614      	mov	r4, r2
 800b48a:	460e      	mov	r6, r1
 800b48c:	b921      	cbnz	r1, 800b498 <_realloc_r+0x14>
 800b48e:	4611      	mov	r1, r2
 800b490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b494:	f7fe bafe 	b.w	8009a94 <_malloc_r>
 800b498:	b922      	cbnz	r2, 800b4a4 <_realloc_r+0x20>
 800b49a:	f7fe faaf 	bl	80099fc <_free_r>
 800b49e:	4625      	mov	r5, r4
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a4:	f000 f87a 	bl	800b59c <_malloc_usable_size_r>
 800b4a8:	42a0      	cmp	r0, r4
 800b4aa:	d20f      	bcs.n	800b4cc <_realloc_r+0x48>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f7fe faf0 	bl	8009a94 <_malloc_r>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d0f2      	beq.n	800b4a0 <_realloc_r+0x1c>
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	4622      	mov	r2, r4
 800b4be:	f7ff ffd3 	bl	800b468 <memcpy>
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7fe fa99 	bl	80099fc <_free_r>
 800b4ca:	e7e9      	b.n	800b4a0 <_realloc_r+0x1c>
 800b4cc:	4635      	mov	r5, r6
 800b4ce:	e7e7      	b.n	800b4a0 <_realloc_r+0x1c>

0800b4d0 <_raise_r>:
 800b4d0:	291f      	cmp	r1, #31
 800b4d2:	b538      	push	{r3, r4, r5, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	d904      	bls.n	800b4e4 <_raise_r+0x14>
 800b4da:	2316      	movs	r3, #22
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4e6:	b112      	cbz	r2, 800b4ee <_raise_r+0x1e>
 800b4e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4ec:	b94b      	cbnz	r3, 800b502 <_raise_r+0x32>
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f000 f830 	bl	800b554 <_getpid_r>
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4fe:	f000 b817 	b.w	800b530 <_kill_r>
 800b502:	2b01      	cmp	r3, #1
 800b504:	d00a      	beq.n	800b51c <_raise_r+0x4c>
 800b506:	1c59      	adds	r1, r3, #1
 800b508:	d103      	bne.n	800b512 <_raise_r+0x42>
 800b50a:	2316      	movs	r3, #22
 800b50c:	6003      	str	r3, [r0, #0]
 800b50e:	2001      	movs	r0, #1
 800b510:	e7e7      	b.n	800b4e2 <_raise_r+0x12>
 800b512:	2400      	movs	r4, #0
 800b514:	4628      	mov	r0, r5
 800b516:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b51a:	4798      	blx	r3
 800b51c:	2000      	movs	r0, #0
 800b51e:	e7e0      	b.n	800b4e2 <_raise_r+0x12>

0800b520 <raise>:
 800b520:	4b02      	ldr	r3, [pc, #8]	; (800b52c <raise+0xc>)
 800b522:	4601      	mov	r1, r0
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	f7ff bfd3 	b.w	800b4d0 <_raise_r>
 800b52a:	bf00      	nop
 800b52c:	2000027c 	.word	0x2000027c

0800b530 <_kill_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	2300      	movs	r3, #0
 800b534:	4d06      	ldr	r5, [pc, #24]	; (800b550 <_kill_r+0x20>)
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	4611      	mov	r1, r2
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	f7f5 fbd4 	bl	8000cea <_kill>
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	d102      	bne.n	800b54c <_kill_r+0x1c>
 800b546:	682b      	ldr	r3, [r5, #0]
 800b548:	b103      	cbz	r3, 800b54c <_kill_r+0x1c>
 800b54a:	6023      	str	r3, [r4, #0]
 800b54c:	bd38      	pop	{r3, r4, r5, pc}
 800b54e:	bf00      	nop
 800b550:	200016a0 	.word	0x200016a0

0800b554 <_getpid_r>:
 800b554:	f7f5 bbc2 	b.w	8000cdc <_getpid>

0800b558 <_fstat_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	2300      	movs	r3, #0
 800b55c:	4d06      	ldr	r5, [pc, #24]	; (800b578 <_fstat_r+0x20>)
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	4611      	mov	r1, r2
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f7f5 fc1e 	bl	8000da6 <_fstat>
 800b56a:	1c43      	adds	r3, r0, #1
 800b56c:	d102      	bne.n	800b574 <_fstat_r+0x1c>
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	b103      	cbz	r3, 800b574 <_fstat_r+0x1c>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	bf00      	nop
 800b578:	200016a0 	.word	0x200016a0

0800b57c <_isatty_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	2300      	movs	r3, #0
 800b580:	4d05      	ldr	r5, [pc, #20]	; (800b598 <_isatty_r+0x1c>)
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	f7f5 fc1c 	bl	8000dc4 <_isatty>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_isatty_r+0x1a>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_isatty_r+0x1a>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	200016a0 	.word	0x200016a0

0800b59c <_malloc_usable_size_r>:
 800b59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a0:	1f18      	subs	r0, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfbc      	itt	lt
 800b5a6:	580b      	ldrlt	r3, [r1, r0]
 800b5a8:	18c0      	addlt	r0, r0, r3
 800b5aa:	4770      	bx	lr

0800b5ac <_gettimeofday>:
 800b5ac:	2258      	movs	r2, #88	; 0x58
 800b5ae:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <_gettimeofday+0xc>)
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	4770      	bx	lr
 800b5b8:	200016a0 	.word	0x200016a0

0800b5bc <_init>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <_fini>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr
