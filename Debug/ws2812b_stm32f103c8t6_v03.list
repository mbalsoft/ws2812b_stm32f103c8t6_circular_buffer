
ws2812b_stm32f103c8t6_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b48c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba30  0800ba30  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba30  0800ba30  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba30  0800ba30  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800ba38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  200002e0  0800bd18  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800bd18  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b60  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2d  00000000  00000000  00039e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0003fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015525  00000000  00000000  0005b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec1b  00000000  00000000  00070a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff62a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  000ff680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00104c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00104c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e0 	.word	0x200002e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b580 	.word	0x0800b580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e4 	.word	0x200002e4
 8000148:	0800b580 	.word	0x0800b580

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 ffb5 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f89f 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f98b 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f96b 	bl	800045c <MX_DMA_Init>
  MX_TIM3_Init();
 8000186:	f000 f8f3 	bl	8000370 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800018a:	f008 feaf 	bl	8008eec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800018e:	2300      	movs	r3, #0
 8000190:	73fb      	strb	r3, [r7, #15]
 8000192:	e007      	b.n	80001a4 <main+0x34>
	  output_usb_buffer[ loop ] = NULL;
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	4a45      	ldr	r2, [pc, #276]	; (80002ac <main+0x13c>)
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	3301      	adds	r3, #1
 80001a2:	73fb      	strb	r3, [r7, #15]
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	d9f4      	bls.n	8000194 <main+0x24>
  }

  ws2812b_init();
 80001aa:	f000 ff3f 	bl	800102c <ws2812b_init>

  srand( (unsigned) time( NULL ));
 80001ae:	2000      	movs	r0, #0
 80001b0:	f009 fe9e 	bl	8009ef0 <time>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f009 fca8 	bl	8009b0c <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int led_loop = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	60bb      	str	r3, [r7, #8]
  uint16_t volume = 128; // max 256
 80001c0:	2380      	movs	r3, #128	; 0x80
 80001c2:	807b      	strh	r3, [r7, #2]
  uint8_t r = gamma8[ rand() % volume ];
 80001c4:	f009 fcd0 	bl	8009b68 <rand>
 80001c8:	4602      	mov	r2, r0
 80001ca:	887b      	ldrh	r3, [r7, #2]
 80001cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80001d0:	fb03 f301 	mul.w	r3, r3, r1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	4a36      	ldr	r2, [pc, #216]	; (80002b0 <main+0x140>)
 80001d8:	5cd3      	ldrb	r3, [r2, r3]
 80001da:	71fb      	strb	r3, [r7, #7]
  uint8_t g = gamma8[ rand() % volume ];
 80001dc:	f009 fcc4 	bl	8009b68 <rand>
 80001e0:	4602      	mov	r2, r0
 80001e2:	887b      	ldrh	r3, [r7, #2]
 80001e4:	fb92 f1f3 	sdiv	r1, r2, r3
 80001e8:	fb03 f301 	mul.w	r3, r3, r1
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <main+0x140>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	71bb      	strb	r3, [r7, #6]
  uint8_t b = gamma8[ rand() % volume ];
 80001f4:	f009 fcb8 	bl	8009b68 <rand>
 80001f8:	4602      	mov	r2, r0
 80001fa:	887b      	ldrh	r3, [r7, #2]
 80001fc:	fb92 f1f3 	sdiv	r1, r2, r3
 8000200:	fb03 f301 	mul.w	r3, r3, r1
 8000204:	1ad3      	subs	r3, r2, r3
 8000206:	4a2a      	ldr	r2, [pc, #168]	; (80002b0 <main+0x140>)
 8000208:	5cd3      	ldrb	r3, [r2, r3]
 800020a:	717b      	strb	r3, [r7, #5]

  while (1)
  {

	send_queue_via_usb();
 800020c:	f000 fbd8 	bl	80009c0 <send_queue_via_usb>
	HAL_Delay( 1 );
 8000210:	2001      	movs	r0, #1
 8000212:	f000 ffc9 	bl	80011a8 <HAL_Delay>

	if( effect_on_off ) counter++;
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0x144>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d005      	beq.n	800022a <main+0xba>
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <main+0x148>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	3301      	adds	r3, #1
 8000224:	b29a      	uxth	r2, r3
 8000226:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <main+0x148>)
 8000228:	801a      	strh	r2, [r3, #0]
	if( counter >= 100 && effect_on_off ) {
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <main+0x148>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	2b63      	cmp	r3, #99	; 0x63
 8000230:	d9ec      	bls.n	800020c <main+0x9c>
 8000232:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <main+0x144>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0e8      	beq.n	800020c <main+0x9c>
		counter = 0;
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <main+0x148>)
 800023c:	2200      	movs	r2, #0
 800023e:	801a      	strh	r2, [r3, #0]
		led_loop++;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	3301      	adds	r3, #1
 8000244:	60bb      	str	r3, [r7, #8]
		if( led_loop >= LED_N ) {
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2b08      	cmp	r3, #8
 800024a:	dd25      	ble.n	8000298 <main+0x128>
			led_loop = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	60bb      	str	r3, [r7, #8]
			r = gamma8[ rand() % volume ];
 8000250:	f009 fc8a 	bl	8009b68 <rand>
 8000254:	4602      	mov	r2, r0
 8000256:	887b      	ldrh	r3, [r7, #2]
 8000258:	fb92 f1f3 	sdiv	r1, r2, r3
 800025c:	fb03 f301 	mul.w	r3, r3, r1
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <main+0x140>)
 8000264:	5cd3      	ldrb	r3, [r2, r3]
 8000266:	71fb      	strb	r3, [r7, #7]
			g = gamma8[ rand() % volume ];
 8000268:	f009 fc7e 	bl	8009b68 <rand>
 800026c:	4602      	mov	r2, r0
 800026e:	887b      	ldrh	r3, [r7, #2]
 8000270:	fb92 f1f3 	sdiv	r1, r2, r3
 8000274:	fb03 f301 	mul.w	r3, r3, r1
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <main+0x140>)
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	71bb      	strb	r3, [r7, #6]
			b = gamma8[ rand() % volume ];
 8000280:	f009 fc72 	bl	8009b68 <rand>
 8000284:	4602      	mov	r2, r0
 8000286:	887b      	ldrh	r3, [r7, #2]
 8000288:	fb92 f1f3 	sdiv	r1, r2, r3
 800028c:	fb03 f301 	mul.w	r3, r3, r1
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <main+0x140>)
 8000294:	5cd3      	ldrb	r3, [r2, r3]
 8000296:	717b      	strb	r3, [r7, #5]
		}
		ws2812b_set_color( led_loop, r, g, b );
 8000298:	68b8      	ldr	r0, [r7, #8]
 800029a:	797b      	ldrb	r3, [r7, #5]
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	79f9      	ldrb	r1, [r7, #7]
 80002a0:	f000 fe14 	bl	8000ecc <ws2812b_set_color>
		ws2812b_update();
 80002a4:	f000 fe40 	bl	8000f28 <ws2812b_update>
	send_queue_via_usb();
 80002a8:	e7b0      	b.n	800020c <main+0x9c>
 80002aa:	bf00      	nop
 80002ac:	20000710 	.word	0x20000710
 80002b0:	0800b668 	.word	0x0800b668
 80002b4:	200003fe 	.word	0x200003fe
 80002b8:	20000400 	.word	0x20000400

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	; 0x50
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f009 fb70 	bl	80099b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f003 f958 	bl	80035c8 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031e:	f000 fbc7 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fbc2 	bl	8003ac8 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034a:	f000 fbb1 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f003 fd1d 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000364:	f000 fba4 	bl	8000ab0 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3750      	adds	r7, #80	; 0x50
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08e      	sub	sp, #56	; 0x38
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	f107 0320 	add.w	r3, r7, #32
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	615a      	str	r2, [r3, #20]
 800039e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003a2:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <MX_TIM3_Init+0xe8>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003b4:	2259      	movs	r2, #89	; 0x59
 80003b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c4:	4823      	ldr	r0, [pc, #140]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003c6:	f003 fd9d 	bl	8003f04 <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80003d0:	f000 fb6e 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	4619      	mov	r1, r3
 80003e0:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003e2:	f004 fa9f 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80003ec:	f000 fb60 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <MX_TIM3_Init+0xe4>)
 80003f2:	f003 fe21 	bl	8004038 <HAL_TIM_PWM_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80003fc:	f000 fb58 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000408:	f107 0320 	add.w	r3, r7, #32
 800040c:	4619      	mov	r1, r3
 800040e:	4811      	ldr	r0, [pc, #68]	; (8000454 <MX_TIM3_Init+0xe4>)
 8000410:	f004 ff00 	bl	8005214 <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800041a:	f000 fb49 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041e:	2360      	movs	r3, #96	; 0x60
 8000420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	4619      	mov	r1, r3
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <MX_TIM3_Init+0xe4>)
 8000436:	f004 f9b7 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000440:	f000 fb36 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <MX_TIM3_Init+0xe4>)
 8000446:	f000 fbc3 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 800044a:	bf00      	nop
 800044c:	3738      	adds	r7, #56	; 0x38
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000684 	.word	0x20000684
 8000458:	40000400 	.word	0x40000400

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_DMA_Init+0x38>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <MX_DMA_Init+0x38>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	2010      	movs	r0, #16
 8000480:	f000 ff8d 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000484:	2010      	movs	r0, #16
 8000486:	f000 ffa6 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <MX_GPIO_Init+0x90>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0310 	and.w	r3, r3, #16
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_GPIO_Init+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_GPIO_Init+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_GPIO_Init+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <MX_GPIO_Init+0x90>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_GPIO_Init+0x90>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_GPIO_Init+0x94>)
 80004fc:	f001 fb6e 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2302      	movs	r3, #2
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_GPIO_Init+0x94>)
 800051a:	f001 f9db 	bl	80018d4 <HAL_GPIO_Init>

}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40011000 	.word	0x40011000

08000530 <usb_transmit_fs>:

/* USER CODE BEGIN 4 */

void usb_transmit_fs( uint8_t *txBuf, uint32_t buf_len ) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	wait_for_CDC_transmit_ready();
 800053a:	f008 fe2b 	bl	8009194 <wait_for_CDC_transmit_ready>
	CDC_Transmit_FS( txBuf, buf_len );
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f008 fe01 	bl	8009148 <CDC_Transmit_FS>
//	while( CDC_Transmit_FS( txBuf, buf_len ) == USBD_BUSY ) { // USBD_OK
//		HAL_Delay( 1 );
//	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <welcome>:

void welcome(void) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( (strlen( info ) + strlen( prompt )) * sizeof( char ));
 8000556:	480e      	ldr	r0, [pc, #56]	; (8000590 <welcome+0x40>)
 8000558:	f7ff fe02 	bl	8000160 <strlen>
 800055c:	4604      	mov	r4, r0
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <welcome+0x44>)
 8000560:	f7ff fdfe 	bl	8000160 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	4423      	add	r3, r4
 8000568:	4618      	mov	r0, r3
 800056a:	f009 fa11 	bl	8009990 <malloc>
 800056e:	4603      	mov	r3, r0
 8000570:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, info );
 8000572:	4907      	ldr	r1, [pc, #28]	; (8000590 <welcome+0x40>)
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f009 fbc5 	bl	8009d04 <strcpy>
	strcat( tmp_buf, prompt );
 800057a:	4906      	ldr	r1, [pc, #24]	; (8000594 <welcome+0x44>)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f009 fbb2 	bl	8009ce6 <strcat>
	write_to_future_send_via_usb( tmp_buf );
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 fa58 	bl	8000a38 <write_to_future_send_via_usb>
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	20000008 	.word	0x20000008
 8000594:	20000000 	.word	0x20000000

08000598 <get_command>:

void get_command(void) {
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b092      	sub	sp, #72	; 0x48
 800059c:	af00      	add	r7, sp, #0
	char *out_str;
	char *result[ 5 ];
	input_usb_buffer[ in_usb_buf_pos ] = 0;
 800059e:	4ba7      	ldr	r3, [pc, #668]	; (800083c <get_command+0x2a4>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4ba6      	ldr	r3, [pc, #664]	; (8000840 <get_command+0x2a8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	5499      	strb	r1, [r3, r2]
	strcat( input_usb_buffer, " " );
 80005aa:	48a5      	ldr	r0, [pc, #660]	; (8000840 <get_command+0x2a8>)
 80005ac:	f7ff fdd8 	bl	8000160 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4ba2      	ldr	r3, [pc, #648]	; (8000840 <get_command+0x2a8>)
 80005b6:	4413      	add	r3, r2
 80005b8:	49a2      	ldr	r1, [pc, #648]	; (8000844 <get_command+0x2ac>)
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	8013      	strh	r3, [r2, #0]
	char *token = strtok( input_usb_buffer, " " );
 80005c2:	49a0      	ldr	r1, [pc, #640]	; (8000844 <get_command+0x2ac>)
 80005c4:	489e      	ldr	r0, [pc, #632]	; (8000840 <get_command+0x2a8>)
 80005c6:	f009 fba5 	bl	8009d14 <strtok>
 80005ca:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t loop = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if( token != NULL ) {
 80005d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d02f      	beq.n	8000638 <get_command+0xa0>
		while( token != NULL && loop < 5 ) {
 80005d8:	e026      	b.n	8000628 <get_command+0x90>
			result[ loop ] = malloc( strlen( token ) * sizeof( char ));
 80005da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80005dc:	f7ff fdc0 	bl	8000160 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 f9d2 	bl	8009990 <malloc>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	00a3      	lsls	r3, r4, #2
 80005f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80005f6:	440b      	add	r3, r1
 80005f8:	f843 2c24 	str.w	r2, [r3, #-36]
			strcpy( result[ loop ], token );
 80005fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000606:	4413      	add	r3, r2
 8000608:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800060c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800060e:	4618      	mov	r0, r3
 8000610:	f009 fb78 	bl	8009d04 <strcpy>
			loop++;
 8000614:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000618:	3301      	adds	r3, #1
 800061a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		    token = strtok( NULL, " " );
 800061e:	4989      	ldr	r1, [pc, #548]	; (8000844 <get_command+0x2ac>)
 8000620:	2000      	movs	r0, #0
 8000622:	f009 fb77 	bl	8009d14 <strtok>
 8000626:	6478      	str	r0, [r7, #68]	; 0x44
		while( token != NULL && loop < 5 ) {
 8000628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062a:	2b00      	cmp	r3, #0
 800062c:	d017      	beq.n	800065e <get_command+0xc6>
 800062e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000632:	2b04      	cmp	r3, #4
 8000634:	d9d1      	bls.n	80005da <get_command+0x42>
 8000636:	e012      	b.n	800065e <get_command+0xc6>
		}
	}
	else {
		result[ 0 ] = malloc( strlen( input_usb_buffer ) * sizeof( char ));
 8000638:	4881      	ldr	r0, [pc, #516]	; (8000840 <get_command+0x2a8>)
 800063a:	f7ff fd91 	bl	8000160 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	4618      	mov	r0, r3
 8000642:	f009 f9a5 	bl	8009990 <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
		strcpy( result[ 0 ], input_usb_buffer );
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	497c      	ldr	r1, [pc, #496]	; (8000840 <get_command+0x2a8>)
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fb58 	bl	8009d04 <strcpy>
		loop++;
 8000654:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000658:	3301      	adds	r3, #1
 800065a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	}

    if( strcmp( result[ 0 ], "help" ) == 0 || strcmp( result[ 0 ], "?" ) == 0 ) {
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	4979      	ldr	r1, [pc, #484]	; (8000848 <get_command+0x2b0>)
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fd72 	bl	800014c <strcmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <get_command+0xe6>
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	4976      	ldr	r1, [pc, #472]	; (800084c <get_command+0x2b4>)
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fd6a 	bl	800014c <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d110      	bne.n	80006a0 <get_command+0x108>
    	out_str = malloc( strlen( help ) * sizeof( char ));
 800067e:	4874      	ldr	r0, [pc, #464]	; (8000850 <get_command+0x2b8>)
 8000680:	f7ff fd6e 	bl	8000160 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	4618      	mov	r0, r3
 8000688:	f009 f982 	bl	8009990 <malloc>
 800068c:	4603      	mov	r3, r0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
    	strcpy( out_str, help );
 8000690:	496f      	ldr	r1, [pc, #444]	; (8000850 <get_command+0x2b8>)
 8000692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000694:	f009 fb36 	bl	8009d04 <strcpy>
    	write_to_future_send_via_usb( out_str );
 8000698:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800069a:	f000 f9cd 	bl	8000a38 <write_to_future_send_via_usb>
 800069e:	e160      	b.n	8000962 <get_command+0x3ca>
    }
    else if( strcmp( result[ 0 ], "on" ) == 0 ) {
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	496c      	ldr	r1, [pc, #432]	; (8000854 <get_command+0x2bc>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd51 	bl	800014c <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <get_command+0x126>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4868      	ldr	r0, [pc, #416]	; (8000858 <get_command+0x2c0>)
 80006b8:	f001 fa90 	bl	8001bdc <HAL_GPIO_WritePin>
 80006bc:	e162      	b.n	8000984 <get_command+0x3ec>
    }
    else if( strcmp( result[ 0 ], "off" ) == 0 ) {
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	4966      	ldr	r1, [pc, #408]	; (800085c <get_command+0x2c4>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd42 	bl	800014c <strcmp>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d106      	bne.n	80006dc <get_command+0x144>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4860      	ldr	r0, [pc, #384]	; (8000858 <get_command+0x2c0>)
 80006d6:	f001 fa81 	bl	8001bdc <HAL_GPIO_WritePin>
 80006da:	e153      	b.n	8000984 <get_command+0x3ec>
    }
    else if( strcmp( result[ 0 ], "toggle" ) == 0 ) {
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	4960      	ldr	r1, [pc, #384]	; (8000860 <get_command+0x2c8>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd33 	bl	800014c <strcmp>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d105      	bne.n	80006f8 <get_command+0x160>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 );
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4859      	ldr	r0, [pc, #356]	; (8000858 <get_command+0x2c0>)
 80006f2:	f001 fa8b 	bl	8001c0c <HAL_GPIO_TogglePin>
 80006f6:	e145      	b.n	8000984 <get_command+0x3ec>
    }
    else if( strcmp( result[ 0 ], "led" ) == 0 ) {
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	495a      	ldr	r1, [pc, #360]	; (8000864 <get_command+0x2cc>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd25 	bl	800014c <strcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 80e8 	bne.w	80008da <get_command+0x342>
    	if( loop >= 3 ) {
 800070a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800070e:	2b02      	cmp	r3, #2
 8000710:	f240 8138 	bls.w	8000984 <get_command+0x3ec>
    		uint16_t led_no = atoi( result[ 1 ]) - 1;
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	4618      	mov	r0, r3
 8000718:	f009 f90c 	bl	8009934 <atoi>
 800071c:	4603      	mov	r3, r0
 800071e:	b29b      	uxth	r3, r3
 8000720:	3b01      	subs	r3, #1
 8000722:	877b      	strh	r3, [r7, #58]	; 0x3a
    		uint32_t r = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
    		uint32_t g = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    		uint32_t b = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    		if( strcmp( result[ 2 ], "off" ) == 0 ) {
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	494a      	ldr	r1, [pc, #296]	; (800085c <get_command+0x2c4>)
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd09 	bl	800014c <strcmp>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d117      	bne.n	8000770 <get_command+0x1d8>
    			ws2812b_set_color( led_no, r, g, b );
 8000740:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	b2d9      	uxtb	r1, r3
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f000 fbbd 	bl	8000ecc <ws2812b_set_color>
				ws2812b_update();
 8000752:	f000 fbe9 	bl	8000f28 <ws2812b_update>
				out_str = malloc( 50 * sizeof( char ));
 8000756:	2032      	movs	r0, #50	; 0x32
 8000758:	f009 f91a 	bl	8009990 <malloc>
 800075c:	4603      	mov	r3, r0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK " );
 8000760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000762:	4a41      	ldr	r2, [pc, #260]	; (8000868 <get_command+0x2d0>)
 8000764:	6810      	ldr	r0, [r2, #0]
 8000766:	6018      	str	r0, [r3, #0]
				write_to_future_send_via_usb( out_str );
 8000768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800076a:	f000 f965 	bl	8000a38 <write_to_future_send_via_usb>
 800076e:	e109      	b.n	8000984 <get_command+0x3ec>
    		}
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 8000770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b23      	cmp	r3, #35	; 0x23
 8000776:	d17f      	bne.n	8000878 <get_command+0x2e0>
 8000778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fcf0 	bl	8000160 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	2b06      	cmp	r3, #6
 8000784:	d978      	bls.n	8000878 <get_command+0x2e0>
        		char r_str[] = "0x00";
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <get_command+0x2d4>)
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000790:	6018      	str	r0, [r3, #0]
 8000792:	3304      	adds	r3, #4
 8000794:	7019      	strb	r1, [r3, #0]
    			r_str[ 2 ] = result[ 2 ][ 1 ];
 8000796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	74bb      	strb	r3, [r7, #18]
    			r_str[ 3 ] = result[ 2 ][ 2 ];
 800079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079e:	789b      	ldrb	r3, [r3, #2]
 80007a0:	74fb      	strb	r3, [r7, #19]
    			sscanf( r_str, "%x", &r );
 80007a2:	f107 0220 	add.w	r2, r7, #32
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4931      	ldr	r1, [pc, #196]	; (8000870 <get_command+0x2d8>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f009 fa2b 	bl	8009c08 <siscanf>
        		char g_str[] = "0x00";
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <get_command+0x2d4>)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007bc:	6018      	str	r0, [r3, #0]
 80007be:	3304      	adds	r3, #4
 80007c0:	7019      	strb	r1, [r3, #0]
    			g_str[ 2 ] = result[ 2 ][ 3 ];
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	72bb      	strb	r3, [r7, #10]
    			g_str[ 3 ] = result[ 2 ][ 4 ];
 80007c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	72fb      	strb	r3, [r7, #11]
    			sscanf( g_str, "%x", &g );
 80007ce:	f107 021c 	add.w	r2, r7, #28
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4926      	ldr	r1, [pc, #152]	; (8000870 <get_command+0x2d8>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f009 fa15 	bl	8009c08 <siscanf>
        		char b_str[] = "0x00";
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <get_command+0x2d4>)
 80007e0:	463b      	mov	r3, r7
 80007e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e6:	6018      	str	r0, [r3, #0]
 80007e8:	3304      	adds	r3, #4
 80007ea:	7019      	strb	r1, [r3, #0]
    			b_str[ 2 ] = result[ 2 ][ 5 ];
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	795b      	ldrb	r3, [r3, #5]
 80007f0:	70bb      	strb	r3, [r7, #2]
    			b_str[ 3 ] = result[ 2 ][ 6 ];
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	70fb      	strb	r3, [r7, #3]
    			sscanf( b_str, "%x", &b );
 80007f8:	f107 0218 	add.w	r2, r7, #24
 80007fc:	463b      	mov	r3, r7
 80007fe:	491c      	ldr	r1, [pc, #112]	; (8000870 <get_command+0x2d8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f009 fa01 	bl	8009c08 <siscanf>
    			ws2812b_set_color( led_no, r, g, b );
 8000806:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	b2d9      	uxtb	r1, r3
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f000 fb5a 	bl	8000ecc <ws2812b_set_color>
			    ws2812b_update();
 8000818:	f000 fb86 	bl	8000f28 <ws2812b_update>
			    out_str = malloc( 50 * sizeof( char ));
 800081c:	2032      	movs	r0, #50	; 0x32
 800081e:	f009 f8b7 	bl	8009990 <malloc>
 8000822:	4603      	mov	r3, r0
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 8000826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <get_command+0x2dc>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	7892      	ldrb	r2, [r2, #2]
 800082e:	8019      	strh	r1, [r3, #0]
 8000830:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 8000832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000834:	f000 f900 	bl	8000a38 <write_to_future_send_via_usb>
    		else if( result[ 2 ][ 0 ] == '#' && strlen( result[ 2 ]) >= 7 ) {
 8000838:	e093      	b.n	8000962 <get_command+0x3ca>
 800083a:	bf00      	nop
 800083c:	200003fc 	.word	0x200003fc
 8000840:	200002fc 	.word	0x200002fc
 8000844:	0800b598 	.word	0x0800b598
 8000848:	0800b59c 	.word	0x0800b59c
 800084c:	0800b5a4 	.word	0x0800b5a4
 8000850:	2000001c 	.word	0x2000001c
 8000854:	0800b5a8 	.word	0x0800b5a8
 8000858:	40011000 	.word	0x40011000
 800085c:	0800b5ac 	.word	0x0800b5ac
 8000860:	0800b5b0 	.word	0x0800b5b0
 8000864:	0800b5b8 	.word	0x0800b5b8
 8000868:	0800b5bc 	.word	0x0800b5bc
 800086c:	0800b5ec 	.word	0x0800b5ec
 8000870:	0800b5c0 	.word	0x0800b5c0
 8000874:	0800b5c4 	.word	0x0800b5c4
    		}
    		else if( loop >= 5 ) {
 8000878:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800087c:	2b04      	cmp	r3, #4
 800087e:	f240 8081 	bls.w	8000984 <get_command+0x3ec>
    			r = atoi( result[ 2 ]);
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	4618      	mov	r0, r3
 8000886:	f009 f855 	bl	8009934 <atoi>
 800088a:	4603      	mov	r3, r0
 800088c:	623b      	str	r3, [r7, #32]
    			g = atoi( result[ 3 ]);
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	4618      	mov	r0, r3
 8000892:	f009 f84f 	bl	8009934 <atoi>
 8000896:	4603      	mov	r3, r0
 8000898:	61fb      	str	r3, [r7, #28]
    			b = atoi( result[ 4 ]);
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f849 	bl	8009934 <atoi>
 80008a2:	4603      	mov	r3, r0
 80008a4:	61bb      	str	r3, [r7, #24]
        		ws2812b_set_color( led_no, r, g, b );
 80008a6:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	b2d9      	uxtb	r1, r3
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f000 fb0a 	bl	8000ecc <ws2812b_set_color>
    			ws2812b_update();
 80008b8:	f000 fb36 	bl	8000f28 <ws2812b_update>
    			out_str = malloc( 50 * sizeof( char ));
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f009 f867 	bl	8009990 <malloc>
 80008c2:	4603      	mov	r3, r0
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
//				spritnf( out_str, "LED %d\nR = %d\nG = %d\nB = %d\n", led_no, r, g, b );
				strcpy( out_str, "OK" );
 80008c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008c8:	4a35      	ldr	r2, [pc, #212]	; (80009a0 <get_command+0x408>)
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	7892      	ldrb	r2, [r2, #2]
 80008ce:	8019      	strh	r1, [r3, #0]
 80008d0:	709a      	strb	r2, [r3, #2]
				write_to_future_send_via_usb( out_str );
 80008d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008d4:	f000 f8b0 	bl	8000a38 <write_to_future_send_via_usb>
 80008d8:	e054      	b.n	8000984 <get_command+0x3ec>
    		}
    	}
    }
    else if( strcmp( result[ 0 ], "effect" ) == 0 ) {
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	4931      	ldr	r1, [pc, #196]	; (80009a4 <get_command+0x40c>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fc34 	bl	800014c <strcmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d111      	bne.n	800090e <get_command+0x376>
    	effect_on_off = ! effect_on_off;
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <get_command+0x410>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <get_command+0x410>)
 80008fc:	701a      	strb	r2, [r3, #0]
    	if( ! effect_on_off ) counter = 0;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <get_command+0x410>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d13e      	bne.n	8000984 <get_command+0x3ec>
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <get_command+0x414>)
 8000908:	2200      	movs	r2, #0
 800090a:	801a      	strh	r2, [r3, #0]
 800090c:	e03a      	b.n	8000984 <get_command+0x3ec>
    }
    else if( strcmp( result[ 0 ], "turn" ) == 0 && strcmp( result[ 1 ], "off" ) == 0 ) {
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	4927      	ldr	r1, [pc, #156]	; (80009b0 <get_command+0x418>)
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc1a 	bl	800014c <strcmp>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d132      	bne.n	8000984 <get_command+0x3ec>
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	4924      	ldr	r1, [pc, #144]	; (80009b4 <get_command+0x41c>)
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc12 	bl	800014c <strcmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d12a      	bne.n	8000984 <get_command+0x3ec>
    	clear_led_data();
 800092e:	f000 fb9b 	bl	8001068 <clear_led_data>
    	ws2812b_update();
 8000932:	f000 faf9 	bl	8000f28 <ws2812b_update>
    	out_str = malloc( 50 * sizeof( char ));
 8000936:	2032      	movs	r0, #50	; 0x32
 8000938:	f009 f82a 	bl	8009990 <malloc>
 800093c:	4603      	mov	r3, r0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
		strcpy( out_str, "all LED's turn OFF" );
 8000940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000942:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <get_command+0x420>)
 8000944:	461d      	mov	r5, r3
 8000946:	4614      	mov	r4, r2
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	6028      	str	r0, [r5, #0]
 800094c:	6069      	str	r1, [r5, #4]
 800094e:	60aa      	str	r2, [r5, #8]
 8000950:	60eb      	str	r3, [r5, #12]
 8000952:	8823      	ldrh	r3, [r4, #0]
 8000954:	78a2      	ldrb	r2, [r4, #2]
 8000956:	822b      	strh	r3, [r5, #16]
 8000958:	4613      	mov	r3, r2
 800095a:	74ab      	strb	r3, [r5, #18]
		write_to_future_send_via_usb( out_str );
 800095c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800095e:	f000 f86b 	bl	8000a38 <write_to_future_send_via_usb>
    }

    while( loop > 0 ) {
 8000962:	e00f      	b.n	8000984 <get_command+0x3ec>
    	loop--;
 8000964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000968:	3b01      	subs	r3, #1
 800096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    	free( result[ loop ]);
 800096e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000978:	4413      	add	r3, r2
 800097a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800097e:	4618      	mov	r0, r3
 8000980:	f009 f80e 	bl	80099a0 <free>
    while( loop > 0 ) {
 8000984:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1eb      	bne.n	8000964 <get_command+0x3cc>
    }
	in_usb_buf_pos = 0;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <get_command+0x424>)
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
	send_prompt();
 8000992:	f000 f873 	bl	8000a7c <send_prompt>
}
 8000996:	bf00      	nop
 8000998:	3748      	adds	r7, #72	; 0x48
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	0800b5c4 	.word	0x0800b5c4
 80009a4:	0800b5c8 	.word	0x0800b5c8
 80009a8:	200003fe 	.word	0x200003fe
 80009ac:	20000400 	.word	0x20000400
 80009b0:	0800b5d0 	.word	0x0800b5d0
 80009b4:	0800b5ac 	.word	0x0800b5ac
 80009b8:	0800b5d8 	.word	0x0800b5d8
 80009bc:	200003fc 	.word	0x200003fc

080009c0 <send_queue_via_usb>:

void send_queue_via_usb(void) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e02b      	b.n	8000a24 <send_queue_via_usb+0x64>
		if( output_usb_buffer[ loop ] != NULL && strlen( output_usb_buffer[ loop ]) > 0 ) {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <send_queue_via_usb+0x74>)
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d022      	beq.n	8000a1e <send_queue_via_usb+0x5e>
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <send_queue_via_usb+0x74>)
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d01b      	beq.n	8000a1e <send_queue_via_usb+0x5e>
			usb_transmit_fs( output_usb_buffer[ loop ], strlen( output_usb_buffer[ loop ]));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <send_queue_via_usb+0x74>)
 80009ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <send_queue_via_usb+0x74>)
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb2 	bl	8000160 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff fd95 	bl	8000530 <usb_transmit_fs>
			free( output_usb_buffer[ loop ] );
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <send_queue_via_usb+0x74>)
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 ffc6 	bl	80099a0 <free>
			output_usb_buffer[ loop ] = NULL;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <send_queue_via_usb+0x74>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( uint8_t loop = 0; loop < USB_INPUT_QUEUE_LEN; loop++ ) {
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3301      	adds	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d9d0      	bls.n	80009cc <send_queue_via_usb+0xc>
		}
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	20000710 	.word	0x20000710

08000a38 <write_to_future_send_via_usb>:

void write_to_future_send_via_usb( char *text_to_send ) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t loop = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000a44:	e002      	b.n	8000a4c <write_to_future_send_via_usb+0x14>
		loop++;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
	while( loop < USB_INPUT_QUEUE_LEN && output_usb_buffer[ loop ] != NULL ) {
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d805      	bhi.n	8000a5e <write_to_future_send_via_usb+0x26>
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <write_to_future_send_via_usb+0x40>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f3      	bne.n	8000a46 <write_to_future_send_via_usb+0xe>
	}
	if( loop < USB_INPUT_QUEUE_LEN ) {
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d804      	bhi.n	8000a6e <write_to_future_send_via_usb+0x36>
		output_usb_buffer[ loop ] = text_to_send;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	4904      	ldr	r1, [pc, #16]	; (8000a78 <write_to_future_send_via_usb+0x40>)
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000710 	.word	0x20000710

08000a7c <send_prompt>:

void send_prompt(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	char *tmp_buf;
	tmp_buf = malloc( strlen( prompt ) * sizeof( char ));
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <send_prompt+0x30>)
 8000a84:	f7ff fb6c 	bl	8000160 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f008 ff80 	bl	8009990 <malloc>
 8000a90:	4603      	mov	r3, r0
 8000a92:	607b      	str	r3, [r7, #4]
	strcpy( tmp_buf, prompt );
 8000a94:	4905      	ldr	r1, [pc, #20]	; (8000aac <send_prompt+0x30>)
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f009 f934 	bl	8009d04 <strcpy>
	write_to_future_send_via_usb( tmp_buf );
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffcb 	bl	8000a38 <write_to_future_send_via_usb>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_MspInit+0x60>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_MspInit+0x60>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a24      	ldr	r2, [pc, #144]	; (8000bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d141      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_TIM_Base_MspInit+0xac>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b78:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b80:	f000 fc44 	bl	800140c <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b8a:	f7ff ff91 	bl	8000ab0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	201d      	movs	r0, #29
 8000bac:	f000 fbf7 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f000 fc10 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	200006cc 	.word	0x200006cc
 8000bcc:	4002006c 	.word	0x4002006c

08000bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_TIM_MspPostInit+0x58>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d117      	bne.n	8000c20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_TIM_MspPostInit+0x5c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_TIM_MspPostInit+0x5c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_TIM_MspPostInit+0x5c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_TIM_MspPostInit+0x60>)
 8000c1c:	f000 fe5a 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <HardFault_Handler+0x4>

08000c46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <BusFault_Handler+0x4>

08000c52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 fa76 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

//	__HAL_DMA_GET_COUNTER( &hdma_tim3_ch1_trig );
	ws2812b_dma_interupt();
 8000c8c:	f000 f974 	bl	8000f78 <ws2812b_dma_interupt>

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <DMA1_Channel6_IRQHandler+0x14>)
 8000c92:	f000 fceb 	bl	800166c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200006cc 	.word	0x200006cc

08000ca0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ca6:	f001 f8fb 	bl	8001ea0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200013b8 	.word	0x200013b8

08000cb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

//	inc_ic();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM3_IRQHandler+0x10>)
 8000cba:	f003 fc6d 	bl	8004598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000684 	.word	0x20000684

08000cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	return 1;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <_kill>:

int _kill(int pid, int sig)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ce0:	f008 fe2c 	bl	800993c <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2216      	movs	r2, #22
 8000ce8:	601a      	str	r2, [r3, #0]
	return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_exit>:

void _exit (int status)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffe7 	bl	8000cd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d08:	e7fe      	b.n	8000d08 <_exit+0x12>

08000d0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e00a      	b.n	8000d32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d1c:	f3af 8000 	nop.w
 8000d20:	4601      	mov	r1, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	b2ca      	uxtb	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbf0      	blt.n	8000d1c <_read+0x12>
	}

return len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e009      	b.n	8000d6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	60ba      	str	r2, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf1      	blt.n	8000d56 <_write+0x12>
	}
	return len;
 8000d72:	687b      	ldr	r3, [r7, #4]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_close>:

int _close(int file)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	return -1;
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da2:	605a      	str	r2, [r3, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <_isatty>:

int _isatty(int file)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f008 fd96 	bl	800993c <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20005000 	.word	0x20005000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000404 	.word	0x20000404
 8000e44:	200016b8 	.word	0x200016b8

08000e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <copy24bit_to_24byte>:
uint16_t led_counter = 0;


// ============================================================================================

void copy24bit_to_24byte( uint8_t *buf3byte, uint8_t *buf24byte ) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	uint8_t value;
	for( uint8_t loop3byte = 0; loop3byte < 3; loop3byte++ ) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
 8000e62:	e02a      	b.n	8000eba <copy24bit_to_24byte+0x66>
		value = buf3byte[ loop3byte ];
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	73fb      	strb	r3, [r7, #15]
		for( uint8_t loop24byte = 0; loop24byte < 8; loop24byte++ ) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	737b      	strb	r3, [r7, #13]
 8000e72:	e01c      	b.n	8000eae <copy24bit_to_24byte+0x5a>
			if (value & 0x80) {
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da09      	bge.n	8000e90 <copy24bit_to_24byte+0x3c>
				buf24byte[ (loop3byte * 8) + loop24byte ] = BIT_1_TIME;
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	00da      	lsls	r2, r3, #3
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	4413      	add	r3, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e008      	b.n	8000ea2 <copy24bit_to_24byte+0x4e>
			}
			else {
				buf24byte[ (loop3byte * 8) + loop24byte ] = BIT_0_TIME;
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	7b7b      	ldrb	r3, [r7, #13]
 8000e96:	4413      	add	r3, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
		for( uint8_t loop24byte = 0; loop24byte < 8; loop24byte++ ) {
 8000ea8:	7b7b      	ldrb	r3, [r7, #13]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	737b      	strb	r3, [r7, #13]
 8000eae:	7b7b      	ldrb	r3, [r7, #13]
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	d9df      	bls.n	8000e74 <copy24bit_to_24byte+0x20>
	for( uint8_t loop3byte = 0; loop3byte < 3; loop3byte++ ) {
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73bb      	strb	r3, [r7, #14]
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d9d1      	bls.n	8000e64 <copy24bit_to_24byte+0x10>
		}
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <ws2812b_set_color>:

void ws2812b_set_color( uint32_t led, uint8_t red, uint8_t green, uint8_t blue )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70bb      	strb	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	707b      	strb	r3, [r7, #1]
	if( led < LED_N )
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d816      	bhi.n	8000f1a <ws2812b_set_color+0x4e>
	{
		ws2812b_array[ 3 * led + 0 ] = green;
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	490b      	ldr	r1, [pc, #44]	; (8000f24 <ws2812b_set_color+0x58>)
 8000ef6:	78ba      	ldrb	r2, [r7, #2]
 8000ef8:	54ca      	strb	r2, [r1, r3]
		ws2812b_array[ 3 * led + 1 ] = red;
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	3301      	adds	r3, #1
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <ws2812b_set_color+0x58>)
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	54ca      	strb	r2, [r1, r3]
		ws2812b_array[ 3 * led + 2 ] = blue;
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	3302      	adds	r3, #2
 8000f14:	4903      	ldr	r1, [pc, #12]	; (8000f24 <ws2812b_set_color+0x58>)
 8000f16:	787a      	ldrb	r2, [r7, #1]
 8000f18:	54ca      	strb	r2, [r1, r3]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	2000043c 	.word	0x2000043c

08000f28 <ws2812b_update>:

void ws2812b_update(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	busy_indicator = 1;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <ws2812b_update+0x40>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
	led_counter = 0;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <ws2812b_update+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
	for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e006      	b.n	8000f4e <ws2812b_update+0x26>
		circular_buffer[ loop ] = 0;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <ws2812b_update+0x48>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	54d1      	strb	r1, [r2, r3]
	for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b2f      	cmp	r3, #47	; 0x2f
 8000f52:	d9f5      	bls.n	8000f40 <ws2812b_update+0x18>
	}
	HAL_TIM_PWM_Start_DMA( &htim3, TIM_CHANNEL_1, (uint32_t*) circular_buffer, sizeof( circular_buffer ));
 8000f54:	2330      	movs	r3, #48	; 0x30
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <ws2812b_update+0x48>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <ws2812b_update+0x4c>)
 8000f5c:	f003 f8c4 	bl	80040e8 <HAL_TIM_PWM_Start_DMA>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000408 	.word	0x20000408
 8000f6c:	20000458 	.word	0x20000458
 8000f70:	2000040c 	.word	0x2000040c
 8000f74:	20000684 	.word	0x20000684

08000f78 <ws2812b_dma_interupt>:

void ws2812b_dma_interupt(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	if( led_counter > LED_N ) {
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	d907      	bls.n	8000f96 <ws2812b_dma_interupt+0x1e>
		HAL_TIM_PWM_Stop_DMA( &htim3, TIM_CHANNEL_1 );
 8000f86:	2100      	movs	r1, #0
 8000f88:	4823      	ldr	r0, [pc, #140]	; (8001018 <ws2812b_dma_interupt+0xa0>)
 8000f8a:	f003 fa47 	bl	800441c <HAL_TIM_PWM_Stop_DMA>
		busy_indicator = 0;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <ws2812b_dma_interupt+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e033      	b.n	8000ffe <ws2812b_dma_interupt+0x86>
	}
	else if( led_counter == LED_N ) {
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d10d      	bne.n	8000fba <ws2812b_dma_interupt+0x42>
		for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e006      	b.n	8000fb2 <ws2812b_dma_interupt+0x3a>
			circular_buffer[ loop ] = 90;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <ws2812b_dma_interupt+0xa8>)
 8000fa8:	215a      	movs	r1, #90	; 0x5a
 8000faa:	54d1      	strb	r1, [r2, r3]
		for( uint8_t loop = 0; loop < CIRCULAR_LEN; loop++ ) {
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb6:	d9f5      	bls.n	8000fa4 <ws2812b_dma_interupt+0x2c>
 8000fb8:	e021      	b.n	8000ffe <ws2812b_dma_interupt+0x86>
		}
	}
	else {
		if( (led_counter & 0x01) == 0 ) {
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10d      	bne.n	8000fe2 <ws2812b_dma_interupt+0x6a>
			copy24bit_to_24byte( ws2812b_array + (led_counter * 3), circular_buffer + 0 );
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <ws2812b_dma_interupt+0xac>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4911      	ldr	r1, [pc, #68]	; (8001020 <ws2812b_dma_interupt+0xa8>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff3a 	bl	8000e54 <copy24bit_to_24byte>
 8000fe0:	e00d      	b.n	8000ffe <ws2812b_dma_interupt+0x86>
		}
		else {
			copy24bit_to_24byte( ws2812b_array + (led_counter * 3), circular_buffer + 24 );
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <ws2812b_dma_interupt+0xac>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <ws2812b_dma_interupt+0xb0>)
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff2b 	bl	8000e54 <copy24bit_to_24byte>
		}
	}
	led_counter++;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <ws2812b_dma_interupt+0x9c>)
 8001008:	801a      	strh	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000458 	.word	0x20000458
 8001018:	20000684 	.word	0x20000684
 800101c:	20000408 	.word	0x20000408
 8001020:	2000040c 	.word	0x2000040c
 8001024:	2000043c 	.word	0x2000043c
 8001028:	20000424 	.word	0x20000424

0800102c <ws2812b_init>:

void ws2812b_init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 8001032:	2300      	movs	r3, #0
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	e006      	b.n	8001046 <ws2812b_init+0x1a>
	  ws2812b_array[ loop ] = 0;
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <ws2812b_init+0x34>)
 800103c:	2100      	movs	r1, #0
 800103e:	54d1      	strb	r1, [r2, r3]
  for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	3301      	adds	r3, #1
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2b1a      	cmp	r3, #26
 800104a:	d9f5      	bls.n	8001038 <ws2812b_init+0xc>

  HAL_TIM_Base_Start( &htim3 );
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <ws2812b_init+0x38>)
 800104e:	f002 ffa9 	bl	8003fa4 <HAL_TIM_Base_Start>
  ws2812b_update();
 8001052:	f7ff ff69 	bl	8000f28 <ws2812b_update>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000043c 	.word	0x2000043c
 8001064:	20000684 	.word	0x20000684

08001068 <clear_led_data>:

void clear_led_data(void) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
	for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 800106e:	2300      	movs	r3, #0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	e006      	b.n	8001082 <clear_led_data+0x1a>
		  ws2812b_array[ loop ] = 0;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <clear_led_data+0x2c>)
 8001078:	2100      	movs	r1, #0
 800107a:	54d1      	strb	r1, [r2, r3]
	for( uint16_t loop = 0; loop < 3 * LED_N; loop++ )
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	3301      	adds	r3, #1
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	2b1a      	cmp	r3, #26
 8001086:	d9f5      	bls.n	8001074 <clear_led_data+0xc>
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	2000043c 	.word	0x2000043c

08001098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010be:	f7ff fec3 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f008 fc41 	bl	8009948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff f853 	bl	8000170 <main>
  bx lr
 80010ca:	4770      	bx	lr
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80010d4:	0800ba38 	.word	0x0800ba38
  ldr r2, =_sbss
 80010d8:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80010dc:	200016b4 	.word	0x200016b4

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x28>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f947 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fcdc 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f95f 	bl	80013f2 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f927 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000100 	.word	0x20000100
 8001168:	20000108 	.word	0x20000108
 800116c:	20000104 	.word	0x20000104

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x1c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x20>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000108 	.word	0x20000108
 8001190:	20000720 	.word	0x20000720

08001194 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000720 	.word	0x20000720

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff0 	bl	8001194 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffe0 	bl	8001194 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000108 	.word	0x20000108

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4906      	ldr	r1, [pc, #24]	; (8001288 <__NVIC_EnableIRQ+0x34>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff90 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff2d 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff42 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff90 	bl	80012e0 <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5f 	bl	800128c <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff35 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e043      	b.n	80014aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_DMA_Init+0xa8>)
 800142a:	4413      	add	r3, r2
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_DMA_Init+0xac>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_DMA_Init+0xb0>)
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001456:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800145a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	bffdfff8 	.word	0xbffdfff8
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	40020000 	.word	0x40020000

080014c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Start_IT+0x20>
 80014dc:	2302      	movs	r3, #2
 80014de:	e04a      	b.n	8001576 <HAL_DMA_Start_IT+0xb6>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d13a      	bne.n	8001568 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f9ae 	bl	8001878 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 020e 	orr.w	r2, r2, #14
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e00f      	b.n	8001556 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0204 	bic.w	r2, r2, #4
 8001544:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 020a 	orr.w	r2, r2, #10
 8001554:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e005      	b.n	8001574 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001570:	2302      	movs	r3, #2
 8001572:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001574:	7dfb      	ldrb	r3, [r7, #23]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001592:	2b02      	cmp	r3, #2
 8001594:	d005      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e051      	b.n	8001646 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020e 	bic.w	r2, r2, #14
 80015b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_DMA_Abort_IT+0xd0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d029      	beq.n	8001620 <HAL_DMA_Abort_IT+0xa0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_DMA_Abort_IT+0xd4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d022      	beq.n	800161c <HAL_DMA_Abort_IT+0x9c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_DMA_Abort_IT+0xd8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d01a      	beq.n	8001616 <HAL_DMA_Abort_IT+0x96>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_DMA_Abort_IT+0xdc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d012      	beq.n	8001610 <HAL_DMA_Abort_IT+0x90>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_DMA_Abort_IT+0xe0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00a      	beq.n	800160a <HAL_DMA_Abort_IT+0x8a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_DMA_Abort_IT+0xe4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d102      	bne.n	8001604 <HAL_DMA_Abort_IT+0x84>
 80015fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001602:	e00e      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 8001604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001608:	e00b      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 800160a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160e:	e008      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	e005      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 8001616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161a:	e002      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 800161c:	2310      	movs	r3, #16
 800161e:	e000      	b.n	8001622 <HAL_DMA_Abort_IT+0xa2>
 8001620:	2301      	movs	r3, #1
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_DMA_Abort_IT+0xe8>)
 8001624:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
    } 
  }
  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020008 	.word	0x40020008
 8001654:	4002001c 	.word	0x4002001c
 8001658:	40020030 	.word	0x40020030
 800165c:	40020044 	.word	0x40020044
 8001660:	40020058 	.word	0x40020058
 8001664:	4002006c 	.word	0x4002006c
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2204      	movs	r2, #4
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d04f      	beq.n	8001734 <HAL_DMA_IRQHandler+0xc8>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d04a      	beq.n	8001734 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a66      	ldr	r2, [pc, #408]	; (800185c <HAL_DMA_IRQHandler+0x1f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d029      	beq.n	800171a <HAL_DMA_IRQHandler+0xae>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_DMA_IRQHandler+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <HAL_DMA_IRQHandler+0xaa>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_DMA_IRQHandler+0x1f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01a      	beq.n	8001710 <HAL_DMA_IRQHandler+0xa4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a62      	ldr	r2, [pc, #392]	; (8001868 <HAL_DMA_IRQHandler+0x1fc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d012      	beq.n	800170a <HAL_DMA_IRQHandler+0x9e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a60      	ldr	r2, [pc, #384]	; (800186c <HAL_DMA_IRQHandler+0x200>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x98>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_DMA_IRQHandler+0x204>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d102      	bne.n	80016fe <HAL_DMA_IRQHandler+0x92>
 80016f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fc:	e00e      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 80016fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001702:	e00b      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 8001704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001708:	e008      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 800170a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170e:	e005      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 8001710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001714:	e002      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	e000      	b.n	800171c <HAL_DMA_IRQHandler+0xb0>
 800171a:	2304      	movs	r3, #4
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_DMA_IRQHandler+0x208>)
 800171e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8094 	beq.w	8001852 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001732:	e08e      	b.n	8001852 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2202      	movs	r2, #2
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d056      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x186>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d051      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10b      	bne.n	8001774 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020a 	bic.w	r2, r2, #10
 800176a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_DMA_IRQHandler+0x1f0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d029      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x166>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_DMA_IRQHandler+0x1f4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <HAL_DMA_IRQHandler+0x162>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a35      	ldr	r2, [pc, #212]	; (8001864 <HAL_DMA_IRQHandler+0x1f8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x15c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a34      	ldr	r2, [pc, #208]	; (8001868 <HAL_DMA_IRQHandler+0x1fc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d012      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x156>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_DMA_IRQHandler+0x200>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x150>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <HAL_DMA_IRQHandler+0x204>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x14a>
 80017b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b4:	e00e      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ba:	e00b      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c0:	e008      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	e005      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017cc:	e002      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017ce:	2320      	movs	r3, #32
 80017d0:	e000      	b.n	80017d4 <HAL_DMA_IRQHandler+0x168>
 80017d2:	2302      	movs	r3, #2
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_DMA_IRQHandler+0x208>)
 80017d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d034      	beq.n	8001852 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017f0:	e02f      	b.n	8001852 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2208      	movs	r2, #8
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_DMA_IRQHandler+0x1e8>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020e 	bic.w	r2, r2, #14
 800181a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    }
  }
  return;
 8001852:	bf00      	nop
 8001854:	bf00      	nop
}
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40020008 	.word	0x40020008
 8001860:	4002001c 	.word	0x4002001c
 8001864:	40020030 	.word	0x40020030
 8001868:	40020044 	.word	0x40020044
 800186c:	40020058 	.word	0x40020058
 8001870:	4002006c 	.word	0x4002006c
 8001874:	40020000 	.word	0x40020000

08001878 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d108      	bne.n	80018b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018b6:	e007      	b.n	80018c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e169      	b.n	8001bbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e8:	2201      	movs	r2, #1
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8158 	bne.w	8001bb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a9a      	ldr	r2, [pc, #616]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001910:	4a98      	ldr	r2, [pc, #608]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d875      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001916:	4a98      	ldr	r2, [pc, #608]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d058      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 800191c:	4a96      	ldr	r2, [pc, #600]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d86f      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001922:	4a96      	ldr	r2, [pc, #600]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d052      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001928:	4a94      	ldr	r2, [pc, #592]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d869      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800192e:	4a94      	ldr	r2, [pc, #592]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04c      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001934:	4a92      	ldr	r2, [pc, #584]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d863      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800193a:	4a92      	ldr	r2, [pc, #584]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d046      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001940:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d85d      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001946:	2b12      	cmp	r3, #18
 8001948:	d82a      	bhi.n	80019a0 <HAL_GPIO_Init+0xcc>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d859      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_GPIO_Init+0x80>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	080019cf 	.word	0x080019cf
 8001958:	080019a9 	.word	0x080019a9
 800195c:	080019bb 	.word	0x080019bb
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a03 	.word	0x08001a03
 8001968:	08001a03 	.word	0x08001a03
 800196c:	08001a03 	.word	0x08001a03
 8001970:	08001a03 	.word	0x08001a03
 8001974:	08001a03 	.word	0x08001a03
 8001978:	08001a03 	.word	0x08001a03
 800197c:	08001a03 	.word	0x08001a03
 8001980:	08001a03 	.word	0x08001a03
 8001984:	08001a03 	.word	0x08001a03
 8001988:	08001a03 	.word	0x08001a03
 800198c:	08001a03 	.word	0x08001a03
 8001990:	08001a03 	.word	0x08001a03
 8001994:	08001a03 	.word	0x08001a03
 8001998:	080019b1 	.word	0x080019b1
 800199c:	080019c5 	.word	0x080019c5
 80019a0:	4a79      	ldr	r2, [pc, #484]	; (8001b88 <HAL_GPIO_Init+0x2b4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a6:	e02c      	b.n	8001a02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e029      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	3304      	adds	r3, #4
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e024      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	3308      	adds	r3, #8
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e01f      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	330c      	adds	r3, #12
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e01a      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d6:	2304      	movs	r3, #4
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e013      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	611a      	str	r2, [r3, #16]
          break;
 80019ee:	e009      	b.n	8001a04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	615a      	str	r2, [r3, #20]
          break;
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          break;
 8001a02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d801      	bhi.n	8001a0e <HAL_GPIO_Init+0x13a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_Init+0x13e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d802      	bhi.n	8001a20 <HAL_GPIO_Init+0x14c>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x152>
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3b08      	subs	r3, #8
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	401a      	ands	r2, r3
 8001a38:	6a39      	ldr	r1, [r7, #32]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80b1 	beq.w	8001bb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a54:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a6c:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a40      	ldr	r2, [pc, #256]	; (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_GPIO_Init+0x1ec>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_GPIO_Init+0x2c4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00d      	beq.n	8001abc <HAL_GPIO_Init+0x1e8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x1e4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_GPIO_Init+0x1e0>
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e004      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	f002 0203 	and.w	r2, r2, #3
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	4093      	lsls	r3, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad2:	492f      	ldr	r1, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	492c      	ldr	r1, [pc, #176]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4922      	ldr	r1, [pc, #136]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	491e      	ldr	r1, [pc, #120]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4918      	ldr	r1, [pc, #96]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4914      	ldr	r1, [pc, #80]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d021      	beq.n	8001ba8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e021      	b.n	8001bb6 <HAL_GPIO_Init+0x2e2>
 8001b72:	bf00      	nop
 8001b74:	10320000 	.word	0x10320000
 8001b78:	10310000 	.word	0x10310000
 8001b7c:	10220000 	.word	0x10220000
 8001b80:	10210000 	.word	0x10210000
 8001b84:	10120000 	.word	0x10120000
 8001b88:	10110000 	.word	0x10110000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40010800 	.word	0x40010800
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40011400 	.word	0x40011400
 8001ba4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_GPIO_Init+0x304>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <HAL_GPIO_Init+0x304>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f47f ae8e 	bne.w	80018e8 <HAL_GPIO_Init+0x14>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	372c      	adds	r7, #44	; 0x2c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43d9      	mvns	r1, r3
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c40:	b08b      	sub	sp, #44	; 0x2c
 8001c42:	af06      	add	r7, sp, #24
 8001c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0fd      	b.n	8001e4c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f007 fbbb 	bl	80093e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fb62 	bl	8005340 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	687e      	ldr	r6, [r7, #4]
 8001c84:	466d      	mov	r5, sp
 8001c86:	f106 0410 	add.w	r4, r6, #16
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	602b      	str	r3, [r5, #0]
 8001c92:	1d33      	adds	r3, r6, #4
 8001c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f003 fb2c 	bl	80052f4 <USB_CoreInit>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0ce      	b.n	8001e4c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fb5d 	bl	8005374 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e04c      	b.n	8001d5a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3336      	adds	r3, #54	; 0x36
 8001cfe:	4602      	mov	r2, r0
 8001d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3303      	adds	r3, #3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	333c      	adds	r3, #60	; 0x3c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3340      	adds	r3, #64	; 0x40
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3ad      	bcc.n	8001cc0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e044      	b.n	8001df4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3b5      	bcc.n	8001d6a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	687e      	ldr	r6, [r7, #4]
 8001e06:	466d      	mov	r5, sp
 8001e08:	f106 0410 	add.w	r4, r6, #16
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	602b      	str	r3, [r5, #0]
 8001e14:	1d33      	adds	r3, r6, #4
 8001e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f003 fab7 	bl	800538c <USB_DevInit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e00d      	b.n	8001e4c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fc28 	bl	800769a <USB_DevDisconnect>

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_Start+0x16>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e016      	b.n	8001e98 <HAL_PCD_Start+0x44>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fa4c 	bl	8005314 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f007 fd21 	bl	80098c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fbfc 	bl	8007686 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f005 fbfe 	bl	80076ae <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fb61 	bl	8002586 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fbf0 	bl	80076ae <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d112      	bne.n	8001f00 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eec:	b292      	uxth	r2, r2
 8001eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f007 faef 	bl	80094d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f925 	bl	800214a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fbd2 	bl	80076ae <USB_ReadInterrupts>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f14:	d10b      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fbbb 	bl	80076ae <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f42:	d10b      	bne.n	8001f5c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fba4 	bl	80076ae <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d126      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0204 	bic.w	r2, r2, #4
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f007 fad0 	bl	8009548 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 fb72 	bl	80076ae <USB_ReadInterrupts>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fd4:	f040 8084 	bne.w	80020e0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
 8001fdc:	e011      	b.n	8002002 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	f107 0120 	add.w	r1, r7, #32
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	3301      	adds	r3, #1
 8002000:	77fb      	strb	r3, [r7, #31]
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b07      	cmp	r3, #7
 8002006:	d9ea      	bls.n	8001fde <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	b292      	uxth	r2, r2
 800201c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	b292      	uxth	r2, r2
 8002034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002038:	bf00      	nop
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002042:	b29b      	uxth	r3, r3
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f6      	beq.n	800203a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002054:	b29a      	uxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205e:	b292      	uxth	r2, r2
 8002060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
 8002068:	e010      	b.n	800208c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800206a:	7ffb      	ldrb	r3, [r7, #31]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4611      	mov	r1, r2
 8002072:	7ffa      	ldrb	r2, [r7, #31]
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	440a      	add	r2, r1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	f107 0120 	add.w	r1, r7, #32
 800207e:	440b      	add	r3, r1
 8002080:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002084:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	3301      	adds	r3, #1
 800208a:	77fb      	strb	r3, [r7, #31]
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	2b07      	cmp	r3, #7
 8002090:	d9eb      	bls.n	800206a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0208 	orr.w	r2, r2, #8
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0204 	orr.w	r2, r2, #4
 80020d4:	b292      	uxth	r2, r2
 80020d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f007 fa1a 	bl	8009514 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 fae2 	bl	80076ae <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	d10e      	bne.n	8002114 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002108:	b292      	uxth	r2, r2
 800210a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f007 f9d3 	bl	80094ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f005 fac8 	bl	80076ae <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002128:	d10b      	bne.n	8002142 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213c:	b292      	uxth	r2, r2
 800213e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002142:	bf00      	nop
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_SetAddress+0x1a>
 8002160:	2302      	movs	r3, #2
 8002162:	e013      	b.n	800218c <HAL_PCD_SetAddress+0x42>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f005 fa6f 	bl	8007660 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	460b      	mov	r3, r1
 80021a8:	803b      	strh	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da0e      	bge.n	80021d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	705a      	strb	r2, [r3, #1]
 80021d6:	e00e      	b.n	80021f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002202:	883a      	ldrh	r2, [r7, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	78ba      	ldrb	r2, [r7, #2]
 800220c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002220:	78bb      	ldrb	r3, [r7, #2]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d102      	bne.n	800222c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_PCD_EP_Open+0xa6>
 8002236:	2302      	movs	r3, #2
 8002238:	e00e      	b.n	8002258 <HAL_PCD_EP_Open+0xc4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 f8bf 	bl	80053cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002256:	7afb      	ldrb	r3, [r7, #11]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800226c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0e      	bge.n	8002292 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
 8002290:	e00e      	b.n	80022b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 0207 	and.w	r2, r3, #7
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_EP_Close+0x6a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e00e      	b.n	80022e8 <HAL_PCD_EP_Close+0x88>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fbe1 	bl	8005aa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	b2da      	uxtb	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6979      	ldr	r1, [r7, #20]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fd93 	bl	8005e78 <USB_EPStartXfer>
 8002352:	e005      	b.n	8002360 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6979      	ldr	r1, [r7, #20]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fd8c 	bl	8005e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0207 	and.w	r2, r3, #7
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800238c:	681b      	ldr	r3, [r3, #0]
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	460b      	mov	r3, r1
 80023a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2201      	movs	r2, #1
 80023e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6979      	ldr	r1, [r7, #20]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fd39 	bl	8005e78 <USB_EPStartXfer>
 8002406:	e005      	b.n	8002414 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6979      	ldr	r1, [r7, #20]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fd32 	bl	8005e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0207 	and.w	r2, r3, #7
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d901      	bls.n	800243c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e04c      	b.n	80024d6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800243c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002440:	2b00      	cmp	r3, #0
 8002442:	da0e      	bge.n	8002462 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	705a      	strb	r2, [r3, #1]
 8002460:	e00c      	b.n	800247c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_PCD_EP_SetStall+0x7e>
 8002498:	2302      	movs	r3, #2
 800249a:	e01c      	b.n	80024d6 <HAL_PCD_EP_SetStall+0xb8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 ffdb 	bl	8007466 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f005 f900 	bl	80076cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d901      	bls.n	80024fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e040      	b.n	800257e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002500:	2b00      	cmp	r3, #0
 8002502:	da0e      	bge.n	8002522 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	705a      	strb	r2, [r3, #1]
 8002520:	e00e      	b.n	8002540 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0207 	and.w	r2, r3, #7
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_PCD_EP_ClrStall+0x82>
 800255c:	2302      	movs	r3, #2
 800255e:	e00e      	b.n	800257e <HAL_PCD_EP_ClrStall+0xa0>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	4618      	mov	r0, r3
 8002570:	f004 ffc9 	bl	8007506 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08e      	sub	sp, #56	; 0x38
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800258e:	e2ec      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002598:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800259a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8161 	bne.w	8002872 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d152      	bne.n	8002660 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	81fb      	strh	r3, [r7, #14]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	89fb      	ldrh	r3, [r7, #14]
 80025d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3328      	adds	r3, #40	; 0x28
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	3302      	adds	r3, #2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	441a      	add	r2, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f006 ff30 	bl	8009486 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 829b 	beq.w	8002b6a <PCD_EP_ISR_Handler+0x5e4>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8296 	bne.w	8002b6a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800264a:	b2da      	uxtb	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800265e:	e284      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002676:	2b00      	cmp	r3, #0
 8002678:	d034      	beq.n	80026e4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	3306      	adds	r3, #6
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f005 f857 	bl	800776c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ca:	4013      	ands	r3, r2
 80026cc:	823b      	strh	r3, [r7, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	8a3a      	ldrh	r2, [r7, #16]
 80026d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026d8:	b292      	uxth	r2, r2
 80026da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f006 fea5 	bl	800942c <HAL_PCD_SetupStageCallback>
 80026e2:	e242      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f280 823e 	bge.w	8002b6a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026fa:	4013      	ands	r3, r2
 80026fc:	83bb      	strh	r3, [r7, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	8bba      	ldrh	r2, [r7, #28]
 8002704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002708:	b292      	uxth	r2, r2
 800270a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	3306      	adds	r3, #6
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d019      	beq.n	8002774 <PCD_EP_ISR_Handler+0x1ee>
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	6959      	ldr	r1, [r3, #20]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002758:	b29b      	uxth	r3, r3
 800275a:	f005 f807 	bl	800776c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	441a      	add	r2, r3
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800276c:	2100      	movs	r1, #0
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f006 fe6e 	bl	8009450 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 81f2 	bne.w	8002b6a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d112      	bne.n	80027d4 <PCD_EP_ISR_Handler+0x24e>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e02f      	b.n	8002834 <PCD_EP_ISR_Handler+0x2ae>
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b3e      	cmp	r3, #62	; 0x3e
 80027da:	d813      	bhi.n	8002804 <PCD_EP_ISR_Handler+0x27e>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <PCD_EP_ISR_Handler+0x270>
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	3301      	adds	r3, #1
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	e017      	b.n	8002834 <PCD_EP_ISR_Handler+0x2ae>
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <PCD_EP_ISR_Handler+0x298>
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3b01      	subs	r3, #1
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	b29b      	uxth	r3, r3
 8002822:	029b      	lsls	r3, r3, #10
 8002824:	b29b      	uxth	r3, r3
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29a      	uxth	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002844:	827b      	strh	r3, [r7, #18]
 8002846:	8a7b      	ldrh	r3, [r7, #18]
 8002848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800284c:	827b      	strh	r3, [r7, #18]
 800284e:	8a7b      	ldrh	r3, [r7, #18]
 8002850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002854:	827b      	strh	r3, [r7, #18]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	b29b      	uxth	r3, r3
 800286e:	8013      	strh	r3, [r2, #0]
 8002870:	e17b      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002884:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002888:	2b00      	cmp	r3, #0
 800288a:	f280 80ea 	bge.w	8002a62 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028a4:	4013      	ands	r3, r2
 80028a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028bc:	b292      	uxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028c0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	7b1b      	ldrb	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d122      	bne.n	8002924 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	3306      	adds	r3, #6
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002906:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8087 	beq.w	8002a1e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	88da      	ldrh	r2, [r3, #6]
 800291c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800291e:	f004 ff25 	bl	800776c <USB_ReadPMA>
 8002922:	e07c      	b.n	8002a1e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	78db      	ldrb	r3, [r3, #3]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d108      	bne.n	800293e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800292c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800292e:	461a      	mov	r2, r3
 8002930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f927 	bl	8002b86 <HAL_PCD_EP_DB_Receive>
 8002938:	4603      	mov	r3, r0
 800293a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800293c:	e06f      	b.n	8002a1e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002958:	847b      	strh	r3, [r7, #34]	; 0x22
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800296a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	3302      	adds	r3, #2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02a      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	6959      	ldr	r1, [r3, #20]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	891a      	ldrh	r2, [r3, #8]
 80029d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029d6:	f004 fec9 	bl	800776c <USB_ReadPMA>
 80029da:	e020      	b.n	8002a1e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	3306      	adds	r3, #6
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a04:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	895a      	ldrh	r2, [r3, #10]
 8002a18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a1a:	f004 fea7 	bl	800776c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a24:	441a      	add	r2, r3
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a30:	441a      	add	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <PCD_EP_ISR_Handler+0x4c2>
 8002a3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d206      	bcs.n	8002a56 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f006 fcfe 	bl	8009450 <HAL_PCD_DataOutStageCallback>
 8002a54:	e005      	b.n	8002a62 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fa0b 	bl	8005e78 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d07e      	beq.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	843b      	strh	r3, [r7, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	8c3b      	ldrh	r3, [r7, #32]
 8002aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d00c      	beq.n	8002ada <PCD_EP_ISR_Handler+0x554>
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d146      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ad0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d141      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	3302      	adds	r3, #2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b02:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d906      	bls.n	8002b1c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	8bfb      	ldrh	r3, [r7, #30]
 8002b14:	1ad2      	subs	r2, r2, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	619a      	str	r2, [r3, #24]
 8002b1a:	e002      	b.n	8002b22 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f006 fca8 	bl	8009486 <HAL_PCD_DataInStageCallback>
 8002b36:	e018      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	8bfb      	ldrh	r3, [r7, #30]
 8002b3e:	441a      	add	r2, r3
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 f98e 	bl	8005e78 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b5c:	e005      	b.n	8002b6a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f91b 	bl	8002da0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f6ff ad0a 	blt.w	8002590 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3738      	adds	r7, #56	; 0x38
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b088      	sub	sp, #32
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	4613      	mov	r3, r2
 8002b92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d07e      	beq.n	8002c9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d306      	bcc.n	8002be0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	8b7b      	ldrh	r3, [r7, #26]
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	619a      	str	r2, [r3, #24]
 8002bde:	e002      	b.n	8002be6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d123      	bne.n	8002c36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c08:	833b      	strh	r3, [r7, #24]
 8002c0a:	8b3b      	ldrh	r3, [r7, #24]
 8002c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c10:	833b      	strh	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	8b3b      	ldrh	r3, [r7, #24]
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01f      	beq.n	8002c80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	82fb      	strh	r3, [r7, #22]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c80:	8b7b      	ldrh	r3, [r7, #26]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6959      	ldr	r1, [r3, #20]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	891a      	ldrh	r2, [r3, #8]
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	f004 fd69 	bl	800776c <USB_ReadPMA>
 8002c9a:	e07c      	b.n	8002d96 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3306      	adds	r3, #6
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d306      	bcc.n	8002cde <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	8b7b      	ldrh	r3, [r7, #26]
 8002cd6:	1ad2      	subs	r2, r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	e002      	b.n	8002ce4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d123      	bne.n	8002d34 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	83fb      	strh	r3, [r7, #30]
 8002d08:	8bfb      	ldrh	r3, [r7, #30]
 8002d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d0e:	83fb      	strh	r3, [r7, #30]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	441a      	add	r2, r3
 8002d1e:	8bfb      	ldrh	r3, [r7, #30]
 8002d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11f      	bne.n	8002d7e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d58:	83bb      	strh	r3, [r7, #28]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	8bbb      	ldrh	r3, [r7, #28]
 8002d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d7e:	8b7b      	ldrh	r3, [r7, #26]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6959      	ldr	r1, [r3, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	895a      	ldrh	r2, [r3, #10]
 8002d90:	8b7b      	ldrh	r3, [r7, #26]
 8002d92:	f004 fceb 	bl	800776c <USB_ReadPMA>
    }
  }

  return count;
 8002d96:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b0a2      	sub	sp, #136	; 0x88
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 81c7 	beq.w	8003148 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d907      	bls.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	619a      	str	r2, [r3, #24]
 8002e00:	e002      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 80b9 	bne.w	8002f84 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d126      	bne.n	8002e68 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	011a      	lsls	r2, r3, #4
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	e01a      	b.n	8002e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d116      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	4413      	add	r3, r2
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	011a      	lsls	r2, r3, #4
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	4413      	add	r3, r2
 8002e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d126      	bne.n	8002efa <HAL_PCD_EP_DB_Transmit+0x15a>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	801a      	strh	r2, [r3, #0]
 8002ef8:	e017      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d113      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4413      	add	r3, r2
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	011a      	lsls	r2, r3, #4
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f006 faa8 	bl	8009486 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 82d4 	beq.w	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	827b      	strh	r3, [r7, #18]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	441a      	add	r2, r3
 8002f6c:	8a7b      	ldrh	r3, [r7, #18]
 8002f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
 8002f82:	e2b2      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	f040 8286 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff4:	441a      	add	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d309      	bcc.n	800301a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	621a      	str	r2, [r3, #32]
 8003018:	e015      	b.n	8003046 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003022:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003026:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003030:	e009      	b.n	8003046 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d155      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x35a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	4413      	add	r3, r2
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011a      	lsls	r2, r3, #4
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	4413      	add	r3, r2
 8003070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d112      	bne.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x302>
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003086:	b29a      	uxth	r2, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309a:	b29a      	uxth	r2, r3
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	e047      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x392>
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	2b3e      	cmp	r3, #62	; 0x3e
 80030a6:	d811      	bhi.n	80030cc <HAL_PCD_EP_DB_Transmit+0x32c>
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_PCD_EP_DB_Transmit+0x31e>
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	3301      	adds	r3, #1
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e032      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x392>
 80030cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x342>
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	3b01      	subs	r3, #1
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e01b      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x392>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d117      	bne.n	8003132 <HAL_PCD_EP_DB_Transmit+0x392>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	4413      	add	r3, r2
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	011a      	lsls	r2, r3, #4
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	4413      	add	r3, r2
 8003124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	b29a      	uxth	r2, r3
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6959      	ldr	r1, [r3, #20]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	891a      	ldrh	r2, [r3, #8]
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003140:	b29b      	uxth	r3, r3
 8003142:	f004 face 	bl	80076e2 <USB_WritePMA>
 8003146:	e1d0      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003150:	b29b      	uxth	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	3306      	adds	r3, #6
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317c:	429a      	cmp	r2, r3
 800317e:	d307      	bcc.n	8003190 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003188:	1ad2      	subs	r2, r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e002      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80c4 	bne.w	8003328 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d126      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x456>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	4413      	add	r3, r2
 80031be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	011a      	lsls	r2, r3, #4
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	4413      	add	r3, r2
 80031ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80031d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031da:	b29a      	uxth	r2, r3
 80031dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e01a      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x48c>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d116      	bne.n	800322c <HAL_PCD_EP_DB_Transmit+0x48c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	677b      	str	r3, [r7, #116]	; 0x74
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003212:	4413      	add	r3, r2
 8003214:	677b      	str	r3, [r7, #116]	; 0x74
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	011a      	lsls	r2, r3, #4
 800321c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321e:	4413      	add	r3, r2
 8003220:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003224:	673b      	str	r3, [r7, #112]	; 0x70
 8003226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003228:	2200      	movs	r2, #0
 800322a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12f      	bne.n	800329a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003252:	4413      	add	r3, r2
 8003254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	011a      	lsls	r2, r3, #4
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003262:	4413      	add	r3, r2
 8003264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800326c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003278:	b29a      	uxth	r2, r3
 800327a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003290:	b29a      	uxth	r2, r3
 8003292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	e017      	b.n	80032ca <HAL_PCD_EP_DB_Transmit+0x52a>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d113      	bne.n	80032ca <HAL_PCD_EP_DB_Transmit+0x52a>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b0:	4413      	add	r3, r2
 80032b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	011a      	lsls	r2, r3, #4
 80032ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032bc:	4413      	add	r3, r2
 80032be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f006 f8d8 	bl	8009486 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8104 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]
 8003326:	e0e0      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d121      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 80b4 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338a:	441a      	add	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003398:	441a      	add	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d309      	bcc.n	80033be <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	1ad2      	subs	r2, r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	621a      	str	r2, [r3, #32]
 80033bc:	e015      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80033c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033d4:	e009      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	667b      	str	r3, [r7, #100]	; 0x64
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d155      	bne.n	80034a4 <HAL_PCD_EP_DB_Transmit+0x704>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340c:	4413      	add	r3, r2
 800340e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	011a      	lsls	r2, r3, #4
 8003416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003418:	4413      	add	r3, r2
 800341a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800341e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003422:	2b00      	cmp	r3, #0
 8003424:	d112      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003430:	b29a      	uxth	r2, r3
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003444:	b29a      	uxth	r2, r3
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	e044      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x736>
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	2b3e      	cmp	r3, #62	; 0x3e
 8003450:	d811      	bhi.n	8003476 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	657b      	str	r3, [r7, #84]	; 0x54
 8003458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	3301      	adds	r3, #1
 8003466:	657b      	str	r3, [r7, #84]	; 0x54
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	b29b      	uxth	r3, r3
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	b29a      	uxth	r2, r3
 8003470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	e02f      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x736>
 8003476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	657b      	str	r3, [r7, #84]	; 0x54
 800347c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	3b01      	subs	r3, #1
 800348a:	657b      	str	r3, [r7, #84]	; 0x54
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	b29b      	uxth	r3, r3
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	b29b      	uxth	r3, r3
 8003494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349c:	b29a      	uxth	r2, r3
 800349e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	e018      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x736>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d114      	bne.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x736>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ba:	4413      	add	r3, r2
 80034bc:	667b      	str	r3, [r7, #100]	; 0x64
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	011a      	lsls	r2, r3, #4
 80034c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c6:	4413      	add	r3, r2
 80034c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034cc:	663b      	str	r3, [r7, #96]	; 0x60
 80034ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	895a      	ldrh	r2, [r3, #10]
 80034e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f004 f8fc 	bl	80076e2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	823b      	strh	r3, [r7, #16]
 8003506:	8a3b      	ldrh	r3, [r7, #16]
 8003508:	f083 0310 	eor.w	r3, r3, #16
 800350c:	823b      	strh	r3, [r7, #16]
 800350e:	8a3b      	ldrh	r3, [r7, #16]
 8003510:	f083 0320 	eor.w	r3, r3, #32
 8003514:	823b      	strh	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	8a3b      	ldrh	r3, [r7, #16]
 8003526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3788      	adds	r7, #136	; 0x88
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	4613      	mov	r3, r2
 8003554:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e009      	b.n	800358e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800357a:	897a      	ldrh	r2, [r7, #10]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800358e:	893b      	ldrh	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	b29a      	uxth	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	80da      	strh	r2, [r3, #6]
 80035a2:	e00b      	b.n	80035bc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2201      	movs	r2, #1
 80035a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e26c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8087 	beq.w	80036f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f4:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x5e>
 8003600:	4b8c      	ldr	r3, [pc, #560]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b89      	ldr	r3, [pc, #548]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x12c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e246      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x76>
 8003630:	4b80      	ldr	r3, [pc, #512]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7f      	ldr	r2, [pc, #508]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x98>
 8003646:	4b7b      	ldr	r3, [pc, #492]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7a      	ldr	r2, [pc, #488]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b78      	ldr	r3, [pc, #480]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a77      	ldr	r2, [pc, #476]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xbc>
 800366a:	4b72      	ldr	r3, [pc, #456]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a71      	ldr	r2, [pc, #452]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 8003684:	4b6b      	ldr	r3, [pc, #428]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fd fd76 	bl	8001194 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fd fd72 	bl	8001194 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1fa      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe4>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fd62 	bl	8001194 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fd fd5e 	bl	8001194 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1e6      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x10c>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d063      	beq.n	80037ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800370e:	4b49      	ldr	r3, [pc, #292]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x18c>
 800371a:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b43      	ldr	r3, [pc, #268]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1ba      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4939      	ldr	r1, [pc, #228]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e03a      	b.n	80037ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x270>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fd17 	bl	8001194 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fd fd13 	bl	8001194 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e19b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4927      	ldr	r1, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
 800379c:	e015      	b.n	80037ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCC_OscConfig+0x270>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fd fcf6 	bl	8001194 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ac:	f7fd fcf2 	bl	8001194 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e17a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03a      	beq.n	800384c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_RCC_OscConfig+0x274>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7fd fcd6 	bl	8001194 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd fcd2 	bl	8001194 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e15a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800380a:	2001      	movs	r0, #1
 800380c:	f000 faa6 	bl	8003d5c <RCC_Delay>
 8003810:	e01c      	b.n	800384c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_RCC_OscConfig+0x274>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fd fcbc 	bl	8001194 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003820:	f7fd fcb8 	bl	8001194 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d908      	bls.n	8003840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e140      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	42420000 	.word	0x42420000
 800383c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	4b9e      	ldr	r3, [pc, #632]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e9      	bne.n	8003820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a6 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b97      	ldr	r3, [pc, #604]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b94      	ldr	r3, [pc, #592]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4a93      	ldr	r2, [pc, #588]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b8e      	ldr	r3, [pc, #568]	; (8003ac0 <HAL_RCC_OscConfig+0x4f8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <HAL_RCC_OscConfig+0x4f8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8a      	ldr	r2, [pc, #552]	; (8003ac0 <HAL_RCC_OscConfig+0x4f8>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fd fc79 	bl	8001194 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd fc75 	bl	8001194 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0fd      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x4f8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x312>
 80038cc:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6213      	str	r3, [r2, #32]
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x334>
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a75      	ldr	r2, [pc, #468]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6213      	str	r3, [r2, #32]
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a72      	ldr	r2, [pc, #456]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x356>
 8003904:	4b6d      	ldr	r3, [pc, #436]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a6c      	ldr	r2, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a69      	ldr	r2, [pc, #420]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6213      	str	r3, [r2, #32]
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a66      	ldr	r2, [pc, #408]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6213      	str	r3, [r2, #32]
 800392a:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd fc29 	bl	8001194 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fc25 	bl	8001194 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0ab      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x37e>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fd fc13 	bl	8001194 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd fc0f 	bl	8001194 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e095      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b48      	ldr	r3, [pc, #288]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a47      	ldr	r2, [pc, #284]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8081 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b42      	ldr	r3, [pc, #264]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d061      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d146      	bne.n	8003a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_OscConfig+0x4fc>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fd fbe3 	bl	8001194 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fd fbdf 	bl	8001194 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e067      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f0      	bne.n	80039d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	492d      	ldr	r1, [pc, #180]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a19      	ldr	r1, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	4927      	ldr	r1, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x4fc>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fd fbb3 	bl	8001194 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd fbaf 	bl	8001194 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e037      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x46a>
 8003a50:	e02f      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_RCC_OscConfig+0x4fc>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fb9c 	bl	8001194 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fb98 	bl	8001194 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e020      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x498>
 8003a7e:	e018      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e013      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42420060 	.word	0x42420060

08003ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0d0      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d910      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	4965      	ldr	r1, [pc, #404]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d040      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d115      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e073      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06b      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4936      	ldr	r1, [pc, #216]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd faec 	bl	8001194 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd fae8 	bl	8001194 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e053      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d210      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0207 	bic.w	r2, r3, #7
 8003bfe:	4922      	ldr	r1, [pc, #136]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f821 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	490a      	ldr	r1, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	5ccb      	ldrb	r3, [r1, r3]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1cc>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd fa4a 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800b658 	.word	0x0800b658
 8003c94:	20000100 	.word	0x20000100
 8003c98:	20000104 	.word	0x20000104

08003c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b490      	push	{r4, r7}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ca4:	1d3c      	adds	r4, r7, #4
 8003ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cac:	f240 2301 	movw	r3, #513	; 0x201
 8003cb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x40>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8003cda:	e02d      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cde:	623b      	str	r3, [r7, #32]
      break;
 8003ce0:	e02d      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cee:	4413      	add	r3, r2
 8003cf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c5b      	lsrs	r3, r3, #17
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d0e:	4413      	add	r3, r2
 8003d10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	fb02 f203 	mul.w	r2, r2, r3
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e004      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	623b      	str	r3, [r7, #32]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc90      	pop	{r4, r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	0800b5f4 	.word	0x0800b5f4
 8003d50:	40021000 	.word	0x40021000
 8003d54:	007a1200 	.word	0x007a1200
 8003d58:	003d0900 	.word	0x003d0900

08003d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <RCC_Delay+0x34>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <RCC_Delay+0x38>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d78:	bf00      	nop
  }
  while (Delay --);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	60fa      	str	r2, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f9      	bne.n	8003d78 <RCC_Delay+0x1c>
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	20000100 	.word	0x20000100
 8003d94:	10624dd3 	.word	0x10624dd3

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d07d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db8:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a4b      	ldr	r2, [pc, #300]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	61d3      	str	r3, [r2, #28]
 8003dd0:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b46      	ldr	r3, [pc, #280]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d118      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dec:	4b43      	ldr	r3, [pc, #268]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df8:	f7fd f9cc 	bl	8001194 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	e008      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fd f9c8 	bl	8001194 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e06d      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d02e      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d027      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e52:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d014      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd f997 	bl	8001194 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fd f993 	bl	8001194 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e036      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4917      	ldr	r1, [pc, #92]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42420440 	.word	0x42420440

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e041      	b.n	8003f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fc fdf8 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fec2 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e032      	b.n	8004022 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_TIM_Base_Start+0x88>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_TIM_Base_Start+0x48>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_Base_Start+0x48>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_TIM_Base_Start+0x8c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_Base_Start+0x48>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_TIM_Base_Start+0x90>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d010      	beq.n	8004020 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	e007      	b.n	8004020 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800

08004038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f839 	bl	80040d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fe28 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_TIM_PWM_Start_DMA+0x28>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e022      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d109      	bne.n	800412a <HAL_TIM_PWM_Start_DMA+0x42>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e015      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x6e>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e008      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	e14e      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start_DMA+0x90>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e022      	b.n	80041be <HAL_TIM_PWM_Start_DMA+0xd6>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d109      	bne.n	8004192 <HAL_TIM_PWM_Start_DMA+0xaa>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e015      	b.n	80041be <HAL_TIM_PWM_Start_DMA+0xd6>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d109      	bne.n	80041ac <HAL_TIM_PWM_Start_DMA+0xc4>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <HAL_TIM_PWM_Start_DMA+0xd6>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d024      	beq.n	800420c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e114      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start_DMA+0xfa>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	e016      	b.n	8004210 <HAL_TIM_PWM_Start_DMA+0x128>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	e00e      	b.n	8004210 <HAL_TIM_PWM_Start_DMA+0x128>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start_DMA+0x11a>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	e006      	b.n	8004210 <HAL_TIM_PWM_Start_DMA+0x128>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800420a:	e001      	b.n	8004210 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0f5      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	f200 80ae 	bhi.w	8004374 <HAL_TIM_PWM_Start_DMA+0x28c>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_TIM_PWM_Start_DMA+0x138>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004255 	.word	0x08004255
 8004224:	08004375 	.word	0x08004375
 8004228:	08004375 	.word	0x08004375
 800422c:	08004375 	.word	0x08004375
 8004230:	0800429d 	.word	0x0800429d
 8004234:	08004375 	.word	0x08004375
 8004238:	08004375 	.word	0x08004375
 800423c:	08004375 	.word	0x08004375
 8004240:	080042e5 	.word	0x080042e5
 8004244:	08004375 	.word	0x08004375
 8004248:	08004375 	.word	0x08004375
 800424c:	08004375 	.word	0x08004375
 8004250:	0800432d 	.word	0x0800432d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4a6a      	ldr	r2, [pc, #424]	; (8004404 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	4a69      	ldr	r2, [pc, #420]	; (8004408 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	4a68      	ldr	r2, [pc, #416]	; (800440c <HAL_TIM_PWM_Start_DMA+0x324>)
 800426a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3334      	adds	r3, #52	; 0x34
 8004278:	461a      	mov	r2, r3
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	f7fd f920 	bl	80014c0 <HAL_DMA_Start_IT>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0b8      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	60da      	str	r2, [r3, #12]
      break;
 800429a:	e06c      	b.n	8004376 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	4a58      	ldr	r2, [pc, #352]	; (8004404 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	4a57      	ldr	r2, [pc, #348]	; (8004408 <HAL_TIM_PWM_Start_DMA+0x320>)
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	4a56      	ldr	r2, [pc, #344]	; (800440c <HAL_TIM_PWM_Start_DMA+0x324>)
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3338      	adds	r3, #56	; 0x38
 80042c0:	461a      	mov	r2, r3
 80042c2:	887b      	ldrh	r3, [r7, #2]
 80042c4:	f7fd f8fc 	bl	80014c0 <HAL_DMA_Start_IT>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e094      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e0:	60da      	str	r2, [r3, #12]
      break;
 80042e2:	e048      	b.n	8004376 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4a46      	ldr	r2, [pc, #280]	; (8004404 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a45      	ldr	r2, [pc, #276]	; (8004408 <HAL_TIM_PWM_Start_DMA+0x320>)
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4a44      	ldr	r2, [pc, #272]	; (800440c <HAL_TIM_PWM_Start_DMA+0x324>)
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	333c      	adds	r3, #60	; 0x3c
 8004308:	461a      	mov	r2, r3
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	f7fd f8d8 	bl	80014c0 <HAL_DMA_Start_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e070      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	60da      	str	r2, [r3, #12]
      break;
 800432a:	e024      	b.n	8004376 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	4a33      	ldr	r2, [pc, #204]	; (8004408 <HAL_TIM_PWM_Start_DMA+0x320>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_TIM_PWM_Start_DMA+0x324>)
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3340      	adds	r3, #64	; 0x40
 8004350:	461a      	mov	r2, r3
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	f7fd f8b4 	bl	80014c0 <HAL_DMA_Start_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e04c      	b.n	80043fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004370:	60da      	str	r2, [r3, #12]
      break;
 8004372:	e000      	b.n	8004376 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004374:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2201      	movs	r2, #1
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ff24 	bl	80051cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a21      	ldr	r2, [pc, #132]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x328>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d107      	bne.n	800439e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x328>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d009      	beq.n	80043c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_TIM_PWM_Start_DMA+0x330>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d010      	beq.n	80043fa <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e8:	e007      	b.n	80043fa <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08004bbd 	.word	0x08004bbd
 8004408:	08004c65 	.word	0x08004c65
 800440c:	08004b2b 	.word	0x08004b2b
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800

0800441c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b0c      	cmp	r3, #12
 800442a:	d855      	bhi.n	80044d8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004469 	.word	0x08004469
 8004438:	080044d9 	.word	0x080044d9
 800443c:	080044d9 	.word	0x080044d9
 8004440:	080044d9 	.word	0x080044d9
 8004444:	08004485 	.word	0x08004485
 8004448:	080044d9 	.word	0x080044d9
 800444c:	080044d9 	.word	0x080044d9
 8004450:	080044d9 	.word	0x080044d9
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044d9 	.word	0x080044d9
 800445c:	080044d9 	.word	0x080044d9
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044bd 	.word	0x080044bd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004476:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd f87f 	bl	8001580 <HAL_DMA_Abort_IT>
      break;
 8004482:	e02a      	b.n	80044da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd f871 	bl	8001580 <HAL_DMA_Abort_IT>
      break;
 800449e:	e01c      	b.n	80044da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd f863 	bl	8001580 <HAL_DMA_Abort_IT>
      break;
 80044ba:	e00e      	b.n	80044da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fd f855 	bl	8001580 <HAL_DMA_Abort_IT>
      break;
 80044d6:	e000      	b.n	80044da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80044d8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fe72 	bl	80051cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d117      	bne.n	8004522 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	f240 4344 	movw	r3, #1092	; 0x444
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	f241 1311 	movw	r3, #4369	; 0x1111
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_TIM_PWM_Stop_DMA+0x136>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	f240 4344 	movw	r3, #1092	; 0x444
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <HAL_TIM_PWM_Stop_DMA+0x136>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Stop_DMA+0x146>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	e013      	b.n	800458a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Stop_DMA+0x156>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	e00b      	b.n	800458a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Stop_DMA+0x166>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	e003      	b.n	800458a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40012c00 	.word	0x40012c00

08004598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0202 	mvn.w	r2, #2
 80045c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa78 	bl	8004ad0 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa6b 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fa7a 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0204 	mvn.w	r2, #4
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa4e 	bl	8004ad0 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa41 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa50 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b08      	cmp	r3, #8
 8004654:	d122      	bne.n	800469c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d11b      	bne.n	800469c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0208 	mvn.w	r2, #8
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2204      	movs	r2, #4
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa24 	bl	8004ad0 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa17 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa26 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2208      	movs	r2, #8
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f9fa 	bl	8004ad0 <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9ed 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f9fc 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10e      	bne.n	800471c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0201 	mvn.w	r2, #1
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9c8 	bl	8004aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fdcd 	bl	80052e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9c9 	bl	8004b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b20      	cmp	r3, #32
 8004780:	d10e      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b20      	cmp	r3, #32
 800478e:	d107      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0220 	mvn.w	r2, #32
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fd98 	bl	80052d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e0ac      	b.n	800491c <HAL_TIM_PWM_ConfigChannel+0x174>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	f200 809f 	bhi.w	8004910 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	08004911 	.word	0x08004911
 80047e0:	08004911 	.word	0x08004911
 80047e4:	08004911 	.word	0x08004911
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	08004911 	.word	0x08004911
 80047f0:	08004911 	.word	0x08004911
 80047f4:	08004911 	.word	0x08004911
 80047f8:	0800488f 	.word	0x0800488f
 80047fc:	08004911 	.word	0x08004911
 8004800:	08004911 	.word	0x08004911
 8004804:	08004911 	.word	0x08004911
 8004808:	080048cf 	.word	0x080048cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fabc 	bl	8004d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
      break;
 800484a:	e062      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb02 	bl	8004e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	619a      	str	r2, [r3, #24]
      break;
 800488c:	e041      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fb4b 	bl	8004f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0208 	orr.w	r2, r2, #8
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0204 	bic.w	r2, r2, #4
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
      break;
 80048cc:	e021      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fb95 	bl	8005004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	61da      	str	r2, [r3, #28]
      break;
 800490e:	e000      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIM_ConfigClockSource+0x18>
 8004938:	2302      	movs	r3, #2
 800493a:	e0b3      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x180>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800495a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004962:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004974:	d03e      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0xd0>
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	f200 8087 	bhi.w	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	f000 8085 	beq.w	8004a90 <HAL_TIM_ConfigClockSource+0x16c>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498a:	d87f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d01a      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0xa2>
 8004990:	2b70      	cmp	r3, #112	; 0x70
 8004992:	d87b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d050      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x116>
 8004998:	2b60      	cmp	r3, #96	; 0x60
 800499a:	d877      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d03c      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xf6>
 80049a0:	2b50      	cmp	r3, #80	; 0x50
 80049a2:	d873      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d058      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x136>
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d86f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	d064      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x156>
 80049b0:	2b30      	cmp	r3, #48	; 0x30
 80049b2:	d86b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d060      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x156>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d867      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x156>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d05a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049c4:	e062      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f000 fbda 	bl	800518e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]
      break;
 80049f2:	e04e      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f000 fbc3 	bl	800518e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a16:	609a      	str	r2, [r3, #8]
      break;
 8004a18:	e03b      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fb3a 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2150      	movs	r1, #80	; 0x50
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb91 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004a38:	e02b      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 fb58 	bl	80050fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2160      	movs	r1, #96	; 0x60
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb81 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004a58:	e01b      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f000 fb1a 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb71 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004a78:	e00b      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f000 fb68 	bl	800515a <TIM_ITRx_SetConfig>
        break;
 8004a8a:	e002      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d107      	bne.n	8004b52 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	e02a      	b.n	8004ba8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6a:	e01d      	b.n	8004ba8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d107      	bne.n	8004b86 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	e010      	b.n	8004ba8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d107      	bne.n	8004ba0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2208      	movs	r2, #8
 8004b94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b9e:	e003      	b.n	8004ba8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff ffb5 	bl	8004b18 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d10b      	bne.n	8004bec <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d136      	bne.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bea:	e031      	b.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10b      	bne.n	8004c0e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d125      	bne.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	e020      	b.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d10b      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d114      	bne.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2e:	e00f      	b.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d10a      	bne.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff46 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d103      	bne.n	8004c84 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	771a      	strb	r2, [r3, #28]
 8004c82:	e019      	b.n	8004cb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d103      	bne.n	8004c96 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2202      	movs	r2, #2
 8004c92:	771a      	strb	r2, [r3, #28]
 8004c94:	e010      	b.n	8004cb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d103      	bne.n	8004ca8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	771a      	strb	r2, [r3, #28]
 8004ca6:	e007      	b.n	8004cb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d102      	bne.n	8004cb8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ff1b 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0xb8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x30>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x30>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <TIM_Base_SetConfig+0xbc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x30>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <TIM_Base_SetConfig+0xc0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <TIM_Base_SetConfig+0xb8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0x62>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0x62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <TIM_Base_SetConfig+0xbc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0x62>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <TIM_Base_SetConfig+0xc0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <TIM_Base_SetConfig+0xb8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d103      	bne.n	8004d74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	615a      	str	r2, [r3, #20]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800

08004d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 0302 	bic.w	r3, r3, #2
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <TIM_OC1_SetConfig+0xc8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10c      	bne.n	8004e06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0308 	bic.w	r3, r3, #8
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <TIM_OC1_SetConfig+0xc8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <TIM_OC2_SetConfig+0xd0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10d      	bne.n	8004ed8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <TIM_OC2_SetConfig+0xd0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d113      	bne.n	8004f08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	40012c00 	.word	0x40012c00

08004f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <TIM_OC3_SetConfig+0xd0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10d      	bne.n	8004faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <TIM_OC3_SetConfig+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d113      	bne.n	8004fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00

08005004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800504e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <TIM_OC4_SetConfig+0x98>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00

080050a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 030a 	bic.w	r3, r3, #10
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 0210 	bic.w	r2, r3, #16
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	031b      	lsls	r3, r3, #12
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	f043 0307 	orr.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	021a      	lsls	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	609a      	str	r2, [r3, #8]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	2201      	movs	r2, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e046      	b.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d009      	beq.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a10      	ldr	r2, [pc, #64]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10c      	bne.n	80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4313      	orrs	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800

080052d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052f4:	b084      	sub	sp, #16
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	f107 0014 	add.w	r0, r7, #20
 8005302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	b004      	add	sp, #16
 8005312:	4770      	bx	lr

08005314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005324:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005328:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	b29a      	uxth	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005348:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800534c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	b29b      	uxth	r3, r3
 800535a:	43db      	mvns	r3, r3
 800535c:	b29b      	uxth	r3, r3
 800535e:	4013      	ands	r3, r2
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800538c:	b084      	sub	sp, #16
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	f107 0014 	add.w	r0, r7, #20
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	b004      	add	sp, #16
 80053ca:	4770      	bx	lr

080053cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b09b      	sub	sp, #108	; 0x6c
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	78db      	ldrb	r3, [r3, #3]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d81f      	bhi.n	800543e <USB_ActivateEndpoint+0x72>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <USB_ActivateEndpoint+0x38>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005415 	.word	0x08005415
 8005408:	08005431 	.word	0x08005431
 800540c:	08005447 	.word	0x08005447
 8005410:	08005423 	.word	0x08005423
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005414:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800541c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005420:	e012      	b.n	8005448 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005422:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005426:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800542a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800542e:	e00b      	b.n	8005448 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005430:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005434:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005438:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800543c:	e004      	b.n	8005448 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005444:	e000      	b.n	8005448 <USB_ActivateEndpoint+0x7c>
      break;
 8005446:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	b29a      	uxth	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	7b1b      	ldrb	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 8149 	bne.w	800574c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8084 	beq.w	80055cc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	011a      	lsls	r2, r3, #4
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	88db      	ldrh	r3, [r3, #6]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	81fb      	strh	r3, [r7, #14]
 8005506:	89fb      	ldrh	r3, [r7, #14]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <USB_ActivateEndpoint+0x17c>
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	81bb      	strh	r3, [r7, #12]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	89bb      	ldrh	r3, [r7, #12]
 8005534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005544:	b29b      	uxth	r3, r3
 8005546:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	78db      	ldrb	r3, [r3, #3]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d020      	beq.n	8005592 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005566:	813b      	strh	r3, [r7, #8]
 8005568:	893b      	ldrh	r3, [r7, #8]
 800556a:	f083 0320 	eor.w	r3, r3, #32
 800556e:	813b      	strh	r3, [r7, #8]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	893b      	ldrh	r3, [r7, #8]
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]
 8005590:	e27f      	b.n	8005a92 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	897b      	ldrh	r3, [r7, #10]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
 80055ca:	e262      	b.n	8005a92 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	4413      	add	r3, r2
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	011a      	lsls	r2, r3, #4
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	88db      	ldrh	r3, [r3, #6]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	4413      	add	r3, r2
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	4413      	add	r3, r2
 800561e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d112      	bne.n	8005652 <USB_ActivateEndpoint+0x286>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005636:	b29a      	uxth	r2, r3
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564a:	b29a      	uxth	r2, r3
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e02f      	b.n	80056b2 <USB_ActivateEndpoint+0x2e6>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b3e      	cmp	r3, #62	; 0x3e
 8005658:	d813      	bhi.n	8005682 <USB_ActivateEndpoint+0x2b6>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <USB_ActivateEndpoint+0x2a8>
 800566e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005670:	3301      	adds	r3, #1
 8005672:	663b      	str	r3, [r7, #96]	; 0x60
 8005674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29a      	uxth	r2, r3
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e017      	b.n	80056b2 <USB_ActivateEndpoint+0x2e6>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	663b      	str	r3, [r7, #96]	; 0x60
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <USB_ActivateEndpoint+0x2d0>
 8005696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005698:	3b01      	subs	r3, #1
 800569a:	663b      	str	r3, [r7, #96]	; 0x60
 800569c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	83fb      	strh	r3, [r7, #30]
 80056c0:	8bfb      	ldrh	r3, [r7, #30]
 80056c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01b      	beq.n	8005702 <USB_ActivateEndpoint+0x336>
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	83bb      	strh	r3, [r7, #28]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8bbb      	ldrh	r3, [r7, #28]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	837b      	strh	r3, [r7, #26]
 800571a:	8b7b      	ldrh	r3, [r7, #26]
 800571c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005720:	837b      	strh	r3, [r7, #26]
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005728:	837b      	strh	r3, [r7, #26]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8b7b      	ldrh	r3, [r7, #26]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	e1a2      	b.n	8005a92 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	65bb      	str	r3, [r7, #88]	; 0x58
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005798:	4413      	add	r3, r2
 800579a:	65bb      	str	r3, [r7, #88]	; 0x58
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	011a      	lsls	r2, r3, #4
 80057a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	657b      	str	r3, [r7, #84]	; 0x54
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	891b      	ldrh	r3, [r3, #8]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	4413      	add	r3, r2
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	011a      	lsls	r2, r3, #4
 80057d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	895b      	ldrh	r3, [r3, #10]
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 8091 	bne.w	800591c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005808:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800580a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01b      	beq.n	800584a <USB_ActivateEndpoint+0x47e>
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	877b      	strh	r3, [r7, #58]	; 0x3a
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	873b      	strh	r3, [r7, #56]	; 0x38
 8005858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01b      	beq.n	800589a <USB_ActivateEndpoint+0x4ce>
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	86fb      	strh	r3, [r7, #54]	; 0x36
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	441a      	add	r2, r3
 8005904:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005916:	b29b      	uxth	r3, r3
 8005918:	8013      	strh	r3, [r2, #0]
 800591a:	e0ba      	b.n	8005a92 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800592c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01d      	beq.n	8005974 <USB_ActivateEndpoint+0x5a8>
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	441a      	add	r2, r3
 800595c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005984:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01d      	beq.n	80059cc <USB_ActivateEndpoint+0x600>
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	78db      	ldrb	r3, [r3, #3]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d024      	beq.n	8005a1e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059f2:	f083 0320 	eor.w	r3, r3, #32
 80059f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
 8005a1c:	e01d      	b.n	8005a5a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005a92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	376c      	adds	r7, #108	; 0x6c
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b08d      	sub	sp, #52	; 0x34
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	7b1b      	ldrb	r3, [r3, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f040 808e 	bne.w	8005bd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d044      	beq.n	8005b46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	81bb      	strh	r3, [r7, #12]
 8005aca:	89bb      	ldrh	r3, [r7, #12]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01b      	beq.n	8005b0c <USB_DeactivateEndpoint+0x6c>
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	817b      	strh	r3, [r7, #10]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b22:	813b      	strh	r3, [r7, #8]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	441a      	add	r2, r3
 8005b2e:	893b      	ldrh	r3, [r7, #8]
 8005b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	8013      	strh	r3, [r2, #0]
 8005b44:	e192      	b.n	8005e6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	827b      	strh	r3, [r7, #18]
 8005b54:	8a7b      	ldrh	r3, [r7, #18]
 8005b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01b      	beq.n	8005b96 <USB_DeactivateEndpoint+0xf6>
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	823b      	strh	r3, [r7, #16]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	8a3b      	ldrh	r3, [r7, #16]
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	81fb      	strh	r3, [r7, #14]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	89fb      	ldrh	r3, [r7, #14]
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]
 8005bce:	e14d      	b.n	8005e6c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 80a5 	bne.w	8005d24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	843b      	strh	r3, [r7, #32]
 8005be8:	8c3b      	ldrh	r3, [r7, #32]
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01b      	beq.n	8005c2a <USB_DeactivateEndpoint+0x18a>
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	83fb      	strh	r3, [r7, #30]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	8bfb      	ldrh	r3, [r7, #30]
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	83bb      	strh	r3, [r7, #28]
 8005c38:	8bbb      	ldrh	r3, [r7, #28]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <USB_DeactivateEndpoint+0x1da>
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c58:	837b      	strh	r3, [r7, #26]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8b7b      	ldrh	r3, [r7, #26]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	833b      	strh	r3, [r7, #24]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8b3b      	ldrh	r3, [r7, #24]
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005caa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	82fb      	strh	r3, [r7, #22]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	8afb      	ldrh	r3, [r7, #22]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d00:	82bb      	strh	r3, [r7, #20]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	8abb      	ldrh	r3, [r7, #20]
 8005d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8013      	strh	r3, [r2, #0]
 8005d22:	e0a3      	b.n	8005e6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <USB_DeactivateEndpoint+0x2d4>
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <USB_DeactivateEndpoint+0x324>
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3734      	adds	r7, #52	; 0x34
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0cc      	sub	sp, #304	; 0x130
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	6018      	str	r0, [r3, #0]
 8005e82:	463b      	mov	r3, r7
 8005e84:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 872e 	bne.w	8006cee <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d905      	bls.n	8005eae <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005eac:	e004      	b.n	8005eb8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	7b1b      	ldrb	r3, [r3, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d134      	bne.n	8005f2c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6959      	ldr	r1, [r3, #20]
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	88da      	ldrh	r2, [r3, #6]
 8005ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	1d38      	adds	r0, r7, #4
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	f001 fc03 	bl	80076e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	1d3a      	adds	r2, r7, #4
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	1d3b      	adds	r3, r7, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	f107 0210 	add.w	r2, r7, #16
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	440a      	add	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	f107 0310 	add.w	r3, r7, #16
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	f000 beac 	b.w	8006c84 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	f040 838c 	bne.w	8006650 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	f240 8330 	bls.w	80065aa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f4a:	1d3b      	adds	r3, r7, #4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	463b      	mov	r3, r7
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	1ad2      	subs	r2, r2, r3
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 819e 	beq.w	80062f8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fc0:	1d3a      	adds	r2, r7, #4
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d17a      	bne.n	80060c6 <USB_EPStartXfer+0x24e>
 8005fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fd4:	1d3a      	adds	r2, r7, #4
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	011a      	lsls	r2, r3, #4
 8005ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4413      	add	r3, r2
 8006004:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11a      	bne.n	800604c <USB_EPStartXfer+0x1d4>
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006024:	b29a      	uxth	r2, r3
 8006026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e062      	b.n	8006112 <USB_EPStartXfer+0x29a>
 800604c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006050:	2b3e      	cmp	r3, #62	; 0x3e
 8006052:	d819      	bhi.n	8006088 <USB_EPStartXfer+0x210>
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <USB_EPStartXfer+0x1fc>
 800606a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800606e:	3301      	adds	r3, #1
 8006070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29a      	uxth	r2, r3
 800607e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e044      	b.n	8006112 <USB_EPStartXfer+0x29a>
 8006088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <USB_EPStartXfer+0x230>
 800609e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060a2:	3b01      	subs	r3, #1
 80060a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e025      	b.n	8006112 <USB_EPStartXfer+0x29a>
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d120      	bne.n	8006112 <USB_EPStartXfer+0x29a>
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	440a      	add	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	463b      	mov	r3, r7
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	b29a      	uxth	r2, r3
 800610a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	895b      	ldrh	r3, [r3, #10]
 8006118:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6959      	ldr	r1, [r3, #20]
 8006122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006126:	b29b      	uxth	r3, r3
 8006128:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800612c:	1d38      	adds	r0, r7, #4
 800612e:	6800      	ldr	r0, [r0, #0]
 8006130:	f001 fad7 	bl	80076e2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	441a      	add	r2, r3
 8006140:	463b      	mov	r3, r7
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	429a      	cmp	r2, r3
 8006154:	d909      	bls.n	800616a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	621a      	str	r2, [r3, #32]
 8006168:	e008      	b.n	800617c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006174:	463b      	mov	r3, r7
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2200      	movs	r2, #0
 800617a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d17a      	bne.n	800627c <USB_EPStartXfer+0x404>
 8006186:	f107 0318 	add.w	r3, r7, #24
 800618a:	1d3a      	adds	r2, r7, #4
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	4619      	mov	r1, r3
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	f107 0218 	add.w	r2, r7, #24
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	440a      	add	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	011a      	lsls	r2, r3, #4
 80061b2:	f107 0318 	add.w	r3, r7, #24
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4413      	add	r3, r2
 80061ba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061be:	f107 0314 	add.w	r3, r7, #20
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11a      	bne.n	8006202 <USB_EPStartXfer+0x38a>
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f107 0314 	add.w	r3, r7, #20
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e067      	b.n	80062d2 <USB_EPStartXfer+0x45a>
 8006202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006206:	2b3e      	cmp	r3, #62	; 0x3e
 8006208:	d819      	bhi.n	800623e <USB_EPStartXfer+0x3c6>
 800620a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <USB_EPStartXfer+0x3b2>
 8006220:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006224:	3301      	adds	r3, #1
 8006226:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800622a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800622e:	b29b      	uxth	r3, r3
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	b29a      	uxth	r2, r3
 8006234:	f107 0314 	add.w	r3, r7, #20
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e049      	b.n	80062d2 <USB_EPStartXfer+0x45a>
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <USB_EPStartXfer+0x3e6>
 8006254:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006258:	3b01      	subs	r3, #1
 800625a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800625e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006262:	b29b      	uxth	r3, r3
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006270:	b29a      	uxth	r2, r3
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	e02a      	b.n	80062d2 <USB_EPStartXfer+0x45a>
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d125      	bne.n	80062d2 <USB_EPStartXfer+0x45a>
 8006286:	f107 0320 	add.w	r3, r7, #32
 800628a:	1d3a      	adds	r2, r7, #4
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006298:	b29b      	uxth	r3, r3
 800629a:	4619      	mov	r1, r3
 800629c:	f107 0320 	add.w	r3, r7, #32
 80062a0:	f107 0220 	add.w	r2, r7, #32
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	440a      	add	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	f107 0320 	add.w	r3, r7, #32
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80062be:	f107 031c 	add.w	r3, r7, #28
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f107 031c 	add.w	r3, r7, #28
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	891b      	ldrh	r3, [r3, #8]
 80062d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6959      	ldr	r1, [r3, #20]
 80062e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062ec:	1d38      	adds	r0, r7, #4
 80062ee:	6800      	ldr	r0, [r0, #0]
 80062f0:	f001 f9f7 	bl	80076e2 <USB_WritePMA>
 80062f4:	f000 bcc6 	b.w	8006c84 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d164      	bne.n	80063cc <USB_EPStartXfer+0x554>
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	64bb      	str	r3, [r7, #72]	; 0x48
 8006308:	1d3b      	adds	r3, r7, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006310:	b29b      	uxth	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	4413      	add	r3, r2
 8006318:	64bb      	str	r3, [r7, #72]	; 0x48
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	011a      	lsls	r2, r3, #4
 8006322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006324:	4413      	add	r3, r2
 8006326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
 800632c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d112      	bne.n	800635a <USB_EPStartXfer+0x4e2>
 8006334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633e:	b29a      	uxth	r2, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e057      	b.n	800640a <USB_EPStartXfer+0x592>
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635e:	2b3e      	cmp	r3, #62	; 0x3e
 8006360:	d817      	bhi.n	8006392 <USB_EPStartXfer+0x51a>
 8006362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <USB_EPStartXfer+0x50a>
 8006378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800637c:	3301      	adds	r3, #1
 800637e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006386:	b29b      	uxth	r3, r3
 8006388:	029b      	lsls	r3, r3, #10
 800638a:	b29a      	uxth	r2, r3
 800638c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e03b      	b.n	800640a <USB_EPStartXfer+0x592>
 8006392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800639c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <USB_EPStartXfer+0x53a>
 80063a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063ac:	3b01      	subs	r3, #1
 80063ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e01e      	b.n	800640a <USB_EPStartXfer+0x592>
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d119      	bne.n	800640a <USB_EPStartXfer+0x592>
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	653b      	str	r3, [r7, #80]	; 0x50
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ea:	4413      	add	r3, r2
 80063ec:	653b      	str	r3, [r7, #80]	; 0x50
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	011a      	lsls	r2, r3, #4
 80063f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006404:	b29a      	uxth	r2, r3
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6959      	ldr	r1, [r3, #20]
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	b29b      	uxth	r3, r3
 8006420:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006424:	1d38      	adds	r0, r7, #4
 8006426:	6800      	ldr	r0, [r0, #0]
 8006428:	f001 f95b 	bl	80076e2 <USB_WritePMA>
            ep->xfer_buff += len;
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	441a      	add	r2, r3
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	429a      	cmp	r2, r3
 800644c:	d909      	bls.n	8006462 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	463b      	mov	r3, r7
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	621a      	str	r2, [r3, #32]
 8006460:	e008      	b.n	8006474 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d164      	bne.n	800654e <USB_EPStartXfer+0x6d6>
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	4413      	add	r3, r2
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d112      	bne.n	80064dc <USB_EPStartXfer+0x664>
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e054      	b.n	8006586 <USB_EPStartXfer+0x70e>
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	2b3e      	cmp	r3, #62	; 0x3e
 80064e2:	d817      	bhi.n	8006514 <USB_EPStartXfer+0x69c>
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <USB_EPStartXfer+0x68c>
 80064fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064fe:	3301      	adds	r3, #1
 8006500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006508:	b29b      	uxth	r3, r3
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	b29a      	uxth	r2, r3
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e038      	b.n	8006586 <USB_EPStartXfer+0x70e>
 8006514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800651e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <USB_EPStartXfer+0x6bc>
 800652a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800652e:	3b01      	subs	r3, #1
 8006530:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006534:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006538:	b29b      	uxth	r3, r3
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006546:	b29a      	uxth	r2, r3
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e01b      	b.n	8006586 <USB_EPStartXfer+0x70e>
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d116      	bne.n	8006586 <USB_EPStartXfer+0x70e>
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006566:	4413      	add	r3, r2
 8006568:	643b      	str	r3, [r7, #64]	; 0x40
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006574:	4413      	add	r3, r2
 8006576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	b29a      	uxth	r2, r3
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	895b      	ldrh	r3, [r3, #10]
 800658c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6959      	ldr	r1, [r3, #20]
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659a:	b29b      	uxth	r3, r3
 800659c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065a0:	1d38      	adds	r0, r7, #4
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	f001 f89d 	bl	80076e2 <USB_WritePMA>
 80065a8:	e36c      	b.n	8006c84 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065aa:	463b      	mov	r3, r7
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660c:	4413      	add	r3, r2
 800660e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	011a      	lsls	r2, r3, #4
 8006618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800661a:	4413      	add	r3, r2
 800661c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006620:	65bb      	str	r3, [r7, #88]	; 0x58
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	b29a      	uxth	r2, r3
 8006628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	891b      	ldrh	r3, [r3, #8]
 8006632:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6959      	ldr	r1, [r3, #20]
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	b29b      	uxth	r3, r3
 8006642:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006646:	1d38      	adds	r0, r7, #4
 8006648:	6800      	ldr	r0, [r0, #0]
 800664a:	f001 f84a 	bl	80076e2 <USB_WritePMA>
 800664e:	e319      	b.n	8006c84 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	463b      	mov	r3, r7
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	b29b      	uxth	r3, r3
 8006692:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	463b      	mov	r3, r7
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8162 	beq.w	8006986 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d164      	bne.n	800679e <USB_EPStartXfer+0x926>
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e8:	4413      	add	r3, r2
 80066ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066fc:	677b      	str	r3, [r7, #116]	; 0x74
 80066fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d112      	bne.n	800672c <USB_EPStartXfer+0x8b4>
 8006706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006710:	b29a      	uxth	r2, r3
 8006712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e057      	b.n	80067dc <USB_EPStartXfer+0x964>
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	2b3e      	cmp	r3, #62	; 0x3e
 8006732:	d817      	bhi.n	8006764 <USB_EPStartXfer+0x8ec>
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <USB_EPStartXfer+0x8dc>
 800674a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800674e:	3301      	adds	r3, #1
 8006750:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e03b      	b.n	80067dc <USB_EPStartXfer+0x964>
 8006764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800676e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <USB_EPStartXfer+0x90c>
 800677a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800677e:	3b01      	subs	r3, #1
 8006780:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006784:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006788:	b29b      	uxth	r3, r3
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	b29b      	uxth	r3, r3
 800678e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006796:	b29a      	uxth	r2, r3
 8006798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e01e      	b.n	80067dc <USB_EPStartXfer+0x964>
 800679e:	463b      	mov	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d119      	bne.n	80067dc <USB_EPStartXfer+0x964>
 80067a8:	1d3b      	adds	r3, r7, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067b8:	4413      	add	r3, r2
 80067ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067be:	463b      	mov	r3, r7
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	895b      	ldrh	r3, [r3, #10]
 80067e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067e6:	463b      	mov	r3, r7
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6959      	ldr	r1, [r3, #20]
 80067ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067f6:	1d38      	adds	r0, r7, #4
 80067f8:	6800      	ldr	r0, [r0, #0]
 80067fa:	f000 ff72 	bl	80076e2 <USB_WritePMA>
          ep->xfer_buff += len;
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006808:	441a      	add	r2, r3
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	429a      	cmp	r2, r3
 800681e:	d909      	bls.n	8006834 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	621a      	str	r2, [r3, #32]
 8006832:	e008      	b.n	8006846 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 821a 	beq.w	8006c84 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d164      	bne.n	8006924 <USB_EPStartXfer+0xaac>
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800686e:	4413      	add	r3, r2
 8006870:	66bb      	str	r3, [r7, #104]	; 0x68
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800687c:	4413      	add	r3, r2
 800687e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006882:	667b      	str	r3, [r7, #100]	; 0x64
 8006884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d112      	bne.n	80068b2 <USB_EPStartXfer+0xa3a>
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006896:	b29a      	uxth	r2, r3
 8006898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e057      	b.n	8006962 <USB_EPStartXfer+0xaea>
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	2b3e      	cmp	r3, #62	; 0x3e
 80068b8:	d817      	bhi.n	80068ea <USB_EPStartXfer+0xa72>
 80068ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <USB_EPStartXfer+0xa62>
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068de:	b29b      	uxth	r3, r3
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e03b      	b.n	8006962 <USB_EPStartXfer+0xaea>
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80068f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USB_EPStartXfer+0xa92>
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006904:	3b01      	subs	r3, #1
 8006906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	b29b      	uxth	r3, r3
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e01e      	b.n	8006962 <USB_EPStartXfer+0xaea>
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d119      	bne.n	8006962 <USB_EPStartXfer+0xaea>
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	673b      	str	r3, [r7, #112]	; 0x70
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006942:	4413      	add	r3, r2
 8006944:	673b      	str	r3, [r7, #112]	; 0x70
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006950:	4413      	add	r3, r2
 8006952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695c:	b29a      	uxth	r2, r3
 800695e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006962:	463b      	mov	r3, r7
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	891b      	ldrh	r3, [r3, #8]
 8006968:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6959      	ldr	r1, [r3, #20]
 8006972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006976:	b29b      	uxth	r3, r3
 8006978:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800697c:	1d38      	adds	r0, r7, #4
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	f000 feaf 	bl	80076e2 <USB_WritePMA>
 8006984:	e17e      	b.n	8006c84 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006986:	463b      	mov	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d16f      	bne.n	8006a70 <USB_EPStartXfer+0xbf8>
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069a8:	4413      	add	r3, r2
 80069aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ba:	4413      	add	r3, r2
 80069bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d116      	bne.n	80069fa <USB_EPStartXfer+0xb82>
 80069cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e05f      	b.n	8006aba <USB_EPStartXfer+0xc42>
 80069fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006a00:	d818      	bhi.n	8006a34 <USB_EPStartXfer+0xbbc>
 8006a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <USB_EPStartXfer+0xbaa>
 8006a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e042      	b.n	8006aba <USB_EPStartXfer+0xc42>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USB_EPStartXfer+0xbdc>
 8006a4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006a54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e024      	b.n	8006aba <USB_EPStartXfer+0xc42>
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d11f      	bne.n	8006aba <USB_EPStartXfer+0xc42>
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a92:	4413      	add	r3, r2
 8006a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	011a      	lsls	r2, r3, #4
 8006aa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6959      	ldr	r1, [r3, #20]
 8006aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ad4:	1d38      	adds	r0, r7, #4
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	f000 fe03 	bl	80076e2 <USB_WritePMA>
          ep->xfer_buff += len;
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae6:	441a      	add	r2, r3
 8006ae8:	463b      	mov	r3, r7
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	463b      	mov	r3, r7
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d909      	bls.n	8006b12 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	621a      	str	r2, [r3, #32]
 8006b10:	e008      	b.n	8006b24 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006b12:	463b      	mov	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2200      	movs	r2, #0
 8006b22:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80ab 	beq.w	8006c84 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b2e:	1d3b      	adds	r3, r7, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b36:	463b      	mov	r3, r7
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d16f      	bne.n	8006c20 <USB_EPStartXfer+0xda8>
 8006b40:	1d3b      	adds	r3, r7, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b48:	1d3b      	adds	r3, r7, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b58:	4413      	add	r3, r2
 8006b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	011a      	lsls	r2, r3, #4
 8006b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d116      	bne.n	8006baa <USB_EPStartXfer+0xd32>
 8006b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e05b      	b.n	8006c62 <USB_EPStartXfer+0xdea>
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	2b3e      	cmp	r3, #62	; 0x3e
 8006bb0:	d818      	bhi.n	8006be4 <USB_EPStartXfer+0xd6c>
 8006bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <USB_EPStartXfer+0xd5a>
 8006bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e03e      	b.n	8006c62 <USB_EPStartXfer+0xdea>
 8006be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <USB_EPStartXfer+0xd8c>
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	029b      	lsls	r3, r3, #10
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e020      	b.n	8006c62 <USB_EPStartXfer+0xdea>
 8006c20:	463b      	mov	r3, r7
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d11b      	bne.n	8006c62 <USB_EPStartXfer+0xdea>
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c40:	463b      	mov	r3, r7
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	011a      	lsls	r2, r3, #4
 8006c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6959      	ldr	r1, [r3, #20]
 8006c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c7c:	1d38      	adds	r0, r7, #4
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	f000 fd2f 	bl	80076e2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c84:	1d3b      	adds	r3, r7, #4
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f107 020a 	add.w	r2, r7, #10
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca2:	8013      	strh	r3, [r2, #0]
 8006ca4:	f107 030a 	add.w	r3, r7, #10
 8006ca8:	f107 020a 	add.w	r2, r7, #10
 8006cac:	8812      	ldrh	r2, [r2, #0]
 8006cae:	f082 0210 	eor.w	r2, r2, #16
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	f107 030a 	add.w	r3, r7, #10
 8006cb8:	f107 020a 	add.w	r2, r7, #10
 8006cbc:	8812      	ldrh	r2, [r2, #0]
 8006cbe:	f082 0220 	eor.w	r2, r2, #32
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	463b      	mov	r3, r7
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	f107 030a 	add.w	r3, r7, #10
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8013      	strh	r3, [r2, #0]
 8006cec:	e3b5      	b.n	800745a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	7b1b      	ldrb	r3, [r3, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f040 8090 	bne.w	8006e1a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d90e      	bls.n	8006d28 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	619a      	str	r2, [r3, #24]
 8006d26:	e008      	b.n	8006d3a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d52:	4413      	add	r3, r2
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	011a      	lsls	r2, r3, #4
 8006d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <USB_EPStartXfer+0xf2c>
 8006d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006da0:	801a      	strh	r2, [r3, #0]
 8006da2:	e32c      	b.n	80073fe <USB_EPStartXfer+0x1586>
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	2b3e      	cmp	r3, #62	; 0x3e
 8006daa:	d818      	bhi.n	8006dde <USB_EPStartXfer+0xf66>
 8006dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <USB_EPStartXfer+0xf54>
 8006dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006dcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	029b      	lsls	r3, r3, #10
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e30f      	b.n	80073fe <USB_EPStartXfer+0x1586>
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <USB_EPStartXfer+0xf86>
 8006df4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006dfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	029b      	lsls	r3, r3, #10
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e2f1      	b.n	80073fe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	78db      	ldrb	r3, [r3, #3]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	f040 818f 	bne.w	8007144 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d175      	bne.n	8006f1c <USB_EPStartXfer+0x10a4>
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e38:	1d3b      	adds	r3, r7, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e48:	4413      	add	r3, r2
 8006e4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	011a      	lsls	r2, r3, #4
 8006e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e64:	463b      	mov	r3, r7
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d116      	bne.n	8006e9c <USB_EPStartXfer+0x1024>
 8006e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e065      	b.n	8006f68 <USB_EPStartXfer+0x10f0>
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea4:	d81a      	bhi.n	8006edc <USB_EPStartXfer+0x1064>
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USB_EPStartXfer+0x1052>
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e045      	b.n	8006f68 <USB_EPStartXfer+0x10f0>
 8006edc:	463b      	mov	r3, r7
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d104      	bne.n	8006f00 <USB_EPStartXfer+0x1088>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	3b01      	subs	r3, #1
 8006efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	029b      	lsls	r3, r3, #10
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	e025      	b.n	8006f68 <USB_EPStartXfer+0x10f0>
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d120      	bne.n	8006f68 <USB_EPStartXfer+0x10f0>
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f2e:	1d3b      	adds	r3, r7, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3e:	4413      	add	r3, r2
 8006f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	011a      	lsls	r2, r3, #4
 8006f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	1d3b      	adds	r3, r7, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d175      	bne.n	8007066 <USB_EPStartXfer+0x11ee>
 8006f7a:	1d3b      	adds	r3, r7, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f92:	4413      	add	r3, r2
 8006f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f98:	463b      	mov	r3, r7
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	011a      	lsls	r2, r3, #4
 8006fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d116      	bne.n	8006fe6 <USB_EPStartXfer+0x116e>
 8006fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e061      	b.n	80070aa <USB_EPStartXfer+0x1232>
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b3e      	cmp	r3, #62	; 0x3e
 8006fee:	d81a      	bhi.n	8007026 <USB_EPStartXfer+0x11ae>
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <USB_EPStartXfer+0x119c>
 800700a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800700e:	3301      	adds	r3, #1
 8007010:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007018:	b29b      	uxth	r3, r3
 800701a:	029b      	lsls	r3, r3, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e041      	b.n	80070aa <USB_EPStartXfer+0x1232>
 8007026:	463b      	mov	r3, r7
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <USB_EPStartXfer+0x11d2>
 8007040:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007044:	3b01      	subs	r3, #1
 8007046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800704a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800704e:	b29b      	uxth	r3, r3
 8007050:	029b      	lsls	r3, r3, #10
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e021      	b.n	80070aa <USB_EPStartXfer+0x1232>
 8007066:	463b      	mov	r3, r7
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d11c      	bne.n	80070aa <USB_EPStartXfer+0x1232>
 8007070:	1d3b      	adds	r3, r7, #4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007080:	4413      	add	r3, r2
 8007082:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007086:	463b      	mov	r3, r7
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	011a      	lsls	r2, r3, #4
 800708e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007092:	4413      	add	r3, r2
 8007094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800709c:	463b      	mov	r3, r7
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070aa:	463b      	mov	r3, r7
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 81a4 	beq.w	80073fe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	463b      	mov	r3, r7
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <USB_EPStartXfer+0x126a>
 80070d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 8187 	bne.w	80073fe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 8180 	bne.w	80073fe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007118:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
 8007142:	e15c      	b.n	80073fe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	78db      	ldrb	r3, [r3, #3]
 800714a:	2b01      	cmp	r3, #1
 800714c:	f040 8155 	bne.w	80073fa <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007150:	463b      	mov	r3, r7
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	429a      	cmp	r2, r3
 800715e:	d90e      	bls.n	800717e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007160:	463b      	mov	r3, r7
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	463b      	mov	r3, r7
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	619a      	str	r2, [r3, #24]
 800717c:	e008      	b.n	8007190 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007188:	463b      	mov	r3, r7
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d16f      	bne.n	800727a <USB_EPStartXfer+0x1402>
 800719a:	1d3b      	adds	r3, r7, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071b2:	4413      	add	r3, r2
 80071b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	011a      	lsls	r2, r3, #4
 80071c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071c4:	4413      	add	r3, r2
 80071c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d116      	bne.n	8007204 <USB_EPStartXfer+0x138c>
 80071d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e05f      	b.n	80072c4 <USB_EPStartXfer+0x144c>
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	2b3e      	cmp	r3, #62	; 0x3e
 800720a:	d818      	bhi.n	800723e <USB_EPStartXfer+0x13c6>
 800720c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <USB_EPStartXfer+0x13b4>
 8007222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007226:	3301      	adds	r3, #1
 8007228:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800722c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29a      	uxth	r2, r3
 8007236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e042      	b.n	80072c4 <USB_EPStartXfer+0x144c>
 800723e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USB_EPStartXfer+0x13e6>
 8007254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007258:	3b01      	subs	r3, #1
 800725a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007262:	b29b      	uxth	r3, r3
 8007264:	029b      	lsls	r3, r3, #10
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e024      	b.n	80072c4 <USB_EPStartXfer+0x144c>
 800727a:	463b      	mov	r3, r7
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d11f      	bne.n	80072c4 <USB_EPStartXfer+0x144c>
 8007284:	1d3b      	adds	r3, r7, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007294:	b29b      	uxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729c:	4413      	add	r3, r2
 800729e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072cc:	463b      	mov	r3, r7
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d16f      	bne.n	80073b6 <USB_EPStartXfer+0x153e>
 80072d6:	1d3b      	adds	r3, r7, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ee:	4413      	add	r3, r2
 80072f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072f4:	463b      	mov	r3, r7
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	011a      	lsls	r2, r3, #4
 80072fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007300:	4413      	add	r3, r2
 8007302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800730a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d116      	bne.n	8007340 <USB_EPStartXfer+0x14c8>
 8007312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007336:	b29a      	uxth	r2, r3
 8007338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800733c:	801a      	strh	r2, [r3, #0]
 800733e:	e05e      	b.n	80073fe <USB_EPStartXfer+0x1586>
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	2b3e      	cmp	r3, #62	; 0x3e
 8007346:	d818      	bhi.n	800737a <USB_EPStartXfer+0x1502>
 8007348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <USB_EPStartXfer+0x14f0>
 800735e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007362:	3301      	adds	r3, #1
 8007364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007368:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800736c:	b29b      	uxth	r3, r3
 800736e:	029b      	lsls	r3, r3, #10
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e041      	b.n	80073fe <USB_EPStartXfer+0x1586>
 800737a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <USB_EPStartXfer+0x1522>
 8007390:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007394:	3b01      	subs	r3, #1
 8007396:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800739a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	e023      	b.n	80073fe <USB_EPStartXfer+0x1586>
 80073b6:	463b      	mov	r3, r7
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d11e      	bne.n	80073fe <USB_EPStartXfer+0x1586>
 80073c0:	1d3b      	adds	r3, r7, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d0:	4413      	add	r3, r2
 80073d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	011a      	lsls	r2, r3, #4
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	4413      	add	r3, r2
 80073e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e001      	b.n	80073fe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e02e      	b.n	800745c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	463b      	mov	r3, r7
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007418:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800741c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007424:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007428:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800742c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007430:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	463b      	mov	r3, r7
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d020      	beq.n	80074ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748e:	81bb      	strh	r3, [r7, #12]
 8007490:	89bb      	ldrh	r3, [r7, #12]
 8007492:	f083 0310 	eor.w	r3, r3, #16
 8007496:	81bb      	strh	r3, [r7, #12]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	89bb      	ldrh	r3, [r7, #12]
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]
 80074b8:	e01f      	b.n	80074fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d0:	81fb      	strh	r3, [r7, #14]
 80074d2:	89fb      	ldrh	r3, [r7, #14]
 80074d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074d8:	81fb      	strh	r3, [r7, #14]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr

08007506 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	7b1b      	ldrb	r3, [r3, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f040 809d 	bne.w	8007654 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04c      	beq.n	80075bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	823b      	strh	r3, [r7, #16]
 8007530:	8a3b      	ldrh	r3, [r7, #16]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01b      	beq.n	8007572 <USB_EPClearStall+0x6c>
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007550:	81fb      	strh	r3, [r7, #14]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	441a      	add	r2, r3
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800756e:	b29b      	uxth	r3, r3
 8007570:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	78db      	ldrb	r3, [r3, #3]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d06c      	beq.n	8007654 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007590:	81bb      	strh	r3, [r7, #12]
 8007592:	89bb      	ldrh	r3, [r7, #12]
 8007594:	f083 0320 	eor.w	r3, r3, #32
 8007598:	81bb      	strh	r3, [r7, #12]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	89bb      	ldrh	r3, [r7, #12]
 80075a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	8013      	strh	r3, [r2, #0]
 80075ba:	e04b      	b.n	8007654 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	82fb      	strh	r3, [r7, #22]
 80075ca:	8afb      	ldrh	r3, [r7, #22]
 80075cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01b      	beq.n	800760c <USB_EPClearStall+0x106>
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	82bb      	strh	r3, [r7, #20]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	441a      	add	r2, r3
 80075f6:	8abb      	ldrh	r3, [r7, #20]
 80075f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	b29b      	uxth	r3, r3
 800760a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	827b      	strh	r3, [r7, #18]
 8007624:	8a7b      	ldrh	r3, [r7, #18]
 8007626:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800762a:	827b      	strh	r3, [r7, #18]
 800762c:	8a7b      	ldrh	r3, [r7, #18]
 800762e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007632:	827b      	strh	r3, [r7, #18]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	441a      	add	r2, r3
 800763e:	8a7b      	ldrh	r3, [r7, #18]
 8007640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2280      	movs	r2, #128	; 0x80
 8007676:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076bc:	b29b      	uxth	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b08d      	sub	sp, #52	; 0x34
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	4611      	mov	r1, r2
 80076ee:	461a      	mov	r2, r3
 80076f0:	460b      	mov	r3, r1
 80076f2:	80fb      	strh	r3, [r7, #6]
 80076f4:	4613      	mov	r3, r2
 80076f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076f8:	88bb      	ldrh	r3, [r7, #4]
 80076fa:	3301      	adds	r3, #1
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	005a      	lsls	r2, r3, #1
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771a:	e01e      	b.n	800775a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	3301      	adds	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	b29b      	uxth	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	b29a      	uxth	r2, r3
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	3302      	adds	r3, #2
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	3302      	adds	r3, #2
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	3301      	adds	r3, #1
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	3b01      	subs	r3, #1
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1dd      	bne.n	800771c <USB_WritePMA+0x3a>
  }
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3734      	adds	r7, #52	; 0x34
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800776c:	b480      	push	{r7}
 800776e:	b08b      	sub	sp, #44	; 0x2c
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	460b      	mov	r3, r1
 800777c:	80fb      	strh	r3, [r7, #6]
 800777e:	4613      	mov	r3, r2
 8007780:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007782:	88bb      	ldrh	r3, [r7, #4]
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	005a      	lsls	r2, r3, #1
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800779e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
 80077a4:	e01b      	b.n	80077de <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	3302      	adds	r3, #2
 80077b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	3301      	adds	r3, #1
 80077c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	0a1b      	lsrs	r3, r3, #8
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3301      	adds	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	3302      	adds	r3, #2
 80077d6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	3b01      	subs	r3, #1
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e0      	bne.n	80077a6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077e4:	88bb      	ldrh	r3, [r7, #4]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	701a      	strb	r2, [r3, #0]
  }
}
 8007800:	bf00      	nop
 8007802:	372c      	adds	r7, #44	; 0x2c
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c1b      	ldrb	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d115      	bne.n	800784e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	2202      	movs	r2, #2
 8007828:	2181      	movs	r1, #129	; 0x81
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 ff0f 	bl	800964e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783a:	2202      	movs	r2, #2
 800783c:	2101      	movs	r1, #1
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 ff05 	bl	800964e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800784c:	e012      	b.n	8007874 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	2202      	movs	r2, #2
 8007852:	2181      	movs	r1, #129	; 0x81
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fefa 	bl	800964e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	2202      	movs	r2, #2
 8007864:	2101      	movs	r1, #1
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fef1 	bl	800964e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007874:	2308      	movs	r3, #8
 8007876:	2203      	movs	r2, #3
 8007878:	2182      	movs	r1, #130	; 0x82
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fee7 	bl	800964e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007886:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800788a:	f002 f807 	bl	800989c <USBD_static_malloc>
 800788e:	4602      	mov	r2, r0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e026      	b.n	80078f4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7c1b      	ldrb	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 ffa7 	bl	8009830 <USBD_LL_PrepareReceive>
 80078e2:	e007      	b.n	80078f4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 ff9e 	bl	8009830 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800790e:	2181      	movs	r1, #129	; 0x81
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fec2 	bl	800969a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800791c:	2101      	movs	r1, #1
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 febb 	bl	800969a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800792c:	2182      	movs	r1, #130	; 0x82
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 feb3 	bl	800969a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00e      	beq.n	8007962 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007954:	4618      	mov	r0, r3
 8007956:	f001 ffad 	bl	80098b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007992:	2b00      	cmp	r3, #0
 8007994:	d039      	beq.n	8007a0a <USBD_CDC_Setup+0x9e>
 8007996:	2b20      	cmp	r3, #32
 8007998:	d17f      	bne.n	8007a9a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d029      	beq.n	80079f6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da11      	bge.n	80079d0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	88d2      	ldrh	r2, [r2, #6]
 80079be:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079c0:	6939      	ldr	r1, [r7, #16]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fa0a 	bl	8008de2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079ce:	e06b      	b.n	8007aa8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	785a      	ldrb	r2, [r3, #1]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079e6:	6939      	ldr	r1, [r7, #16]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	88db      	ldrh	r3, [r3, #6]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fa25 	bl	8008e3e <USBD_CtlPrepareRx>
      break;
 80079f4:	e058      	b.n	8007aa8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	7850      	ldrb	r0, [r2, #1]
 8007a02:	2200      	movs	r2, #0
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	4798      	blx	r3
      break;
 8007a08:	e04e      	b.n	8007aa8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b0b      	cmp	r3, #11
 8007a10:	d02e      	beq.n	8007a70 <USBD_CDC_Setup+0x104>
 8007a12:	2b0b      	cmp	r3, #11
 8007a14:	dc38      	bgt.n	8007a88 <USBD_CDC_Setup+0x11c>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <USBD_CDC_Setup+0xb4>
 8007a1a:	2b0a      	cmp	r3, #10
 8007a1c:	d014      	beq.n	8007a48 <USBD_CDC_Setup+0xdc>
 8007a1e:	e033      	b.n	8007a88 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d107      	bne.n	8007a3a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a2a:	f107 030c 	add.w	r3, r7, #12
 8007a2e:	2202      	movs	r2, #2
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 f9d5 	bl	8008de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a38:	e02e      	b.n	8007a98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f966 	bl	8008d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a42:	2302      	movs	r3, #2
 8007a44:	75fb      	strb	r3, [r7, #23]
          break;
 8007a46:	e027      	b.n	8007a98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d107      	bne.n	8007a62 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a52:	f107 030f 	add.w	r3, r7, #15
 8007a56:	2201      	movs	r2, #1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f9c1 	bl	8008de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a60:	e01a      	b.n	8007a98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f952 	bl	8008d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6e:	e013      	b.n	8007a98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d00d      	beq.n	8007a96 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f946 	bl	8008d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a86:	e006      	b.n	8007a96 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f93f 	bl	8008d0e <USBD_CtlError>
          ret = USBD_FAIL;
 8007a90:	2302      	movs	r3, #2
 8007a92:	75fb      	strb	r3, [r7, #23]
          break;
 8007a94:	e000      	b.n	8007a98 <USBD_CDC_Setup+0x12c>
          break;
 8007a96:	bf00      	nop
      }
      break;
 8007a98:	e006      	b.n	8007aa8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f936 	bl	8008d0e <USBD_CtlError>
      ret = USBD_FAIL;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	bf00      	nop
  }

  return ret;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007acc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d03a      	beq.n	8007b4e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	331c      	adds	r3, #28
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d029      	beq.n	8007b42 <USBD_CDC_DataIn+0x90>
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	331c      	adds	r3, #28
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	78f9      	ldrb	r1, [r7, #3]
 8007b02:	68b8      	ldr	r0, [r7, #8]
 8007b04:	460b      	mov	r3, r1
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4403      	add	r3, r0
 8007b0e:	3338      	adds	r3, #56	; 0x38
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b16:	fb03 f301 	mul.w	r3, r3, r1
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	331c      	adds	r3, #28
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b34:	78f9      	ldrb	r1, [r7, #3]
 8007b36:	2300      	movs	r3, #0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fe55 	bl	80097ea <USBD_LL_Transmit>
 8007b40:	e003      	b.n	8007b4a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e000      	b.n	8007b50 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b4e:	2302      	movs	r3, #2
  }
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fe80 	bl	8009876 <USBD_LL_GetRxDataSize>
 8007b76:	4602      	mov	r2, r0
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00d      	beq.n	8007ba4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4798      	blx	r3

    return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <USBD_CDC_EP0_RxReady+0x46>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007bce:	2bff      	cmp	r3, #255	; 0xff
 8007bd0:	d010      	beq.n	8007bf4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007be0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007be8:	b292      	uxth	r2, r2
 8007bea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	22ff      	movs	r2, #255	; 0xff
 8007bf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2243      	movs	r2, #67	; 0x43
 8007c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20000194 	.word	0x20000194

08007c20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2243      	movs	r2, #67	; 0x43
 8007c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c2e:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20000150 	.word	0x20000150

08007c40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2243      	movs	r2, #67	; 0x43
 8007c4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c4e:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	200001d8 	.word	0x200001d8

08007c60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	220a      	movs	r2, #10
 8007c6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c6e:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	2000010c 	.word	0x2000010c

08007c80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007cca:	88fa      	ldrh	r2, [r7, #6]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01c      	beq.n	8007d58 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d115      	bne.n	8007d54 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2181      	movs	r1, #129	; 0x81
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fd4d 	bl	80097ea <USBD_LL_Transmit>

      return USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e002      	b.n	8007d5a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d58:	2302      	movs	r3, #2
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	7c1b      	ldrb	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8e:	2101      	movs	r1, #1
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fd4d 	bl	8009830 <USBD_LL_PrepareReceive>
 8007d96:	e007      	b.n	8007da8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	2101      	movs	r1, #1
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fd44 	bl	8009830 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e000      	b.n	8007dae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007dac:	2302      	movs	r3, #2
  }
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e01a      	b.n	8007e04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	79fa      	ldrb	r2, [r7, #7]
 8007dfa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f001 fbb1 	bl	8009564 <USBD_LL_Init>

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d006      	beq.n	8007e2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e001      	b.n	8007e32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr

08007e3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fbe6 	bl	8009618 <USBD_LL_Start>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e76:	2302      	movs	r3, #2
 8007e78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00c      	beq.n	8007e9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fed8 	bl	8008c96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d016      	beq.n	8007f38 <USBD_LL_SetupStage+0x6a>
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d81c      	bhi.n	8007f48 <USBD_LL_SetupStage+0x7a>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <USBD_LL_SetupStage+0x4a>
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d008      	beq.n	8007f28 <USBD_LL_SetupStage+0x5a>
 8007f16:	e017      	b.n	8007f48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f9cb 	bl	80082bc <USBD_StdDevReq>
      break;
 8007f26:	e01a      	b.n	8007f5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa2d 	bl	8008390 <USBD_StdItfReq>
      break;
 8007f36:	e012      	b.n	8007f5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fa6d 	bl	8008420 <USBD_StdEPReq>
      break;
 8007f46:	e00a      	b.n	8007f5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fbbe 	bl	80096d8 <USBD_LL_StallEP>
      break;
 8007f5c:	bf00      	nop
  }

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	460b      	mov	r3, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d14b      	bne.n	8008014 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d134      	bne.n	8007ff8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d919      	bls.n	8007fce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d203      	bcs.n	8007fbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	e002      	b.n	8007fc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 ff57 	bl	8008e7a <USBD_CtlContinueRx>
 8007fcc:	e038      	b.n	8008040 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d105      	bne.n	8007ff0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 ff54 	bl	8008e9e <USBD_CtlSendStatus>
 8007ff6:	e023      	b.n	8008040 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d11e      	bne.n	8008040 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f001 fb63 	bl	80096d8 <USBD_LL_StallEP>
 8008012:	e015      	b.n	8008040 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00d      	beq.n	800803c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008026:	2b03      	cmp	r3, #3
 8008028:	d108      	bne.n	800803c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	7afa      	ldrb	r2, [r7, #11]
 8008034:	4611      	mov	r1, r2
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3
 800803a:	e001      	b.n	8008040 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800803c:	2302      	movs	r3, #2
 800803e:	e000      	b.n	8008042 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	460b      	mov	r3, r1
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008058:	7afb      	ldrb	r3, [r7, #11]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d17f      	bne.n	800815e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3314      	adds	r3, #20
 8008062:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800806a:	2b02      	cmp	r3, #2
 800806c:	d15c      	bne.n	8008128 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	d915      	bls.n	80080a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	1ad2      	subs	r2, r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	b29b      	uxth	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fec1 	bl	8008e1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008098:	2300      	movs	r3, #0
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 fbc6 	bl	8009830 <USBD_LL_PrepareReceive>
 80080a4:	e04e      	b.n	8008144 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	6912      	ldr	r2, [r2, #16]
 80080ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80080b2:	fb02 f201 	mul.w	r2, r2, r1
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11c      	bne.n	80080f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d316      	bcc.n	80080f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d20f      	bcs.n	80080f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fe9d 	bl	8008e1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e8:	2300      	movs	r3, #0
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 fb9e 	bl	8009830 <USBD_LL_PrepareReceive>
 80080f4:	e026      	b.n	8008144 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008108:	2b03      	cmp	r3, #3
 800810a:	d105      	bne.n	8008118 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f001 fadc 	bl	80096d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fecf 	bl	8008ec4 <USBD_CtlReceiveStatus>
 8008126:	e00d      	b.n	8008144 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800812e:	2b04      	cmp	r3, #4
 8008130:	d004      	beq.n	800813c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800813c:	2180      	movs	r1, #128	; 0x80
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f001 faca 	bl	80096d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d11d      	bne.n	800818a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fe81 	bl	8007e56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800815c:	e015      	b.n	800818a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00d      	beq.n	8008186 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008170:	2b03      	cmp	r3, #3
 8008172:	d108      	bne.n	8008186 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	7afa      	ldrb	r2, [r7, #11]
 800817e:	4611      	mov	r1, r2
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	4798      	blx	r3
 8008184:	e001      	b.n	800818a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	e000      	b.n	800818c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800819c:	2340      	movs	r3, #64	; 0x40
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 fa53 	bl	800964e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2240      	movs	r2, #64	; 0x40
 80081b4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	2200      	movs	r2, #0
 80081bc:	2180      	movs	r1, #128	; 0x80
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 fa45 	bl	800964e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2240      	movs	r2, #64	; 0x40
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d009      	beq.n	800820c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6852      	ldr	r2, [r2, #4]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	4611      	mov	r1, r2
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
  }

  return USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2204      	movs	r2, #4
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826a:	2b04      	cmp	r3, #4
 800826c:	d105      	bne.n	800827a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	2b03      	cmp	r3, #3
 8008296:	d10b      	bne.n	80082b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d005      	beq.n	80082e2 <USBD_StdDevReq+0x26>
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d84f      	bhi.n	800837a <USBD_StdDevReq+0xbe>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <USBD_StdDevReq+0x36>
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d14b      	bne.n	800837a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
      break;
 80082f0:	e048      	b.n	8008384 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d839      	bhi.n	800836e <USBD_StdDevReq+0xb2>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <USBD_StdDevReq+0x44>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008351 	.word	0x08008351
 8008304:	08008365 	.word	0x08008365
 8008308:	0800836f 	.word	0x0800836f
 800830c:	0800835b 	.word	0x0800835b
 8008310:	0800836f 	.word	0x0800836f
 8008314:	08008333 	.word	0x08008333
 8008318:	08008329 	.word	0x08008329
 800831c:	0800836f 	.word	0x0800836f
 8008320:	08008347 	.word	0x08008347
 8008324:	0800833d 	.word	0x0800833d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9dc 	bl	80086e8 <USBD_GetDescriptor>
          break;
 8008330:	e022      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb3f 	bl	80089b8 <USBD_SetAddress>
          break;
 800833a:	e01d      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb7e 	bl	8008a40 <USBD_SetConfig>
          break;
 8008344:	e018      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc07 	bl	8008b5c <USBD_GetConfig>
          break;
 800834e:	e013      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc37 	bl	8008bc6 <USBD_GetStatus>
          break;
 8008358:	e00e      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc65 	bl	8008c2c <USBD_SetFeature>
          break;
 8008362:	e009      	b.n	8008378 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fc74 	bl	8008c54 <USBD_ClrFeature>
          break;
 800836c:	e004      	b.n	8008378 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fccc 	bl	8008d0e <USBD_CtlError>
          break;
 8008376:	bf00      	nop
      }
      break;
 8008378:	e004      	b.n	8008384 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fcc6 	bl	8008d0e <USBD_CtlError>
      break;
 8008382:	bf00      	nop
  }

  return ret;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop

08008390 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d005      	beq.n	80083b6 <USBD_StdItfReq+0x26>
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d82e      	bhi.n	800840c <USBD_StdItfReq+0x7c>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <USBD_StdItfReq+0x26>
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d12a      	bne.n	800840c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	3b01      	subs	r3, #1
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d81d      	bhi.n	80083fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	889b      	ldrh	r3, [r3, #4]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d813      	bhi.n	80083f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	88db      	ldrh	r3, [r3, #6]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d110      	bne.n	8008408 <USBD_StdItfReq+0x78>
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10d      	bne.n	8008408 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fd56 	bl	8008e9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083f2:	e009      	b.n	8008408 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc89 	bl	8008d0e <USBD_CtlError>
          break;
 80083fc:	e004      	b.n	8008408 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc84 	bl	8008d0e <USBD_CtlError>
          break;
 8008406:	e000      	b.n	800840a <USBD_StdItfReq+0x7a>
          break;
 8008408:	bf00      	nop
      }
      break;
 800840a:	e004      	b.n	8008416 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc7d 	bl	8008d0e <USBD_CtlError>
      break;
 8008414:	bf00      	nop
  }

  return USBD_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	889b      	ldrh	r3, [r3, #4]
 8008432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d007      	beq.n	8008450 <USBD_StdEPReq+0x30>
 8008440:	2b40      	cmp	r3, #64	; 0x40
 8008442:	f200 8146 	bhi.w	80086d2 <USBD_StdEPReq+0x2b2>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <USBD_StdEPReq+0x40>
 800844a:	2b20      	cmp	r3, #32
 800844c:	f040 8141 	bne.w	80086d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
      break;
 800845e:	e13d      	b.n	80086dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008468:	2b20      	cmp	r3, #32
 800846a:	d10a      	bne.n	8008482 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	e12d      	b.n	80086de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b03      	cmp	r3, #3
 8008488:	d007      	beq.n	800849a <USBD_StdEPReq+0x7a>
 800848a:	2b03      	cmp	r3, #3
 800848c:	f300 811b 	bgt.w	80086c6 <USBD_StdEPReq+0x2a6>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d072      	beq.n	800857a <USBD_StdEPReq+0x15a>
 8008494:	2b01      	cmp	r3, #1
 8008496:	d03a      	beq.n	800850e <USBD_StdEPReq+0xee>
 8008498:	e115      	b.n	80086c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d002      	beq.n	80084aa <USBD_StdEPReq+0x8a>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d015      	beq.n	80084d4 <USBD_StdEPReq+0xb4>
 80084a8:	e02b      	b.n	8008502 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00c      	beq.n	80084ca <USBD_StdEPReq+0xaa>
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d009      	beq.n	80084ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 f90c 	bl	80096d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80084c0:	2180      	movs	r1, #128	; 0x80
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 f908 	bl	80096d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084c8:	e020      	b.n	800850c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc1e 	bl	8008d0e <USBD_CtlError>
              break;
 80084d2:	e01b      	b.n	800850c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10e      	bne.n	80084fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <USBD_StdEPReq+0xda>
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d008      	beq.n	80084fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	88db      	ldrh	r3, [r3, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f8ef 	bl	80096d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fccf 	bl	8008e9e <USBD_CtlSendStatus>

              break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc02 	bl	8008d0e <USBD_CtlError>
              break;
 800850a:	bf00      	nop
          }
          break;
 800850c:	e0e0      	b.n	80086d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008514:	2b02      	cmp	r3, #2
 8008516:	d002      	beq.n	800851e <USBD_StdEPReq+0xfe>
 8008518:	2b03      	cmp	r3, #3
 800851a:	d015      	beq.n	8008548 <USBD_StdEPReq+0x128>
 800851c:	e026      	b.n	800856c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <USBD_StdEPReq+0x11e>
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	2b80      	cmp	r3, #128	; 0x80
 8008528:	d009      	beq.n	800853e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 f8d2 	bl	80096d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008534:	2180      	movs	r1, #128	; 0x80
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 f8ce 	bl	80096d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800853c:	e01c      	b.n	8008578 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbe4 	bl	8008d0e <USBD_CtlError>
              break;
 8008546:	e017      	b.n	8008578 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d112      	bne.n	8008576 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f8d9 	bl	8009716 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc9a 	bl	8008e9e <USBD_CtlSendStatus>
              }
              break;
 800856a:	e004      	b.n	8008576 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fbcd 	bl	8008d0e <USBD_CtlError>
              break;
 8008574:	e000      	b.n	8008578 <USBD_StdEPReq+0x158>
              break;
 8008576:	bf00      	nop
          }
          break;
 8008578:	e0aa      	b.n	80086d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	2b02      	cmp	r3, #2
 8008582:	d002      	beq.n	800858a <USBD_StdEPReq+0x16a>
 8008584:	2b03      	cmp	r3, #3
 8008586:	d032      	beq.n	80085ee <USBD_StdEPReq+0x1ce>
 8008588:	e097      	b.n	80086ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <USBD_StdEPReq+0x180>
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b80      	cmp	r3, #128	; 0x80
 8008594:	d004      	beq.n	80085a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fbb8 	bl	8008d0e <USBD_CtlError>
                break;
 800859e:	e091      	b.n	80086c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da0b      	bge.n	80085c0 <USBD_StdEPReq+0x1a0>
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3310      	adds	r3, #16
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	3304      	adds	r3, #4
 80085be:	e00b      	b.n	80085d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4413      	add	r3, r2
 80085d6:	3304      	adds	r3, #4
 80085d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2202      	movs	r2, #2
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fbfb 	bl	8008de2 <USBD_CtlSendData>
              break;
 80085ec:	e06a      	b.n	80086c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da11      	bge.n	800861a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	f003 020f 	and.w	r2, r3, #15
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	3318      	adds	r3, #24
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d117      	bne.n	8008640 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fb7b 	bl	8008d0e <USBD_CtlError>
                  break;
 8008618:	e054      	b.n	80086c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fb68 	bl	8008d0e <USBD_CtlError>
                  break;
 800863e:	e041      	b.n	80086c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	da0b      	bge.n	8008660 <USBD_StdEPReq+0x240>
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	3310      	adds	r3, #16
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	4413      	add	r3, r2
 800865c:	3304      	adds	r3, #4
 800865e:	e00b      	b.n	8008678 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	4413      	add	r3, r2
 8008676:	3304      	adds	r3, #4
 8008678:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <USBD_StdEPReq+0x266>
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b80      	cmp	r3, #128	; 0x80
 8008684:	d103      	bne.n	800868e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e00e      	b.n	80086ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 f85e 	bl	8009754 <USBD_LL_IsStallEP>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2201      	movs	r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e002      	b.n	80086ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2202      	movs	r2, #2
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb95 	bl	8008de2 <USBD_CtlSendData>
              break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb26 	bl	8008d0e <USBD_CtlError>
              break;
 80086c2:	bf00      	nop
          }
          break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb20 	bl	8008d0e <USBD_CtlError>
          break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e004      	b.n	80086dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fb1a 	bl	8008d0e <USBD_CtlError>
      break;
 80086da:	bf00      	nop
  }

  return ret;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	885b      	ldrh	r3, [r3, #2]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	2b06      	cmp	r3, #6
 800870a:	f200 8128 	bhi.w	800895e <USBD_GetDescriptor+0x276>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <USBD_GetDescriptor+0x2c>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008731 	.word	0x08008731
 8008718:	08008749 	.word	0x08008749
 800871c:	08008789 	.word	0x08008789
 8008720:	0800895f 	.word	0x0800895f
 8008724:	0800895f 	.word	0x0800895f
 8008728:	080088ff 	.word	0x080088ff
 800872c:	0800892b 	.word	0x0800892b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	7c12      	ldrb	r2, [r2, #16]
 800873c:	f107 0108 	add.w	r1, r7, #8
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
 8008744:	60f8      	str	r0, [r7, #12]
      break;
 8008746:	e112      	b.n	800896e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7c1b      	ldrb	r3, [r3, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10d      	bne.n	800876c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f107 0208 	add.w	r2, r7, #8
 800875c:	4610      	mov	r0, r2
 800875e:	4798      	blx	r3
 8008760:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	2202      	movs	r2, #2
 8008768:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800876a:	e100      	b.n	800896e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	f107 0208 	add.w	r2, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	2202      	movs	r2, #2
 8008784:	701a      	strb	r2, [r3, #0]
      break;
 8008786:	e0f2      	b.n	800896e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	885b      	ldrh	r3, [r3, #2]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b05      	cmp	r3, #5
 8008790:	f200 80ac 	bhi.w	80088ec <USBD_GetDescriptor+0x204>
 8008794:	a201      	add	r2, pc, #4	; (adr r2, 800879c <USBD_GetDescriptor+0xb4>)
 8008796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879a:	bf00      	nop
 800879c:	080087b5 	.word	0x080087b5
 80087a0:	080087e9 	.word	0x080087e9
 80087a4:	0800881d 	.word	0x0800881d
 80087a8:	08008851 	.word	0x08008851
 80087ac:	08008885 	.word	0x08008885
 80087b0:	080088b9 	.word	0x080088b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d6:	e091      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa97 	bl	8008d0e <USBD_CtlError>
            err++;
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	3301      	adds	r3, #1
 80087e4:	72fb      	strb	r3, [r7, #11]
          break;
 80087e6:	e089      	b.n	80088fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880a:	e077      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa7d 	bl	8008d0e <USBD_CtlError>
            err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
          break;
 800881a:	e06f      	b.n	80088fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7c12      	ldrb	r2, [r2, #16]
 8008834:	f107 0108 	add.w	r1, r7, #8
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800883e:	e05d      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa63 	bl	8008d0e <USBD_CtlError>
            err++;
 8008848:	7afb      	ldrb	r3, [r7, #11]
 800884a:	3301      	adds	r3, #1
 800884c:	72fb      	strb	r3, [r7, #11]
          break;
 800884e:	e055      	b.n	80088fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008872:	e043      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fa49 	bl	8008d0e <USBD_CtlError>
            err++;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	3301      	adds	r3, #1
 8008880:	72fb      	strb	r3, [r7, #11]
          break;
 8008882:	e03b      	b.n	80088fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	7c12      	ldrb	r2, [r2, #16]
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
 80088a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a6:	e029      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa2f 	bl	8008d0e <USBD_CtlError>
            err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
          break;
 80088b6:	e021      	b.n	80088fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e00f      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa15 	bl	8008d0e <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e007      	b.n	80088fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa0d 	bl	8008d0e <USBD_CtlError>
          err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088fa:	e038      	b.n	800896e <USBD_GetDescriptor+0x286>
 80088fc:	e037      	b.n	800896e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7c1b      	ldrb	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890e:	f107 0208 	add.w	r2, r7, #8
 8008912:	4610      	mov	r0, r2
 8008914:	4798      	blx	r3
 8008916:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008918:	e029      	b.n	800896e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f9f6 	bl	8008d0e <USBD_CtlError>
        err++;
 8008922:	7afb      	ldrb	r3, [r7, #11]
 8008924:	3301      	adds	r3, #1
 8008926:	72fb      	strb	r3, [r7, #11]
      break;
 8008928:	e021      	b.n	800896e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7c1b      	ldrb	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10d      	bne.n	800894e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	f107 0208 	add.w	r2, r7, #8
 800893e:	4610      	mov	r0, r2
 8008940:	4798      	blx	r3
 8008942:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	2207      	movs	r2, #7
 800894a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800894c:	e00f      	b.n	800896e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f9dc 	bl	8008d0e <USBD_CtlError>
        err++;
 8008956:	7afb      	ldrb	r3, [r7, #11]
 8008958:	3301      	adds	r3, #1
 800895a:	72fb      	strb	r3, [r7, #11]
      break;
 800895c:	e007      	b.n	800896e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9d4 	bl	8008d0e <USBD_CtlError>
      err++;
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	3301      	adds	r3, #1
 800896a:	72fb      	strb	r3, [r7, #11]
      break;
 800896c:	bf00      	nop
  }

  if (err != 0U)
 800896e:	7afb      	ldrb	r3, [r7, #11]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11c      	bne.n	80089ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008974:	893b      	ldrh	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d011      	beq.n	800899e <USBD_GetDescriptor+0x2b6>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	88db      	ldrh	r3, [r3, #6]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00d      	beq.n	800899e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88da      	ldrh	r2, [r3, #6]
 8008986:	893b      	ldrh	r3, [r7, #8]
 8008988:	4293      	cmp	r3, r2
 800898a:	bf28      	it	cs
 800898c:	4613      	movcs	r3, r2
 800898e:	b29b      	uxth	r3, r3
 8008990:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008992:	893b      	ldrh	r3, [r7, #8]
 8008994:	461a      	mov	r2, r3
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa22 	bl	8008de2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa79 	bl	8008e9e <USBD_CtlSendStatus>
 80089ac:	e000      	b.n	80089b0 <USBD_GetDescriptor+0x2c8>
    return;
 80089ae:	bf00      	nop
    }
  }
}
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop

080089b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	889b      	ldrh	r3, [r3, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d130      	bne.n	8008a2c <USBD_SetAddress+0x74>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	88db      	ldrh	r3, [r3, #6]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d12c      	bne.n	8008a2c <USBD_SetAddress+0x74>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	885b      	ldrh	r3, [r3, #2]
 80089d6:	2b7f      	cmp	r3, #127	; 0x7f
 80089d8:	d828      	bhi.n	8008a2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d104      	bne.n	80089fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f98b 	bl	8008d0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f8:	e01d      	b.n	8008a36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7bfa      	ldrb	r2, [r7, #15]
 80089fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fed0 	bl	80097ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fa46 	bl	8008e9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a20:	e009      	b.n	8008a36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2a:	e004      	b.n	8008a36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f96d 	bl	8008d0e <USBD_CtlError>
  }
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	4b41      	ldr	r3, [pc, #260]	; (8008b58 <USBD_SetConfig+0x118>)
 8008a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a54:	4b40      	ldr	r3, [pc, #256]	; (8008b58 <USBD_SetConfig+0x118>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d904      	bls.n	8008a66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f955 	bl	8008d0e <USBD_CtlError>
 8008a64:	e075      	b.n	8008b52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d002      	beq.n	8008a76 <USBD_SetConfig+0x36>
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d023      	beq.n	8008abc <USBD_SetConfig+0x7c>
 8008a74:	e062      	b.n	8008b3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a76:	4b38      	ldr	r3, [pc, #224]	; (8008b58 <USBD_SetConfig+0x118>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01a      	beq.n	8008ab4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a7e:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <USBD_SetConfig+0x118>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a90:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <USBD_SetConfig+0x118>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff f9e7 	bl	8007e6a <USBD_SetClassConfig>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d104      	bne.n	8008aac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f932 	bl	8008d0e <USBD_CtlError>
            return;
 8008aaa:	e052      	b.n	8008b52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f9f6 	bl	8008e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ab2:	e04e      	b.n	8008b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f9f2 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008aba:	e04a      	b.n	8008b52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008abc:	4b26      	ldr	r3, [pc, #152]	; (8008b58 <USBD_SetConfig+0x118>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d112      	bne.n	8008aea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008acc:	4b22      	ldr	r3, [pc, #136]	; (8008b58 <USBD_SetConfig+0x118>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ad6:	4b20      	ldr	r3, [pc, #128]	; (8008b58 <USBD_SetConfig+0x118>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff f9e3 	bl	8007ea8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9db 	bl	8008e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ae8:	e033      	b.n	8008b52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008aea:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <USBD_SetConfig+0x118>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d01d      	beq.n	8008b34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff f9d1 	bl	8007ea8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <USBD_SetConfig+0x118>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <USBD_SetConfig+0x118>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff f9a7 	bl	8007e6a <USBD_SetClassConfig>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d104      	bne.n	8008b2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f8f2 	bl	8008d0e <USBD_CtlError>
            return;
 8008b2a:	e012      	b.n	8008b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f9b6 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008b32:	e00e      	b.n	8008b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f9b2 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008b3a:	e00a      	b.n	8008b52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f8e5 	bl	8008d0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b44:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <USBD_SetConfig+0x118>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff f9ac 	bl	8007ea8 <USBD_ClrClassConfig>
        break;
 8008b50:	bf00      	nop
    }
  }
}
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	2000045a 	.word	0x2000045a

08008b5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d004      	beq.n	8008b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f8cc 	bl	8008d0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b76:	e022      	b.n	8008bbe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dc02      	bgt.n	8008b88 <USBD_GetConfig+0x2c>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dc03      	bgt.n	8008b8e <USBD_GetConfig+0x32>
 8008b86:	e015      	b.n	8008bb4 <USBD_GetConfig+0x58>
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d00b      	beq.n	8008ba4 <USBD_GetConfig+0x48>
 8008b8c:	e012      	b.n	8008bb4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3308      	adds	r3, #8
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f920 	bl	8008de2 <USBD_CtlSendData>
        break;
 8008ba2:	e00c      	b.n	8008bbe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	2201      	movs	r2, #1
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f918 	bl	8008de2 <USBD_CtlSendData>
        break;
 8008bb2:	e004      	b.n	8008bbe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8a9 	bl	8008d0e <USBD_CtlError>
        break;
 8008bbc:	bf00      	nop
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d81e      	bhi.n	8008c1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	88db      	ldrh	r3, [r3, #6]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d004      	beq.n	8008bee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f891 	bl	8008d0e <USBD_CtlError>
        break;
 8008bec:	e01a      	b.n	8008c24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d005      	beq.n	8008c0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f043 0202 	orr.w	r2, r3, #2
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	2202      	movs	r2, #2
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f8e5 	bl	8008de2 <USBD_CtlSendData>
      break;
 8008c18:	e004      	b.n	8008c24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f876 	bl	8008d0e <USBD_CtlError>
      break;
 8008c22:	bf00      	nop
  }
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	885b      	ldrh	r3, [r3, #2]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d106      	bne.n	8008c4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f929 	bl	8008e9e <USBD_CtlSendStatus>
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c64:	3b01      	subs	r3, #1
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d80b      	bhi.n	8008c82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	885b      	ldrh	r3, [r3, #2]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10c      	bne.n	8008c8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f90f 	bl	8008e9e <USBD_CtlSendStatus>
      }
      break;
 8008c80:	e004      	b.n	8008c8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f842 	bl	8008d0e <USBD_CtlError>
      break;
 8008c8a:	e000      	b.n	8008c8e <USBD_ClrFeature+0x3a>
      break;
 8008c8c:	bf00      	nop
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	785a      	ldrb	r2, [r3, #1]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3303      	adds	r3, #3
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4413      	add	r3, r2
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	3305      	adds	r3, #5
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	3306      	adds	r3, #6
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	3307      	adds	r3, #7
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	80da      	strh	r2, [r3, #6]

}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d18:	2180      	movs	r1, #128	; 0x80
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fcdc 	bl	80096d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fcd8 	bl	80096d8 <USBD_LL_StallEP>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d032      	beq.n	8008dac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 f834 	bl	8008db4 <USBD_GetLen>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	3301      	adds	r3, #1
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	75fa      	strb	r2, [r7, #23]
 8008d60:	461a      	mov	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	7812      	ldrb	r2, [r2, #0]
 8008d6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	75fa      	strb	r2, [r7, #23]
 8008d72:	461a      	mov	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4413      	add	r3, r2
 8008d78:	2203      	movs	r2, #3
 8008d7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d7c:	e012      	b.n	8008da4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	60fa      	str	r2, [r7, #12]
 8008d84:	7dfa      	ldrb	r2, [r7, #23]
 8008d86:	1c51      	adds	r1, r2, #1
 8008d88:	75f9      	strb	r1, [r7, #23]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	440a      	add	r2, r1
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	75fa      	strb	r2, [r7, #23]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4413      	add	r3, r2
 8008da0:	2200      	movs	r2, #0
 8008da2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e8      	bne.n	8008d7e <USBD_GetString+0x4e>
    }
  }
}
 8008dac:	bf00      	nop
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008dc0:	e005      	b.n	8008dce <USBD_GetLen+0x1a>
  {
    len++;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f5      	bne.n	8008dc2 <USBD_GetLen+0xe>
  }

  return len;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr

08008de2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008dfe:	88fa      	ldrh	r2, [r7, #6]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fced 	bl	80097ea <USBD_LL_Transmit>

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 fcdb 	bl	80097ea <USBD_LL_Transmit>

  return USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2203      	movs	r2, #3
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fce0 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fcce 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fc98 	bl	80097ea <USBD_LL_Transmit>

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2205      	movs	r2, #5
 8008ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fca8 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4912      	ldr	r1, [pc, #72]	; (8008f3c <MX_USB_DEVICE_Init+0x50>)
 8008ef4:	4812      	ldr	r0, [pc, #72]	; (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008ef6:	f7fe ff5e 	bl	8007db6 <USBD_Init>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f00:	f7f7 fdd6 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f04:	490f      	ldr	r1, [pc, #60]	; (8008f44 <MX_USB_DEVICE_Init+0x58>)
 8008f06:	480e      	ldr	r0, [pc, #56]	; (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f08:	f7fe ff80 	bl	8007e0c <USBD_RegisterClass>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f12:	f7f7 fdcd 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f16:	490c      	ldr	r1, [pc, #48]	; (8008f48 <MX_USB_DEVICE_Init+0x5c>)
 8008f18:	4809      	ldr	r0, [pc, #36]	; (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f1a:	f7fe feb1 	bl	8007c80 <USBD_CDC_RegisterInterface>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f24:	f7f7 fdc4 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f2a:	f7fe ff88 	bl	8007e3e <USBD_Start>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f34:	f7f7 fdbc 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f38:	bf00      	nop
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	2000022c 	.word	0x2000022c
 8008f40:	20000724 	.word	0x20000724
 8008f44:	20000118 	.word	0x20000118
 8008f48:	2000021c 	.word	0x2000021c

08008f4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f50:	2200      	movs	r2, #0
 8008f52:	4909      	ldr	r1, [pc, #36]	; (8008f78 <CDC_Init_FS+0x2c>)
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <CDC_Init_FS+0x30>)
 8008f56:	f7fe fea9 	bl	8007cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f5a:	4909      	ldr	r1, [pc, #36]	; (8008f80 <CDC_Init_FS+0x34>)
 8008f5c:	4807      	ldr	r0, [pc, #28]	; (8008f7c <CDC_Init_FS+0x30>)
 8008f5e:	f7fe febe 	bl	8007cde <USBD_CDC_SetRxBuffer>

  if( hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED ) {
 8008f62:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <CDC_Init_FS+0x30>)
 8008f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d101      	bne.n	8008f70 <CDC_Init_FS+0x24>
	  welcome();
 8008f6c:	f7f7 faf0 	bl	8000550 <welcome>
  }

  return (USBD_OK);
 8008f70:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000dd0 	.word	0x20000dd0
 8008f7c:	20000724 	.word	0x20000724
 8008f80:	200009e8 	.word	0x200009e8

08008f84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr
	...

08008f94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b23      	cmp	r3, #35	; 0x23
 8008fa8:	d84a      	bhi.n	8009040 <CDC_Control_FS+0xac>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <CDC_Control_FS+0x1c>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009041 	.word	0x08009041
 8008fb4:	08009041 	.word	0x08009041
 8008fb8:	08009041 	.word	0x08009041
 8008fbc:	08009041 	.word	0x08009041
 8008fc0:	08009041 	.word	0x08009041
 8008fc4:	08009041 	.word	0x08009041
 8008fc8:	08009041 	.word	0x08009041
 8008fcc:	08009041 	.word	0x08009041
 8008fd0:	08009041 	.word	0x08009041
 8008fd4:	08009041 	.word	0x08009041
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	08009041 	.word	0x08009041
 8008fe4:	08009041 	.word	0x08009041
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08009041 	.word	0x08009041
 8008ff4:	08009041 	.word	0x08009041
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	08009041 	.word	0x08009041
 8009000:	08009041 	.word	0x08009041
 8009004:	08009041 	.word	0x08009041
 8009008:	08009041 	.word	0x08009041
 800900c:	08009041 	.word	0x08009041
 8009010:	08009041 	.word	0x08009041
 8009014:	08009041 	.word	0x08009041
 8009018:	08009041 	.word	0x08009041
 800901c:	08009041 	.word	0x08009041
 8009020:	08009041 	.word	0x08009041
 8009024:	08009041 	.word	0x08009041
 8009028:	08009041 	.word	0x08009041
 800902c:	08009041 	.word	0x08009041
 8009030:	08009041 	.word	0x08009041
 8009034:	08009041 	.word	0x08009041
 8009038:	08009041 	.word	0x08009041
 800903c:	08009041 	.word	0x08009041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009040:	bf00      	nop
  }

  return (USBD_OK);
 8009042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//	uint32_t start_pos = 0;
	uint8_t  enter = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	77fb      	strb	r3, [r7, #31]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 800905e:	2300      	movs	r3, #0
 8009060:	61bb      	str	r3, [r7, #24]
 8009062:	e022      	b.n	80090aa <CDC_Receive_FS+0x5a>
		if( in_usb_buf_pos < USB_BUFFER_LENGTH ) {
 8009064:	4b35      	ldr	r3, [pc, #212]	; (800913c <CDC_Receive_FS+0xec>)
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	2bff      	cmp	r3, #255	; 0xff
 800906a:	d80c      	bhi.n	8009086 <CDC_Receive_FS+0x36>
			input_usb_buffer[ in_usb_buf_pos++ ] = Buf[ loop ];
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	441a      	add	r2, r3
 8009072:	4b32      	ldr	r3, [pc, #200]	; (800913c <CDC_Receive_FS+0xec>)
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	1c59      	adds	r1, r3, #1
 8009078:	b288      	uxth	r0, r1
 800907a:	4930      	ldr	r1, [pc, #192]	; (800913c <CDC_Receive_FS+0xec>)
 800907c:	8008      	strh	r0, [r1, #0]
 800907e:	4619      	mov	r1, r3
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	4b2f      	ldr	r3, [pc, #188]	; (8009140 <CDC_Receive_FS+0xf0>)
 8009084:	545a      	strb	r2, [r3, r1]
		}
		if( Buf[ loop ] == 13 ) {
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	4413      	add	r3, r2
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b0d      	cmp	r3, #13
 8009090:	d108      	bne.n	80090a4 <CDC_Receive_FS+0x54>
			input_usb_buffer[ in_usb_buf_pos - 1 ] = ' ';
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <CDC_Receive_FS+0xec>)
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	3b01      	subs	r3, #1
 8009098:	4a29      	ldr	r2, [pc, #164]	; (8009140 <CDC_Receive_FS+0xf0>)
 800909a:	2120      	movs	r1, #32
 800909c:	54d1      	strb	r1, [r2, r3]
			enter = 1;
 800909e:	2301      	movs	r3, #1
 80090a0:	77fb      	strb	r3, [r7, #31]
			break;
 80090a2:	e007      	b.n	80090b4 <CDC_Receive_FS+0x64>
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	3301      	adds	r3, #1
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3d7      	bcc.n	8009064 <CDC_Receive_FS+0x14>
//		Buf[ loop ] = Buf[ loop + start_pos ];
//	}
//	CDC_Transmit_FS( Buf, *Len - start_pos );

	uint8_t *out_buf;
	out_buf = malloc(*Len * sizeof( uint8_t ));
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fc69 	bl	8009990 <malloc>
 80090be:	4603      	mov	r3, r0
 80090c0:	60fb      	str	r3, [r7, #12]
	uint32_t out_buf_len = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80090c6:	2300      	movs	r3, #0
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	e019      	b.n	8009100 <CDC_Receive_FS+0xb0>
		out_buf[ out_buf_len++ ] = Buf[ loop ];
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	441a      	add	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	1c59      	adds	r1, r3, #1
 80090d6:	6179      	str	r1, [r7, #20]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	440b      	add	r3, r1
 80090dc:	7812      	ldrb	r2, [r2, #0]
 80090de:	701a      	strb	r2, [r3, #0]
		if( Buf[ loop ] == '\r' ) {
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4413      	add	r3, r2
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b0d      	cmp	r3, #13
 80090ea:	d106      	bne.n	80090fa <CDC_Receive_FS+0xaa>
			out_buf[ out_buf_len++ ] = '\n';
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	617a      	str	r2, [r7, #20]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4413      	add	r3, r2
 80090f6:	220a      	movs	r2, #10
 80090f8:	701a      	strb	r2, [r3, #0]
	for( uint32_t loop = 0; loop < *Len; loop++ ) {
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3301      	adds	r3, #1
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	429a      	cmp	r2, r3
 8009108:	d3e0      	bcc.n	80090cc <CDC_Receive_FS+0x7c>
		}
	}
	usb_transmit_fs( out_buf, out_buf_len );
 800910a:	6979      	ldr	r1, [r7, #20]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7f7 fa0f 	bl	8000530 <usb_transmit_fs>
	free( out_buf );
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 fc44 	bl	80099a0 <free>
	if( enter > 0 ) {
 8009118:	7ffb      	ldrb	r3, [r7, #31]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <CDC_Receive_FS+0xd2>
		get_command();
 800911e:	f7f7 fa3b 	bl	8000598 <get_command>
	}
//	if( Buf[ 0 ] == '\r' ) {
//		send_prompt();
//	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4807      	ldr	r0, [pc, #28]	; (8009144 <CDC_Receive_FS+0xf4>)
 8009126:	f7fe fdda 	bl	8007cde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800912a:	4806      	ldr	r0, [pc, #24]	; (8009144 <CDC_Receive_FS+0xf4>)
 800912c:	f7fe fe19 	bl	8007d62 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009132:	4618      	mov	r0, r3
 8009134:	3720      	adds	r7, #32
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	200003fc 	.word	0x200003fc
 8009140:	200002fc 	.word	0x200002fc
 8009144:	20000724 	.word	0x20000724

08009148 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009158:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <CDC_Transmit_FS+0x48>)
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800916a:	2301      	movs	r3, #1
 800916c:	e00b      	b.n	8009186 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800916e:	887b      	ldrh	r3, [r7, #2]
 8009170:	461a      	mov	r2, r3
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4806      	ldr	r0, [pc, #24]	; (8009190 <CDC_Transmit_FS+0x48>)
 8009176:	f7fe fd99 	bl	8007cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800917a:	4805      	ldr	r0, [pc, #20]	; (8009190 <CDC_Transmit_FS+0x48>)
 800917c:	f7fe fdc2 	bl	8007d04 <USBD_CDC_TransmitPacket>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000724 	.word	0x20000724

08009194 <wait_for_CDC_transmit_ready>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void wait_for_CDC_transmit_ready(void) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <wait_for_CDC_transmit_ready+0x2c>)
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	607b      	str	r3, [r7, #4]
	while( hcdc->TxState != 0 ){
 80091a2:	e002      	b.n	80091aa <wait_for_CDC_transmit_ready+0x16>
		HAL_Delay( 1 );
 80091a4:	2001      	movs	r0, #1
 80091a6:	f7f7 ffff 	bl	80011a8 <HAL_Delay>
	while( hcdc->TxState != 0 ){
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f7      	bne.n	80091a4 <wait_for_CDC_transmit_ready+0x10>
	}
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000724 	.word	0x20000724

080091c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	6039      	str	r1, [r7, #0]
 80091ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2212      	movs	r2, #18
 80091d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091d6:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000248 	.word	0x20000248

080091e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2204      	movs	r2, #4
 80091f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091fa:	4b03      	ldr	r3, [pc, #12]	; (8009208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	bc80      	pop	{r7}
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	2000025c 	.word	0x2000025c

0800920c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d105      	bne.n	800922a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	4907      	ldr	r1, [pc, #28]	; (8009240 <USBD_FS_ProductStrDescriptor+0x34>)
 8009222:	4808      	ldr	r0, [pc, #32]	; (8009244 <USBD_FS_ProductStrDescriptor+0x38>)
 8009224:	f7ff fd84 	bl	8008d30 <USBD_GetString>
 8009228:	e004      	b.n	8009234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	4904      	ldr	r1, [pc, #16]	; (8009240 <USBD_FS_ProductStrDescriptor+0x34>)
 800922e:	4805      	ldr	r0, [pc, #20]	; (8009244 <USBD_FS_ProductStrDescriptor+0x38>)
 8009230:	f7ff fd7e 	bl	8008d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200011b8 	.word	0x200011b8
 8009244:	0800b604 	.word	0x0800b604

08009248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	6039      	str	r1, [r7, #0]
 8009252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	4904      	ldr	r1, [pc, #16]	; (8009268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009258:	4804      	ldr	r0, [pc, #16]	; (800926c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800925a:	f7ff fd69 	bl	8008d30 <USBD_GetString>
  return USBD_StrDesc;
 800925e:	4b02      	ldr	r3, [pc, #8]	; (8009268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	200011b8 	.word	0x200011b8
 800926c:	0800b61c 	.word	0x0800b61c

08009270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	221a      	movs	r2, #26
 8009280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009282:	f000 f843 	bl	800930c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009286:	4b02      	ldr	r3, [pc, #8]	; (8009290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000260 	.word	0x20000260

08009294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4907      	ldr	r1, [pc, #28]	; (80092c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092aa:	4808      	ldr	r0, [pc, #32]	; (80092cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80092ac:	f7ff fd40 	bl	8008d30 <USBD_GetString>
 80092b0:	e004      	b.n	80092bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4904      	ldr	r1, [pc, #16]	; (80092c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092b6:	4805      	ldr	r0, [pc, #20]	; (80092cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80092b8:	f7ff fd3a 	bl	8008d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	200011b8 	.word	0x200011b8
 80092cc:	0800b630 	.word	0x0800b630

080092d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d105      	bne.n	80092ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4907      	ldr	r1, [pc, #28]	; (8009304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092e6:	4808      	ldr	r0, [pc, #32]	; (8009308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e8:	f7ff fd22 	bl	8008d30 <USBD_GetString>
 80092ec:	e004      	b.n	80092f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4904      	ldr	r1, [pc, #16]	; (8009304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092f2:	4805      	ldr	r0, [pc, #20]	; (8009308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092f4:	f7ff fd1c 	bl	8008d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f8:	4b02      	ldr	r3, [pc, #8]	; (8009304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	200011b8 	.word	0x200011b8
 8009308:	0800b63c 	.word	0x0800b63c

0800930c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009312:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <Get_SerialNum+0x44>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009318:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <Get_SerialNum+0x48>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800931e:	4b0e      	ldr	r3, [pc, #56]	; (8009358 <Get_SerialNum+0x4c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d009      	beq.n	8009346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009332:	2208      	movs	r2, #8
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <Get_SerialNum+0x50>)
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f814 	bl	8009364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800933c:	2204      	movs	r2, #4
 800933e:	4908      	ldr	r1, [pc, #32]	; (8009360 <Get_SerialNum+0x54>)
 8009340:	68b8      	ldr	r0, [r7, #8]
 8009342:	f000 f80f 	bl	8009364 <IntToUnicode>
  }
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	1ffff7e8 	.word	0x1ffff7e8
 8009354:	1ffff7ec 	.word	0x1ffff7ec
 8009358:	1ffff7f0 	.word	0x1ffff7f0
 800935c:	20000262 	.word	0x20000262
 8009360:	20000272 	.word	0x20000272

08009364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]
 800937a:	e027      	b.n	80093cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0f1b      	lsrs	r3, r3, #28
 8009380:	2b09      	cmp	r3, #9
 8009382:	d80b      	bhi.n	800939c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	0f1b      	lsrs	r3, r3, #28
 8009388:	b2da      	uxtb	r2, r3
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	4619      	mov	r1, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	440b      	add	r3, r1
 8009394:	3230      	adds	r2, #48	; 0x30
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	e00a      	b.n	80093b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	0f1b      	lsrs	r3, r3, #28
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	4619      	mov	r1, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	440b      	add	r3, r1
 80093ac:	3237      	adds	r2, #55	; 0x37
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	3301      	adds	r3, #1
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
 80093cc:	7dfa      	ldrb	r2, [r7, #23]
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d3d3      	bcc.n	800937c <IntToUnicode+0x18>
  }
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a0d      	ldr	r2, [pc, #52]	; (8009424 <HAL_PCD_MspInit+0x44>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d113      	bne.n	800941a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093f2:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <HAL_PCD_MspInit+0x48>)
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	4a0c      	ldr	r2, [pc, #48]	; (8009428 <HAL_PCD_MspInit+0x48>)
 80093f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093fc:	61d3      	str	r3, [r2, #28]
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <HAL_PCD_MspInit+0x48>)
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800940a:	2200      	movs	r2, #0
 800940c:	2100      	movs	r1, #0
 800940e:	2014      	movs	r0, #20
 8009410:	f7f7 ffc5 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009414:	2014      	movs	r0, #20
 8009416:	f7f7 ffde 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	40005c00 	.word	0x40005c00
 8009428:	40021000 	.word	0x40021000

0800942c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe fd43 	bl	8007ece <USBD_LL_SetupStage>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	440b      	add	r3, r1
 8009470:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	4619      	mov	r1, r3
 800947a:	f7fe fd75 	bl	8007f68 <USBD_LL_DataOutStage>
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	440b      	add	r3, r1
 80094a6:	333c      	adds	r3, #60	; 0x3c
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	4619      	mov	r1, r3
 80094ae:	f7fe fdcc 	bl	800804a <USBD_LL_DataInStage>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe fedc 	bl	8008286 <USBD_LL_SOF>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094de:	2301      	movs	r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d001      	beq.n	80094ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094ea:	f7f7 fae1 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094f4:	7bfa      	ldrb	r2, [r7, #15]
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe fe8c 	bl	8008216 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fe45 	bl	8008194 <USBD_LL_Reset>
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fe86 	bl	8008234 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <HAL_PCD_SuspendCallback+0x30>)
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	4a03      	ldr	r2, [pc, #12]	; (8009544 <HAL_PCD_SuspendCallback+0x30>)
 8009536:	f043 0306 	orr.w	r3, r3, #6
 800953a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	e000ed00 	.word	0xe000ed00

08009548 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fe80 	bl	800825c <USBD_LL_Resume>
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800956c:	4a28      	ldr	r2, [pc, #160]	; (8009610 <USBD_LL_Init+0xac>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a26      	ldr	r2, [pc, #152]	; (8009610 <USBD_LL_Init+0xac>)
 8009578:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800957c:	4b24      	ldr	r3, [pc, #144]	; (8009610 <USBD_LL_Init+0xac>)
 800957e:	4a25      	ldr	r2, [pc, #148]	; (8009614 <USBD_LL_Init+0xb0>)
 8009580:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <USBD_LL_Init+0xac>)
 8009584:	2208      	movs	r2, #8
 8009586:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009588:	4b21      	ldr	r3, [pc, #132]	; (8009610 <USBD_LL_Init+0xac>)
 800958a:	2202      	movs	r2, #2
 800958c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800958e:	4b20      	ldr	r3, [pc, #128]	; (8009610 <USBD_LL_Init+0xac>)
 8009590:	2200      	movs	r2, #0
 8009592:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009594:	4b1e      	ldr	r3, [pc, #120]	; (8009610 <USBD_LL_Init+0xac>)
 8009596:	2200      	movs	r2, #0
 8009598:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800959a:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <USBD_LL_Init+0xac>)
 800959c:	2200      	movs	r2, #0
 800959e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095a0:	481b      	ldr	r0, [pc, #108]	; (8009610 <USBD_LL_Init+0xac>)
 80095a2:	f7f8 fb4c 	bl	8001c3e <HAL_PCD_Init>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095ac:	f7f7 fa80 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095b6:	2318      	movs	r3, #24
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	f7f9 ffc2 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095c6:	2358      	movs	r3, #88	; 0x58
 80095c8:	2200      	movs	r2, #0
 80095ca:	2180      	movs	r1, #128	; 0x80
 80095cc:	f7f9 ffba 	bl	8003544 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095d6:	23c0      	movs	r3, #192	; 0xc0
 80095d8:	2200      	movs	r2, #0
 80095da:	2181      	movs	r1, #129	; 0x81
 80095dc:	f7f9 ffb2 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80095ea:	2200      	movs	r2, #0
 80095ec:	2101      	movs	r1, #1
 80095ee:	f7f9 ffa9 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095fc:	2200      	movs	r2, #0
 80095fe:	2182      	movs	r1, #130	; 0x82
 8009600:	f7f9 ffa0 	bl	8003544 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200013b8 	.word	0x200013b8
 8009614:	40005c00 	.word	0x40005c00

08009618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800962e:	4618      	mov	r0, r3
 8009630:	f7f8 fc10 	bl	8001e54 <HAL_PCD_Start>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f94e 	bl	80098dc <USBD_Get_USB_Status>
 8009640:	4603      	mov	r3, r0
 8009642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009644:	7bbb      	ldrb	r3, [r7, #14]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	461a      	mov	r2, r3
 800965c:	4603      	mov	r3, r0
 800965e:	70fb      	strb	r3, [r7, #3]
 8009660:	460b      	mov	r3, r1
 8009662:	70bb      	strb	r3, [r7, #2]
 8009664:	4613      	mov	r3, r2
 8009666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009676:	78bb      	ldrb	r3, [r7, #2]
 8009678:	883a      	ldrh	r2, [r7, #0]
 800967a:	78f9      	ldrb	r1, [r7, #3]
 800967c:	f7f8 fd8a 	bl	8002194 <HAL_PCD_EP_Open>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f928 	bl	80098dc <USBD_Get_USB_Status>
 800968c:	4603      	mov	r3, r0
 800968e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009690:	7bbb      	ldrb	r3, [r7, #14]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7f8 fdd1 	bl	8002260 <HAL_PCD_EP_Close>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f909 	bl	80098dc <USBD_Get_USB_Status>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f8 fe91 	bl	800241e <HAL_PCD_EP_SetStall>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f8ea 	bl	80098dc <USBD_Get_USB_Status>
 8009708:	4603      	mov	r3, r0
 800970a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970c:	7bbb      	ldrb	r3, [r7, #14]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f7f8 fed2 	bl	80024de <HAL_PCD_EP_ClrStall>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f8cb 	bl	80098dc <USBD_Get_USB_Status>
 8009746:	4603      	mov	r3, r0
 8009748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974a:	7bbb      	ldrb	r3, [r7, #14]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800976c:	2b00      	cmp	r3, #0
 800976e:	da0c      	bge.n	800978a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	440b      	add	r3, r1
 8009784:	3302      	adds	r3, #2
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	e00b      	b.n	80097a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009790:	68f9      	ldr	r1, [r7, #12]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	440b      	add	r3, r1
 800979c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bc80      	pop	{r7}
 80097aa:	4770      	bx	lr

080097ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f8 fcbd 	bl	800214a <HAL_PCD_SetAddress>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f880 	bl	80098dc <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	461a      	mov	r2, r3
 80097f6:	460b      	mov	r3, r1
 80097f8:	72fb      	strb	r3, [r7, #11]
 80097fa:	4613      	mov	r3, r2
 80097fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800980c:	893b      	ldrh	r3, [r7, #8]
 800980e:	7af9      	ldrb	r1, [r7, #11]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	f7f8 fdc1 	bl	8002398 <HAL_PCD_EP_Transmit>
 8009816:	4603      	mov	r3, r0
 8009818:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f85d 	bl	80098dc <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009826:	7dbb      	ldrb	r3, [r7, #22]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	461a      	mov	r2, r3
 800983c:	460b      	mov	r3, r1
 800983e:	72fb      	strb	r3, [r7, #11]
 8009840:	4613      	mov	r3, r2
 8009842:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009852:	893b      	ldrh	r3, [r7, #8]
 8009854:	7af9      	ldrb	r1, [r7, #11]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	f7f8 fd4a 	bl	80022f0 <HAL_PCD_EP_Receive>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f83a 	bl	80098dc <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800986c:	7dbb      	ldrb	r3, [r7, #22]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7f8 fd6c 	bl	800236a <HAL_PCD_EP_GetRxCount>
 8009892:	4603      	mov	r3, r0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <USBD_static_malloc+0x14>)
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bc80      	pop	{r7}
 80098ae:	4770      	bx	lr
 80098b0:	2000045c 	.word	0x2000045c

080098b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc80      	pop	{r7}
 80098c4:	4770      	bx	lr

080098c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr

080098dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d817      	bhi.n	8009920 <USBD_Get_USB_Status+0x44>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <USBD_Get_USB_Status+0x1c>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	08009909 	.word	0x08009909
 80098fc:	0800990f 	.word	0x0800990f
 8009900:	08009915 	.word	0x08009915
 8009904:	0800991b 	.word	0x0800991b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]
    break;
 800990c:	e00b      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800990e:	2302      	movs	r3, #2
 8009910:	73fb      	strb	r3, [r7, #15]
    break;
 8009912:	e008      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
    break;
 8009918:	e005      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800991a:	2302      	movs	r3, #2
 800991c:	73fb      	strb	r3, [r7, #15]
    break;
 800991e:	e002      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009920:	2302      	movs	r3, #2
 8009922:	73fb      	strb	r3, [r7, #15]
    break;
 8009924:	bf00      	nop
  }
  return usb_status;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop

08009934 <atoi>:
 8009934:	220a      	movs	r2, #10
 8009936:	2100      	movs	r1, #0
 8009938:	f000 bad0 	b.w	8009edc <strtol>

0800993c <__errno>:
 800993c:	4b01      	ldr	r3, [pc, #4]	; (8009944 <__errno+0x8>)
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000027c 	.word	0x2000027c

08009948 <__libc_init_array>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	2600      	movs	r6, #0
 800994c:	4d0c      	ldr	r5, [pc, #48]	; (8009980 <__libc_init_array+0x38>)
 800994e:	4c0d      	ldr	r4, [pc, #52]	; (8009984 <__libc_init_array+0x3c>)
 8009950:	1b64      	subs	r4, r4, r5
 8009952:	10a4      	asrs	r4, r4, #2
 8009954:	42a6      	cmp	r6, r4
 8009956:	d109      	bne.n	800996c <__libc_init_array+0x24>
 8009958:	f001 fe12 	bl	800b580 <_init>
 800995c:	2600      	movs	r6, #0
 800995e:	4d0a      	ldr	r5, [pc, #40]	; (8009988 <__libc_init_array+0x40>)
 8009960:	4c0a      	ldr	r4, [pc, #40]	; (800998c <__libc_init_array+0x44>)
 8009962:	1b64      	subs	r4, r4, r5
 8009964:	10a4      	asrs	r4, r4, #2
 8009966:	42a6      	cmp	r6, r4
 8009968:	d105      	bne.n	8009976 <__libc_init_array+0x2e>
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009970:	4798      	blx	r3
 8009972:	3601      	adds	r6, #1
 8009974:	e7ee      	b.n	8009954 <__libc_init_array+0xc>
 8009976:	f855 3b04 	ldr.w	r3, [r5], #4
 800997a:	4798      	blx	r3
 800997c:	3601      	adds	r6, #1
 800997e:	e7f2      	b.n	8009966 <__libc_init_array+0x1e>
 8009980:	0800ba30 	.word	0x0800ba30
 8009984:	0800ba30 	.word	0x0800ba30
 8009988:	0800ba30 	.word	0x0800ba30
 800998c:	0800ba34 	.word	0x0800ba34

08009990 <malloc>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <malloc+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f000 b85f 	b.w	8009a58 <_malloc_r>
 800999a:	bf00      	nop
 800999c:	2000027c 	.word	0x2000027c

080099a0 <free>:
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <free+0xc>)
 80099a2:	4601      	mov	r1, r0
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f000 b80b 	b.w	80099c0 <_free_r>
 80099aa:	bf00      	nop
 80099ac:	2000027c 	.word	0x2000027c

080099b0 <memset>:
 80099b0:	4603      	mov	r3, r0
 80099b2:	4402      	add	r2, r0
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d100      	bne.n	80099ba <memset+0xa>
 80099b8:	4770      	bx	lr
 80099ba:	f803 1b01 	strb.w	r1, [r3], #1
 80099be:	e7f9      	b.n	80099b4 <memset+0x4>

080099c0 <_free_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4605      	mov	r5, r0
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d043      	beq.n	8009a50 <_free_r+0x90>
 80099c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099cc:	1f0c      	subs	r4, r1, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfb8      	it	lt
 80099d2:	18e4      	addlt	r4, r4, r3
 80099d4:	f000 fb1c 	bl	800a010 <__malloc_lock>
 80099d8:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <_free_r+0x94>)
 80099da:	6813      	ldr	r3, [r2, #0]
 80099dc:	4610      	mov	r0, r2
 80099de:	b933      	cbnz	r3, 80099ee <_free_r+0x2e>
 80099e0:	6063      	str	r3, [r4, #4]
 80099e2:	6014      	str	r4, [r2, #0]
 80099e4:	4628      	mov	r0, r5
 80099e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ea:	f000 bb17 	b.w	800a01c <__malloc_unlock>
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	d90a      	bls.n	8009a08 <_free_r+0x48>
 80099f2:	6821      	ldr	r1, [r4, #0]
 80099f4:	1862      	adds	r2, r4, r1
 80099f6:	4293      	cmp	r3, r2
 80099f8:	bf01      	itttt	eq
 80099fa:	681a      	ldreq	r2, [r3, #0]
 80099fc:	685b      	ldreq	r3, [r3, #4]
 80099fe:	1852      	addeq	r2, r2, r1
 8009a00:	6022      	streq	r2, [r4, #0]
 8009a02:	6063      	str	r3, [r4, #4]
 8009a04:	6004      	str	r4, [r0, #0]
 8009a06:	e7ed      	b.n	80099e4 <_free_r+0x24>
 8009a08:	461a      	mov	r2, r3
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	b10b      	cbz	r3, 8009a12 <_free_r+0x52>
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	d9fa      	bls.n	8009a08 <_free_r+0x48>
 8009a12:	6811      	ldr	r1, [r2, #0]
 8009a14:	1850      	adds	r0, r2, r1
 8009a16:	42a0      	cmp	r0, r4
 8009a18:	d10b      	bne.n	8009a32 <_free_r+0x72>
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	4401      	add	r1, r0
 8009a1e:	1850      	adds	r0, r2, r1
 8009a20:	4283      	cmp	r3, r0
 8009a22:	6011      	str	r1, [r2, #0]
 8009a24:	d1de      	bne.n	80099e4 <_free_r+0x24>
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	6053      	str	r3, [r2, #4]
 8009a30:	e7d8      	b.n	80099e4 <_free_r+0x24>
 8009a32:	d902      	bls.n	8009a3a <_free_r+0x7a>
 8009a34:	230c      	movs	r3, #12
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	e7d4      	b.n	80099e4 <_free_r+0x24>
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	1821      	adds	r1, r4, r0
 8009a3e:	428b      	cmp	r3, r1
 8009a40:	bf01      	itttt	eq
 8009a42:	6819      	ldreq	r1, [r3, #0]
 8009a44:	685b      	ldreq	r3, [r3, #4]
 8009a46:	1809      	addeq	r1, r1, r0
 8009a48:	6021      	streq	r1, [r4, #0]
 8009a4a:	6063      	str	r3, [r4, #4]
 8009a4c:	6054      	str	r4, [r2, #4]
 8009a4e:	e7c9      	b.n	80099e4 <_free_r+0x24>
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	2000067c 	.word	0x2000067c

08009a58 <_malloc_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	1ccd      	adds	r5, r1, #3
 8009a5c:	f025 0503 	bic.w	r5, r5, #3
 8009a60:	3508      	adds	r5, #8
 8009a62:	2d0c      	cmp	r5, #12
 8009a64:	bf38      	it	cc
 8009a66:	250c      	movcc	r5, #12
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	db01      	blt.n	8009a72 <_malloc_r+0x1a>
 8009a6e:	42a9      	cmp	r1, r5
 8009a70:	d903      	bls.n	8009a7a <_malloc_r+0x22>
 8009a72:	230c      	movs	r3, #12
 8009a74:	6033      	str	r3, [r6, #0]
 8009a76:	2000      	movs	r0, #0
 8009a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7a:	f000 fac9 	bl	800a010 <__malloc_lock>
 8009a7e:	4921      	ldr	r1, [pc, #132]	; (8009b04 <_malloc_r+0xac>)
 8009a80:	680a      	ldr	r2, [r1, #0]
 8009a82:	4614      	mov	r4, r2
 8009a84:	b99c      	cbnz	r4, 8009aae <_malloc_r+0x56>
 8009a86:	4f20      	ldr	r7, [pc, #128]	; (8009b08 <_malloc_r+0xb0>)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	b923      	cbnz	r3, 8009a96 <_malloc_r+0x3e>
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f8aa 	bl	8009be8 <_sbrk_r>
 8009a94:	6038      	str	r0, [r7, #0]
 8009a96:	4629      	mov	r1, r5
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f000 f8a5 	bl	8009be8 <_sbrk_r>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	d123      	bne.n	8009aea <_malloc_r+0x92>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	6033      	str	r3, [r6, #0]
 8009aa8:	f000 fab8 	bl	800a01c <__malloc_unlock>
 8009aac:	e7e3      	b.n	8009a76 <_malloc_r+0x1e>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	1b5b      	subs	r3, r3, r5
 8009ab2:	d417      	bmi.n	8009ae4 <_malloc_r+0x8c>
 8009ab4:	2b0b      	cmp	r3, #11
 8009ab6:	d903      	bls.n	8009ac0 <_malloc_r+0x68>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	441c      	add	r4, r3
 8009abc:	6025      	str	r5, [r4, #0]
 8009abe:	e004      	b.n	8009aca <_malloc_r+0x72>
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	42a2      	cmp	r2, r4
 8009ac4:	bf0c      	ite	eq
 8009ac6:	600b      	streq	r3, [r1, #0]
 8009ac8:	6053      	strne	r3, [r2, #4]
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 faa6 	bl	800a01c <__malloc_unlock>
 8009ad0:	f104 000b 	add.w	r0, r4, #11
 8009ad4:	1d23      	adds	r3, r4, #4
 8009ad6:	f020 0007 	bic.w	r0, r0, #7
 8009ada:	1ac2      	subs	r2, r0, r3
 8009adc:	d0cc      	beq.n	8009a78 <_malloc_r+0x20>
 8009ade:	1a1b      	subs	r3, r3, r0
 8009ae0:	50a3      	str	r3, [r4, r2]
 8009ae2:	e7c9      	b.n	8009a78 <_malloc_r+0x20>
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	6864      	ldr	r4, [r4, #4]
 8009ae8:	e7cc      	b.n	8009a84 <_malloc_r+0x2c>
 8009aea:	1cc4      	adds	r4, r0, #3
 8009aec:	f024 0403 	bic.w	r4, r4, #3
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d0e3      	beq.n	8009abc <_malloc_r+0x64>
 8009af4:	1a21      	subs	r1, r4, r0
 8009af6:	4630      	mov	r0, r6
 8009af8:	f000 f876 	bl	8009be8 <_sbrk_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	d1dd      	bne.n	8009abc <_malloc_r+0x64>
 8009b00:	e7cf      	b.n	8009aa2 <_malloc_r+0x4a>
 8009b02:	bf00      	nop
 8009b04:	2000067c 	.word	0x2000067c
 8009b08:	20000680 	.word	0x20000680

08009b0c <srand>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <srand+0x44>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	681d      	ldr	r5, [r3, #0]
 8009b14:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009b16:	b9b3      	cbnz	r3, 8009b46 <srand+0x3a>
 8009b18:	2018      	movs	r0, #24
 8009b1a:	f7ff ff39 	bl	8009990 <malloc>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	63a8      	str	r0, [r5, #56]	; 0x38
 8009b22:	b920      	cbnz	r0, 8009b2e <srand+0x22>
 8009b24:	2142      	movs	r1, #66	; 0x42
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <srand+0x48>)
 8009b28:	480b      	ldr	r0, [pc, #44]	; (8009b58 <srand+0x4c>)
 8009b2a:	f000 fa0d 	bl	8009f48 <__assert_func>
 8009b2e:	490b      	ldr	r1, [pc, #44]	; (8009b5c <srand+0x50>)
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <srand+0x54>)
 8009b32:	e9c0 1300 	strd	r1, r3, [r0]
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <srand+0x58>)
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6083      	str	r3, [r0, #8]
 8009b3c:	230b      	movs	r3, #11
 8009b3e:	8183      	strh	r3, [r0, #12]
 8009b40:	2001      	movs	r0, #1
 8009b42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009b46:	2200      	movs	r2, #0
 8009b48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009b4a:	611c      	str	r4, [r3, #16]
 8009b4c:	615a      	str	r2, [r3, #20]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	2000027c 	.word	0x2000027c
 8009b54:	0800b76c 	.word	0x0800b76c
 8009b58:	0800b783 	.word	0x0800b783
 8009b5c:	abcd330e 	.word	0xabcd330e
 8009b60:	e66d1234 	.word	0xe66d1234
 8009b64:	0005deec 	.word	0x0005deec

08009b68 <rand>:
 8009b68:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <rand+0x60>)
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	681c      	ldr	r4, [r3, #0]
 8009b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b70:	b9b3      	cbnz	r3, 8009ba0 <rand+0x38>
 8009b72:	2018      	movs	r0, #24
 8009b74:	f7ff ff0c 	bl	8009990 <malloc>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	63a0      	str	r0, [r4, #56]	; 0x38
 8009b7c:	b920      	cbnz	r0, 8009b88 <rand+0x20>
 8009b7e:	214e      	movs	r1, #78	; 0x4e
 8009b80:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <rand+0x64>)
 8009b82:	4813      	ldr	r0, [pc, #76]	; (8009bd0 <rand+0x68>)
 8009b84:	f000 f9e0 	bl	8009f48 <__assert_func>
 8009b88:	4912      	ldr	r1, [pc, #72]	; (8009bd4 <rand+0x6c>)
 8009b8a:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <rand+0x70>)
 8009b8c:	e9c0 1300 	strd	r1, r3, [r0]
 8009b90:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <rand+0x74>)
 8009b92:	2100      	movs	r1, #0
 8009b94:	6083      	str	r3, [r0, #8]
 8009b96:	230b      	movs	r3, #11
 8009b98:	8183      	strh	r3, [r0, #12]
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009ba0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ba2:	480f      	ldr	r0, [pc, #60]	; (8009be0 <rand+0x78>)
 8009ba4:	690a      	ldr	r2, [r1, #16]
 8009ba6:	694b      	ldr	r3, [r1, #20]
 8009ba8:	4350      	muls	r0, r2
 8009baa:	4c0e      	ldr	r4, [pc, #56]	; (8009be4 <rand+0x7c>)
 8009bac:	fb04 0003 	mla	r0, r4, r3, r0
 8009bb0:	fba2 3404 	umull	r3, r4, r2, r4
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	4404      	add	r4, r0
 8009bb8:	f144 0000 	adc.w	r0, r4, #0
 8009bbc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009bc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2000027c 	.word	0x2000027c
 8009bcc:	0800b76c 	.word	0x0800b76c
 8009bd0:	0800b783 	.word	0x0800b783
 8009bd4:	abcd330e 	.word	0xabcd330e
 8009bd8:	e66d1234 	.word	0xe66d1234
 8009bdc:	0005deec 	.word	0x0005deec
 8009be0:	5851f42d 	.word	0x5851f42d
 8009be4:	4c957f2d 	.word	0x4c957f2d

08009be8 <_sbrk_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	2300      	movs	r3, #0
 8009bec:	4d05      	ldr	r5, [pc, #20]	; (8009c04 <_sbrk_r+0x1c>)
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f7 f8f2 	bl	8000ddc <_sbrk>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_sbrk_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_sbrk_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200016a4 	.word	0x200016a4

08009c08 <siscanf>:
 8009c08:	b40e      	push	{r1, r2, r3}
 8009c0a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009c0e:	b530      	push	{r4, r5, lr}
 8009c10:	b09c      	sub	sp, #112	; 0x70
 8009c12:	ac1f      	add	r4, sp, #124	; 0x7c
 8009c14:	f854 5b04 	ldr.w	r5, [r4], #4
 8009c18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009c1c:	9002      	str	r0, [sp, #8]
 8009c1e:	9006      	str	r0, [sp, #24]
 8009c20:	f7f6 fa9e 	bl	8000160 <strlen>
 8009c24:	4b0b      	ldr	r3, [pc, #44]	; (8009c54 <siscanf+0x4c>)
 8009c26:	9003      	str	r0, [sp, #12]
 8009c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c2e:	9314      	str	r3, [sp, #80]	; 0x50
 8009c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c34:	9007      	str	r0, [sp, #28]
 8009c36:	4808      	ldr	r0, [pc, #32]	; (8009c58 <siscanf+0x50>)
 8009c38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4623      	mov	r3, r4
 8009c40:	a902      	add	r1, sp, #8
 8009c42:	6800      	ldr	r0, [r0, #0]
 8009c44:	9401      	str	r4, [sp, #4]
 8009c46:	f000 fa49 	bl	800a0dc <__ssvfiscanf_r>
 8009c4a:	b01c      	add	sp, #112	; 0x70
 8009c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c50:	b003      	add	sp, #12
 8009c52:	4770      	bx	lr
 8009c54:	08009c7f 	.word	0x08009c7f
 8009c58:	2000027c 	.word	0x2000027c

08009c5c <__sread>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	460c      	mov	r4, r1
 8009c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c64:	f000 ffec 	bl	800ac40 <_read_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	bfab      	itete	ge
 8009c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c70:	181b      	addge	r3, r3, r0
 8009c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c76:	bfac      	ite	ge
 8009c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c7a:	81a3      	strhlt	r3, [r4, #12]
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <__seofread>:
 8009c7e:	2000      	movs	r0, #0
 8009c80:	4770      	bx	lr

08009c82 <__swrite>:
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	461f      	mov	r7, r3
 8009c88:	898b      	ldrh	r3, [r1, #12]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	05db      	lsls	r3, r3, #23
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4616      	mov	r6, r2
 8009c92:	d505      	bpl.n	8009ca0 <__swrite+0x1e>
 8009c94:	2302      	movs	r3, #2
 8009c96:	2200      	movs	r2, #0
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	f000 f9a6 	bl	8009fec <_lseek_r>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	4628      	mov	r0, r5
 8009cac:	463b      	mov	r3, r7
 8009cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	f000 b935 	b.w	8009f24 <_write_r>

08009cba <__sseek>:
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc2:	f000 f993 	bl	8009fec <_lseek_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	bf15      	itete	ne
 8009ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cd6:	81a3      	strheq	r3, [r4, #12]
 8009cd8:	bf18      	it	ne
 8009cda:	81a3      	strhne	r3, [r4, #12]
 8009cdc:	bd10      	pop	{r4, pc}

08009cde <__sclose>:
 8009cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce2:	f000 b94f 	b.w	8009f84 <_close_r>

08009ce6 <strcat>:
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	7814      	ldrb	r4, [r2, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	3201      	adds	r2, #1
 8009cf0:	2c00      	cmp	r4, #0
 8009cf2:	d1fa      	bne.n	8009cea <strcat+0x4>
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cfe:	2a00      	cmp	r2, #0
 8009d00:	d1f9      	bne.n	8009cf6 <strcat+0x10>
 8009d02:	bd10      	pop	{r4, pc}

08009d04 <strcpy>:
 8009d04:	4603      	mov	r3, r0
 8009d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d0a:	f803 2b01 	strb.w	r2, [r3], #1
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d1f9      	bne.n	8009d06 <strcpy+0x2>
 8009d12:	4770      	bx	lr

08009d14 <strtok>:
 8009d14:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <strtok+0x5c>)
 8009d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1a:	681f      	ldr	r7, [r3, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009d20:	460e      	mov	r6, r1
 8009d22:	b9ec      	cbnz	r4, 8009d60 <strtok+0x4c>
 8009d24:	2050      	movs	r0, #80	; 0x50
 8009d26:	f7ff fe33 	bl	8009990 <malloc>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	65b8      	str	r0, [r7, #88]	; 0x58
 8009d2e:	b920      	cbnz	r0, 8009d3a <strtok+0x26>
 8009d30:	2157      	movs	r1, #87	; 0x57
 8009d32:	4b10      	ldr	r3, [pc, #64]	; (8009d74 <strtok+0x60>)
 8009d34:	4810      	ldr	r0, [pc, #64]	; (8009d78 <strtok+0x64>)
 8009d36:	f000 f907 	bl	8009f48 <__assert_func>
 8009d3a:	e9c0 4400 	strd	r4, r4, [r0]
 8009d3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009d42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009d46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009d4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009d4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009d52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009d56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009d5a:	6184      	str	r4, [r0, #24]
 8009d5c:	7704      	strb	r4, [r0, #28]
 8009d5e:	6244      	str	r4, [r0, #36]	; 0x24
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d66:	2301      	movs	r3, #1
 8009d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	f000 b806 	b.w	8009d7c <__strtok_r>
 8009d70:	2000027c 	.word	0x2000027c
 8009d74:	0800b76c 	.word	0x0800b76c
 8009d78:	0800b7e2 	.word	0x0800b7e2

08009d7c <__strtok_r>:
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	b908      	cbnz	r0, 8009d84 <__strtok_r+0x8>
 8009d80:	6810      	ldr	r0, [r2, #0]
 8009d82:	b188      	cbz	r0, 8009da8 <__strtok_r+0x2c>
 8009d84:	4604      	mov	r4, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009d8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009d92:	b91e      	cbnz	r6, 8009d9c <__strtok_r+0x20>
 8009d94:	b965      	cbnz	r5, 8009db0 <__strtok_r+0x34>
 8009d96:	4628      	mov	r0, r5
 8009d98:	6015      	str	r5, [r2, #0]
 8009d9a:	e005      	b.n	8009da8 <__strtok_r+0x2c>
 8009d9c:	42b5      	cmp	r5, r6
 8009d9e:	d1f6      	bne.n	8009d8e <__strtok_r+0x12>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f0      	bne.n	8009d86 <__strtok_r+0xa>
 8009da4:	6014      	str	r4, [r2, #0]
 8009da6:	7003      	strb	r3, [r0, #0]
 8009da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009daa:	461c      	mov	r4, r3
 8009dac:	e00c      	b.n	8009dc8 <__strtok_r+0x4c>
 8009dae:	b915      	cbnz	r5, 8009db6 <__strtok_r+0x3a>
 8009db0:	460e      	mov	r6, r1
 8009db2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009db6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009dba:	42ab      	cmp	r3, r5
 8009dbc:	d1f7      	bne.n	8009dae <__strtok_r+0x32>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0f3      	beq.n	8009daa <__strtok_r+0x2e>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009dc8:	6014      	str	r4, [r2, #0]
 8009dca:	e7ed      	b.n	8009da8 <__strtok_r+0x2c>

08009dcc <_strtol_l.isra.0>:
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd2:	4686      	mov	lr, r0
 8009dd4:	d001      	beq.n	8009dda <_strtol_l.isra.0+0xe>
 8009dd6:	2b24      	cmp	r3, #36	; 0x24
 8009dd8:	d906      	bls.n	8009de8 <_strtol_l.isra.0+0x1c>
 8009dda:	f7ff fdaf 	bl	800993c <__errno>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	2000      	movs	r0, #0
 8009de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de8:	468c      	mov	ip, r1
 8009dea:	4e3a      	ldr	r6, [pc, #232]	; (8009ed4 <_strtol_l.isra.0+0x108>)
 8009dec:	4660      	mov	r0, ip
 8009dee:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009df2:	5da5      	ldrb	r5, [r4, r6]
 8009df4:	f015 0508 	ands.w	r5, r5, #8
 8009df8:	d1f8      	bne.n	8009dec <_strtol_l.isra.0+0x20>
 8009dfa:	2c2d      	cmp	r4, #45	; 0x2d
 8009dfc:	d133      	bne.n	8009e66 <_strtol_l.isra.0+0x9a>
 8009dfe:	f04f 0801 	mov.w	r8, #1
 8009e02:	f89c 4000 	ldrb.w	r4, [ip]
 8009e06:	f100 0c02 	add.w	ip, r0, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d05d      	beq.n	8009eca <_strtol_l.isra.0+0xfe>
 8009e0e:	2b10      	cmp	r3, #16
 8009e10:	d10c      	bne.n	8009e2c <_strtol_l.isra.0+0x60>
 8009e12:	2c30      	cmp	r4, #48	; 0x30
 8009e14:	d10a      	bne.n	8009e2c <_strtol_l.isra.0+0x60>
 8009e16:	f89c 0000 	ldrb.w	r0, [ip]
 8009e1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009e1e:	2858      	cmp	r0, #88	; 0x58
 8009e20:	d14e      	bne.n	8009ec0 <_strtol_l.isra.0+0xf4>
 8009e22:	2310      	movs	r3, #16
 8009e24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009e28:	f10c 0c02 	add.w	ip, ip, #2
 8009e2c:	2500      	movs	r5, #0
 8009e2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009e32:	3f01      	subs	r7, #1
 8009e34:	fbb7 f9f3 	udiv	r9, r7, r3
 8009e38:	4628      	mov	r0, r5
 8009e3a:	fb03 7a19 	mls	sl, r3, r9, r7
 8009e3e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009e42:	2e09      	cmp	r6, #9
 8009e44:	d818      	bhi.n	8009e78 <_strtol_l.isra.0+0xac>
 8009e46:	4634      	mov	r4, r6
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	dd24      	ble.n	8009e96 <_strtol_l.isra.0+0xca>
 8009e4c:	2d00      	cmp	r5, #0
 8009e4e:	db1f      	blt.n	8009e90 <_strtol_l.isra.0+0xc4>
 8009e50:	4581      	cmp	r9, r0
 8009e52:	d31d      	bcc.n	8009e90 <_strtol_l.isra.0+0xc4>
 8009e54:	d101      	bne.n	8009e5a <_strtol_l.isra.0+0x8e>
 8009e56:	45a2      	cmp	sl, r4
 8009e58:	db1a      	blt.n	8009e90 <_strtol_l.isra.0+0xc4>
 8009e5a:	2501      	movs	r5, #1
 8009e5c:	fb00 4003 	mla	r0, r0, r3, r4
 8009e60:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009e64:	e7eb      	b.n	8009e3e <_strtol_l.isra.0+0x72>
 8009e66:	2c2b      	cmp	r4, #43	; 0x2b
 8009e68:	bf08      	it	eq
 8009e6a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009e6e:	46a8      	mov	r8, r5
 8009e70:	bf08      	it	eq
 8009e72:	f100 0c02 	addeq.w	ip, r0, #2
 8009e76:	e7c8      	b.n	8009e0a <_strtol_l.isra.0+0x3e>
 8009e78:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009e7c:	2e19      	cmp	r6, #25
 8009e7e:	d801      	bhi.n	8009e84 <_strtol_l.isra.0+0xb8>
 8009e80:	3c37      	subs	r4, #55	; 0x37
 8009e82:	e7e1      	b.n	8009e48 <_strtol_l.isra.0+0x7c>
 8009e84:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009e88:	2e19      	cmp	r6, #25
 8009e8a:	d804      	bhi.n	8009e96 <_strtol_l.isra.0+0xca>
 8009e8c:	3c57      	subs	r4, #87	; 0x57
 8009e8e:	e7db      	b.n	8009e48 <_strtol_l.isra.0+0x7c>
 8009e90:	f04f 35ff 	mov.w	r5, #4294967295
 8009e94:	e7e4      	b.n	8009e60 <_strtol_l.isra.0+0x94>
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	da08      	bge.n	8009eac <_strtol_l.isra.0+0xe0>
 8009e9a:	2322      	movs	r3, #34	; 0x22
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f8ce 3000 	str.w	r3, [lr]
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d09e      	beq.n	8009de4 <_strtol_l.isra.0+0x18>
 8009ea6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009eaa:	e007      	b.n	8009ebc <_strtol_l.isra.0+0xf0>
 8009eac:	f1b8 0f00 	cmp.w	r8, #0
 8009eb0:	d000      	beq.n	8009eb4 <_strtol_l.isra.0+0xe8>
 8009eb2:	4240      	negs	r0, r0
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	d095      	beq.n	8009de4 <_strtol_l.isra.0+0x18>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d1f4      	bne.n	8009ea6 <_strtol_l.isra.0+0xda>
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	e791      	b.n	8009de4 <_strtol_l.isra.0+0x18>
 8009ec0:	2430      	movs	r4, #48	; 0x30
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1b2      	bne.n	8009e2c <_strtol_l.isra.0+0x60>
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	e7b0      	b.n	8009e2c <_strtol_l.isra.0+0x60>
 8009eca:	2c30      	cmp	r4, #48	; 0x30
 8009ecc:	d0a3      	beq.n	8009e16 <_strtol_l.isra.0+0x4a>
 8009ece:	230a      	movs	r3, #10
 8009ed0:	e7ac      	b.n	8009e2c <_strtol_l.isra.0+0x60>
 8009ed2:	bf00      	nop
 8009ed4:	0800b880 	.word	0x0800b880

08009ed8 <_strtol_r>:
 8009ed8:	f7ff bf78 	b.w	8009dcc <_strtol_l.isra.0>

08009edc <strtol>:
 8009edc:	4613      	mov	r3, r2
 8009ede:	460a      	mov	r2, r1
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	4802      	ldr	r0, [pc, #8]	; (8009eec <strtol+0x10>)
 8009ee4:	6800      	ldr	r0, [r0, #0]
 8009ee6:	f7ff bf71 	b.w	8009dcc <_strtol_l.isra.0>
 8009eea:	bf00      	nop
 8009eec:	2000027c 	.word	0x2000027c

08009ef0 <time>:
 8009ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <time+0x30>)
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4669      	mov	r1, sp
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	f000 f864 	bl	8009fc8 <_gettimeofday_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	da05      	bge.n	8009f10 <time+0x20>
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0c:	e9cd 2300 	strd	r2, r3, [sp]
 8009f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f14:	b10c      	cbz	r4, 8009f1a <time+0x2a>
 8009f16:	e9c4 0100 	strd	r0, r1, [r4]
 8009f1a:	b004      	add	sp, #16
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000027c 	.word	0x2000027c

08009f24 <_write_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4d05      	ldr	r5, [pc, #20]	; (8009f44 <_write_r+0x20>)
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f6 ff06 	bl	8000d44 <_write>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_write_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_write_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	200016a4 	.word	0x200016a4

08009f48 <__assert_func>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <__assert_func+0x2c>)
 8009f50:	4605      	mov	r5, r0
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68d8      	ldr	r0, [r3, #12]
 8009f56:	b14c      	cbz	r4, 8009f6c <__assert_func+0x24>
 8009f58:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <__assert_func+0x30>)
 8009f5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f5e:	9100      	str	r1, [sp, #0]
 8009f60:	462b      	mov	r3, r5
 8009f62:	4906      	ldr	r1, [pc, #24]	; (8009f7c <__assert_func+0x34>)
 8009f64:	f000 f81e 	bl	8009fa4 <fiprintf>
 8009f68:	f001 f82c 	bl	800afc4 <abort>
 8009f6c:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <__assert_func+0x38>)
 8009f6e:	461c      	mov	r4, r3
 8009f70:	e7f3      	b.n	8009f5a <__assert_func+0x12>
 8009f72:	bf00      	nop
 8009f74:	2000027c 	.word	0x2000027c
 8009f78:	0800b843 	.word	0x0800b843
 8009f7c:	0800b850 	.word	0x0800b850
 8009f80:	0800b87e 	.word	0x0800b87e

08009f84 <_close_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	2300      	movs	r3, #0
 8009f88:	4d05      	ldr	r5, [pc, #20]	; (8009fa0 <_close_r+0x1c>)
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f6 fef4 	bl	8000d7c <_close>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_close_r+0x1a>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_close_r+0x1a>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	200016a4 	.word	0x200016a4

08009fa4 <fiprintf>:
 8009fa4:	b40e      	push	{r1, r2, r3}
 8009fa6:	b503      	push	{r0, r1, lr}
 8009fa8:	4601      	mov	r1, r0
 8009faa:	ab03      	add	r3, sp, #12
 8009fac:	4805      	ldr	r0, [pc, #20]	; (8009fc4 <fiprintf+0x20>)
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	6800      	ldr	r0, [r0, #0]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	f000 fa33 	bl	800a420 <_vfiprintf_r>
 8009fba:	b002      	add	sp, #8
 8009fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc0:	b003      	add	sp, #12
 8009fc2:	4770      	bx	lr
 8009fc4:	2000027c 	.word	0x2000027c

08009fc8 <_gettimeofday_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4d06      	ldr	r5, [pc, #24]	; (8009fe8 <_gettimeofday_r+0x20>)
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	f001 facb 	bl	800b570 <_gettimeofday>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	d102      	bne.n	8009fe4 <_gettimeofday_r+0x1c>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b103      	cbz	r3, 8009fe4 <_gettimeofday_r+0x1c>
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200016a4 	.word	0x200016a4

08009fec <_lseek_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4d05      	ldr	r5, [pc, #20]	; (800a00c <_lseek_r+0x20>)
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f6 fee2 	bl	8000dc4 <_lseek>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_lseek_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_lseek_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	200016a4 	.word	0x200016a4

0800a010 <__malloc_lock>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__malloc_lock+0x8>)
 800a012:	f001 b997 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800a016:	bf00      	nop
 800a018:	200016ac 	.word	0x200016ac

0800a01c <__malloc_unlock>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__malloc_unlock+0x8>)
 800a01e:	f001 b992 	b.w	800b346 <__retarget_lock_release_recursive>
 800a022:	bf00      	nop
 800a024:	200016ac 	.word	0x200016ac

0800a028 <_sungetc_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	1c4b      	adds	r3, r1, #1
 800a02c:	4614      	mov	r4, r2
 800a02e:	d103      	bne.n	800a038 <_sungetc_r+0x10>
 800a030:	f04f 35ff 	mov.w	r5, #4294967295
 800a034:	4628      	mov	r0, r5
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	8993      	ldrh	r3, [r2, #12]
 800a03a:	b2cd      	uxtb	r5, r1
 800a03c:	f023 0320 	bic.w	r3, r3, #32
 800a040:	8193      	strh	r3, [r2, #12]
 800a042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a044:	6852      	ldr	r2, [r2, #4]
 800a046:	b18b      	cbz	r3, 800a06c <_sungetc_r+0x44>
 800a048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a04a:	4293      	cmp	r3, r2
 800a04c:	dd08      	ble.n	800a060 <_sungetc_r+0x38>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	1e5a      	subs	r2, r3, #1
 800a052:	6022      	str	r2, [r4, #0]
 800a054:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	3301      	adds	r3, #1
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	e7e9      	b.n	800a034 <_sungetc_r+0xc>
 800a060:	4621      	mov	r1, r4
 800a062:	f000 feb7 	bl	800add4 <__submore>
 800a066:	2800      	cmp	r0, #0
 800a068:	d0f1      	beq.n	800a04e <_sungetc_r+0x26>
 800a06a:	e7e1      	b.n	800a030 <_sungetc_r+0x8>
 800a06c:	6921      	ldr	r1, [r4, #16]
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	b151      	cbz	r1, 800a088 <_sungetc_r+0x60>
 800a072:	4299      	cmp	r1, r3
 800a074:	d208      	bcs.n	800a088 <_sungetc_r+0x60>
 800a076:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a07a:	42a9      	cmp	r1, r5
 800a07c:	d104      	bne.n	800a088 <_sungetc_r+0x60>
 800a07e:	3b01      	subs	r3, #1
 800a080:	3201      	adds	r2, #1
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	6062      	str	r2, [r4, #4]
 800a086:	e7d5      	b.n	800a034 <_sungetc_r+0xc>
 800a088:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a090:	6363      	str	r3, [r4, #52]	; 0x34
 800a092:	2303      	movs	r3, #3
 800a094:	63a3      	str	r3, [r4, #56]	; 0x38
 800a096:	4623      	mov	r3, r4
 800a098:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7dc      	b.n	800a05c <_sungetc_r+0x34>

0800a0a2 <__ssrefill_r>:
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0a8:	b169      	cbz	r1, 800a0c6 <__ssrefill_r+0x24>
 800a0aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	d001      	beq.n	800a0b6 <__ssrefill_r+0x14>
 800a0b2:	f7ff fc85 	bl	80099c0 <_free_r>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	b113      	cbz	r3, 800a0c6 <__ssrefill_r+0x24>
 800a0c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0320 	orr.w	r3, r3, #32
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	e7f3      	b.n	800a0c4 <__ssrefill_r+0x22>

0800a0dc <__ssvfiscanf_r>:
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a0ea:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a0ee:	49b3      	ldr	r1, [pc, #716]	; (800a3bc <__ssvfiscanf_r+0x2e0>)
 800a0f0:	f10d 0804 	add.w	r8, sp, #4
 800a0f4:	91a0      	str	r1, [sp, #640]	; 0x280
 800a0f6:	49b2      	ldr	r1, [pc, #712]	; (800a3c0 <__ssvfiscanf_r+0x2e4>)
 800a0f8:	4fb2      	ldr	r7, [pc, #712]	; (800a3c4 <__ssvfiscanf_r+0x2e8>)
 800a0fa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800a3c8 <__ssvfiscanf_r+0x2ec>
 800a0fe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a102:	91a1      	str	r1, [sp, #644]	; 0x284
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	f892 a000 	ldrb.w	sl, [r2]
 800a10a:	f1ba 0f00 	cmp.w	sl, #0
 800a10e:	f000 8153 	beq.w	800a3b8 <__ssvfiscanf_r+0x2dc>
 800a112:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a116:	1c55      	adds	r5, r2, #1
 800a118:	f013 0308 	ands.w	r3, r3, #8
 800a11c:	d019      	beq.n	800a152 <__ssvfiscanf_r+0x76>
 800a11e:	6863      	ldr	r3, [r4, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	dd0f      	ble.n	800a144 <__ssvfiscanf_r+0x68>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	5cba      	ldrb	r2, [r7, r2]
 800a12a:	0712      	lsls	r2, r2, #28
 800a12c:	d401      	bmi.n	800a132 <__ssvfiscanf_r+0x56>
 800a12e:	462a      	mov	r2, r5
 800a130:	e7e9      	b.n	800a106 <__ssvfiscanf_r+0x2a>
 800a132:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a134:	3301      	adds	r3, #1
 800a136:	3201      	adds	r2, #1
 800a138:	9245      	str	r2, [sp, #276]	; 0x114
 800a13a:	6862      	ldr	r2, [r4, #4]
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	3a01      	subs	r2, #1
 800a140:	6062      	str	r2, [r4, #4]
 800a142:	e7ec      	b.n	800a11e <__ssvfiscanf_r+0x42>
 800a144:	4621      	mov	r1, r4
 800a146:	4630      	mov	r0, r6
 800a148:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a14a:	4798      	blx	r3
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d0e9      	beq.n	800a124 <__ssvfiscanf_r+0x48>
 800a150:	e7ed      	b.n	800a12e <__ssvfiscanf_r+0x52>
 800a152:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a156:	f040 8086 	bne.w	800a266 <__ssvfiscanf_r+0x18a>
 800a15a:	9341      	str	r3, [sp, #260]	; 0x104
 800a15c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a15e:	7853      	ldrb	r3, [r2, #1]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	bf04      	itt	eq
 800a164:	2310      	moveq	r3, #16
 800a166:	1c95      	addeq	r5, r2, #2
 800a168:	f04f 020a 	mov.w	r2, #10
 800a16c:	bf08      	it	eq
 800a16e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a170:	46ab      	mov	fp, r5
 800a172:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a176:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d91d      	bls.n	800a1ba <__ssvfiscanf_r+0xde>
 800a17e:	2203      	movs	r2, #3
 800a180:	4891      	ldr	r0, [pc, #580]	; (800a3c8 <__ssvfiscanf_r+0x2ec>)
 800a182:	f001 f945 	bl	800b410 <memchr>
 800a186:	b140      	cbz	r0, 800a19a <__ssvfiscanf_r+0xbe>
 800a188:	2301      	movs	r3, #1
 800a18a:	465d      	mov	r5, fp
 800a18c:	eba0 0009 	sub.w	r0, r0, r9
 800a190:	fa03 f000 	lsl.w	r0, r3, r0
 800a194:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a196:	4318      	orrs	r0, r3
 800a198:	9041      	str	r0, [sp, #260]	; 0x104
 800a19a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a19e:	2b78      	cmp	r3, #120	; 0x78
 800a1a0:	d806      	bhi.n	800a1b0 <__ssvfiscanf_r+0xd4>
 800a1a2:	2b57      	cmp	r3, #87	; 0x57
 800a1a4:	d810      	bhi.n	800a1c8 <__ssvfiscanf_r+0xec>
 800a1a6:	2b25      	cmp	r3, #37	; 0x25
 800a1a8:	d05d      	beq.n	800a266 <__ssvfiscanf_r+0x18a>
 800a1aa:	d857      	bhi.n	800a25c <__ssvfiscanf_r+0x180>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d075      	beq.n	800a29c <__ssvfiscanf_r+0x1c0>
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1b4:	230a      	movs	r3, #10
 800a1b6:	9342      	str	r3, [sp, #264]	; 0x108
 800a1b8:	e082      	b.n	800a2c0 <__ssvfiscanf_r+0x1e4>
 800a1ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a1bc:	465d      	mov	r5, fp
 800a1be:	fb02 1303 	mla	r3, r2, r3, r1
 800a1c2:	3b30      	subs	r3, #48	; 0x30
 800a1c4:	9343      	str	r3, [sp, #268]	; 0x10c
 800a1c6:	e7d3      	b.n	800a170 <__ssvfiscanf_r+0x94>
 800a1c8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a1cc:	2a20      	cmp	r2, #32
 800a1ce:	d8ef      	bhi.n	800a1b0 <__ssvfiscanf_r+0xd4>
 800a1d0:	a101      	add	r1, pc, #4	; (adr r1, 800a1d8 <__ssvfiscanf_r+0xfc>)
 800a1d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a2ab 	.word	0x0800a2ab
 800a1dc:	0800a1b1 	.word	0x0800a1b1
 800a1e0:	0800a1b1 	.word	0x0800a1b1
 800a1e4:	0800a309 	.word	0x0800a309
 800a1e8:	0800a1b1 	.word	0x0800a1b1
 800a1ec:	0800a1b1 	.word	0x0800a1b1
 800a1f0:	0800a1b1 	.word	0x0800a1b1
 800a1f4:	0800a1b1 	.word	0x0800a1b1
 800a1f8:	0800a1b1 	.word	0x0800a1b1
 800a1fc:	0800a1b1 	.word	0x0800a1b1
 800a200:	0800a1b1 	.word	0x0800a1b1
 800a204:	0800a31f 	.word	0x0800a31f
 800a208:	0800a2f5 	.word	0x0800a2f5
 800a20c:	0800a263 	.word	0x0800a263
 800a210:	0800a263 	.word	0x0800a263
 800a214:	0800a263 	.word	0x0800a263
 800a218:	0800a1b1 	.word	0x0800a1b1
 800a21c:	0800a2f9 	.word	0x0800a2f9
 800a220:	0800a1b1 	.word	0x0800a1b1
 800a224:	0800a1b1 	.word	0x0800a1b1
 800a228:	0800a1b1 	.word	0x0800a1b1
 800a22c:	0800a1b1 	.word	0x0800a1b1
 800a230:	0800a32f 	.word	0x0800a32f
 800a234:	0800a301 	.word	0x0800a301
 800a238:	0800a2a3 	.word	0x0800a2a3
 800a23c:	0800a1b1 	.word	0x0800a1b1
 800a240:	0800a1b1 	.word	0x0800a1b1
 800a244:	0800a32b 	.word	0x0800a32b
 800a248:	0800a1b1 	.word	0x0800a1b1
 800a24c:	0800a2f5 	.word	0x0800a2f5
 800a250:	0800a1b1 	.word	0x0800a1b1
 800a254:	0800a1b1 	.word	0x0800a1b1
 800a258:	0800a2ab 	.word	0x0800a2ab
 800a25c:	3b45      	subs	r3, #69	; 0x45
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d8a6      	bhi.n	800a1b0 <__ssvfiscanf_r+0xd4>
 800a262:	2305      	movs	r3, #5
 800a264:	e02b      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a266:	6863      	ldr	r3, [r4, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dd0d      	ble.n	800a288 <__ssvfiscanf_r+0x1ac>
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	4552      	cmp	r2, sl
 800a272:	f040 80a1 	bne.w	800a3b8 <__ssvfiscanf_r+0x2dc>
 800a276:	3301      	adds	r3, #1
 800a278:	6862      	ldr	r2, [r4, #4]
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a27e:	3a01      	subs	r2, #1
 800a280:	3301      	adds	r3, #1
 800a282:	6062      	str	r2, [r4, #4]
 800a284:	9345      	str	r3, [sp, #276]	; 0x114
 800a286:	e752      	b.n	800a12e <__ssvfiscanf_r+0x52>
 800a288:	4621      	mov	r1, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a28e:	4798      	blx	r3
 800a290:	2800      	cmp	r0, #0
 800a292:	d0eb      	beq.n	800a26c <__ssvfiscanf_r+0x190>
 800a294:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a296:	2800      	cmp	r0, #0
 800a298:	f040 8084 	bne.w	800a3a4 <__ssvfiscanf_r+0x2c8>
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a0:	e086      	b.n	800a3b0 <__ssvfiscanf_r+0x2d4>
 800a2a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2a4:	f042 0220 	orr.w	r2, r2, #32
 800a2a8:	9241      	str	r2, [sp, #260]	; 0x104
 800a2aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2b0:	9241      	str	r2, [sp, #260]	; 0x104
 800a2b2:	2210      	movs	r2, #16
 800a2b4:	2b6f      	cmp	r3, #111	; 0x6f
 800a2b6:	bf34      	ite	cc
 800a2b8:	2303      	movcc	r3, #3
 800a2ba:	2304      	movcs	r3, #4
 800a2bc:	9242      	str	r2, [sp, #264]	; 0x108
 800a2be:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dd41      	ble.n	800a34a <__ssvfiscanf_r+0x26e>
 800a2c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2c8:	0659      	lsls	r1, r3, #25
 800a2ca:	d404      	bmi.n	800a2d6 <__ssvfiscanf_r+0x1fa>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	5cba      	ldrb	r2, [r7, r2]
 800a2d2:	0712      	lsls	r2, r2, #28
 800a2d4:	d440      	bmi.n	800a358 <__ssvfiscanf_r+0x27c>
 800a2d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	dc4f      	bgt.n	800a37c <__ssvfiscanf_r+0x2a0>
 800a2dc:	466b      	mov	r3, sp
 800a2de:	4622      	mov	r2, r4
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	a941      	add	r1, sp, #260	; 0x104
 800a2e4:	f000 fb62 	bl	800a9ac <_scanf_chars>
 800a2e8:	2801      	cmp	r0, #1
 800a2ea:	d065      	beq.n	800a3b8 <__ssvfiscanf_r+0x2dc>
 800a2ec:	2802      	cmp	r0, #2
 800a2ee:	f47f af1e 	bne.w	800a12e <__ssvfiscanf_r+0x52>
 800a2f2:	e7cf      	b.n	800a294 <__ssvfiscanf_r+0x1b8>
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	e7dd      	b.n	800a2b4 <__ssvfiscanf_r+0x1d8>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9342      	str	r3, [sp, #264]	; 0x108
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e7de      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a300:	2308      	movs	r3, #8
 800a302:	9342      	str	r3, [sp, #264]	; 0x108
 800a304:	2304      	movs	r3, #4
 800a306:	e7da      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a308:	4629      	mov	r1, r5
 800a30a:	4640      	mov	r0, r8
 800a30c:	f000 fcaa 	bl	800ac64 <__sccl>
 800a310:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a312:	4605      	mov	r5, r0
 800a314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a318:	9341      	str	r3, [sp, #260]	; 0x104
 800a31a:	2301      	movs	r3, #1
 800a31c:	e7cf      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a31e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a324:	9341      	str	r3, [sp, #260]	; 0x104
 800a326:	2300      	movs	r3, #0
 800a328:	e7c9      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e7c7      	b.n	800a2be <__ssvfiscanf_r+0x1e2>
 800a32e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a330:	06c3      	lsls	r3, r0, #27
 800a332:	f53f aefc 	bmi.w	800a12e <__ssvfiscanf_r+0x52>
 800a336:	9b00      	ldr	r3, [sp, #0]
 800a338:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a33a:	1d19      	adds	r1, r3, #4
 800a33c:	9100      	str	r1, [sp, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	07c0      	lsls	r0, r0, #31
 800a342:	bf4c      	ite	mi
 800a344:	801a      	strhmi	r2, [r3, #0]
 800a346:	601a      	strpl	r2, [r3, #0]
 800a348:	e6f1      	b.n	800a12e <__ssvfiscanf_r+0x52>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4630      	mov	r0, r6
 800a34e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a350:	4798      	blx	r3
 800a352:	2800      	cmp	r0, #0
 800a354:	d0b7      	beq.n	800a2c6 <__ssvfiscanf_r+0x1ea>
 800a356:	e79d      	b.n	800a294 <__ssvfiscanf_r+0x1b8>
 800a358:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a35a:	3201      	adds	r2, #1
 800a35c:	9245      	str	r2, [sp, #276]	; 0x114
 800a35e:	6862      	ldr	r2, [r4, #4]
 800a360:	3a01      	subs	r2, #1
 800a362:	2a00      	cmp	r2, #0
 800a364:	6062      	str	r2, [r4, #4]
 800a366:	dd02      	ble.n	800a36e <__ssvfiscanf_r+0x292>
 800a368:	3301      	adds	r3, #1
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	e7ae      	b.n	800a2cc <__ssvfiscanf_r+0x1f0>
 800a36e:	4621      	mov	r1, r4
 800a370:	4630      	mov	r0, r6
 800a372:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a374:	4798      	blx	r3
 800a376:	2800      	cmp	r0, #0
 800a378:	d0a8      	beq.n	800a2cc <__ssvfiscanf_r+0x1f0>
 800a37a:	e78b      	b.n	800a294 <__ssvfiscanf_r+0x1b8>
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	dc06      	bgt.n	800a38e <__ssvfiscanf_r+0x2b2>
 800a380:	466b      	mov	r3, sp
 800a382:	4622      	mov	r2, r4
 800a384:	4630      	mov	r0, r6
 800a386:	a941      	add	r1, sp, #260	; 0x104
 800a388:	f000 fb68 	bl	800aa5c <_scanf_i>
 800a38c:	e7ac      	b.n	800a2e8 <__ssvfiscanf_r+0x20c>
 800a38e:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <__ssvfiscanf_r+0x2f0>)
 800a390:	2b00      	cmp	r3, #0
 800a392:	f43f aecc 	beq.w	800a12e <__ssvfiscanf_r+0x52>
 800a396:	466b      	mov	r3, sp
 800a398:	4622      	mov	r2, r4
 800a39a:	4630      	mov	r0, r6
 800a39c:	a941      	add	r1, sp, #260	; 0x104
 800a39e:	f3af 8000 	nop.w
 800a3a2:	e7a1      	b.n	800a2e8 <__ssvfiscanf_r+0x20c>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3aa:	bf18      	it	ne
 800a3ac:	f04f 30ff 	movne.w	r0, #4294967295
 800a3b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a3ba:	e7f9      	b.n	800a3b0 <__ssvfiscanf_r+0x2d4>
 800a3bc:	0800a029 	.word	0x0800a029
 800a3c0:	0800a0a3 	.word	0x0800a0a3
 800a3c4:	0800b880 	.word	0x0800b880
 800a3c8:	0800b980 	.word	0x0800b980
 800a3cc:	00000000 	.word	0x00000000

0800a3d0 <__sfputc_r>:
 800a3d0:	6893      	ldr	r3, [r2, #8]
 800a3d2:	b410      	push	{r4}
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	6093      	str	r3, [r2, #8]
 800a3da:	da07      	bge.n	800a3ec <__sfputc_r+0x1c>
 800a3dc:	6994      	ldr	r4, [r2, #24]
 800a3de:	42a3      	cmp	r3, r4
 800a3e0:	db01      	blt.n	800a3e6 <__sfputc_r+0x16>
 800a3e2:	290a      	cmp	r1, #10
 800a3e4:	d102      	bne.n	800a3ec <__sfputc_r+0x1c>
 800a3e6:	bc10      	pop	{r4}
 800a3e8:	f000 bd2c 	b.w	800ae44 <__swbuf_r>
 800a3ec:	6813      	ldr	r3, [r2, #0]
 800a3ee:	1c58      	adds	r0, r3, #1
 800a3f0:	6010      	str	r0, [r2, #0]
 800a3f2:	7019      	strb	r1, [r3, #0]
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	bc10      	pop	{r4}
 800a3f8:	4770      	bx	lr

0800a3fa <__sfputs_r>:
 800a3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	4614      	mov	r4, r2
 800a402:	18d5      	adds	r5, r2, r3
 800a404:	42ac      	cmp	r4, r5
 800a406:	d101      	bne.n	800a40c <__sfputs_r+0x12>
 800a408:	2000      	movs	r0, #0
 800a40a:	e007      	b.n	800a41c <__sfputs_r+0x22>
 800a40c:	463a      	mov	r2, r7
 800a40e:	4630      	mov	r0, r6
 800a410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a414:	f7ff ffdc 	bl	800a3d0 <__sfputc_r>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d1f3      	bne.n	800a404 <__sfputs_r+0xa>
 800a41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a420 <_vfiprintf_r>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	460d      	mov	r5, r1
 800a426:	4614      	mov	r4, r2
 800a428:	4698      	mov	r8, r3
 800a42a:	4606      	mov	r6, r0
 800a42c:	b09d      	sub	sp, #116	; 0x74
 800a42e:	b118      	cbz	r0, 800a438 <_vfiprintf_r+0x18>
 800a430:	6983      	ldr	r3, [r0, #24]
 800a432:	b90b      	cbnz	r3, 800a438 <_vfiprintf_r+0x18>
 800a434:	f000 fee8 	bl	800b208 <__sinit>
 800a438:	4b89      	ldr	r3, [pc, #548]	; (800a660 <_vfiprintf_r+0x240>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	d11b      	bne.n	800a476 <_vfiprintf_r+0x56>
 800a43e:	6875      	ldr	r5, [r6, #4]
 800a440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a442:	07d9      	lsls	r1, r3, #31
 800a444:	d405      	bmi.n	800a452 <_vfiprintf_r+0x32>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	059a      	lsls	r2, r3, #22
 800a44a:	d402      	bmi.n	800a452 <_vfiprintf_r+0x32>
 800a44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44e:	f000 ff79 	bl	800b344 <__retarget_lock_acquire_recursive>
 800a452:	89ab      	ldrh	r3, [r5, #12]
 800a454:	071b      	lsls	r3, r3, #28
 800a456:	d501      	bpl.n	800a45c <_vfiprintf_r+0x3c>
 800a458:	692b      	ldr	r3, [r5, #16]
 800a45a:	b9eb      	cbnz	r3, 800a498 <_vfiprintf_r+0x78>
 800a45c:	4629      	mov	r1, r5
 800a45e:	4630      	mov	r0, r6
 800a460:	f000 fd42 	bl	800aee8 <__swsetup_r>
 800a464:	b1c0      	cbz	r0, 800a498 <_vfiprintf_r+0x78>
 800a466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a468:	07dc      	lsls	r4, r3, #31
 800a46a:	d50e      	bpl.n	800a48a <_vfiprintf_r+0x6a>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	b01d      	add	sp, #116	; 0x74
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	4b7b      	ldr	r3, [pc, #492]	; (800a664 <_vfiprintf_r+0x244>)
 800a478:	429d      	cmp	r5, r3
 800a47a:	d101      	bne.n	800a480 <_vfiprintf_r+0x60>
 800a47c:	68b5      	ldr	r5, [r6, #8]
 800a47e:	e7df      	b.n	800a440 <_vfiprintf_r+0x20>
 800a480:	4b79      	ldr	r3, [pc, #484]	; (800a668 <_vfiprintf_r+0x248>)
 800a482:	429d      	cmp	r5, r3
 800a484:	bf08      	it	eq
 800a486:	68f5      	ldreq	r5, [r6, #12]
 800a488:	e7da      	b.n	800a440 <_vfiprintf_r+0x20>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	0598      	lsls	r0, r3, #22
 800a48e:	d4ed      	bmi.n	800a46c <_vfiprintf_r+0x4c>
 800a490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a492:	f000 ff58 	bl	800b346 <__retarget_lock_release_recursive>
 800a496:	e7e9      	b.n	800a46c <_vfiprintf_r+0x4c>
 800a498:	2300      	movs	r3, #0
 800a49a:	9309      	str	r3, [sp, #36]	; 0x24
 800a49c:	2320      	movs	r3, #32
 800a49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a2:	2330      	movs	r3, #48	; 0x30
 800a4a4:	f04f 0901 	mov.w	r9, #1
 800a4a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a66c <_vfiprintf_r+0x24c>
 800a4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b4:	4623      	mov	r3, r4
 800a4b6:	469a      	mov	sl, r3
 800a4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4bc:	b10a      	cbz	r2, 800a4c2 <_vfiprintf_r+0xa2>
 800a4be:	2a25      	cmp	r2, #37	; 0x25
 800a4c0:	d1f9      	bne.n	800a4b6 <_vfiprintf_r+0x96>
 800a4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c6:	d00b      	beq.n	800a4e0 <_vfiprintf_r+0xc0>
 800a4c8:	465b      	mov	r3, fp
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff ff93 	bl	800a3fa <__sfputs_r>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f000 80aa 	beq.w	800a62e <_vfiprintf_r+0x20e>
 800a4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4dc:	445a      	add	r2, fp
 800a4de:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80a2 	beq.w	800a62e <_vfiprintf_r+0x20e>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f4:	f10a 0a01 	add.w	sl, sl, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a500:	931a      	str	r3, [sp, #104]	; 0x68
 800a502:	4654      	mov	r4, sl
 800a504:	2205      	movs	r2, #5
 800a506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50a:	4858      	ldr	r0, [pc, #352]	; (800a66c <_vfiprintf_r+0x24c>)
 800a50c:	f000 ff80 	bl	800b410 <memchr>
 800a510:	9a04      	ldr	r2, [sp, #16]
 800a512:	b9d8      	cbnz	r0, 800a54c <_vfiprintf_r+0x12c>
 800a514:	06d1      	lsls	r1, r2, #27
 800a516:	bf44      	itt	mi
 800a518:	2320      	movmi	r3, #32
 800a51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51e:	0713      	lsls	r3, r2, #28
 800a520:	bf44      	itt	mi
 800a522:	232b      	movmi	r3, #43	; 0x2b
 800a524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a528:	f89a 3000 	ldrb.w	r3, [sl]
 800a52c:	2b2a      	cmp	r3, #42	; 0x2a
 800a52e:	d015      	beq.n	800a55c <_vfiprintf_r+0x13c>
 800a530:	4654      	mov	r4, sl
 800a532:	2000      	movs	r0, #0
 800a534:	f04f 0c0a 	mov.w	ip, #10
 800a538:	9a07      	ldr	r2, [sp, #28]
 800a53a:	4621      	mov	r1, r4
 800a53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a540:	3b30      	subs	r3, #48	; 0x30
 800a542:	2b09      	cmp	r3, #9
 800a544:	d94e      	bls.n	800a5e4 <_vfiprintf_r+0x1c4>
 800a546:	b1b0      	cbz	r0, 800a576 <_vfiprintf_r+0x156>
 800a548:	9207      	str	r2, [sp, #28]
 800a54a:	e014      	b.n	800a576 <_vfiprintf_r+0x156>
 800a54c:	eba0 0308 	sub.w	r3, r0, r8
 800a550:	fa09 f303 	lsl.w	r3, r9, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	46a2      	mov	sl, r4
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	e7d2      	b.n	800a502 <_vfiprintf_r+0xe2>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	1d19      	adds	r1, r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	9103      	str	r1, [sp, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfbb      	ittet	lt
 800a568:	425b      	neglt	r3, r3
 800a56a:	f042 0202 	orrlt.w	r2, r2, #2
 800a56e:	9307      	strge	r3, [sp, #28]
 800a570:	9307      	strlt	r3, [sp, #28]
 800a572:	bfb8      	it	lt
 800a574:	9204      	strlt	r2, [sp, #16]
 800a576:	7823      	ldrb	r3, [r4, #0]
 800a578:	2b2e      	cmp	r3, #46	; 0x2e
 800a57a:	d10c      	bne.n	800a596 <_vfiprintf_r+0x176>
 800a57c:	7863      	ldrb	r3, [r4, #1]
 800a57e:	2b2a      	cmp	r3, #42	; 0x2a
 800a580:	d135      	bne.n	800a5ee <_vfiprintf_r+0x1ce>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	3402      	adds	r4, #2
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9203      	str	r2, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfb8      	it	lt
 800a590:	f04f 33ff 	movlt.w	r3, #4294967295
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a67c <_vfiprintf_r+0x25c>
 800a59a:	2203      	movs	r2, #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	7821      	ldrb	r1, [r4, #0]
 800a5a0:	f000 ff36 	bl	800b410 <memchr>
 800a5a4:	b140      	cbz	r0, 800a5b8 <_vfiprintf_r+0x198>
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	eba0 000a 	sub.w	r0, r0, sl
 800a5ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	4303      	orrs	r3, r0
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5bc:	2206      	movs	r2, #6
 800a5be:	482c      	ldr	r0, [pc, #176]	; (800a670 <_vfiprintf_r+0x250>)
 800a5c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5c4:	f000 ff24 	bl	800b410 <memchr>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d03f      	beq.n	800a64c <_vfiprintf_r+0x22c>
 800a5cc:	4b29      	ldr	r3, [pc, #164]	; (800a674 <_vfiprintf_r+0x254>)
 800a5ce:	bb1b      	cbnz	r3, 800a618 <_vfiprintf_r+0x1f8>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	3307      	adds	r3, #7
 800a5d4:	f023 0307 	bic.w	r3, r3, #7
 800a5d8:	3308      	adds	r3, #8
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5de:	443b      	add	r3, r7
 800a5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e2:	e767      	b.n	800a4b4 <_vfiprintf_r+0x94>
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ec:	e7a5      	b.n	800a53a <_vfiprintf_r+0x11a>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f04f 0c0a 	mov.w	ip, #10
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	3401      	adds	r4, #1
 800a5f8:	9305      	str	r3, [sp, #20]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a600:	3a30      	subs	r2, #48	; 0x30
 800a602:	2a09      	cmp	r2, #9
 800a604:	d903      	bls.n	800a60e <_vfiprintf_r+0x1ee>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0c5      	beq.n	800a596 <_vfiprintf_r+0x176>
 800a60a:	9105      	str	r1, [sp, #20]
 800a60c:	e7c3      	b.n	800a596 <_vfiprintf_r+0x176>
 800a60e:	4604      	mov	r4, r0
 800a610:	2301      	movs	r3, #1
 800a612:	fb0c 2101 	mla	r1, ip, r1, r2
 800a616:	e7f0      	b.n	800a5fa <_vfiprintf_r+0x1da>
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	462a      	mov	r2, r5
 800a61e:	4630      	mov	r0, r6
 800a620:	4b15      	ldr	r3, [pc, #84]	; (800a678 <_vfiprintf_r+0x258>)
 800a622:	a904      	add	r1, sp, #16
 800a624:	f3af 8000 	nop.w
 800a628:	4607      	mov	r7, r0
 800a62a:	1c78      	adds	r0, r7, #1
 800a62c:	d1d6      	bne.n	800a5dc <_vfiprintf_r+0x1bc>
 800a62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a630:	07d9      	lsls	r1, r3, #31
 800a632:	d405      	bmi.n	800a640 <_vfiprintf_r+0x220>
 800a634:	89ab      	ldrh	r3, [r5, #12]
 800a636:	059a      	lsls	r2, r3, #22
 800a638:	d402      	bmi.n	800a640 <_vfiprintf_r+0x220>
 800a63a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a63c:	f000 fe83 	bl	800b346 <__retarget_lock_release_recursive>
 800a640:	89ab      	ldrh	r3, [r5, #12]
 800a642:	065b      	lsls	r3, r3, #25
 800a644:	f53f af12 	bmi.w	800a46c <_vfiprintf_r+0x4c>
 800a648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64a:	e711      	b.n	800a470 <_vfiprintf_r+0x50>
 800a64c:	ab03      	add	r3, sp, #12
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	462a      	mov	r2, r5
 800a652:	4630      	mov	r0, r6
 800a654:	4b08      	ldr	r3, [pc, #32]	; (800a678 <_vfiprintf_r+0x258>)
 800a656:	a904      	add	r1, sp, #16
 800a658:	f000 f882 	bl	800a760 <_printf_i>
 800a65c:	e7e4      	b.n	800a628 <_vfiprintf_r+0x208>
 800a65e:	bf00      	nop
 800a660:	0800b9f0 	.word	0x0800b9f0
 800a664:	0800ba10 	.word	0x0800ba10
 800a668:	0800b9d0 	.word	0x0800b9d0
 800a66c:	0800b984 	.word	0x0800b984
 800a670:	0800b98a 	.word	0x0800b98a
 800a674:	00000000 	.word	0x00000000
 800a678:	0800a3fb 	.word	0x0800a3fb
 800a67c:	0800b980 	.word	0x0800b980

0800a680 <_printf_common>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	4616      	mov	r6, r2
 800a686:	4699      	mov	r9, r3
 800a688:	688a      	ldr	r2, [r1, #8]
 800a68a:	690b      	ldr	r3, [r1, #16]
 800a68c:	4607      	mov	r7, r0
 800a68e:	4293      	cmp	r3, r2
 800a690:	bfb8      	it	lt
 800a692:	4613      	movlt	r3, r2
 800a694:	6033      	str	r3, [r6, #0]
 800a696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a69a:	460c      	mov	r4, r1
 800a69c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a0:	b10a      	cbz	r2, 800a6a6 <_printf_common+0x26>
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	6033      	str	r3, [r6, #0]
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	0699      	lsls	r1, r3, #26
 800a6aa:	bf42      	ittt	mi
 800a6ac:	6833      	ldrmi	r3, [r6, #0]
 800a6ae:	3302      	addmi	r3, #2
 800a6b0:	6033      	strmi	r3, [r6, #0]
 800a6b2:	6825      	ldr	r5, [r4, #0]
 800a6b4:	f015 0506 	ands.w	r5, r5, #6
 800a6b8:	d106      	bne.n	800a6c8 <_printf_common+0x48>
 800a6ba:	f104 0a19 	add.w	sl, r4, #25
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	6832      	ldr	r2, [r6, #0]
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dc28      	bgt.n	800a71a <_printf_common+0x9a>
 800a6c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6cc:	1e13      	subs	r3, r2, #0
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	bf18      	it	ne
 800a6d2:	2301      	movne	r3, #1
 800a6d4:	0692      	lsls	r2, r2, #26
 800a6d6:	d42d      	bmi.n	800a734 <_printf_common+0xb4>
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e0:	47c0      	blx	r8
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d020      	beq.n	800a728 <_printf_common+0xa8>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	68e5      	ldr	r5, [r4, #12]
 800a6ea:	f003 0306 	and.w	r3, r3, #6
 800a6ee:	2b04      	cmp	r3, #4
 800a6f0:	bf18      	it	ne
 800a6f2:	2500      	movne	r5, #0
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	f04f 0600 	mov.w	r6, #0
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	bf08      	it	eq
 800a6fe:	1aad      	subeq	r5, r5, r2
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	bf08      	it	eq
 800a704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a708:	4293      	cmp	r3, r2
 800a70a:	bfc4      	itt	gt
 800a70c:	1a9b      	subgt	r3, r3, r2
 800a70e:	18ed      	addgt	r5, r5, r3
 800a710:	341a      	adds	r4, #26
 800a712:	42b5      	cmp	r5, r6
 800a714:	d11a      	bne.n	800a74c <_printf_common+0xcc>
 800a716:	2000      	movs	r0, #0
 800a718:	e008      	b.n	800a72c <_printf_common+0xac>
 800a71a:	2301      	movs	r3, #1
 800a71c:	4652      	mov	r2, sl
 800a71e:	4649      	mov	r1, r9
 800a720:	4638      	mov	r0, r7
 800a722:	47c0      	blx	r8
 800a724:	3001      	adds	r0, #1
 800a726:	d103      	bne.n	800a730 <_printf_common+0xb0>
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a730:	3501      	adds	r5, #1
 800a732:	e7c4      	b.n	800a6be <_printf_common+0x3e>
 800a734:	2030      	movs	r0, #48	; 0x30
 800a736:	18e1      	adds	r1, r4, r3
 800a738:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a742:	4422      	add	r2, r4
 800a744:	3302      	adds	r3, #2
 800a746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74a:	e7c5      	b.n	800a6d8 <_printf_common+0x58>
 800a74c:	2301      	movs	r3, #1
 800a74e:	4622      	mov	r2, r4
 800a750:	4649      	mov	r1, r9
 800a752:	4638      	mov	r0, r7
 800a754:	47c0      	blx	r8
 800a756:	3001      	adds	r0, #1
 800a758:	d0e6      	beq.n	800a728 <_printf_common+0xa8>
 800a75a:	3601      	adds	r6, #1
 800a75c:	e7d9      	b.n	800a712 <_printf_common+0x92>
	...

0800a760 <_printf_i>:
 800a760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a764:	460c      	mov	r4, r1
 800a766:	7e27      	ldrb	r7, [r4, #24]
 800a768:	4691      	mov	r9, r2
 800a76a:	2f78      	cmp	r7, #120	; 0x78
 800a76c:	4680      	mov	r8, r0
 800a76e:	469a      	mov	sl, r3
 800a770:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a776:	d807      	bhi.n	800a788 <_printf_i+0x28>
 800a778:	2f62      	cmp	r7, #98	; 0x62
 800a77a:	d80a      	bhi.n	800a792 <_printf_i+0x32>
 800a77c:	2f00      	cmp	r7, #0
 800a77e:	f000 80d9 	beq.w	800a934 <_printf_i+0x1d4>
 800a782:	2f58      	cmp	r7, #88	; 0x58
 800a784:	f000 80a4 	beq.w	800a8d0 <_printf_i+0x170>
 800a788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a790:	e03a      	b.n	800a808 <_printf_i+0xa8>
 800a792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a796:	2b15      	cmp	r3, #21
 800a798:	d8f6      	bhi.n	800a788 <_printf_i+0x28>
 800a79a:	a001      	add	r0, pc, #4	; (adr r0, 800a7a0 <_printf_i+0x40>)
 800a79c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7a0:	0800a7f9 	.word	0x0800a7f9
 800a7a4:	0800a80d 	.word	0x0800a80d
 800a7a8:	0800a789 	.word	0x0800a789
 800a7ac:	0800a789 	.word	0x0800a789
 800a7b0:	0800a789 	.word	0x0800a789
 800a7b4:	0800a789 	.word	0x0800a789
 800a7b8:	0800a80d 	.word	0x0800a80d
 800a7bc:	0800a789 	.word	0x0800a789
 800a7c0:	0800a789 	.word	0x0800a789
 800a7c4:	0800a789 	.word	0x0800a789
 800a7c8:	0800a789 	.word	0x0800a789
 800a7cc:	0800a91b 	.word	0x0800a91b
 800a7d0:	0800a83d 	.word	0x0800a83d
 800a7d4:	0800a8fd 	.word	0x0800a8fd
 800a7d8:	0800a789 	.word	0x0800a789
 800a7dc:	0800a789 	.word	0x0800a789
 800a7e0:	0800a93d 	.word	0x0800a93d
 800a7e4:	0800a789 	.word	0x0800a789
 800a7e8:	0800a83d 	.word	0x0800a83d
 800a7ec:	0800a789 	.word	0x0800a789
 800a7f0:	0800a789 	.word	0x0800a789
 800a7f4:	0800a905 	.word	0x0800a905
 800a7f8:	680b      	ldr	r3, [r1, #0]
 800a7fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	600a      	str	r2, [r1, #0]
 800a804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a808:	2301      	movs	r3, #1
 800a80a:	e0a4      	b.n	800a956 <_printf_i+0x1f6>
 800a80c:	6825      	ldr	r5, [r4, #0]
 800a80e:	6808      	ldr	r0, [r1, #0]
 800a810:	062e      	lsls	r6, r5, #24
 800a812:	f100 0304 	add.w	r3, r0, #4
 800a816:	d50a      	bpl.n	800a82e <_printf_i+0xce>
 800a818:	6805      	ldr	r5, [r0, #0]
 800a81a:	600b      	str	r3, [r1, #0]
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	da03      	bge.n	800a828 <_printf_i+0xc8>
 800a820:	232d      	movs	r3, #45	; 0x2d
 800a822:	426d      	negs	r5, r5
 800a824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a828:	230a      	movs	r3, #10
 800a82a:	485e      	ldr	r0, [pc, #376]	; (800a9a4 <_printf_i+0x244>)
 800a82c:	e019      	b.n	800a862 <_printf_i+0x102>
 800a82e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a832:	6805      	ldr	r5, [r0, #0]
 800a834:	600b      	str	r3, [r1, #0]
 800a836:	bf18      	it	ne
 800a838:	b22d      	sxthne	r5, r5
 800a83a:	e7ef      	b.n	800a81c <_printf_i+0xbc>
 800a83c:	680b      	ldr	r3, [r1, #0]
 800a83e:	6825      	ldr	r5, [r4, #0]
 800a840:	1d18      	adds	r0, r3, #4
 800a842:	6008      	str	r0, [r1, #0]
 800a844:	0628      	lsls	r0, r5, #24
 800a846:	d501      	bpl.n	800a84c <_printf_i+0xec>
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	e002      	b.n	800a852 <_printf_i+0xf2>
 800a84c:	0669      	lsls	r1, r5, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0xe8>
 800a850:	881d      	ldrh	r5, [r3, #0]
 800a852:	2f6f      	cmp	r7, #111	; 0x6f
 800a854:	bf0c      	ite	eq
 800a856:	2308      	moveq	r3, #8
 800a858:	230a      	movne	r3, #10
 800a85a:	4852      	ldr	r0, [pc, #328]	; (800a9a4 <_printf_i+0x244>)
 800a85c:	2100      	movs	r1, #0
 800a85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a862:	6866      	ldr	r6, [r4, #4]
 800a864:	2e00      	cmp	r6, #0
 800a866:	bfa8      	it	ge
 800a868:	6821      	ldrge	r1, [r4, #0]
 800a86a:	60a6      	str	r6, [r4, #8]
 800a86c:	bfa4      	itt	ge
 800a86e:	f021 0104 	bicge.w	r1, r1, #4
 800a872:	6021      	strge	r1, [r4, #0]
 800a874:	b90d      	cbnz	r5, 800a87a <_printf_i+0x11a>
 800a876:	2e00      	cmp	r6, #0
 800a878:	d04d      	beq.n	800a916 <_printf_i+0x1b6>
 800a87a:	4616      	mov	r6, r2
 800a87c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a880:	fb03 5711 	mls	r7, r3, r1, r5
 800a884:	5dc7      	ldrb	r7, [r0, r7]
 800a886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a88a:	462f      	mov	r7, r5
 800a88c:	42bb      	cmp	r3, r7
 800a88e:	460d      	mov	r5, r1
 800a890:	d9f4      	bls.n	800a87c <_printf_i+0x11c>
 800a892:	2b08      	cmp	r3, #8
 800a894:	d10b      	bne.n	800a8ae <_printf_i+0x14e>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	07df      	lsls	r7, r3, #31
 800a89a:	d508      	bpl.n	800a8ae <_printf_i+0x14e>
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	6861      	ldr	r1, [r4, #4]
 800a8a0:	4299      	cmp	r1, r3
 800a8a2:	bfde      	ittt	le
 800a8a4:	2330      	movle	r3, #48	; 0x30
 800a8a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8ae:	1b92      	subs	r2, r2, r6
 800a8b0:	6122      	str	r2, [r4, #16]
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	f8cd a000 	str.w	sl, [sp]
 800a8bc:	aa03      	add	r2, sp, #12
 800a8be:	f7ff fedf 	bl	800a680 <_printf_common>
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d14c      	bne.n	800a960 <_printf_i+0x200>
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	b004      	add	sp, #16
 800a8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d0:	4834      	ldr	r0, [pc, #208]	; (800a9a4 <_printf_i+0x244>)
 800a8d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8d6:	680e      	ldr	r6, [r1, #0]
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	f856 5b04 	ldr.w	r5, [r6], #4
 800a8de:	061f      	lsls	r7, r3, #24
 800a8e0:	600e      	str	r6, [r1, #0]
 800a8e2:	d514      	bpl.n	800a90e <_printf_i+0x1ae>
 800a8e4:	07d9      	lsls	r1, r3, #31
 800a8e6:	bf44      	itt	mi
 800a8e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ec:	6023      	strmi	r3, [r4, #0]
 800a8ee:	b91d      	cbnz	r5, 800a8f8 <_printf_i+0x198>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	f023 0320 	bic.w	r3, r3, #32
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	e7af      	b.n	800a85c <_printf_i+0xfc>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	f043 0320 	orr.w	r3, r3, #32
 800a902:	6023      	str	r3, [r4, #0]
 800a904:	2378      	movs	r3, #120	; 0x78
 800a906:	4828      	ldr	r0, [pc, #160]	; (800a9a8 <_printf_i+0x248>)
 800a908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a90c:	e7e3      	b.n	800a8d6 <_printf_i+0x176>
 800a90e:	065e      	lsls	r6, r3, #25
 800a910:	bf48      	it	mi
 800a912:	b2ad      	uxthmi	r5, r5
 800a914:	e7e6      	b.n	800a8e4 <_printf_i+0x184>
 800a916:	4616      	mov	r6, r2
 800a918:	e7bb      	b.n	800a892 <_printf_i+0x132>
 800a91a:	680b      	ldr	r3, [r1, #0]
 800a91c:	6826      	ldr	r6, [r4, #0]
 800a91e:	1d1d      	adds	r5, r3, #4
 800a920:	6960      	ldr	r0, [r4, #20]
 800a922:	600d      	str	r5, [r1, #0]
 800a924:	0635      	lsls	r5, r6, #24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	d501      	bpl.n	800a92e <_printf_i+0x1ce>
 800a92a:	6018      	str	r0, [r3, #0]
 800a92c:	e002      	b.n	800a934 <_printf_i+0x1d4>
 800a92e:	0671      	lsls	r1, r6, #25
 800a930:	d5fb      	bpl.n	800a92a <_printf_i+0x1ca>
 800a932:	8018      	strh	r0, [r3, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	4616      	mov	r6, r2
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	e7ba      	b.n	800a8b2 <_printf_i+0x152>
 800a93c:	680b      	ldr	r3, [r1, #0]
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	600a      	str	r2, [r1, #0]
 800a942:	681e      	ldr	r6, [r3, #0]
 800a944:	2100      	movs	r1, #0
 800a946:	4630      	mov	r0, r6
 800a948:	6862      	ldr	r2, [r4, #4]
 800a94a:	f000 fd61 	bl	800b410 <memchr>
 800a94e:	b108      	cbz	r0, 800a954 <_printf_i+0x1f4>
 800a950:	1b80      	subs	r0, r0, r6
 800a952:	6060      	str	r0, [r4, #4]
 800a954:	6863      	ldr	r3, [r4, #4]
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	2300      	movs	r3, #0
 800a95a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a95e:	e7a8      	b.n	800a8b2 <_printf_i+0x152>
 800a960:	4632      	mov	r2, r6
 800a962:	4649      	mov	r1, r9
 800a964:	4640      	mov	r0, r8
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	47d0      	blx	sl
 800a96a:	3001      	adds	r0, #1
 800a96c:	d0ab      	beq.n	800a8c6 <_printf_i+0x166>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	079b      	lsls	r3, r3, #30
 800a972:	d413      	bmi.n	800a99c <_printf_i+0x23c>
 800a974:	68e0      	ldr	r0, [r4, #12]
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	4298      	cmp	r0, r3
 800a97a:	bfb8      	it	lt
 800a97c:	4618      	movlt	r0, r3
 800a97e:	e7a4      	b.n	800a8ca <_printf_i+0x16a>
 800a980:	2301      	movs	r3, #1
 800a982:	4632      	mov	r2, r6
 800a984:	4649      	mov	r1, r9
 800a986:	4640      	mov	r0, r8
 800a988:	47d0      	blx	sl
 800a98a:	3001      	adds	r0, #1
 800a98c:	d09b      	beq.n	800a8c6 <_printf_i+0x166>
 800a98e:	3501      	adds	r5, #1
 800a990:	68e3      	ldr	r3, [r4, #12]
 800a992:	9903      	ldr	r1, [sp, #12]
 800a994:	1a5b      	subs	r3, r3, r1
 800a996:	42ab      	cmp	r3, r5
 800a998:	dcf2      	bgt.n	800a980 <_printf_i+0x220>
 800a99a:	e7eb      	b.n	800a974 <_printf_i+0x214>
 800a99c:	2500      	movs	r5, #0
 800a99e:	f104 0619 	add.w	r6, r4, #25
 800a9a2:	e7f5      	b.n	800a990 <_printf_i+0x230>
 800a9a4:	0800b991 	.word	0x0800b991
 800a9a8:	0800b9a2 	.word	0x0800b9a2

0800a9ac <_scanf_chars>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4615      	mov	r5, r2
 800a9b2:	688a      	ldr	r2, [r1, #8]
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b932      	cbnz	r2, 800a9c8 <_scanf_chars+0x1c>
 800a9ba:	698a      	ldr	r2, [r1, #24]
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	bf0c      	ite	eq
 800a9c0:	2201      	moveq	r2, #1
 800a9c2:	f04f 32ff 	movne.w	r2, #4294967295
 800a9c6:	608a      	str	r2, [r1, #8]
 800a9c8:	2700      	movs	r7, #0
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800aa58 <_scanf_chars+0xac>
 800a9d0:	06d1      	lsls	r1, r2, #27
 800a9d2:	bf5f      	itttt	pl
 800a9d4:	681a      	ldrpl	r2, [r3, #0]
 800a9d6:	1d11      	addpl	r1, r2, #4
 800a9d8:	6019      	strpl	r1, [r3, #0]
 800a9da:	6816      	ldrpl	r6, [r2, #0]
 800a9dc:	69a0      	ldr	r0, [r4, #24]
 800a9de:	b188      	cbz	r0, 800aa04 <_scanf_chars+0x58>
 800a9e0:	2801      	cmp	r0, #1
 800a9e2:	d107      	bne.n	800a9f4 <_scanf_chars+0x48>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	6963      	ldr	r3, [r4, #20]
 800a9ea:	5c9b      	ldrb	r3, [r3, r2]
 800a9ec:	b953      	cbnz	r3, 800aa04 <_scanf_chars+0x58>
 800a9ee:	bb27      	cbnz	r7, 800aa3a <_scanf_chars+0x8e>
 800a9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f4:	2802      	cmp	r0, #2
 800a9f6:	d120      	bne.n	800aa3a <_scanf_chars+0x8e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	d41a      	bmi.n	800aa3a <_scanf_chars+0x8e>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	3701      	adds	r7, #1
 800aa08:	06da      	lsls	r2, r3, #27
 800aa0a:	bf5e      	ittt	pl
 800aa0c:	682b      	ldrpl	r3, [r5, #0]
 800aa0e:	781b      	ldrbpl	r3, [r3, #0]
 800aa10:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aa14:	682a      	ldr	r2, [r5, #0]
 800aa16:	686b      	ldr	r3, [r5, #4]
 800aa18:	3201      	adds	r2, #1
 800aa1a:	602a      	str	r2, [r5, #0]
 800aa1c:	68a2      	ldr	r2, [r4, #8]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	3a01      	subs	r2, #1
 800aa22:	606b      	str	r3, [r5, #4]
 800aa24:	60a2      	str	r2, [r4, #8]
 800aa26:	b142      	cbz	r2, 800aa3a <_scanf_chars+0x8e>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dcd7      	bgt.n	800a9dc <_scanf_chars+0x30>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4640      	mov	r0, r8
 800aa30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa34:	4798      	blx	r3
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d0d0      	beq.n	800a9dc <_scanf_chars+0x30>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f013 0310 	ands.w	r3, r3, #16
 800aa40:	d105      	bne.n	800aa4e <_scanf_chars+0xa2>
 800aa42:	68e2      	ldr	r2, [r4, #12]
 800aa44:	3201      	adds	r2, #1
 800aa46:	60e2      	str	r2, [r4, #12]
 800aa48:	69a2      	ldr	r2, [r4, #24]
 800aa4a:	b102      	cbz	r2, 800aa4e <_scanf_chars+0xa2>
 800aa4c:	7033      	strb	r3, [r6, #0]
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	2000      	movs	r0, #0
 800aa52:	441f      	add	r7, r3
 800aa54:	6127      	str	r7, [r4, #16]
 800aa56:	e7cb      	b.n	800a9f0 <_scanf_chars+0x44>
 800aa58:	0800b880 	.word	0x0800b880

0800aa5c <_scanf_i>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	4698      	mov	r8, r3
 800aa64:	4b72      	ldr	r3, [pc, #456]	; (800ac30 <_scanf_i+0x1d4>)
 800aa66:	b087      	sub	sp, #28
 800aa68:	4682      	mov	sl, r0
 800aa6a:	4616      	mov	r6, r2
 800aa6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa70:	ab03      	add	r3, sp, #12
 800aa72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa76:	4b6f      	ldr	r3, [pc, #444]	; (800ac34 <_scanf_i+0x1d8>)
 800aa78:	69a1      	ldr	r1, [r4, #24]
 800aa7a:	4a6f      	ldr	r2, [pc, #444]	; (800ac38 <_scanf_i+0x1dc>)
 800aa7c:	4627      	mov	r7, r4
 800aa7e:	2903      	cmp	r1, #3
 800aa80:	bf18      	it	ne
 800aa82:	461a      	movne	r2, r3
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	9201      	str	r2, [sp, #4]
 800aa88:	1e5a      	subs	r2, r3, #1
 800aa8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa8e:	bf81      	itttt	hi
 800aa90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa94:	eb03 0905 	addhi.w	r9, r3, r5
 800aa98:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa9c:	60a3      	strhi	r3, [r4, #8]
 800aa9e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aaa2:	bf98      	it	ls
 800aaa4:	f04f 0900 	movls.w	r9, #0
 800aaa8:	463d      	mov	r5, r7
 800aaaa:	f04f 0b00 	mov.w	fp, #0
 800aaae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	6831      	ldr	r1, [r6, #0]
 800aab6:	ab03      	add	r3, sp, #12
 800aab8:	2202      	movs	r2, #2
 800aaba:	7809      	ldrb	r1, [r1, #0]
 800aabc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aac0:	f000 fca6 	bl	800b410 <memchr>
 800aac4:	b328      	cbz	r0, 800ab12 <_scanf_i+0xb6>
 800aac6:	f1bb 0f01 	cmp.w	fp, #1
 800aaca:	d159      	bne.n	800ab80 <_scanf_i+0x124>
 800aacc:	6862      	ldr	r2, [r4, #4]
 800aace:	b92a      	cbnz	r2, 800aadc <_scanf_i+0x80>
 800aad0:	2308      	movs	r3, #8
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aada:	6022      	str	r2, [r4, #0]
 800aadc:	6822      	ldr	r2, [r4, #0]
 800aade:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aae2:	6022      	str	r2, [r4, #0]
 800aae4:	68a2      	ldr	r2, [r4, #8]
 800aae6:	1e51      	subs	r1, r2, #1
 800aae8:	60a1      	str	r1, [r4, #8]
 800aaea:	b192      	cbz	r2, 800ab12 <_scanf_i+0xb6>
 800aaec:	6832      	ldr	r2, [r6, #0]
 800aaee:	1c51      	adds	r1, r2, #1
 800aaf0:	6031      	str	r1, [r6, #0]
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	f805 2b01 	strb.w	r2, [r5], #1
 800aaf8:	6872      	ldr	r2, [r6, #4]
 800aafa:	3a01      	subs	r2, #1
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	6072      	str	r2, [r6, #4]
 800ab00:	dc07      	bgt.n	800ab12 <_scanf_i+0xb6>
 800ab02:	4631      	mov	r1, r6
 800ab04:	4650      	mov	r0, sl
 800ab06:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ab0a:	4790      	blx	r2
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 8085 	bne.w	800ac1c <_scanf_i+0x1c0>
 800ab12:	f10b 0b01 	add.w	fp, fp, #1
 800ab16:	f1bb 0f03 	cmp.w	fp, #3
 800ab1a:	d1cb      	bne.n	800aab4 <_scanf_i+0x58>
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <_scanf_i+0xc8>
 800ab20:	230a      	movs	r3, #10
 800ab22:	6063      	str	r3, [r4, #4]
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	4945      	ldr	r1, [pc, #276]	; (800ac3c <_scanf_i+0x1e0>)
 800ab28:	6960      	ldr	r0, [r4, #20]
 800ab2a:	1ac9      	subs	r1, r1, r3
 800ab2c:	f000 f89a 	bl	800ac64 <__sccl>
 800ab30:	f04f 0b00 	mov.w	fp, #0
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d03d      	beq.n	800abb8 <_scanf_i+0x15c>
 800ab3c:	6831      	ldr	r1, [r6, #0]
 800ab3e:	6960      	ldr	r0, [r4, #20]
 800ab40:	f891 c000 	ldrb.w	ip, [r1]
 800ab44:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d035      	beq.n	800abb8 <_scanf_i+0x15c>
 800ab4c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ab50:	d124      	bne.n	800ab9c <_scanf_i+0x140>
 800ab52:	0510      	lsls	r0, r2, #20
 800ab54:	d522      	bpl.n	800ab9c <_scanf_i+0x140>
 800ab56:	f10b 0b01 	add.w	fp, fp, #1
 800ab5a:	f1b9 0f00 	cmp.w	r9, #0
 800ab5e:	d003      	beq.n	800ab68 <_scanf_i+0x10c>
 800ab60:	3301      	adds	r3, #1
 800ab62:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	6873      	ldr	r3, [r6, #4]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	6073      	str	r3, [r6, #4]
 800ab70:	dd1b      	ble.n	800abaa <_scanf_i+0x14e>
 800ab72:	6833      	ldr	r3, [r6, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	6033      	str	r3, [r6, #0]
 800ab78:	68a3      	ldr	r3, [r4, #8]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	e7d9      	b.n	800ab34 <_scanf_i+0xd8>
 800ab80:	f1bb 0f02 	cmp.w	fp, #2
 800ab84:	d1ae      	bne.n	800aae4 <_scanf_i+0x88>
 800ab86:	6822      	ldr	r2, [r4, #0]
 800ab88:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ab8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab90:	d1bf      	bne.n	800ab12 <_scanf_i+0xb6>
 800ab92:	2310      	movs	r3, #16
 800ab94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab98:	6063      	str	r3, [r4, #4]
 800ab9a:	e7a2      	b.n	800aae2 <_scanf_i+0x86>
 800ab9c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aba0:	6022      	str	r2, [r4, #0]
 800aba2:	780b      	ldrb	r3, [r1, #0]
 800aba4:	f805 3b01 	strb.w	r3, [r5], #1
 800aba8:	e7de      	b.n	800ab68 <_scanf_i+0x10c>
 800abaa:	4631      	mov	r1, r6
 800abac:	4650      	mov	r0, sl
 800abae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abb2:	4798      	blx	r3
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d0df      	beq.n	800ab78 <_scanf_i+0x11c>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	05d9      	lsls	r1, r3, #23
 800abbc:	d50d      	bpl.n	800abda <_scanf_i+0x17e>
 800abbe:	42bd      	cmp	r5, r7
 800abc0:	d909      	bls.n	800abd6 <_scanf_i+0x17a>
 800abc2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800abc6:	4632      	mov	r2, r6
 800abc8:	4650      	mov	r0, sl
 800abca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abce:	f105 39ff 	add.w	r9, r5, #4294967295
 800abd2:	4798      	blx	r3
 800abd4:	464d      	mov	r5, r9
 800abd6:	42bd      	cmp	r5, r7
 800abd8:	d028      	beq.n	800ac2c <_scanf_i+0x1d0>
 800abda:	6822      	ldr	r2, [r4, #0]
 800abdc:	f012 0210 	ands.w	r2, r2, #16
 800abe0:	d113      	bne.n	800ac0a <_scanf_i+0x1ae>
 800abe2:	702a      	strb	r2, [r5, #0]
 800abe4:	4639      	mov	r1, r7
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	4650      	mov	r0, sl
 800abea:	9e01      	ldr	r6, [sp, #4]
 800abec:	47b0      	blx	r6
 800abee:	f8d8 3000 	ldr.w	r3, [r8]
 800abf2:	6821      	ldr	r1, [r4, #0]
 800abf4:	1d1a      	adds	r2, r3, #4
 800abf6:	f8c8 2000 	str.w	r2, [r8]
 800abfa:	f011 0f20 	tst.w	r1, #32
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	d00f      	beq.n	800ac22 <_scanf_i+0x1c6>
 800ac02:	6018      	str	r0, [r3, #0]
 800ac04:	68e3      	ldr	r3, [r4, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60e3      	str	r3, [r4, #12]
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	1bed      	subs	r5, r5, r7
 800ac0e:	44ab      	add	fp, r5
 800ac10:	6925      	ldr	r5, [r4, #16]
 800ac12:	445d      	add	r5, fp
 800ac14:	6125      	str	r5, [r4, #16]
 800ac16:	b007      	add	sp, #28
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	f04f 0b00 	mov.w	fp, #0
 800ac20:	e7ca      	b.n	800abb8 <_scanf_i+0x15c>
 800ac22:	07ca      	lsls	r2, r1, #31
 800ac24:	bf4c      	ite	mi
 800ac26:	8018      	strhmi	r0, [r3, #0]
 800ac28:	6018      	strpl	r0, [r3, #0]
 800ac2a:	e7eb      	b.n	800ac04 <_scanf_i+0x1a8>
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	e7f2      	b.n	800ac16 <_scanf_i+0x1ba>
 800ac30:	0800b64c 	.word	0x0800b64c
 800ac34:	0800add1 	.word	0x0800add1
 800ac38:	08009ed9 	.word	0x08009ed9
 800ac3c:	0800b9cc 	.word	0x0800b9cc

0800ac40 <_read_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4604      	mov	r4, r0
 800ac44:	4608      	mov	r0, r1
 800ac46:	4611      	mov	r1, r2
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4d05      	ldr	r5, [pc, #20]	; (800ac60 <_read_r+0x20>)
 800ac4c:	602a      	str	r2, [r5, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f7f6 f85b 	bl	8000d0a <_read>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_read_r+0x1e>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_read_r+0x1e>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	200016a4 	.word	0x200016a4

0800ac64 <__sccl>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	780b      	ldrb	r3, [r1, #0]
 800ac68:	4604      	mov	r4, r0
 800ac6a:	2b5e      	cmp	r3, #94	; 0x5e
 800ac6c:	bf13      	iteet	ne
 800ac6e:	2200      	movne	r2, #0
 800ac70:	2201      	moveq	r2, #1
 800ac72:	784b      	ldrbeq	r3, [r1, #1]
 800ac74:	1c48      	addne	r0, r1, #1
 800ac76:	bf08      	it	eq
 800ac78:	1c88      	addeq	r0, r1, #2
 800ac7a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ac7e:	1e61      	subs	r1, r4, #1
 800ac80:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ac84:	42a9      	cmp	r1, r5
 800ac86:	d1fb      	bne.n	800ac80 <__sccl+0x1c>
 800ac88:	b90b      	cbnz	r3, 800ac8e <__sccl+0x2a>
 800ac8a:	3801      	subs	r0, #1
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	f082 0101 	eor.w	r1, r2, #1
 800ac92:	54e1      	strb	r1, [r4, r3]
 800ac94:	1c42      	adds	r2, r0, #1
 800ac96:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	2d2d      	cmp	r5, #45	; 0x2d
 800ac9e:	f102 36ff 	add.w	r6, r2, #4294967295
 800aca2:	d006      	beq.n	800acb2 <__sccl+0x4e>
 800aca4:	2d5d      	cmp	r5, #93	; 0x5d
 800aca6:	d0f1      	beq.n	800ac8c <__sccl+0x28>
 800aca8:	b90d      	cbnz	r5, 800acae <__sccl+0x4a>
 800acaa:	4630      	mov	r0, r6
 800acac:	e7ee      	b.n	800ac8c <__sccl+0x28>
 800acae:	462b      	mov	r3, r5
 800acb0:	e7ef      	b.n	800ac92 <__sccl+0x2e>
 800acb2:	7816      	ldrb	r6, [r2, #0]
 800acb4:	2e5d      	cmp	r6, #93	; 0x5d
 800acb6:	d0fa      	beq.n	800acae <__sccl+0x4a>
 800acb8:	42b3      	cmp	r3, r6
 800acba:	dcf8      	bgt.n	800acae <__sccl+0x4a>
 800acbc:	4618      	mov	r0, r3
 800acbe:	3001      	adds	r0, #1
 800acc0:	4286      	cmp	r6, r0
 800acc2:	5421      	strb	r1, [r4, r0]
 800acc4:	dcfb      	bgt.n	800acbe <__sccl+0x5a>
 800acc6:	43d8      	mvns	r0, r3
 800acc8:	4430      	add	r0, r6
 800acca:	42b3      	cmp	r3, r6
 800accc:	bfa8      	it	ge
 800acce:	2000      	movge	r0, #0
 800acd0:	1c5d      	adds	r5, r3, #1
 800acd2:	182b      	adds	r3, r5, r0
 800acd4:	3202      	adds	r2, #2
 800acd6:	e7de      	b.n	800ac96 <__sccl+0x32>

0800acd8 <_strtoul_l.isra.0>:
 800acd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acdc:	468c      	mov	ip, r1
 800acde:	4686      	mov	lr, r0
 800ace0:	4e3a      	ldr	r6, [pc, #232]	; (800adcc <_strtoul_l.isra.0+0xf4>)
 800ace2:	4660      	mov	r0, ip
 800ace4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ace8:	5da5      	ldrb	r5, [r4, r6]
 800acea:	f015 0508 	ands.w	r5, r5, #8
 800acee:	d1f8      	bne.n	800ace2 <_strtoul_l.isra.0+0xa>
 800acf0:	2c2d      	cmp	r4, #45	; 0x2d
 800acf2:	d134      	bne.n	800ad5e <_strtoul_l.isra.0+0x86>
 800acf4:	f04f 0801 	mov.w	r8, #1
 800acf8:	f89c 4000 	ldrb.w	r4, [ip]
 800acfc:	f100 0c02 	add.w	ip, r0, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d05e      	beq.n	800adc2 <_strtoul_l.isra.0+0xea>
 800ad04:	2b10      	cmp	r3, #16
 800ad06:	d10c      	bne.n	800ad22 <_strtoul_l.isra.0+0x4a>
 800ad08:	2c30      	cmp	r4, #48	; 0x30
 800ad0a:	d10a      	bne.n	800ad22 <_strtoul_l.isra.0+0x4a>
 800ad0c:	f89c 0000 	ldrb.w	r0, [ip]
 800ad10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad14:	2858      	cmp	r0, #88	; 0x58
 800ad16:	d14f      	bne.n	800adb8 <_strtoul_l.isra.0+0xe0>
 800ad18:	2310      	movs	r3, #16
 800ad1a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ad1e:	f10c 0c02 	add.w	ip, ip, #2
 800ad22:	f04f 37ff 	mov.w	r7, #4294967295
 800ad26:	fbb7 f7f3 	udiv	r7, r7, r3
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	fb03 f907 	mul.w	r9, r3, r7
 800ad30:	4628      	mov	r0, r5
 800ad32:	ea6f 0909 	mvn.w	r9, r9
 800ad36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ad3a:	2e09      	cmp	r6, #9
 800ad3c:	d818      	bhi.n	800ad70 <_strtoul_l.isra.0+0x98>
 800ad3e:	4634      	mov	r4, r6
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	dd24      	ble.n	800ad8e <_strtoul_l.isra.0+0xb6>
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	db1f      	blt.n	800ad88 <_strtoul_l.isra.0+0xb0>
 800ad48:	4287      	cmp	r7, r0
 800ad4a:	d31d      	bcc.n	800ad88 <_strtoul_l.isra.0+0xb0>
 800ad4c:	d101      	bne.n	800ad52 <_strtoul_l.isra.0+0x7a>
 800ad4e:	45a1      	cmp	r9, r4
 800ad50:	db1a      	blt.n	800ad88 <_strtoul_l.isra.0+0xb0>
 800ad52:	2501      	movs	r5, #1
 800ad54:	fb00 4003 	mla	r0, r0, r3, r4
 800ad58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ad5c:	e7eb      	b.n	800ad36 <_strtoul_l.isra.0+0x5e>
 800ad5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ad60:	bf08      	it	eq
 800ad62:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ad66:	46a8      	mov	r8, r5
 800ad68:	bf08      	it	eq
 800ad6a:	f100 0c02 	addeq.w	ip, r0, #2
 800ad6e:	e7c7      	b.n	800ad00 <_strtoul_l.isra.0+0x28>
 800ad70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ad74:	2e19      	cmp	r6, #25
 800ad76:	d801      	bhi.n	800ad7c <_strtoul_l.isra.0+0xa4>
 800ad78:	3c37      	subs	r4, #55	; 0x37
 800ad7a:	e7e1      	b.n	800ad40 <_strtoul_l.isra.0+0x68>
 800ad7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ad80:	2e19      	cmp	r6, #25
 800ad82:	d804      	bhi.n	800ad8e <_strtoul_l.isra.0+0xb6>
 800ad84:	3c57      	subs	r4, #87	; 0x57
 800ad86:	e7db      	b.n	800ad40 <_strtoul_l.isra.0+0x68>
 800ad88:	f04f 35ff 	mov.w	r5, #4294967295
 800ad8c:	e7e4      	b.n	800ad58 <_strtoul_l.isra.0+0x80>
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	da07      	bge.n	800ada2 <_strtoul_l.isra.0+0xca>
 800ad92:	2322      	movs	r3, #34	; 0x22
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	f8ce 3000 	str.w	r3, [lr]
 800ad9c:	b942      	cbnz	r2, 800adb0 <_strtoul_l.isra.0+0xd8>
 800ad9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d000      	beq.n	800adaa <_strtoul_l.isra.0+0xd2>
 800ada8:	4240      	negs	r0, r0
 800adaa:	2a00      	cmp	r2, #0
 800adac:	d0f7      	beq.n	800ad9e <_strtoul_l.isra.0+0xc6>
 800adae:	b10d      	cbz	r5, 800adb4 <_strtoul_l.isra.0+0xdc>
 800adb0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	e7f2      	b.n	800ad9e <_strtoul_l.isra.0+0xc6>
 800adb8:	2430      	movs	r4, #48	; 0x30
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1b1      	bne.n	800ad22 <_strtoul_l.isra.0+0x4a>
 800adbe:	2308      	movs	r3, #8
 800adc0:	e7af      	b.n	800ad22 <_strtoul_l.isra.0+0x4a>
 800adc2:	2c30      	cmp	r4, #48	; 0x30
 800adc4:	d0a2      	beq.n	800ad0c <_strtoul_l.isra.0+0x34>
 800adc6:	230a      	movs	r3, #10
 800adc8:	e7ab      	b.n	800ad22 <_strtoul_l.isra.0+0x4a>
 800adca:	bf00      	nop
 800adcc:	0800b880 	.word	0x0800b880

0800add0 <_strtoul_r>:
 800add0:	f7ff bf82 	b.w	800acd8 <_strtoul_l.isra.0>

0800add4 <__submore>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	460c      	mov	r4, r1
 800adda:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800addc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade0:	4299      	cmp	r1, r3
 800ade2:	d11b      	bne.n	800ae1c <__submore+0x48>
 800ade4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ade8:	f7fe fe36 	bl	8009a58 <_malloc_r>
 800adec:	b918      	cbnz	r0, 800adf6 <__submore+0x22>
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfa:	63a3      	str	r3, [r4, #56]	; 0x38
 800adfc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ae00:	6360      	str	r0, [r4, #52]	; 0x34
 800ae02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ae06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ae0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ae0e:	7043      	strb	r3, [r0, #1]
 800ae10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ae14:	7003      	strb	r3, [r0, #0]
 800ae16:	6020      	str	r0, [r4, #0]
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e7ea      	b.n	800adf2 <__submore+0x1e>
 800ae1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae1e:	0077      	lsls	r7, r6, #1
 800ae20:	463a      	mov	r2, r7
 800ae22:	f000 fb11 	bl	800b448 <_realloc_r>
 800ae26:	4605      	mov	r5, r0
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0e0      	beq.n	800adee <__submore+0x1a>
 800ae2c:	eb00 0806 	add.w	r8, r0, r6
 800ae30:	4601      	mov	r1, r0
 800ae32:	4632      	mov	r2, r6
 800ae34:	4640      	mov	r0, r8
 800ae36:	f000 faf9 	bl	800b42c <memcpy>
 800ae3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ae3e:	f8c4 8000 	str.w	r8, [r4]
 800ae42:	e7e9      	b.n	800ae18 <__submore+0x44>

0800ae44 <__swbuf_r>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	460e      	mov	r6, r1
 800ae48:	4614      	mov	r4, r2
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	b118      	cbz	r0, 800ae56 <__swbuf_r+0x12>
 800ae4e:	6983      	ldr	r3, [r0, #24]
 800ae50:	b90b      	cbnz	r3, 800ae56 <__swbuf_r+0x12>
 800ae52:	f000 f9d9 	bl	800b208 <__sinit>
 800ae56:	4b21      	ldr	r3, [pc, #132]	; (800aedc <__swbuf_r+0x98>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	d12b      	bne.n	800aeb4 <__swbuf_r+0x70>
 800ae5c:	686c      	ldr	r4, [r5, #4]
 800ae5e:	69a3      	ldr	r3, [r4, #24]
 800ae60:	60a3      	str	r3, [r4, #8]
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	071a      	lsls	r2, r3, #28
 800ae66:	d52f      	bpl.n	800aec8 <__swbuf_r+0x84>
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	b36b      	cbz	r3, 800aec8 <__swbuf_r+0x84>
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	b2f6      	uxtb	r6, r6
 800ae72:	1ac0      	subs	r0, r0, r3
 800ae74:	6963      	ldr	r3, [r4, #20]
 800ae76:	4637      	mov	r7, r6
 800ae78:	4283      	cmp	r3, r0
 800ae7a:	dc04      	bgt.n	800ae86 <__swbuf_r+0x42>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f92e 	bl	800b0e0 <_fflush_r>
 800ae84:	bb30      	cbnz	r0, 800aed4 <__swbuf_r+0x90>
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	3001      	adds	r0, #1
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	6022      	str	r2, [r4, #0]
 800ae94:	701e      	strb	r6, [r3, #0]
 800ae96:	6963      	ldr	r3, [r4, #20]
 800ae98:	4283      	cmp	r3, r0
 800ae9a:	d004      	beq.n	800aea6 <__swbuf_r+0x62>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	07db      	lsls	r3, r3, #31
 800aea0:	d506      	bpl.n	800aeb0 <__swbuf_r+0x6c>
 800aea2:	2e0a      	cmp	r6, #10
 800aea4:	d104      	bne.n	800aeb0 <__swbuf_r+0x6c>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 f919 	bl	800b0e0 <_fflush_r>
 800aeae:	b988      	cbnz	r0, 800aed4 <__swbuf_r+0x90>
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <__swbuf_r+0x9c>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <__swbuf_r+0x7a>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7cf      	b.n	800ae5e <__swbuf_r+0x1a>
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <__swbuf_r+0xa0>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7ca      	b.n	800ae5e <__swbuf_r+0x1a>
 800aec8:	4621      	mov	r1, r4
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 f80c 	bl	800aee8 <__swsetup_r>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d0cb      	beq.n	800ae6c <__swbuf_r+0x28>
 800aed4:	f04f 37ff 	mov.w	r7, #4294967295
 800aed8:	e7ea      	b.n	800aeb0 <__swbuf_r+0x6c>
 800aeda:	bf00      	nop
 800aedc:	0800b9f0 	.word	0x0800b9f0
 800aee0:	0800ba10 	.word	0x0800ba10
 800aee4:	0800b9d0 	.word	0x0800b9d0

0800aee8 <__swsetup_r>:
 800aee8:	4b32      	ldr	r3, [pc, #200]	; (800afb4 <__swsetup_r+0xcc>)
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	681d      	ldr	r5, [r3, #0]
 800aeee:	4606      	mov	r6, r0
 800aef0:	460c      	mov	r4, r1
 800aef2:	b125      	cbz	r5, 800aefe <__swsetup_r+0x16>
 800aef4:	69ab      	ldr	r3, [r5, #24]
 800aef6:	b913      	cbnz	r3, 800aefe <__swsetup_r+0x16>
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f985 	bl	800b208 <__sinit>
 800aefe:	4b2e      	ldr	r3, [pc, #184]	; (800afb8 <__swsetup_r+0xd0>)
 800af00:	429c      	cmp	r4, r3
 800af02:	d10f      	bne.n	800af24 <__swsetup_r+0x3c>
 800af04:	686c      	ldr	r4, [r5, #4]
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af0c:	0719      	lsls	r1, r3, #28
 800af0e:	d42c      	bmi.n	800af6a <__swsetup_r+0x82>
 800af10:	06dd      	lsls	r5, r3, #27
 800af12:	d411      	bmi.n	800af38 <__swsetup_r+0x50>
 800af14:	2309      	movs	r3, #9
 800af16:	6033      	str	r3, [r6, #0]
 800af18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	e03e      	b.n	800afa2 <__swsetup_r+0xba>
 800af24:	4b25      	ldr	r3, [pc, #148]	; (800afbc <__swsetup_r+0xd4>)
 800af26:	429c      	cmp	r4, r3
 800af28:	d101      	bne.n	800af2e <__swsetup_r+0x46>
 800af2a:	68ac      	ldr	r4, [r5, #8]
 800af2c:	e7eb      	b.n	800af06 <__swsetup_r+0x1e>
 800af2e:	4b24      	ldr	r3, [pc, #144]	; (800afc0 <__swsetup_r+0xd8>)
 800af30:	429c      	cmp	r4, r3
 800af32:	bf08      	it	eq
 800af34:	68ec      	ldreq	r4, [r5, #12]
 800af36:	e7e6      	b.n	800af06 <__swsetup_r+0x1e>
 800af38:	0758      	lsls	r0, r3, #29
 800af3a:	d512      	bpl.n	800af62 <__swsetup_r+0x7a>
 800af3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af3e:	b141      	cbz	r1, 800af52 <__swsetup_r+0x6a>
 800af40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af44:	4299      	cmp	r1, r3
 800af46:	d002      	beq.n	800af4e <__swsetup_r+0x66>
 800af48:	4630      	mov	r0, r6
 800af4a:	f7fe fd39 	bl	80099c0 <_free_r>
 800af4e:	2300      	movs	r3, #0
 800af50:	6363      	str	r3, [r4, #52]	; 0x34
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	2300      	movs	r3, #0
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	f043 0308 	orr.w	r3, r3, #8
 800af68:	81a3      	strh	r3, [r4, #12]
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	b94b      	cbnz	r3, 800af82 <__swsetup_r+0x9a>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af78:	d003      	beq.n	800af82 <__swsetup_r+0x9a>
 800af7a:	4621      	mov	r1, r4
 800af7c:	4630      	mov	r0, r6
 800af7e:	f000 fa07 	bl	800b390 <__smakebuf_r>
 800af82:	89a0      	ldrh	r0, [r4, #12]
 800af84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af88:	f010 0301 	ands.w	r3, r0, #1
 800af8c:	d00a      	beq.n	800afa4 <__swsetup_r+0xbc>
 800af8e:	2300      	movs	r3, #0
 800af90:	60a3      	str	r3, [r4, #8]
 800af92:	6963      	ldr	r3, [r4, #20]
 800af94:	425b      	negs	r3, r3
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	6923      	ldr	r3, [r4, #16]
 800af9a:	b943      	cbnz	r3, 800afae <__swsetup_r+0xc6>
 800af9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afa0:	d1ba      	bne.n	800af18 <__swsetup_r+0x30>
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	0781      	lsls	r1, r0, #30
 800afa6:	bf58      	it	pl
 800afa8:	6963      	ldrpl	r3, [r4, #20]
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	e7f4      	b.n	800af98 <__swsetup_r+0xb0>
 800afae:	2000      	movs	r0, #0
 800afb0:	e7f7      	b.n	800afa2 <__swsetup_r+0xba>
 800afb2:	bf00      	nop
 800afb4:	2000027c 	.word	0x2000027c
 800afb8:	0800b9f0 	.word	0x0800b9f0
 800afbc:	0800ba10 	.word	0x0800ba10
 800afc0:	0800b9d0 	.word	0x0800b9d0

0800afc4 <abort>:
 800afc4:	2006      	movs	r0, #6
 800afc6:	b508      	push	{r3, lr}
 800afc8:	f000 fa8c 	bl	800b4e4 <raise>
 800afcc:	2001      	movs	r0, #1
 800afce:	f7f5 fe92 	bl	8000cf6 <_exit>
	...

0800afd4 <__sflush_r>:
 800afd4:	898a      	ldrh	r2, [r1, #12]
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	4605      	mov	r5, r0
 800afdc:	0710      	lsls	r0, r2, #28
 800afde:	460c      	mov	r4, r1
 800afe0:	d458      	bmi.n	800b094 <__sflush_r+0xc0>
 800afe2:	684b      	ldr	r3, [r1, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc05      	bgt.n	800aff4 <__sflush_r+0x20>
 800afe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc02      	bgt.n	800aff4 <__sflush_r+0x20>
 800afee:	2000      	movs	r0, #0
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	d0f9      	beq.n	800afee <__sflush_r+0x1a>
 800affa:	2300      	movs	r3, #0
 800affc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b000:	682f      	ldr	r7, [r5, #0]
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	d032      	beq.n	800b06c <__sflush_r+0x98>
 800b006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	075a      	lsls	r2, r3, #29
 800b00c:	d505      	bpl.n	800b01a <__sflush_r+0x46>
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	1ac0      	subs	r0, r0, r3
 800b012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b014:	b10b      	cbz	r3, 800b01a <__sflush_r+0x46>
 800b016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b018:	1ac0      	subs	r0, r0, r3
 800b01a:	2300      	movs	r3, #0
 800b01c:	4602      	mov	r2, r0
 800b01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b020:	4628      	mov	r0, r5
 800b022:	6a21      	ldr	r1, [r4, #32]
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	d106      	bne.n	800b03a <__sflush_r+0x66>
 800b02c:	6829      	ldr	r1, [r5, #0]
 800b02e:	291d      	cmp	r1, #29
 800b030:	d82c      	bhi.n	800b08c <__sflush_r+0xb8>
 800b032:	4a2a      	ldr	r2, [pc, #168]	; (800b0dc <__sflush_r+0x108>)
 800b034:	40ca      	lsrs	r2, r1
 800b036:	07d6      	lsls	r6, r2, #31
 800b038:	d528      	bpl.n	800b08c <__sflush_r+0xb8>
 800b03a:	2200      	movs	r2, #0
 800b03c:	6062      	str	r2, [r4, #4]
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	04d9      	lsls	r1, r3, #19
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	d504      	bpl.n	800b050 <__sflush_r+0x7c>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	d101      	bne.n	800b04e <__sflush_r+0x7a>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b903      	cbnz	r3, 800b050 <__sflush_r+0x7c>
 800b04e:	6560      	str	r0, [r4, #84]	; 0x54
 800b050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b052:	602f      	str	r7, [r5, #0]
 800b054:	2900      	cmp	r1, #0
 800b056:	d0ca      	beq.n	800afee <__sflush_r+0x1a>
 800b058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__sflush_r+0x92>
 800b060:	4628      	mov	r0, r5
 800b062:	f7fe fcad 	bl	80099c0 <_free_r>
 800b066:	2000      	movs	r0, #0
 800b068:	6360      	str	r0, [r4, #52]	; 0x34
 800b06a:	e7c1      	b.n	800aff0 <__sflush_r+0x1c>
 800b06c:	6a21      	ldr	r1, [r4, #32]
 800b06e:	2301      	movs	r3, #1
 800b070:	4628      	mov	r0, r5
 800b072:	47b0      	blx	r6
 800b074:	1c41      	adds	r1, r0, #1
 800b076:	d1c7      	bne.n	800b008 <__sflush_r+0x34>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0c4      	beq.n	800b008 <__sflush_r+0x34>
 800b07e:	2b1d      	cmp	r3, #29
 800b080:	d001      	beq.n	800b086 <__sflush_r+0xb2>
 800b082:	2b16      	cmp	r3, #22
 800b084:	d101      	bne.n	800b08a <__sflush_r+0xb6>
 800b086:	602f      	str	r7, [r5, #0]
 800b088:	e7b1      	b.n	800afee <__sflush_r+0x1a>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	e7ad      	b.n	800aff0 <__sflush_r+0x1c>
 800b094:	690f      	ldr	r7, [r1, #16]
 800b096:	2f00      	cmp	r7, #0
 800b098:	d0a9      	beq.n	800afee <__sflush_r+0x1a>
 800b09a:	0793      	lsls	r3, r2, #30
 800b09c:	bf18      	it	ne
 800b09e:	2300      	movne	r3, #0
 800b0a0:	680e      	ldr	r6, [r1, #0]
 800b0a2:	bf08      	it	eq
 800b0a4:	694b      	ldreq	r3, [r1, #20]
 800b0a6:	eba6 0807 	sub.w	r8, r6, r7
 800b0aa:	600f      	str	r7, [r1, #0]
 800b0ac:	608b      	str	r3, [r1, #8]
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	dd9c      	ble.n	800afee <__sflush_r+0x1a>
 800b0b4:	4643      	mov	r3, r8
 800b0b6:	463a      	mov	r2, r7
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	6a21      	ldr	r1, [r4, #32]
 800b0bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0be:	47b0      	blx	r6
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dc06      	bgt.n	800b0d2 <__sflush_r+0xfe>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	e78e      	b.n	800aff0 <__sflush_r+0x1c>
 800b0d2:	4407      	add	r7, r0
 800b0d4:	eba8 0800 	sub.w	r8, r8, r0
 800b0d8:	e7e9      	b.n	800b0ae <__sflush_r+0xda>
 800b0da:	bf00      	nop
 800b0dc:	20400001 	.word	0x20400001

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f000 f887 	bl	800b208 <__sinit>
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <_fflush_r+0x6c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d11b      	bne.n	800b138 <_fflush_r+0x58>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0ef      	beq.n	800b0ea <_fflush_r+0xa>
 800b10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b10c:	07d0      	lsls	r0, r2, #31
 800b10e:	d404      	bmi.n	800b11a <_fflush_r+0x3a>
 800b110:	0599      	lsls	r1, r3, #22
 800b112:	d402      	bmi.n	800b11a <_fflush_r+0x3a>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f000 f915 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7ff ff59 	bl	800afd4 <__sflush_r>
 800b122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b124:	4605      	mov	r5, r0
 800b126:	07da      	lsls	r2, r3, #31
 800b128:	d4e0      	bmi.n	800b0ec <_fflush_r+0xc>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	059b      	lsls	r3, r3, #22
 800b12e:	d4dd      	bmi.n	800b0ec <_fflush_r+0xc>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f000 f908 	bl	800b346 <__retarget_lock_release_recursive>
 800b136:	e7d9      	b.n	800b0ec <_fflush_r+0xc>
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <_fflush_r+0x70>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_fflush_r+0x62>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7df      	b.n	800b102 <_fflush_r+0x22>
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <_fflush_r+0x74>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7da      	b.n	800b102 <_fflush_r+0x22>
 800b14c:	0800b9f0 	.word	0x0800b9f0
 800b150:	0800ba10 	.word	0x0800ba10
 800b154:	0800b9d0 	.word	0x0800b9d0

0800b158 <std>:
 800b158:	2300      	movs	r3, #0
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	e9c0 3300 	strd	r3, r3, [r0]
 800b162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	8181      	strh	r1, [r0, #12]
 800b16a:	6643      	str	r3, [r0, #100]	; 0x64
 800b16c:	81c2      	strh	r2, [r0, #14]
 800b16e:	6183      	str	r3, [r0, #24]
 800b170:	4619      	mov	r1, r3
 800b172:	2208      	movs	r2, #8
 800b174:	305c      	adds	r0, #92	; 0x5c
 800b176:	f7fe fc1b 	bl	80099b0 <memset>
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x38>)
 800b17c:	6224      	str	r4, [r4, #32]
 800b17e:	6263      	str	r3, [r4, #36]	; 0x24
 800b180:	4b04      	ldr	r3, [pc, #16]	; (800b194 <std+0x3c>)
 800b182:	62a3      	str	r3, [r4, #40]	; 0x28
 800b184:	4b04      	ldr	r3, [pc, #16]	; (800b198 <std+0x40>)
 800b186:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b188:	4b04      	ldr	r3, [pc, #16]	; (800b19c <std+0x44>)
 800b18a:	6323      	str	r3, [r4, #48]	; 0x30
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	08009c5d 	.word	0x08009c5d
 800b194:	08009c83 	.word	0x08009c83
 800b198:	08009cbb 	.word	0x08009cbb
 800b19c:	08009cdf 	.word	0x08009cdf

0800b1a0 <_cleanup_r>:
 800b1a0:	4901      	ldr	r1, [pc, #4]	; (800b1a8 <_cleanup_r+0x8>)
 800b1a2:	f000 b8af 	b.w	800b304 <_fwalk_reent>
 800b1a6:	bf00      	nop
 800b1a8:	0800b0e1 	.word	0x0800b0e1

0800b1ac <__sfmoreglue>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	2568      	movs	r5, #104	; 0x68
 800b1b0:	1e4a      	subs	r2, r1, #1
 800b1b2:	4355      	muls	r5, r2
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ba:	f7fe fc4d 	bl	8009a58 <_malloc_r>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b140      	cbz	r0, 800b1d4 <__sfmoreglue+0x28>
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	60a0      	str	r0, [r4, #8]
 800b1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1d0:	f7fe fbee 	bl	80099b0 <memset>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}

0800b1d8 <__sfp_lock_acquire>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_acquire+0x8>)
 800b1da:	f000 b8b3 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	200016b0 	.word	0x200016b0

0800b1e4 <__sfp_lock_release>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sfp_lock_release+0x8>)
 800b1e6:	f000 b8ae 	b.w	800b346 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200016b0 	.word	0x200016b0

0800b1f0 <__sinit_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_acquire+0x8>)
 800b1f2:	f000 b8a7 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	200016ab 	.word	0x200016ab

0800b1fc <__sinit_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sinit_lock_release+0x8>)
 800b1fe:	f000 b8a2 	b.w	800b346 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	200016ab 	.word	0x200016ab

0800b208 <__sinit>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	f7ff fff0 	bl	800b1f0 <__sinit_lock_acquire>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	b11b      	cbz	r3, 800b21c <__sinit+0x14>
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f7ff bff0 	b.w	800b1fc <__sinit_lock_release>
 800b21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b220:	6523      	str	r3, [r4, #80]	; 0x50
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <__sinit+0x68>)
 800b224:	4a13      	ldr	r2, [pc, #76]	; (800b274 <__sinit+0x6c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	bf08      	it	eq
 800b22e:	2301      	moveq	r3, #1
 800b230:	4620      	mov	r0, r4
 800b232:	bf08      	it	eq
 800b234:	61a3      	streq	r3, [r4, #24]
 800b236:	f000 f81f 	bl	800b278 <__sfp>
 800b23a:	6060      	str	r0, [r4, #4]
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 f81b 	bl	800b278 <__sfp>
 800b242:	60a0      	str	r0, [r4, #8]
 800b244:	4620      	mov	r0, r4
 800b246:	f000 f817 	bl	800b278 <__sfp>
 800b24a:	2200      	movs	r2, #0
 800b24c:	2104      	movs	r1, #4
 800b24e:	60e0      	str	r0, [r4, #12]
 800b250:	6860      	ldr	r0, [r4, #4]
 800b252:	f7ff ff81 	bl	800b158 <std>
 800b256:	2201      	movs	r2, #1
 800b258:	2109      	movs	r1, #9
 800b25a:	68a0      	ldr	r0, [r4, #8]
 800b25c:	f7ff ff7c 	bl	800b158 <std>
 800b260:	2202      	movs	r2, #2
 800b262:	2112      	movs	r1, #18
 800b264:	68e0      	ldr	r0, [r4, #12]
 800b266:	f7ff ff77 	bl	800b158 <std>
 800b26a:	2301      	movs	r3, #1
 800b26c:	61a3      	str	r3, [r4, #24]
 800b26e:	e7d1      	b.n	800b214 <__sinit+0xc>
 800b270:	0800b768 	.word	0x0800b768
 800b274:	0800b1a1 	.word	0x0800b1a1

0800b278 <__sfp>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	4607      	mov	r7, r0
 800b27c:	f7ff ffac 	bl	800b1d8 <__sfp_lock_acquire>
 800b280:	4b1e      	ldr	r3, [pc, #120]	; (800b2fc <__sfp+0x84>)
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	69b3      	ldr	r3, [r6, #24]
 800b286:	b913      	cbnz	r3, 800b28e <__sfp+0x16>
 800b288:	4630      	mov	r0, r6
 800b28a:	f7ff ffbd 	bl	800b208 <__sinit>
 800b28e:	3648      	adds	r6, #72	; 0x48
 800b290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b294:	3b01      	subs	r3, #1
 800b296:	d503      	bpl.n	800b2a0 <__sfp+0x28>
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	b30b      	cbz	r3, 800b2e0 <__sfp+0x68>
 800b29c:	6836      	ldr	r6, [r6, #0]
 800b29e:	e7f7      	b.n	800b290 <__sfp+0x18>
 800b2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2a4:	b9d5      	cbnz	r5, 800b2dc <__sfp+0x64>
 800b2a6:	4b16      	ldr	r3, [pc, #88]	; (800b300 <__sfp+0x88>)
 800b2a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ac:	60e3      	str	r3, [r4, #12]
 800b2ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b2b0:	f000 f847 	bl	800b342 <__retarget_lock_init_recursive>
 800b2b4:	f7ff ff96 	bl	800b1e4 <__sfp_lock_release>
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2c4:	6025      	str	r5, [r4, #0]
 800b2c6:	61a5      	str	r5, [r4, #24]
 800b2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2cc:	f7fe fb70 	bl	80099b0 <memset>
 800b2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2d8:	4620      	mov	r0, r4
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	3468      	adds	r4, #104	; 0x68
 800b2de:	e7d9      	b.n	800b294 <__sfp+0x1c>
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff62 	bl	800b1ac <__sfmoreglue>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	6030      	str	r0, [r6, #0]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1d5      	bne.n	800b29c <__sfp+0x24>
 800b2f0:	f7ff ff78 	bl	800b1e4 <__sfp_lock_release>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	e7ee      	b.n	800b2d8 <__sfp+0x60>
 800b2fa:	bf00      	nop
 800b2fc:	0800b768 	.word	0x0800b768
 800b300:	ffff0001 	.word	0xffff0001

0800b304 <_fwalk_reent>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4606      	mov	r6, r0
 800b30a:	4688      	mov	r8, r1
 800b30c:	2700      	movs	r7, #0
 800b30e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b316:	f1b9 0901 	subs.w	r9, r9, #1
 800b31a:	d505      	bpl.n	800b328 <_fwalk_reent+0x24>
 800b31c:	6824      	ldr	r4, [r4, #0]
 800b31e:	2c00      	cmp	r4, #0
 800b320:	d1f7      	bne.n	800b312 <_fwalk_reent+0xe>
 800b322:	4638      	mov	r0, r7
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b328:	89ab      	ldrh	r3, [r5, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d907      	bls.n	800b33e <_fwalk_reent+0x3a>
 800b32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b332:	3301      	adds	r3, #1
 800b334:	d003      	beq.n	800b33e <_fwalk_reent+0x3a>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	47c0      	blx	r8
 800b33c:	4307      	orrs	r7, r0
 800b33e:	3568      	adds	r5, #104	; 0x68
 800b340:	e7e9      	b.n	800b316 <_fwalk_reent+0x12>

0800b342 <__retarget_lock_init_recursive>:
 800b342:	4770      	bx	lr

0800b344 <__retarget_lock_acquire_recursive>:
 800b344:	4770      	bx	lr

0800b346 <__retarget_lock_release_recursive>:
 800b346:	4770      	bx	lr

0800b348 <__swhatbuf_r>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	460e      	mov	r6, r1
 800b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b350:	4614      	mov	r4, r2
 800b352:	2900      	cmp	r1, #0
 800b354:	461d      	mov	r5, r3
 800b356:	b096      	sub	sp, #88	; 0x58
 800b358:	da07      	bge.n	800b36a <__swhatbuf_r+0x22>
 800b35a:	2300      	movs	r3, #0
 800b35c:	602b      	str	r3, [r5, #0]
 800b35e:	89b3      	ldrh	r3, [r6, #12]
 800b360:	061a      	lsls	r2, r3, #24
 800b362:	d410      	bmi.n	800b386 <__swhatbuf_r+0x3e>
 800b364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b368:	e00e      	b.n	800b388 <__swhatbuf_r+0x40>
 800b36a:	466a      	mov	r2, sp
 800b36c:	f000 f8d6 	bl	800b51c <_fstat_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	dbf2      	blt.n	800b35a <__swhatbuf_r+0x12>
 800b374:	9a01      	ldr	r2, [sp, #4]
 800b376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b37e:	425a      	negs	r2, r3
 800b380:	415a      	adcs	r2, r3
 800b382:	602a      	str	r2, [r5, #0]
 800b384:	e7ee      	b.n	800b364 <__swhatbuf_r+0x1c>
 800b386:	2340      	movs	r3, #64	; 0x40
 800b388:	2000      	movs	r0, #0
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	b016      	add	sp, #88	; 0x58
 800b38e:	bd70      	pop	{r4, r5, r6, pc}

0800b390 <__smakebuf_r>:
 800b390:	898b      	ldrh	r3, [r1, #12]
 800b392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b394:	079d      	lsls	r5, r3, #30
 800b396:	4606      	mov	r6, r0
 800b398:	460c      	mov	r4, r1
 800b39a:	d507      	bpl.n	800b3ac <__smakebuf_r+0x1c>
 800b39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	6163      	str	r3, [r4, #20]
 800b3a8:	b002      	add	sp, #8
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	466a      	mov	r2, sp
 800b3ae:	ab01      	add	r3, sp, #4
 800b3b0:	f7ff ffca 	bl	800b348 <__swhatbuf_r>
 800b3b4:	9900      	ldr	r1, [sp, #0]
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7fe fb4d 	bl	8009a58 <_malloc_r>
 800b3be:	b948      	cbnz	r0, 800b3d4 <__smakebuf_r+0x44>
 800b3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c4:	059a      	lsls	r2, r3, #22
 800b3c6:	d4ef      	bmi.n	800b3a8 <__smakebuf_r+0x18>
 800b3c8:	f023 0303 	bic.w	r3, r3, #3
 800b3cc:	f043 0302 	orr.w	r3, r3, #2
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	e7e3      	b.n	800b39c <__smakebuf_r+0xc>
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <__smakebuf_r+0x7c>)
 800b3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	6020      	str	r0, [r4, #0]
 800b3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	9b00      	ldr	r3, [sp, #0]
 800b3e4:	6120      	str	r0, [r4, #16]
 800b3e6:	6163      	str	r3, [r4, #20]
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	b15b      	cbz	r3, 800b404 <__smakebuf_r+0x74>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3f2:	f000 f8a5 	bl	800b540 <_isatty_r>
 800b3f6:	b128      	cbz	r0, 800b404 <__smakebuf_r+0x74>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f023 0303 	bic.w	r3, r3, #3
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	89a0      	ldrh	r0, [r4, #12]
 800b406:	4305      	orrs	r5, r0
 800b408:	81a5      	strh	r5, [r4, #12]
 800b40a:	e7cd      	b.n	800b3a8 <__smakebuf_r+0x18>
 800b40c:	0800b1a1 	.word	0x0800b1a1

0800b410 <memchr>:
 800b410:	4603      	mov	r3, r0
 800b412:	b510      	push	{r4, lr}
 800b414:	b2c9      	uxtb	r1, r1
 800b416:	4402      	add	r2, r0
 800b418:	4293      	cmp	r3, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	d101      	bne.n	800b422 <memchr+0x12>
 800b41e:	2000      	movs	r0, #0
 800b420:	e003      	b.n	800b42a <memchr+0x1a>
 800b422:	7804      	ldrb	r4, [r0, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	428c      	cmp	r4, r1
 800b428:	d1f6      	bne.n	800b418 <memchr+0x8>
 800b42a:	bd10      	pop	{r4, pc}

0800b42c <memcpy>:
 800b42c:	440a      	add	r2, r1
 800b42e:	4291      	cmp	r1, r2
 800b430:	f100 33ff 	add.w	r3, r0, #4294967295
 800b434:	d100      	bne.n	800b438 <memcpy+0xc>
 800b436:	4770      	bx	lr
 800b438:	b510      	push	{r4, lr}
 800b43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43e:	4291      	cmp	r1, r2
 800b440:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b444:	d1f9      	bne.n	800b43a <memcpy+0xe>
 800b446:	bd10      	pop	{r4, pc}

0800b448 <_realloc_r>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	4607      	mov	r7, r0
 800b44c:	4614      	mov	r4, r2
 800b44e:	460e      	mov	r6, r1
 800b450:	b921      	cbnz	r1, 800b45c <_realloc_r+0x14>
 800b452:	4611      	mov	r1, r2
 800b454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b458:	f7fe bafe 	b.w	8009a58 <_malloc_r>
 800b45c:	b922      	cbnz	r2, 800b468 <_realloc_r+0x20>
 800b45e:	f7fe faaf 	bl	80099c0 <_free_r>
 800b462:	4625      	mov	r5, r4
 800b464:	4628      	mov	r0, r5
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b468:	f000 f87a 	bl	800b560 <_malloc_usable_size_r>
 800b46c:	42a0      	cmp	r0, r4
 800b46e:	d20f      	bcs.n	800b490 <_realloc_r+0x48>
 800b470:	4621      	mov	r1, r4
 800b472:	4638      	mov	r0, r7
 800b474:	f7fe faf0 	bl	8009a58 <_malloc_r>
 800b478:	4605      	mov	r5, r0
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d0f2      	beq.n	800b464 <_realloc_r+0x1c>
 800b47e:	4631      	mov	r1, r6
 800b480:	4622      	mov	r2, r4
 800b482:	f7ff ffd3 	bl	800b42c <memcpy>
 800b486:	4631      	mov	r1, r6
 800b488:	4638      	mov	r0, r7
 800b48a:	f7fe fa99 	bl	80099c0 <_free_r>
 800b48e:	e7e9      	b.n	800b464 <_realloc_r+0x1c>
 800b490:	4635      	mov	r5, r6
 800b492:	e7e7      	b.n	800b464 <_realloc_r+0x1c>

0800b494 <_raise_r>:
 800b494:	291f      	cmp	r1, #31
 800b496:	b538      	push	{r3, r4, r5, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	460d      	mov	r5, r1
 800b49c:	d904      	bls.n	800b4a8 <_raise_r+0x14>
 800b49e:	2316      	movs	r3, #22
 800b4a0:	6003      	str	r3, [r0, #0]
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4aa:	b112      	cbz	r2, 800b4b2 <_raise_r+0x1e>
 800b4ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4b0:	b94b      	cbnz	r3, 800b4c6 <_raise_r+0x32>
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 f830 	bl	800b518 <_getpid_r>
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c2:	f000 b817 	b.w	800b4f4 <_kill_r>
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d00a      	beq.n	800b4e0 <_raise_r+0x4c>
 800b4ca:	1c59      	adds	r1, r3, #1
 800b4cc:	d103      	bne.n	800b4d6 <_raise_r+0x42>
 800b4ce:	2316      	movs	r3, #22
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	e7e7      	b.n	800b4a6 <_raise_r+0x12>
 800b4d6:	2400      	movs	r4, #0
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4de:	4798      	blx	r3
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e7e0      	b.n	800b4a6 <_raise_r+0x12>

0800b4e4 <raise>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <raise+0xc>)
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	f7ff bfd3 	b.w	800b494 <_raise_r>
 800b4ee:	bf00      	nop
 800b4f0:	2000027c 	.word	0x2000027c

0800b4f4 <_kill_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4d06      	ldr	r5, [pc, #24]	; (800b514 <_kill_r+0x20>)
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4611      	mov	r1, r2
 800b500:	602b      	str	r3, [r5, #0]
 800b502:	f7f5 fbe8 	bl	8000cd6 <_kill>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d102      	bne.n	800b510 <_kill_r+0x1c>
 800b50a:	682b      	ldr	r3, [r5, #0]
 800b50c:	b103      	cbz	r3, 800b510 <_kill_r+0x1c>
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	bf00      	nop
 800b514:	200016a4 	.word	0x200016a4

0800b518 <_getpid_r>:
 800b518:	f7f5 bbd6 	b.w	8000cc8 <_getpid>

0800b51c <_fstat_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	2300      	movs	r3, #0
 800b520:	4d06      	ldr	r5, [pc, #24]	; (800b53c <_fstat_r+0x20>)
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	4611      	mov	r1, r2
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	f7f5 fc32 	bl	8000d92 <_fstat>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	d102      	bne.n	800b538 <_fstat_r+0x1c>
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	b103      	cbz	r3, 800b538 <_fstat_r+0x1c>
 800b536:	6023      	str	r3, [r4, #0]
 800b538:	bd38      	pop	{r3, r4, r5, pc}
 800b53a:	bf00      	nop
 800b53c:	200016a4 	.word	0x200016a4

0800b540 <_isatty_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	2300      	movs	r3, #0
 800b544:	4d05      	ldr	r5, [pc, #20]	; (800b55c <_isatty_r+0x1c>)
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	f7f5 fc30 	bl	8000db0 <_isatty>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_isatty_r+0x1a>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_isatty_r+0x1a>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	200016a4 	.word	0x200016a4

0800b560 <_malloc_usable_size_r>:
 800b560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b564:	1f18      	subs	r0, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfbc      	itt	lt
 800b56a:	580b      	ldrlt	r3, [r1, r0]
 800b56c:	18c0      	addlt	r0, r0, r3
 800b56e:	4770      	bx	lr

0800b570 <_gettimeofday>:
 800b570:	2258      	movs	r2, #88	; 0x58
 800b572:	4b02      	ldr	r3, [pc, #8]	; (800b57c <_gettimeofday+0xc>)
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	4770      	bx	lr
 800b57c:	200016a4 	.word	0x200016a4

0800b580 <_init>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	bf00      	nop
 800b584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b586:	bc08      	pop	{r3}
 800b588:	469e      	mov	lr, r3
 800b58a:	4770      	bx	lr

0800b58c <_fini>:
 800b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58e:	bf00      	nop
 800b590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b592:	bc08      	pop	{r3}
 800b594:	469e      	mov	lr, r3
 800b596:	4770      	bx	lr
